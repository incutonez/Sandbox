var gt=Object.defineProperty;var yt=(e,t,r)=>t in e?gt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var Qe=(e,t,r)=>(yt(e,typeof t!="symbol"?t+"":t,r),r);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))n(a);new MutationObserver(a=>{for(const s of a)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function r(a){const s={};return a.integrity&&(s.integrity=a.integrity),a.referrerPolicy&&(s.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?s.credentials="include":a.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(a){if(a.ep)return;a.ep=!0;const s=r(a);fetch(a.href,s)}})();const global$1=globalThis||void 0||self;function makeMap(e,t){const r=new Set(e.split(","));return t?n=>r.has(n.toLowerCase()):n=>r.has(n)}const EMPTY_OBJ={},EMPTY_ARR=[],NOOP=()=>{},NO=()=>!1,isOn=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),isModelListener=e=>e.startsWith("onUpdate:"),extend$1=Object.assign,remove=(e,t)=>{const r=e.indexOf(t);r>-1&&e.splice(r,1)},hasOwnProperty$4=Object.prototype.hasOwnProperty,hasOwn$1=(e,t)=>hasOwnProperty$4.call(e,t),isArray$4=Array.isArray,isMap=e=>toTypeString(e)==="[object Map]",isSet=e=>toTypeString(e)==="[object Set]",isDate$2=e=>toTypeString(e)==="[object Date]",isFunction$4=e=>typeof e=="function",isString$2=e=>typeof e=="string",isSymbol=e=>typeof e=="symbol",isObject$4=e=>e!==null&&typeof e=="object",isPromise=e=>(isObject$4(e)||isFunction$4(e))&&isFunction$4(e.then)&&isFunction$4(e.catch),objectToString=Object.prototype.toString,toTypeString=e=>objectToString.call(e),toRawType=e=>toTypeString(e).slice(8,-1),isPlainObject=e=>toTypeString(e)==="[object Object]",isIntegerKey=e=>isString$2(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,isReservedProp=makeMap(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),cacheStringFunction=e=>{const t=Object.create(null);return r=>t[r]||(t[r]=e(r))},camelizeRE=/-(\w)/g,camelize=cacheStringFunction(e=>e.replace(camelizeRE,(t,r)=>r?r.toUpperCase():"")),hyphenateRE=/\B([A-Z])/g,hyphenate=cacheStringFunction(e=>e.replace(hyphenateRE,"-$1").toLowerCase()),capitalize=cacheStringFunction(e=>e.charAt(0).toUpperCase()+e.slice(1)),toHandlerKey=cacheStringFunction(e=>e?`on${capitalize(e)}`:""),hasChanged=(e,t)=>!Object.is(e,t),invokeArrayFns=(e,t)=>{for(let r=0;r<e.length;r++)e[r](t)},def=(e,t,r)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:r})},looseToNumber=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let _globalThis;const getGlobalThis=()=>_globalThis||(_globalThis=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global$1<"u"?global$1:{});function normalizeStyle(e){if(isArray$4(e)){const t={};for(let r=0;r<e.length;r++){const n=e[r],a=isString$2(n)?parseStringStyle(n):normalizeStyle(n);if(a)for(const s in a)t[s]=a[s]}return t}else if(isString$2(e)||isObject$4(e))return e}const listDelimiterRE=/;(?![^(]*\))/g,propertyDelimiterRE=/:([^]+)/,styleCommentRE=/\/\*[^]*?\*\//g;function parseStringStyle(e){const t={};return e.replace(styleCommentRE,"").split(listDelimiterRE).forEach(r=>{if(r){const n=r.split(propertyDelimiterRE);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}function normalizeClass(e){let t="";if(isString$2(e))t=e;else if(isArray$4(e))for(let r=0;r<e.length;r++){const n=normalizeClass(e[r]);n&&(t+=n+" ")}else if(isObject$4(e))for(const r in e)e[r]&&(t+=r+" ");return t.trim()}function normalizeProps(e){if(!e)return null;let{class:t,style:r}=e;return t&&!isString$2(t)&&(e.class=normalizeClass(t)),r&&(e.style=normalizeStyle(r)),e}const specialBooleanAttrs="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",isSpecialBooleanAttr=makeMap(specialBooleanAttrs);function includeBooleanAttr(e){return!!e||e===""}function looseCompareArrays(e,t){if(e.length!==t.length)return!1;let r=!0;for(let n=0;r&&n<e.length;n++)r=looseEqual(e[n],t[n]);return r}function looseEqual(e,t){if(e===t)return!0;let r=isDate$2(e),n=isDate$2(t);if(r||n)return r&&n?e.getTime()===t.getTime():!1;if(r=isSymbol(e),n=isSymbol(t),r||n)return e===t;if(r=isArray$4(e),n=isArray$4(t),r||n)return r&&n?looseCompareArrays(e,t):!1;if(r=isObject$4(e),n=isObject$4(t),r||n){if(!r||!n)return!1;const a=Object.keys(e).length,s=Object.keys(t).length;if(a!==s)return!1;for(const o in e){const l=e.hasOwnProperty(o),f=t.hasOwnProperty(o);if(l&&!f||!l&&f||!looseEqual(e[o],t[o]))return!1}}return String(e)===String(t)}function looseIndexOf(e,t){return e.findIndex(r=>looseEqual(r,t))}const toDisplayString=e=>isString$2(e)?e:e==null?"":isArray$4(e)||isObject$4(e)&&(e.toString===objectToString||!isFunction$4(e.toString))?JSON.stringify(e,replacer,2):String(e),replacer=(e,t)=>t&&t.__v_isRef?replacer(e,t.value):isMap(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((r,[n,a],s)=>(r[stringifySymbol(n,s)+" =>"]=a,r),{})}:isSet(t)?{[`Set(${t.size})`]:[...t.values()].map(r=>stringifySymbol(r))}:isSymbol(t)?stringifySymbol(t):isObject$4(t)&&!isArray$4(t)&&!isPlainObject(t)?String(t):t,stringifySymbol=(e,t="")=>{var r;return isSymbol(e)?`Symbol(${(r=e.description)!=null?r:t})`:e};let activeEffectScope;class EffectScope{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=activeEffectScope,!t&&activeEffectScope&&(this.index=(activeEffectScope.scopes||(activeEffectScope.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const r=activeEffectScope;try{return activeEffectScope=this,t()}finally{activeEffectScope=r}}}on(){activeEffectScope=this}off(){activeEffectScope=this.parent}stop(t){if(this._active){let r,n;for(r=0,n=this.effects.length;r<n;r++)this.effects[r].stop();for(r=0,n=this.cleanups.length;r<n;r++)this.cleanups[r]();if(this.scopes)for(r=0,n=this.scopes.length;r<n;r++)this.scopes[r].stop(!0);if(!this.detached&&this.parent&&!t){const a=this.parent.scopes.pop();a&&a!==this&&(this.parent.scopes[this.index]=a,a.index=this.index)}this.parent=void 0,this._active=!1}}}function recordEffectScope(e,t=activeEffectScope){t&&t.active&&t.effects.push(e)}function getCurrentScope(){return activeEffectScope}let activeEffect;class ReactiveEffect{constructor(t,r,n,a){this.fn=t,this.trigger=r,this.scheduler=n,this.active=!0,this.deps=[],this._dirtyLevel=3,this._trackId=0,this._runnings=0,this._queryings=0,this._depsLength=0,recordEffectScope(this,a)}get dirty(){if(this._dirtyLevel===1){this._dirtyLevel=0,this._queryings++,pauseTracking();for(const t of this.deps)if(t.computed&&(triggerComputed(t.computed),this._dirtyLevel>=2))break;resetTracking(),this._queryings--}return this._dirtyLevel>=2}set dirty(t){this._dirtyLevel=t?3:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let t=shouldTrack,r=activeEffect;try{return shouldTrack=!0,activeEffect=this,this._runnings++,preCleanupEffect(this),this.fn()}finally{postCleanupEffect(this),this._runnings--,activeEffect=r,shouldTrack=t}}stop(){var t;this.active&&(preCleanupEffect(this),postCleanupEffect(this),(t=this.onStop)==null||t.call(this),this.active=!1)}}function triggerComputed(e){return e.value}function preCleanupEffect(e){e._trackId++,e._depsLength=0}function postCleanupEffect(e){if(e.deps&&e.deps.length>e._depsLength){for(let t=e._depsLength;t<e.deps.length;t++)cleanupDepEffect(e.deps[t],e);e.deps.length=e._depsLength}}function cleanupDepEffect(e,t){const r=e.get(t);r!==void 0&&t._trackId!==r&&(e.delete(t),e.size===0&&e.cleanup())}let shouldTrack=!0,pauseScheduleStack=0;const trackStack=[];function pauseTracking(){trackStack.push(shouldTrack),shouldTrack=!1}function resetTracking(){const e=trackStack.pop();shouldTrack=e===void 0?!0:e}function pauseScheduling(){pauseScheduleStack++}function resetScheduling(){for(pauseScheduleStack--;!pauseScheduleStack&&queueEffectSchedulers.length;)queueEffectSchedulers.shift()()}function trackEffect(e,t,r){if(t.get(e)!==e._trackId){t.set(e,e._trackId);const n=e.deps[e._depsLength];n!==t?(n&&cleanupDepEffect(n,e),e.deps[e._depsLength++]=t):e._depsLength++}}const queueEffectSchedulers=[];function triggerEffects(e,t,r){pauseScheduling();for(const n of e.keys())if(!(!n.allowRecurse&&n._runnings)&&n._dirtyLevel<t&&(!n._runnings||t!==2)){const a=n._dirtyLevel;n._dirtyLevel=t,a===0&&(!n._queryings||t!==2)&&(n.trigger(),n.scheduler&&queueEffectSchedulers.push(n.scheduler))}resetScheduling()}const createDep=(e,t)=>{const r=new Map;return r.cleanup=e,r.computed=t,r},targetMap=new WeakMap,ITERATE_KEY=Symbol(""),MAP_KEY_ITERATE_KEY=Symbol("");function track(e,t,r){if(shouldTrack&&activeEffect){let n=targetMap.get(e);n||targetMap.set(e,n=new Map);let a=n.get(r);a||n.set(r,a=createDep(()=>n.delete(r))),trackEffect(activeEffect,a)}}function trigger(e,t,r,n,a,s){const o=targetMap.get(e);if(!o)return;let l=[];if(t==="clear")l=[...o.values()];else if(r==="length"&&isArray$4(e)){const f=Number(n);o.forEach((u,m)=>{(m==="length"||!isSymbol(m)&&m>=f)&&l.push(u)})}else switch(r!==void 0&&l.push(o.get(r)),t){case"add":isArray$4(e)?isIntegerKey(r)&&l.push(o.get("length")):(l.push(o.get(ITERATE_KEY)),isMap(e)&&l.push(o.get(MAP_KEY_ITERATE_KEY)));break;case"delete":isArray$4(e)||(l.push(o.get(ITERATE_KEY)),isMap(e)&&l.push(o.get(MAP_KEY_ITERATE_KEY)));break;case"set":isMap(e)&&l.push(o.get(ITERATE_KEY));break}pauseScheduling();for(const f of l)f&&triggerEffects(f,3);resetScheduling()}const isNonTrackableKeys=makeMap("__proto__,__v_isRef,__isVue"),builtInSymbols=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(isSymbol)),arrayInstrumentations=createArrayInstrumentations();function createArrayInstrumentations(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...r){const n=toRaw(this);for(let s=0,o=this.length;s<o;s++)track(n,"get",s+"");const a=n[t](...r);return a===-1||a===!1?n[t](...r.map(toRaw)):a}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...r){pauseTracking(),pauseScheduling();const n=toRaw(this)[t].apply(this,r);return resetScheduling(),resetTracking(),n}}),e}function hasOwnProperty$3(e){const t=toRaw(this);return track(t,"has",e),t.hasOwnProperty(e)}class BaseReactiveHandler{constructor(t=!1,r=!1){this._isReadonly=t,this._shallow=r}get(t,r,n){const a=this._isReadonly,s=this._shallow;if(r==="__v_isReactive")return!a;if(r==="__v_isReadonly")return a;if(r==="__v_isShallow")return s;if(r==="__v_raw")return n===(a?s?shallowReadonlyMap:readonlyMap:s?shallowReactiveMap:reactiveMap).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(n)?t:void 0;const o=isArray$4(t);if(!a){if(o&&hasOwn$1(arrayInstrumentations,r))return Reflect.get(arrayInstrumentations,r,n);if(r==="hasOwnProperty")return hasOwnProperty$3}const l=Reflect.get(t,r,n);return(isSymbol(r)?builtInSymbols.has(r):isNonTrackableKeys(r))||(a||track(t,"get",r),s)?l:isRef(l)?o&&isIntegerKey(r)?l:l.value:isObject$4(l)?a?readonly(l):reactive(l):l}}class MutableReactiveHandler extends BaseReactiveHandler{constructor(t=!1){super(!1,t)}set(t,r,n,a){let s=t[r];if(!this._shallow){const f=isReadonly(s);if(!isShallow(n)&&!isReadonly(n)&&(s=toRaw(s),n=toRaw(n)),!isArray$4(t)&&isRef(s)&&!isRef(n))return f?!1:(s.value=n,!0)}const o=isArray$4(t)&&isIntegerKey(r)?Number(r)<t.length:hasOwn$1(t,r),l=Reflect.set(t,r,n,a);return t===toRaw(a)&&(o?hasChanged(n,s)&&trigger(t,"set",r,n):trigger(t,"add",r,n)),l}deleteProperty(t,r){const n=hasOwn$1(t,r);t[r];const a=Reflect.deleteProperty(t,r);return a&&n&&trigger(t,"delete",r,void 0),a}has(t,r){const n=Reflect.has(t,r);return(!isSymbol(r)||!builtInSymbols.has(r))&&track(t,"has",r),n}ownKeys(t){return track(t,"iterate",isArray$4(t)?"length":ITERATE_KEY),Reflect.ownKeys(t)}}class ReadonlyReactiveHandler extends BaseReactiveHandler{constructor(t=!1){super(!0,t)}set(t,r){return!0}deleteProperty(t,r){return!0}}const mutableHandlers=new MutableReactiveHandler,readonlyHandlers=new ReadonlyReactiveHandler,shallowReactiveHandlers=new MutableReactiveHandler(!0),toShallow=e=>e,getProto$2=e=>Reflect.getPrototypeOf(e);function get(e,t,r=!1,n=!1){e=e.__v_raw;const a=toRaw(e),s=toRaw(t);r||(hasChanged(t,s)&&track(a,"get",t),track(a,"get",s));const{has:o}=getProto$2(a),l=n?toShallow:r?toReadonly:toReactive;if(o.call(a,t))return l(e.get(t));if(o.call(a,s))return l(e.get(s));e!==a&&e.get(t)}function has(e,t=!1){const r=this.__v_raw,n=toRaw(r),a=toRaw(e);return t||(hasChanged(e,a)&&track(n,"has",e),track(n,"has",a)),e===a?r.has(e):r.has(e)||r.has(a)}function size(e,t=!1){return e=e.__v_raw,!t&&track(toRaw(e),"iterate",ITERATE_KEY),Reflect.get(e,"size",e)}function add$1(e){e=toRaw(e);const t=toRaw(this);return getProto$2(t).has.call(t,e)||(t.add(e),trigger(t,"add",e,e)),this}function set$2(e,t){t=toRaw(t);const r=toRaw(this),{has:n,get:a}=getProto$2(r);let s=n.call(r,e);s||(e=toRaw(e),s=n.call(r,e));const o=a.call(r,e);return r.set(e,t),s?hasChanged(t,o)&&trigger(r,"set",e,t):trigger(r,"add",e,t),this}function deleteEntry(e){const t=toRaw(this),{has:r,get:n}=getProto$2(t);let a=r.call(t,e);a||(e=toRaw(e),a=r.call(t,e)),n&&n.call(t,e);const s=t.delete(e);return a&&trigger(t,"delete",e,void 0),s}function clear(){const e=toRaw(this),t=e.size!==0,r=e.clear();return t&&trigger(e,"clear",void 0,void 0),r}function createForEach(e,t){return function(n,a){const s=this,o=s.__v_raw,l=toRaw(o),f=t?toShallow:e?toReadonly:toReactive;return!e&&track(l,"iterate",ITERATE_KEY),o.forEach((u,m)=>n.call(a,f(u),f(m),s))}}function createIterableMethod(e,t,r){return function(...n){const a=this.__v_raw,s=toRaw(a),o=isMap(s),l=e==="entries"||e===Symbol.iterator&&o,f=e==="keys"&&o,u=a[e](...n),m=r?toShallow:t?toReadonly:toReactive;return!t&&track(s,"iterate",f?MAP_KEY_ITERATE_KEY:ITERATE_KEY),{next(){const{value:v,done:b}=u.next();return b?{value:v,done:b}:{value:l?[m(v[0]),m(v[1])]:m(v),done:b}},[Symbol.iterator](){return this}}}}function createReadonlyMethod(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function createInstrumentations(){const e={get(s){return get(this,s)},get size(){return size(this)},has,add:add$1,set:set$2,delete:deleteEntry,clear,forEach:createForEach(!1,!1)},t={get(s){return get(this,s,!1,!0)},get size(){return size(this)},has,add:add$1,set:set$2,delete:deleteEntry,clear,forEach:createForEach(!1,!0)},r={get(s){return get(this,s,!0)},get size(){return size(this,!0)},has(s){return has.call(this,s,!0)},add:createReadonlyMethod("add"),set:createReadonlyMethod("set"),delete:createReadonlyMethod("delete"),clear:createReadonlyMethod("clear"),forEach:createForEach(!0,!1)},n={get(s){return get(this,s,!0,!0)},get size(){return size(this,!0)},has(s){return has.call(this,s,!0)},add:createReadonlyMethod("add"),set:createReadonlyMethod("set"),delete:createReadonlyMethod("delete"),clear:createReadonlyMethod("clear"),forEach:createForEach(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(s=>{e[s]=createIterableMethod(s,!1,!1),r[s]=createIterableMethod(s,!0,!1),t[s]=createIterableMethod(s,!1,!0),n[s]=createIterableMethod(s,!0,!0)}),[e,r,t,n]}const[mutableInstrumentations,readonlyInstrumentations,shallowInstrumentations,shallowReadonlyInstrumentations]=createInstrumentations();function createInstrumentationGetter(e,t){const r=t?e?shallowReadonlyInstrumentations:shallowInstrumentations:e?readonlyInstrumentations:mutableInstrumentations;return(n,a,s)=>a==="__v_isReactive"?!e:a==="__v_isReadonly"?e:a==="__v_raw"?n:Reflect.get(hasOwn$1(r,a)&&a in n?r:n,a,s)}const mutableCollectionHandlers={get:createInstrumentationGetter(!1,!1)},shallowCollectionHandlers={get:createInstrumentationGetter(!1,!0)},readonlyCollectionHandlers={get:createInstrumentationGetter(!0,!1)},reactiveMap=new WeakMap,shallowReactiveMap=new WeakMap,readonlyMap=new WeakMap,shallowReadonlyMap=new WeakMap;function targetTypeMap(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function getTargetType(e){return e.__v_skip||!Object.isExtensible(e)?0:targetTypeMap(toRawType(e))}function reactive(e){return isReadonly(e)?e:createReactiveObject(e,!1,mutableHandlers,mutableCollectionHandlers,reactiveMap)}function shallowReactive(e){return createReactiveObject(e,!1,shallowReactiveHandlers,shallowCollectionHandlers,shallowReactiveMap)}function readonly(e){return createReactiveObject(e,!0,readonlyHandlers,readonlyCollectionHandlers,readonlyMap)}function createReactiveObject(e,t,r,n,a){if(!isObject$4(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const s=a.get(e);if(s)return s;const o=getTargetType(e);if(o===0)return e;const l=new Proxy(e,o===2?n:r);return a.set(e,l),l}function isReactive(e){return isReadonly(e)?isReactive(e.__v_raw):!!(e&&e.__v_isReactive)}function isReadonly(e){return!!(e&&e.__v_isReadonly)}function isShallow(e){return!!(e&&e.__v_isShallow)}function isProxy(e){return isReactive(e)||isReadonly(e)}function toRaw(e){const t=e&&e.__v_raw;return t?toRaw(t):e}function markRaw(e){return def(e,"__v_skip",!0),e}const toReactive=e=>isObject$4(e)?reactive(e):e,toReadonly=e=>isObject$4(e)?readonly(e):e;class ComputedRefImpl{constructor(t,r,n,a){this._setter=r,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new ReactiveEffect(()=>t(this._value),()=>triggerRefValue(this,1)),this.effect.computed=this,this.effect.active=this._cacheable=!a,this.__v_isReadonly=n}get value(){const t=toRaw(this);return trackRefValue(t),(!t._cacheable||t.effect.dirty)&&hasChanged(t._value,t._value=t.effect.run())&&triggerRefValue(t,2),t._value}set value(t){this._setter(t)}get _dirty(){return this.effect.dirty}set _dirty(t){this.effect.dirty=t}}function computed$1(e,t,r=!1){let n,a;const s=isFunction$4(e);return s?(n=e,a=NOOP):(n=e.get,a=e.set),new ComputedRefImpl(n,a,s||!a,r)}function trackRefValue(e){shouldTrack&&activeEffect&&(e=toRaw(e),trackEffect(activeEffect,e.dep||(e.dep=createDep(()=>e.dep=void 0,e instanceof ComputedRefImpl?e:void 0))))}function triggerRefValue(e,t=3,r){e=toRaw(e);const n=e.dep;n&&triggerEffects(n,t)}function isRef(e){return!!(e&&e.__v_isRef===!0)}function ref(e){return createRef(e,!1)}function createRef(e,t){return isRef(e)?e:new RefImpl(e,t)}class RefImpl{constructor(t,r){this.__v_isShallow=r,this.dep=void 0,this.__v_isRef=!0,this._rawValue=r?t:toRaw(t),this._value=r?t:toReactive(t)}get value(){return trackRefValue(this),this._value}set value(t){const r=this.__v_isShallow||isShallow(t)||isReadonly(t);t=r?t:toRaw(t),hasChanged(t,this._rawValue)&&(this._rawValue=t,this._value=r?t:toReactive(t),triggerRefValue(this,3))}}function unref(e){return isRef(e)?e.value:e}const shallowUnwrapHandlers={get:(e,t,r)=>unref(Reflect.get(e,t,r)),set:(e,t,r,n)=>{const a=e[t];return isRef(a)&&!isRef(r)?(a.value=r,!0):Reflect.set(e,t,r,n)}};function proxyRefs(e){return isReactive(e)?e:new Proxy(e,shallowUnwrapHandlers)}const stack=[];function warn$1(e,...t){pauseTracking();const r=stack.length?stack[stack.length-1].component:null,n=r&&r.appContext.config.warnHandler,a=getComponentTrace();if(n)callWithErrorHandling(n,r,11,[e+t.join(""),r&&r.proxy,a.map(({vnode:s})=>`at <${formatComponentName(r,s.type)}>`).join(`
`),a]);else{const s=[`[Vue warn]: ${e}`,...t];a.length&&s.push(`
`,...formatTrace(a)),console.warn(...s)}resetTracking()}function getComponentTrace(){let e=stack[stack.length-1];if(!e)return[];const t=[];for(;e;){const r=t[0];r&&r.vnode===e?r.recurseCount++:t.push({vnode:e,recurseCount:0});const n=e.component&&e.component.parent;e=n&&n.vnode}return t}function formatTrace(e){const t=[];return e.forEach((r,n)=>{t.push(...n===0?[]:[`
`],...formatTraceEntry(r))}),t}function formatTraceEntry({vnode:e,recurseCount:t}){const r=t>0?`... (${t} recursive calls)`:"",n=e.component?e.component.parent==null:!1,a=` at <${formatComponentName(e.component,e.type,n)}`,s=">"+r;return e.props?[a,...formatProps(e.props),s]:[a+s]}function formatProps(e){const t=[],r=Object.keys(e);return r.slice(0,3).forEach(n=>{t.push(...formatProp(n,e[n]))}),r.length>3&&t.push(" ..."),t}function formatProp(e,t,r){return isString$2(t)?(t=JSON.stringify(t),r?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?r?t:[`${e}=${t}`]:isRef(t)?(t=formatProp(e,toRaw(t.value),!0),r?t:[`${e}=Ref<`,t,">"]):isFunction$4(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=toRaw(t),r?t:[`${e}=`,t])}function callWithErrorHandling(e,t,r,n){let a;try{a=n?e(...n):e()}catch(s){handleError(s,t,r)}return a}function callWithAsyncErrorHandling(e,t,r,n){if(isFunction$4(e)){const s=callWithErrorHandling(e,t,r,n);return s&&isPromise(s)&&s.catch(o=>{handleError(o,t,r)}),s}const a=[];for(let s=0;s<e.length;s++)a.push(callWithAsyncErrorHandling(e[s],t,r,n));return a}function handleError(e,t,r,n=!0){const a=t?t.vnode:null;if(t){let s=t.parent;const o=t.proxy,l=`https://vuejs.org/errors/#runtime-${r}`;for(;s;){const u=s.ec;if(u){for(let m=0;m<u.length;m++)if(u[m](e,o,l)===!1)return}s=s.parent}const f=t.appContext.config.errorHandler;if(f){callWithErrorHandling(f,null,10,[e,o,l]);return}}logError(e,r,a,n)}function logError(e,t,r,n=!0){console.error(e)}let isFlushing=!1,isFlushPending=!1;const queue$1=[];let flushIndex=0;const pendingPostFlushCbs=[];let activePostFlushCbs=null,postFlushIndex=0;const resolvedPromise=Promise.resolve();let currentFlushPromise=null;function nextTick(e){const t=currentFlushPromise||resolvedPromise;return e?t.then(this?e.bind(this):e):t}function findInsertionIndex(e){let t=flushIndex+1,r=queue$1.length;for(;t<r;){const n=t+r>>>1,a=queue$1[n],s=getId(a);s<e||s===e&&a.pre?t=n+1:r=n}return t}function queueJob(e){(!queue$1.length||!queue$1.includes(e,isFlushing&&e.allowRecurse?flushIndex+1:flushIndex))&&(e.id==null?queue$1.push(e):queue$1.splice(findInsertionIndex(e.id),0,e),queueFlush())}function queueFlush(){!isFlushing&&!isFlushPending&&(isFlushPending=!0,currentFlushPromise=resolvedPromise.then(flushJobs))}function invalidateJob(e){const t=queue$1.indexOf(e);t>flushIndex&&queue$1.splice(t,1)}function queuePostFlushCb(e){isArray$4(e)?pendingPostFlushCbs.push(...e):(!activePostFlushCbs||!activePostFlushCbs.includes(e,e.allowRecurse?postFlushIndex+1:postFlushIndex))&&pendingPostFlushCbs.push(e),queueFlush()}function flushPreFlushCbs(e,t,r=isFlushing?flushIndex+1:0){for(;r<queue$1.length;r++){const n=queue$1[r];if(n&&n.pre){if(e&&n.id!==e.uid)continue;queue$1.splice(r,1),r--,n()}}}function flushPostFlushCbs(e){if(pendingPostFlushCbs.length){const t=[...new Set(pendingPostFlushCbs)];if(pendingPostFlushCbs.length=0,activePostFlushCbs){activePostFlushCbs.push(...t);return}for(activePostFlushCbs=t,activePostFlushCbs.sort((r,n)=>getId(r)-getId(n)),postFlushIndex=0;postFlushIndex<activePostFlushCbs.length;postFlushIndex++)activePostFlushCbs[postFlushIndex]();activePostFlushCbs=null,postFlushIndex=0}}const getId=e=>e.id==null?1/0:e.id,comparator=(e,t)=>{const r=getId(e)-getId(t);if(r===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return r};function flushJobs(e){isFlushPending=!1,isFlushing=!0,queue$1.sort(comparator);try{for(flushIndex=0;flushIndex<queue$1.length;flushIndex++){const t=queue$1[flushIndex];t&&t.active!==!1&&callWithErrorHandling(t,null,14)}}finally{flushIndex=0,queue$1.length=0,flushPostFlushCbs(),isFlushing=!1,currentFlushPromise=null,(queue$1.length||pendingPostFlushCbs.length)&&flushJobs()}}function emit(e,t,...r){if(e.isUnmounted)return;const n=e.vnode.props||EMPTY_OBJ;let a=r;const s=t.startsWith("update:"),o=s&&t.slice(7);if(o&&o in n){const m=`${o==="modelValue"?"model":o}Modifiers`,{number:v,trim:b}=n[m]||EMPTY_OBJ;b&&(a=r.map(P=>isString$2(P)?P.trim():P)),v&&(a=r.map(looseToNumber))}let l,f=n[l=toHandlerKey(t)]||n[l=toHandlerKey(camelize(t))];!f&&s&&(f=n[l=toHandlerKey(hyphenate(t))]),f&&callWithAsyncErrorHandling(f,e,6,a);const u=n[l+"Once"];if(u){if(!e.emitted)e.emitted={};else if(e.emitted[l])return;e.emitted[l]=!0,callWithAsyncErrorHandling(u,e,6,a)}}function normalizeEmitsOptions(e,t,r=!1){const n=t.emitsCache,a=n.get(e);if(a!==void 0)return a;const s=e.emits;let o={},l=!1;if(!isFunction$4(e)){const f=u=>{const m=normalizeEmitsOptions(u,t,!0);m&&(l=!0,extend$1(o,m))};!r&&t.mixins.length&&t.mixins.forEach(f),e.extends&&f(e.extends),e.mixins&&e.mixins.forEach(f)}return!s&&!l?(isObject$4(e)&&n.set(e,null),null):(isArray$4(s)?s.forEach(f=>o[f]=null):extend$1(o,s),isObject$4(e)&&n.set(e,o),o)}function isEmitListener(e,t){return!e||!isOn(t)?!1:(t=t.slice(2).replace(/Once$/,""),hasOwn$1(e,t[0].toLowerCase()+t.slice(1))||hasOwn$1(e,hyphenate(t))||hasOwn$1(e,t))}let currentRenderingInstance=null,currentScopeId=null;function setCurrentRenderingInstance(e){const t=currentRenderingInstance;return currentRenderingInstance=e,currentScopeId=e&&e.type.__scopeId||null,t}function withCtx(e,t=currentRenderingInstance,r){if(!t||e._n)return e;const n=(...a)=>{n._d&&setBlockTracking(-1);const s=setCurrentRenderingInstance(t);let o;try{o=e(...a)}finally{setCurrentRenderingInstance(s),n._d&&setBlockTracking(1)}return o};return n._n=!0,n._c=!0,n._d=!0,n}function markAttrsAccessed(){}function renderComponentRoot(e){const{type:t,vnode:r,proxy:n,withProxy:a,props:s,propsOptions:[o],slots:l,attrs:f,emit:u,render:m,renderCache:v,data:b,setupState:P,ctx:F,inheritAttrs:C}=e;let D,E;const k=setCurrentRenderingInstance(e);try{if(r.shapeFlag&4){const W=a||n,M=W;D=normalizeVNode(m.call(M,W,v,s,P,b,F)),E=f}else{const W=t;D=normalizeVNode(W.length>1?W(s,{attrs:f,slots:l,emit:u}):W(s,null)),E=t.props?f:getFunctionalFallthrough(f)}}catch(W){blockStack.length=0,handleError(W,e,1),D=createVNode(Comment)}let j=D;if(E&&C!==!1){const W=Object.keys(E),{shapeFlag:M}=j;W.length&&M&7&&(o&&W.some(isModelListener)&&(E=filterModelListeners(E,o)),j=cloneVNode(j,E))}return r.dirs&&(j=cloneVNode(j),j.dirs=j.dirs?j.dirs.concat(r.dirs):r.dirs),r.transition&&(j.transition=r.transition),D=j,setCurrentRenderingInstance(k),D}const getFunctionalFallthrough=e=>{let t;for(const r in e)(r==="class"||r==="style"||isOn(r))&&((t||(t={}))[r]=e[r]);return t},filterModelListeners=(e,t)=>{const r={};for(const n in e)(!isModelListener(n)||!(n.slice(9)in t))&&(r[n]=e[n]);return r};function shouldUpdateComponent(e,t,r){const{props:n,children:a,component:s}=e,{props:o,children:l,patchFlag:f}=t,u=s.emitsOptions;if(t.dirs||t.transition)return!0;if(r&&f>=0){if(f&1024)return!0;if(f&16)return n?hasPropsChanged(n,o,u):!!o;if(f&8){const m=t.dynamicProps;for(let v=0;v<m.length;v++){const b=m[v];if(o[b]!==n[b]&&!isEmitListener(u,b))return!0}}}else return(a||l)&&(!l||!l.$stable)?!0:n===o?!1:n?o?hasPropsChanged(n,o,u):!0:!!o;return!1}function hasPropsChanged(e,t,r){const n=Object.keys(t);if(n.length!==Object.keys(e).length)return!0;for(let a=0;a<n.length;a++){const s=n[a];if(t[s]!==e[s]&&!isEmitListener(r,s))return!0}return!1}function updateHOCHostEl({vnode:e,parent:t},r){if(r)for(;t;){const n=t.subTree;if(n.suspense&&n.suspense.activeBranch===e&&(n.el=e.el),n===e)(e=t.vnode).el=r,t=t.parent;else break}}const COMPONENTS="components",DIRECTIVES="directives";function resolveComponent(e,t){return resolveAsset(COMPONENTS,e,!0,t)||e}const NULL_DYNAMIC_COMPONENT=Symbol.for("v-ndc");function resolveDirective(e){return resolveAsset(DIRECTIVES,e)}function resolveAsset(e,t,r=!0,n=!1){const a=currentRenderingInstance||currentInstance;if(a){const s=a.type;if(e===COMPONENTS){const l=getComponentName(s,!1);if(l&&(l===t||l===camelize(t)||l===capitalize(camelize(t))))return s}const o=resolve(a[e]||s[e],t)||resolve(a.appContext[e],t);return!o&&n?s:o}}function resolve(e,t){return e&&(e[t]||e[camelize(t)]||e[capitalize(camelize(t))])}const isSuspense=e=>e.__isSuspense;function queueEffectWithSuspense(e,t){t&&t.pendingBranch?isArray$4(e)?t.effects.push(...e):t.effects.push(e):queuePostFlushCb(e)}function watchEffect(e,t){return doWatch(e,null,t)}const INITIAL_WATCHER_VALUE={};function watch(e,t,r){return doWatch(e,t,r)}function doWatch(e,t,{immediate:r,deep:n,flush:a,once:s,onTrack:o,onTrigger:l}=EMPTY_OBJ){var f;if(t&&s){const M=t;t=(...S)=>{M(...S),W()}}const u=getCurrentScope()===((f=currentInstance)==null?void 0:f.scope)?currentInstance:null;let m,v=!1,b=!1;if(isRef(e)?(m=()=>e.value,v=isShallow(e)):isReactive(e)?(m=()=>e,n=!0):isArray$4(e)?(b=!0,v=e.some(M=>isReactive(M)||isShallow(M)),m=()=>e.map(M=>{if(isRef(M))return M.value;if(isReactive(M))return traverse(M);if(isFunction$4(M))return callWithErrorHandling(M,u,2)})):isFunction$4(e)?t?m=()=>callWithErrorHandling(e,u,2):m=()=>{if(!(u&&u.isUnmounted))return P&&P(),callWithAsyncErrorHandling(e,u,3,[F])}:m=NOOP,t&&n){const M=m;m=()=>traverse(M())}let P,F=M=>{P=j.onStop=()=>{callWithErrorHandling(M,u,4),P=j.onStop=void 0}},C;if(isInSSRComponentSetup)if(F=NOOP,t?r&&callWithAsyncErrorHandling(t,u,3,[m(),b?[]:void 0,F]):m(),a==="sync"){const M=useSSRContext();C=M.__watcherHandles||(M.__watcherHandles=[])}else return NOOP;let D=b?new Array(e.length).fill(INITIAL_WATCHER_VALUE):INITIAL_WATCHER_VALUE;const E=()=>{if(!(!j.active||!j.dirty))if(t){const M=j.run();(n||v||(b?M.some((S,T)=>hasChanged(S,D[T])):hasChanged(M,D)))&&(P&&P(),callWithAsyncErrorHandling(t,u,3,[M,D===INITIAL_WATCHER_VALUE?void 0:b&&D[0]===INITIAL_WATCHER_VALUE?[]:D,F]),D=M)}else j.run()};E.allowRecurse=!!t;let k;a==="sync"?k=E:a==="post"?k=()=>queuePostRenderEffect(E,u&&u.suspense):(E.pre=!0,u&&(E.id=u.uid),k=()=>queueJob(E));const j=new ReactiveEffect(m,NOOP,k),W=()=>{j.stop(),u&&u.scope&&remove(u.scope.effects,j)};return t?r?E():D=j.run():a==="post"?queuePostRenderEffect(j.run.bind(j),u&&u.suspense):j.run(),C&&C.push(W),W}function instanceWatch(e,t,r){const n=this.proxy,a=isString$2(e)?e.includes(".")?createPathGetter(n,e):()=>n[e]:e.bind(n,n);let s;isFunction$4(t)?s=t:(s=t.handler,r=t);const o=currentInstance;setCurrentInstance(this);const l=doWatch(a,s.bind(n),r);return o?setCurrentInstance(o):unsetCurrentInstance(),l}function createPathGetter(e,t){const r=t.split(".");return()=>{let n=e;for(let a=0;a<r.length&&n;a++)n=n[r[a]];return n}}function traverse(e,t){if(!isObject$4(e)||e.__v_skip||(t=t||new Set,t.has(e)))return e;if(t.add(e),isRef(e))traverse(e.value,t);else if(isArray$4(e))for(let r=0;r<e.length;r++)traverse(e[r],t);else if(isSet(e)||isMap(e))e.forEach(r=>{traverse(r,t)});else if(isPlainObject(e))for(const r in e)traverse(e[r],t);return e}function withDirectives(e,t){const r=currentRenderingInstance;if(r===null)return e;const n=getExposeProxy(r)||r.proxy,a=e.dirs||(e.dirs=[]);for(let s=0;s<t.length;s++){let[o,l,f,u=EMPTY_OBJ]=t[s];o&&(isFunction$4(o)&&(o={mounted:o,updated:o}),o.deep&&traverse(l),a.push({dir:o,instance:n,value:l,oldValue:void 0,arg:f,modifiers:u}))}return e}function invokeDirectiveHook(e,t,r,n){const a=e.dirs,s=t&&t.dirs;for(let o=0;o<a.length;o++){const l=a[o];s&&(l.oldValue=s[o].value);let f=l.dir[n];f&&(pauseTracking(),callWithAsyncErrorHandling(f,r,8,[e.el,l,e,t]),resetTracking())}}/*! #__NO_SIDE_EFFECTS__ */function defineComponent(e,t){return isFunction$4(e)?extend$1({name:e.name},t,{setup:e}):e}const isAsyncWrapper=e=>!!e.type.__asyncLoader,isKeepAlive=e=>e.type.__isKeepAlive;function onActivated(e,t){registerKeepAliveHook(e,"a",t)}function onDeactivated(e,t){registerKeepAliveHook(e,"da",t)}function registerKeepAliveHook(e,t,r=currentInstance){const n=e.__wdc||(e.__wdc=()=>{let a=r;for(;a;){if(a.isDeactivated)return;a=a.parent}return e()});if(injectHook(t,n,r),r){let a=r.parent;for(;a&&a.parent;)isKeepAlive(a.parent.vnode)&&injectToKeepAliveRoot(n,t,r,a),a=a.parent}}function injectToKeepAliveRoot(e,t,r,n){const a=injectHook(t,e,n,!0);onUnmounted(()=>{remove(n[t],a)},r)}function injectHook(e,t,r=currentInstance,n=!1){if(r){const a=r[e]||(r[e]=[]),s=t.__weh||(t.__weh=(...o)=>{if(r.isUnmounted)return;pauseTracking(),setCurrentInstance(r);const l=callWithAsyncErrorHandling(t,r,e,o);return unsetCurrentInstance(),resetTracking(),l});return n?a.unshift(s):a.push(s),s}}const createHook=e=>(t,r=currentInstance)=>(!isInSSRComponentSetup||e==="sp")&&injectHook(e,(...n)=>t(...n),r),onBeforeMount=createHook("bm"),onMounted=createHook("m"),onBeforeUpdate=createHook("bu"),onUpdated=createHook("u"),onBeforeUnmount=createHook("bum"),onUnmounted=createHook("um"),onServerPrefetch=createHook("sp"),onRenderTriggered=createHook("rtg"),onRenderTracked=createHook("rtc");function onErrorCaptured(e,t=currentInstance){injectHook("ec",e,t)}function renderList(e,t,r,n){let a;const s=r&&r[n];if(isArray$4(e)||isString$2(e)){a=new Array(e.length);for(let o=0,l=e.length;o<l;o++)a[o]=t(e[o],o,void 0,s&&s[o])}else if(typeof e=="number"){a=new Array(e);for(let o=0;o<e;o++)a[o]=t(o+1,o,void 0,s&&s[o])}else if(isObject$4(e))if(e[Symbol.iterator])a=Array.from(e,(o,l)=>t(o,l,void 0,s&&s[l]));else{const o=Object.keys(e);a=new Array(o.length);for(let l=0,f=o.length;l<f;l++){const u=o[l];a[l]=t(e[u],u,l,s&&s[l])}}else a=[];return r&&(r[n]=a),a}function createSlots(e,t){for(let r=0;r<t.length;r++){const n=t[r];if(isArray$4(n))for(let a=0;a<n.length;a++)e[n[a].name]=n[a].fn;else n&&(e[n.name]=n.key?(...a)=>{const s=n.fn(...a);return s&&(s.key=n.key),s}:n.fn)}return e}function renderSlot(e,t,r={},n,a){if(currentRenderingInstance.isCE||currentRenderingInstance.parent&&isAsyncWrapper(currentRenderingInstance.parent)&&currentRenderingInstance.parent.isCE)return t!=="default"&&(r.name=t),createVNode("slot",r,n&&n());let s=e[t];s&&s._c&&(s._d=!1),openBlock();const o=s&&ensureValidVNode(s(r)),l=createBlock(Fragment,{key:r.key||o&&o.key||`_${t}`},o||(n?n():[]),o&&e._===1?64:-2);return!a&&l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),s&&s._c&&(s._d=!0),l}function ensureValidVNode(e){return e.some(t=>isVNode(t)?!(t.type===Comment||t.type===Fragment&&!ensureValidVNode(t.children)):!0)?e:null}const getPublicInstance=e=>e?isStatefulComponent(e)?getExposeProxy(e)||e.proxy:getPublicInstance(e.parent):null,publicPropertiesMap=extend$1(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>getPublicInstance(e.parent),$root:e=>getPublicInstance(e.root),$emit:e=>e.emit,$options:e=>resolveMergedOptions(e),$forceUpdate:e=>e.f||(e.f=()=>{e.effect.dirty=!0,queueJob(e.update)}),$nextTick:e=>e.n||(e.n=nextTick.bind(e.proxy)),$watch:e=>instanceWatch.bind(e)}),hasSetupBinding=(e,t)=>e!==EMPTY_OBJ&&!e.__isScriptSetup&&hasOwn$1(e,t),PublicInstanceProxyHandlers={get({_:e},t){const{ctx:r,setupState:n,data:a,props:s,accessCache:o,type:l,appContext:f}=e;let u;if(t[0]!=="$"){const P=o[t];if(P!==void 0)switch(P){case 1:return n[t];case 2:return a[t];case 4:return r[t];case 3:return s[t]}else{if(hasSetupBinding(n,t))return o[t]=1,n[t];if(a!==EMPTY_OBJ&&hasOwn$1(a,t))return o[t]=2,a[t];if((u=e.propsOptions[0])&&hasOwn$1(u,t))return o[t]=3,s[t];if(r!==EMPTY_OBJ&&hasOwn$1(r,t))return o[t]=4,r[t];shouldCacheAccess&&(o[t]=0)}}const m=publicPropertiesMap[t];let v,b;if(m)return t==="$attrs"&&track(e,"get",t),m(e);if((v=l.__cssModules)&&(v=v[t]))return v;if(r!==EMPTY_OBJ&&hasOwn$1(r,t))return o[t]=4,r[t];if(b=f.config.globalProperties,hasOwn$1(b,t))return b[t]},set({_:e},t,r){const{data:n,setupState:a,ctx:s}=e;return hasSetupBinding(a,t)?(a[t]=r,!0):n!==EMPTY_OBJ&&hasOwn$1(n,t)?(n[t]=r,!0):hasOwn$1(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(s[t]=r,!0)},has({_:{data:e,setupState:t,accessCache:r,ctx:n,appContext:a,propsOptions:s}},o){let l;return!!r[o]||e!==EMPTY_OBJ&&hasOwn$1(e,o)||hasSetupBinding(t,o)||(l=s[0])&&hasOwn$1(l,o)||hasOwn$1(n,o)||hasOwn$1(publicPropertiesMap,o)||hasOwn$1(a.config.globalProperties,o)},defineProperty(e,t,r){return r.get!=null?e._.accessCache[t]=0:hasOwn$1(r,"value")&&this.set(e,t,r.value,null),Reflect.defineProperty(e,t,r)}};function normalizePropsOrEmits(e){return isArray$4(e)?e.reduce((t,r)=>(t[r]=null,t),{}):e}let shouldCacheAccess=!0;function applyOptions(e){const t=resolveMergedOptions(e),r=e.proxy,n=e.ctx;shouldCacheAccess=!1,t.beforeCreate&&callHook(t.beforeCreate,e,"bc");const{data:a,computed:s,methods:o,watch:l,provide:f,inject:u,created:m,beforeMount:v,mounted:b,beforeUpdate:P,updated:F,activated:C,deactivated:D,beforeDestroy:E,beforeUnmount:k,destroyed:j,unmounted:W,render:M,renderTracked:S,renderTriggered:T,errorCaptured:V,serverPrefetch:_,expose:ee,inheritAttrs:re,components:te,directives:oe,filters:he}=t;if(u&&resolveInjections(u,n,null),o)for(const Se in o){const be=o[Se];isFunction$4(be)&&(n[Se]=be.bind(r))}if(a){const Se=a.call(r,r);isObject$4(Se)&&(e.data=reactive(Se))}if(shouldCacheAccess=!0,s)for(const Se in s){const be=s[Se],le=isFunction$4(be)?be.bind(r,r):isFunction$4(be.get)?be.get.bind(r,r):NOOP,ae=!isFunction$4(be)&&isFunction$4(be.set)?be.set.bind(r):NOOP,ke=computed({get:le,set:ae});Object.defineProperty(n,Se,{enumerable:!0,configurable:!0,get:()=>ke.value,set:Ne=>ke.value=Ne})}if(l)for(const Se in l)createWatcher(l[Se],n,r,Se);if(f){const Se=isFunction$4(f)?f.call(r):f;Reflect.ownKeys(Se).forEach(be=>{provide(be,Se[be])})}m&&callHook(m,e,"c");function we(Se,be){isArray$4(be)?be.forEach(le=>Se(le.bind(r))):be&&Se(be.bind(r))}if(we(onBeforeMount,v),we(onMounted,b),we(onBeforeUpdate,P),we(onUpdated,F),we(onActivated,C),we(onDeactivated,D),we(onErrorCaptured,V),we(onRenderTracked,S),we(onRenderTriggered,T),we(onBeforeUnmount,k),we(onUnmounted,W),we(onServerPrefetch,_),isArray$4(ee))if(ee.length){const Se=e.exposed||(e.exposed={});ee.forEach(be=>{Object.defineProperty(Se,be,{get:()=>r[be],set:le=>r[be]=le})})}else e.exposed||(e.exposed={});M&&e.render===NOOP&&(e.render=M),re!=null&&(e.inheritAttrs=re),te&&(e.components=te),oe&&(e.directives=oe)}function resolveInjections(e,t,r=NOOP){isArray$4(e)&&(e=normalizeInject(e));for(const n in e){const a=e[n];let s;isObject$4(a)?"default"in a?s=inject(a.from||n,a.default,!0):s=inject(a.from||n):s=inject(a),isRef(s)?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>s.value,set:o=>s.value=o}):t[n]=s}}function callHook(e,t,r){callWithAsyncErrorHandling(isArray$4(e)?e.map(n=>n.bind(t.proxy)):e.bind(t.proxy),t,r)}function createWatcher(e,t,r,n){const a=n.includes(".")?createPathGetter(r,n):()=>r[n];if(isString$2(e)){const s=t[e];isFunction$4(s)&&watch(a,s)}else if(isFunction$4(e))watch(a,e.bind(r));else if(isObject$4(e))if(isArray$4(e))e.forEach(s=>createWatcher(s,t,r,n));else{const s=isFunction$4(e.handler)?e.handler.bind(r):t[e.handler];isFunction$4(s)&&watch(a,s,e)}}function resolveMergedOptions(e){const t=e.type,{mixins:r,extends:n}=t,{mixins:a,optionsCache:s,config:{optionMergeStrategies:o}}=e.appContext,l=s.get(t);let f;return l?f=l:!a.length&&!r&&!n?f=t:(f={},a.length&&a.forEach(u=>mergeOptions(f,u,o,!0)),mergeOptions(f,t,o)),isObject$4(t)&&s.set(t,f),f}function mergeOptions(e,t,r,n=!1){const{mixins:a,extends:s}=t;s&&mergeOptions(e,s,r,!0),a&&a.forEach(o=>mergeOptions(e,o,r,!0));for(const o in t)if(!(n&&o==="expose")){const l=internalOptionMergeStrats[o]||r&&r[o];e[o]=l?l(e[o],t[o]):t[o]}return e}const internalOptionMergeStrats={data:mergeDataFn,props:mergeEmitsOrPropsOptions,emits:mergeEmitsOrPropsOptions,methods:mergeObjectOptions,computed:mergeObjectOptions,beforeCreate:mergeAsArray,created:mergeAsArray,beforeMount:mergeAsArray,mounted:mergeAsArray,beforeUpdate:mergeAsArray,updated:mergeAsArray,beforeDestroy:mergeAsArray,beforeUnmount:mergeAsArray,destroyed:mergeAsArray,unmounted:mergeAsArray,activated:mergeAsArray,deactivated:mergeAsArray,errorCaptured:mergeAsArray,serverPrefetch:mergeAsArray,components:mergeObjectOptions,directives:mergeObjectOptions,watch:mergeWatchOptions,provide:mergeDataFn,inject:mergeInject};function mergeDataFn(e,t){return t?e?function(){return extend$1(isFunction$4(e)?e.call(this,this):e,isFunction$4(t)?t.call(this,this):t)}:t:e}function mergeInject(e,t){return mergeObjectOptions(normalizeInject(e),normalizeInject(t))}function normalizeInject(e){if(isArray$4(e)){const t={};for(let r=0;r<e.length;r++)t[e[r]]=e[r];return t}return e}function mergeAsArray(e,t){return e?[...new Set([].concat(e,t))]:t}function mergeObjectOptions(e,t){return e?extend$1(Object.create(null),e,t):t}function mergeEmitsOrPropsOptions(e,t){return e?isArray$4(e)&&isArray$4(t)?[...new Set([...e,...t])]:extend$1(Object.create(null),normalizePropsOrEmits(e),normalizePropsOrEmits(t??{})):t}function mergeWatchOptions(e,t){if(!e)return t;if(!t)return e;const r=extend$1(Object.create(null),e);for(const n in t)r[n]=mergeAsArray(e[n],t[n]);return r}function createAppContext(){return{app:null,config:{isNativeTag:NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let uid$1=0;function createAppAPI(e,t){return function(n,a=null){isFunction$4(n)||(n=extend$1({},n)),a!=null&&!isObject$4(a)&&(a=null);const s=createAppContext(),o=new WeakSet;let l=!1;const f=s.app={_uid:uid$1++,_component:n,_props:a,_container:null,_context:s,_instance:null,version,get config(){return s.config},set config(u){},use(u,...m){return o.has(u)||(u&&isFunction$4(u.install)?(o.add(u),u.install(f,...m)):isFunction$4(u)&&(o.add(u),u(f,...m))),f},mixin(u){return s.mixins.includes(u)||s.mixins.push(u),f},component(u,m){return m?(s.components[u]=m,f):s.components[u]},directive(u,m){return m?(s.directives[u]=m,f):s.directives[u]},mount(u,m,v){if(!l){const b=createVNode(n,a);return b.appContext=s,v===!0?v="svg":v===!1&&(v=void 0),m&&t?t(b,u):e(b,u,v),l=!0,f._container=u,u.__vue_app__=f,getExposeProxy(b.component)||b.component.proxy}},unmount(){l&&(e(null,f._container),delete f._container.__vue_app__)},provide(u,m){return s.provides[u]=m,f},runWithContext(u){currentApp=f;try{return u()}finally{currentApp=null}}};return f}}let currentApp=null;function provide(e,t){if(currentInstance){let r=currentInstance.provides;const n=currentInstance.parent&&currentInstance.parent.provides;n===r&&(r=currentInstance.provides=Object.create(n)),r[e]=t}}function inject(e,t,r=!1){const n=currentInstance||currentRenderingInstance;if(n||currentApp){const a=n?n.parent==null?n.vnode.appContext&&n.vnode.appContext.provides:n.parent.provides:currentApp._context.provides;if(a&&e in a)return a[e];if(arguments.length>1)return r&&isFunction$4(t)?t.call(n&&n.proxy):t}}function initProps(e,t,r,n=!1){const a={},s={};def(s,InternalObjectKey,1),e.propsDefaults=Object.create(null),setFullProps(e,t,a,s);for(const o in e.propsOptions[0])o in a||(a[o]=void 0);r?e.props=n?a:shallowReactive(a):e.type.props?e.props=a:e.props=s,e.attrs=s}function updateProps(e,t,r,n){const{props:a,attrs:s,vnode:{patchFlag:o}}=e,l=toRaw(a),[f]=e.propsOptions;let u=!1;if((n||o>0)&&!(o&16)){if(o&8){const m=e.vnode.dynamicProps;for(let v=0;v<m.length;v++){let b=m[v];if(isEmitListener(e.emitsOptions,b))continue;const P=t[b];if(f)if(hasOwn$1(s,b))P!==s[b]&&(s[b]=P,u=!0);else{const F=camelize(b);a[F]=resolvePropValue(f,l,F,P,e,!1)}else P!==s[b]&&(s[b]=P,u=!0)}}}else{setFullProps(e,t,a,s)&&(u=!0);let m;for(const v in l)(!t||!hasOwn$1(t,v)&&((m=hyphenate(v))===v||!hasOwn$1(t,m)))&&(f?r&&(r[v]!==void 0||r[m]!==void 0)&&(a[v]=resolvePropValue(f,l,v,void 0,e,!0)):delete a[v]);if(s!==l)for(const v in s)(!t||!hasOwn$1(t,v))&&(delete s[v],u=!0)}u&&trigger(e,"set","$attrs")}function setFullProps(e,t,r,n){const[a,s]=e.propsOptions;let o=!1,l;if(t)for(let f in t){if(isReservedProp(f))continue;const u=t[f];let m;a&&hasOwn$1(a,m=camelize(f))?!s||!s.includes(m)?r[m]=u:(l||(l={}))[m]=u:isEmitListener(e.emitsOptions,f)||(!(f in n)||u!==n[f])&&(n[f]=u,o=!0)}if(s){const f=toRaw(r),u=l||EMPTY_OBJ;for(let m=0;m<s.length;m++){const v=s[m];r[v]=resolvePropValue(a,f,v,u[v],e,!hasOwn$1(u,v))}}return o}function resolvePropValue(e,t,r,n,a,s){const o=e[r];if(o!=null){const l=hasOwn$1(o,"default");if(l&&n===void 0){const f=o.default;if(o.type!==Function&&!o.skipFactory&&isFunction$4(f)){const{propsDefaults:u}=a;r in u?n=u[r]:(setCurrentInstance(a),n=u[r]=f.call(null,t),unsetCurrentInstance())}else n=f}o[0]&&(s&&!l?n=!1:o[1]&&(n===""||n===hyphenate(r))&&(n=!0))}return n}function normalizePropsOptions(e,t,r=!1){const n=t.propsCache,a=n.get(e);if(a)return a;const s=e.props,o={},l=[];let f=!1;if(!isFunction$4(e)){const m=v=>{f=!0;const[b,P]=normalizePropsOptions(v,t,!0);extend$1(o,b),P&&l.push(...P)};!r&&t.mixins.length&&t.mixins.forEach(m),e.extends&&m(e.extends),e.mixins&&e.mixins.forEach(m)}if(!s&&!f)return isObject$4(e)&&n.set(e,EMPTY_ARR),EMPTY_ARR;if(isArray$4(s))for(let m=0;m<s.length;m++){const v=camelize(s[m]);validatePropName(v)&&(o[v]=EMPTY_OBJ)}else if(s)for(const m in s){const v=camelize(m);if(validatePropName(v)){const b=s[m],P=o[v]=isArray$4(b)||isFunction$4(b)?{type:b}:extend$1({},b);if(P){const F=getTypeIndex(Boolean,P.type),C=getTypeIndex(String,P.type);P[0]=F>-1,P[1]=C<0||F<C,(F>-1||hasOwn$1(P,"default"))&&l.push(v)}}}const u=[o,l];return isObject$4(e)&&n.set(e,u),u}function validatePropName(e){return e[0]!=="$"}function getType$1(e){const t=e&&e.toString().match(/^\s*(function|class) (\w+)/);return t?t[2]:e===null?"null":""}function isSameType(e,t){return getType$1(e)===getType$1(t)}function getTypeIndex(e,t){return isArray$4(t)?t.findIndex(r=>isSameType(r,e)):isFunction$4(t)&&isSameType(t,e)?0:-1}const isInternalKey=e=>e[0]==="_"||e==="$stable",normalizeSlotValue=e=>isArray$4(e)?e.map(normalizeVNode):[normalizeVNode(e)],normalizeSlot=(e,t,r)=>{if(t._n)return t;const n=withCtx((...a)=>normalizeSlotValue(t(...a)),r);return n._c=!1,n},normalizeObjectSlots=(e,t,r)=>{const n=e._ctx;for(const a in e){if(isInternalKey(a))continue;const s=e[a];if(isFunction$4(s))t[a]=normalizeSlot(a,s,n);else if(s!=null){const o=normalizeSlotValue(s);t[a]=()=>o}}},normalizeVNodeSlots=(e,t)=>{const r=normalizeSlotValue(t);e.slots.default=()=>r},initSlots=(e,t)=>{if(e.vnode.shapeFlag&32){const r=t._;r?(e.slots=toRaw(t),def(t,"_",r)):normalizeObjectSlots(t,e.slots={})}else e.slots={},t&&normalizeVNodeSlots(e,t);def(e.slots,InternalObjectKey,1)},updateSlots=(e,t,r)=>{const{vnode:n,slots:a}=e;let s=!0,o=EMPTY_OBJ;if(n.shapeFlag&32){const l=t._;l?r&&l===1?s=!1:(extend$1(a,t),!r&&l===1&&delete a._):(s=!t.$stable,normalizeObjectSlots(t,a)),o=t}else t&&(normalizeVNodeSlots(e,t),o={default:1});if(s)for(const l in a)!isInternalKey(l)&&o[l]==null&&delete a[l]};function setRef(e,t,r,n,a=!1){if(isArray$4(e)){e.forEach((b,P)=>setRef(b,t&&(isArray$4(t)?t[P]:t),r,n,a));return}if(isAsyncWrapper(n)&&!a)return;const s=n.shapeFlag&4?getExposeProxy(n.component)||n.component.proxy:n.el,o=a?null:s,{i:l,r:f}=e,u=t&&t.r,m=l.refs===EMPTY_OBJ?l.refs={}:l.refs,v=l.setupState;if(u!=null&&u!==f&&(isString$2(u)?(m[u]=null,hasOwn$1(v,u)&&(v[u]=null)):isRef(u)&&(u.value=null)),isFunction$4(f))callWithErrorHandling(f,l,12,[o,m]);else{const b=isString$2(f),P=isRef(f);if(b||P){const F=()=>{if(e.f){const C=b?hasOwn$1(v,f)?v[f]:m[f]:f.value;a?isArray$4(C)&&remove(C,s):isArray$4(C)?C.includes(s)||C.push(s):b?(m[f]=[s],hasOwn$1(v,f)&&(v[f]=m[f])):(f.value=[s],e.k&&(m[e.k]=f.value))}else b?(m[f]=o,hasOwn$1(v,f)&&(v[f]=o)):P&&(f.value=o,e.k&&(m[e.k]=o))};o?(F.id=-1,queuePostRenderEffect(F,r)):F()}}}const queuePostRenderEffect=queueEffectWithSuspense;function createRenderer(e){return baseCreateRenderer(e)}function baseCreateRenderer(e,t){const r=getGlobalThis();r.__VUE__=!0;const{insert:n,remove:a,patchProp:s,createElement:o,createText:l,createComment:f,setText:u,setElementText:m,parentNode:v,nextSibling:b,setScopeId:P=NOOP,insertStaticContent:F}=e,C=(I,q,fe,Ae=null,G=null,N=null,B=void 0,H=null,ce=!!q.dynamicChildren)=>{if(I===q)return;I&&!isSameVNodeType(I,q)&&(Ae=L(I),Ne(I,G,N,!0),I=null),q.patchFlag===-2&&(ce=!1,q.dynamicChildren=null);const{type:ye,ref:Ee,shapeFlag:Ce}=q;switch(ye){case Text:D(I,q,fe,Ae);break;case Comment:E(I,q,fe,Ae);break;case Static:I==null&&k(q,fe,Ae,B);break;case Fragment:te(I,q,fe,Ae,G,N,B,H,ce);break;default:Ce&1?M(I,q,fe,Ae,G,N,B,H,ce):Ce&6?oe(I,q,fe,Ae,G,N,B,H,ce):(Ce&64||Ce&128)&&ye.process(I,q,fe,Ae,G,N,B,H,ce,se)}Ee!=null&&G&&setRef(Ee,I&&I.ref,N,q||I,!q)},D=(I,q,fe,Ae)=>{if(I==null)n(q.el=l(q.children),fe,Ae);else{const G=q.el=I.el;q.children!==I.children&&u(G,q.children)}},E=(I,q,fe,Ae)=>{I==null?n(q.el=f(q.children||""),fe,Ae):q.el=I.el},k=(I,q,fe,Ae)=>{[I.el,I.anchor]=F(I.children,q,fe,Ae,I.el,I.anchor)},j=({el:I,anchor:q},fe,Ae)=>{let G;for(;I&&I!==q;)G=b(I),n(I,fe,Ae),I=G;n(q,fe,Ae)},W=({el:I,anchor:q})=>{let fe;for(;I&&I!==q;)fe=b(I),a(I),I=fe;a(q)},M=(I,q,fe,Ae,G,N,B,H,ce)=>{q.type==="svg"?B="svg":q.type==="math"&&(B="mathml"),I==null?S(q,fe,Ae,G,N,B,H,ce):_(I,q,G,N,B,H,ce)},S=(I,q,fe,Ae,G,N,B,H)=>{let ce,ye;const{props:Ee,shapeFlag:Ce,transition:ge,dirs:xe}=I;if(ce=I.el=o(I.type,N,Ee&&Ee.is,Ee),Ce&8?m(ce,I.children):Ce&16&&V(I.children,ce,null,Ae,G,resolveChildrenNamespace(I,N),B,H),xe&&invokeDirectiveHook(I,null,Ae,"created"),T(ce,I,I.scopeId,B,Ae),Ee){for(const Re in Ee)Re!=="value"&&!isReservedProp(Re)&&s(ce,Re,null,Ee[Re],N,I.children,Ae,G,U);"value"in Ee&&s(ce,"value",null,Ee.value,N),(ye=Ee.onVnodeBeforeMount)&&invokeVNodeHook(ye,Ae,I)}xe&&invokeDirectiveHook(I,null,Ae,"beforeMount");const Fe=needTransition(G,ge);Fe&&ge.beforeEnter(ce),n(ce,q,fe),((ye=Ee&&Ee.onVnodeMounted)||Fe||xe)&&queuePostRenderEffect(()=>{ye&&invokeVNodeHook(ye,Ae,I),Fe&&ge.enter(ce),xe&&invokeDirectiveHook(I,null,Ae,"mounted")},G)},T=(I,q,fe,Ae,G)=>{if(fe&&P(I,fe),Ae)for(let N=0;N<Ae.length;N++)P(I,Ae[N]);if(G){let N=G.subTree;if(q===N){const B=G.vnode;T(I,B,B.scopeId,B.slotScopeIds,G.parent)}}},V=(I,q,fe,Ae,G,N,B,H,ce=0)=>{for(let ye=ce;ye<I.length;ye++){const Ee=I[ye]=H?cloneIfMounted(I[ye]):normalizeVNode(I[ye]);C(null,Ee,q,fe,Ae,G,N,B,H)}},_=(I,q,fe,Ae,G,N,B)=>{const H=q.el=I.el;let{patchFlag:ce,dynamicChildren:ye,dirs:Ee}=q;ce|=I.patchFlag&16;const Ce=I.props||EMPTY_OBJ,ge=q.props||EMPTY_OBJ;let xe;if(fe&&toggleRecurse(fe,!1),(xe=ge.onVnodeBeforeUpdate)&&invokeVNodeHook(xe,fe,q,I),Ee&&invokeDirectiveHook(q,I,fe,"beforeUpdate"),fe&&toggleRecurse(fe,!0),ye?ee(I.dynamicChildren,ye,H,fe,Ae,resolveChildrenNamespace(q,G),N):B||be(I,q,H,null,fe,Ae,resolveChildrenNamespace(q,G),N,!1),ce>0){if(ce&16)re(H,q,Ce,ge,fe,Ae,G);else if(ce&2&&Ce.class!==ge.class&&s(H,"class",null,ge.class,G),ce&4&&s(H,"style",Ce.style,ge.style,G),ce&8){const Fe=q.dynamicProps;for(let Re=0;Re<Fe.length;Re++){const Oe=Fe[Re],Me=Ce[Oe],Q=ge[Oe];(Q!==Me||Oe==="value")&&s(H,Oe,Me,Q,G,I.children,fe,Ae,U)}}ce&1&&I.children!==q.children&&m(H,q.children)}else!B&&ye==null&&re(H,q,Ce,ge,fe,Ae,G);((xe=ge.onVnodeUpdated)||Ee)&&queuePostRenderEffect(()=>{xe&&invokeVNodeHook(xe,fe,q,I),Ee&&invokeDirectiveHook(q,I,fe,"updated")},Ae)},ee=(I,q,fe,Ae,G,N,B)=>{for(let H=0;H<q.length;H++){const ce=I[H],ye=q[H],Ee=ce.el&&(ce.type===Fragment||!isSameVNodeType(ce,ye)||ce.shapeFlag&70)?v(ce.el):fe;C(ce,ye,Ee,null,Ae,G,N,B,!0)}},re=(I,q,fe,Ae,G,N,B)=>{if(fe!==Ae){if(fe!==EMPTY_OBJ)for(const H in fe)!isReservedProp(H)&&!(H in Ae)&&s(I,H,fe[H],null,B,q.children,G,N,U);for(const H in Ae){if(isReservedProp(H))continue;const ce=Ae[H],ye=fe[H];ce!==ye&&H!=="value"&&s(I,H,ye,ce,B,q.children,G,N,U)}"value"in Ae&&s(I,"value",fe.value,Ae.value,B)}},te=(I,q,fe,Ae,G,N,B,H,ce)=>{const ye=q.el=I?I.el:l(""),Ee=q.anchor=I?I.anchor:l("");let{patchFlag:Ce,dynamicChildren:ge,slotScopeIds:xe}=q;xe&&(H=H?H.concat(xe):xe),I==null?(n(ye,fe,Ae),n(Ee,fe,Ae),V(q.children,fe,Ee,G,N,B,H,ce)):Ce>0&&Ce&64&&ge&&I.dynamicChildren?(ee(I.dynamicChildren,ge,fe,G,N,B,H),(q.key!=null||G&&q===G.subTree)&&traverseStaticChildren(I,q,!0)):be(I,q,fe,Ee,G,N,B,H,ce)},oe=(I,q,fe,Ae,G,N,B,H,ce)=>{q.slotScopeIds=H,I==null?q.shapeFlag&512?G.ctx.activate(q,fe,Ae,B,ce):he(q,fe,Ae,G,N,B,ce):me(I,q,ce)},he=(I,q,fe,Ae,G,N,B)=>{const H=I.component=createComponentInstance(I,Ae,G);if(isKeepAlive(I)&&(H.ctx.renderer=se),setupComponent(H),H.asyncDep){if(G&&G.registerDep(H,we),!I.el){const ce=H.subTree=createVNode(Comment);E(null,ce,q,fe)}}else we(H,I,q,fe,G,N,B)},me=(I,q,fe)=>{const Ae=q.component=I.component;if(shouldUpdateComponent(I,q,fe))if(Ae.asyncDep&&!Ae.asyncResolved){Se(Ae,q,fe);return}else Ae.next=q,invalidateJob(Ae.update),Ae.effect.dirty=!0,Ae.update();else q.el=I.el,Ae.vnode=q},we=(I,q,fe,Ae,G,N,B)=>{const H=()=>{if(I.isMounted){let{next:Ee,bu:Ce,u:ge,parent:xe,vnode:Fe}=I;{const A=locateNonHydratedAsyncRoot(I);if(A){Ee&&(Ee.el=Fe.el,Se(I,Ee,B)),A.asyncDep.then(()=>{I.isUnmounted||H()});return}}let Re=Ee,Oe;toggleRecurse(I,!1),Ee?(Ee.el=Fe.el,Se(I,Ee,B)):Ee=Fe,Ce&&invokeArrayFns(Ce),(Oe=Ee.props&&Ee.props.onVnodeBeforeUpdate)&&invokeVNodeHook(Oe,xe,Ee,Fe),toggleRecurse(I,!0);const Me=renderComponentRoot(I),Q=I.subTree;I.subTree=Me,C(Q,Me,v(Q.el),L(Q),I,G,N),Ee.el=Me.el,Re===null&&updateHOCHostEl(I,Me.el),ge&&queuePostRenderEffect(ge,G),(Oe=Ee.props&&Ee.props.onVnodeUpdated)&&queuePostRenderEffect(()=>invokeVNodeHook(Oe,xe,Ee,Fe),G)}else{let Ee;const{el:Ce,props:ge}=q,{bm:xe,m:Fe,parent:Re}=I,Oe=isAsyncWrapper(q);if(toggleRecurse(I,!1),xe&&invokeArrayFns(xe),!Oe&&(Ee=ge&&ge.onVnodeBeforeMount)&&invokeVNodeHook(Ee,Re,q),toggleRecurse(I,!0),Ce&&Z){const Me=()=>{I.subTree=renderComponentRoot(I),Z(Ce,I.subTree,I,G,null)};Oe?q.type.__asyncLoader().then(()=>!I.isUnmounted&&Me()):Me()}else{const Me=I.subTree=renderComponentRoot(I);C(null,Me,fe,Ae,I,G,N),q.el=Me.el}if(Fe&&queuePostRenderEffect(Fe,G),!Oe&&(Ee=ge&&ge.onVnodeMounted)){const Me=q;queuePostRenderEffect(()=>invokeVNodeHook(Ee,Re,Me),G)}(q.shapeFlag&256||Re&&isAsyncWrapper(Re.vnode)&&Re.vnode.shapeFlag&256)&&I.a&&queuePostRenderEffect(I.a,G),I.isMounted=!0,q=fe=Ae=null}},ce=I.effect=new ReactiveEffect(H,NOOP,()=>queueJob(ye),I.scope),ye=I.update=()=>{ce.dirty&&ce.run()};ye.id=I.uid,toggleRecurse(I,!0),ye()},Se=(I,q,fe)=>{q.component=I;const Ae=I.vnode.props;I.vnode=q,I.next=null,updateProps(I,q.props,Ae,fe),updateSlots(I,q.children,fe),pauseTracking(),flushPreFlushCbs(I),resetTracking()},be=(I,q,fe,Ae,G,N,B,H,ce=!1)=>{const ye=I&&I.children,Ee=I?I.shapeFlag:0,Ce=q.children,{patchFlag:ge,shapeFlag:xe}=q;if(ge>0){if(ge&128){ae(ye,Ce,fe,Ae,G,N,B,H,ce);return}else if(ge&256){le(ye,Ce,fe,Ae,G,N,B,H,ce);return}}xe&8?(Ee&16&&U(ye,G,N),Ce!==ye&&m(fe,Ce)):Ee&16?xe&16?ae(ye,Ce,fe,Ae,G,N,B,H,ce):U(ye,G,N,!0):(Ee&8&&m(fe,""),xe&16&&V(Ce,fe,Ae,G,N,B,H,ce))},le=(I,q,fe,Ae,G,N,B,H,ce)=>{I=I||EMPTY_ARR,q=q||EMPTY_ARR;const ye=I.length,Ee=q.length,Ce=Math.min(ye,Ee);let ge;for(ge=0;ge<Ce;ge++){const xe=q[ge]=ce?cloneIfMounted(q[ge]):normalizeVNode(q[ge]);C(I[ge],xe,fe,null,G,N,B,H,ce)}ye>Ee?U(I,G,N,!0,!1,Ce):V(q,fe,Ae,G,N,B,H,ce,Ce)},ae=(I,q,fe,Ae,G,N,B,H,ce)=>{let ye=0;const Ee=q.length;let Ce=I.length-1,ge=Ee-1;for(;ye<=Ce&&ye<=ge;){const xe=I[ye],Fe=q[ye]=ce?cloneIfMounted(q[ye]):normalizeVNode(q[ye]);if(isSameVNodeType(xe,Fe))C(xe,Fe,fe,null,G,N,B,H,ce);else break;ye++}for(;ye<=Ce&&ye<=ge;){const xe=I[Ce],Fe=q[ge]=ce?cloneIfMounted(q[ge]):normalizeVNode(q[ge]);if(isSameVNodeType(xe,Fe))C(xe,Fe,fe,null,G,N,B,H,ce);else break;Ce--,ge--}if(ye>Ce){if(ye<=ge){const xe=ge+1,Fe=xe<Ee?q[xe].el:Ae;for(;ye<=ge;)C(null,q[ye]=ce?cloneIfMounted(q[ye]):normalizeVNode(q[ye]),fe,Fe,G,N,B,H,ce),ye++}}else if(ye>ge)for(;ye<=Ce;)Ne(I[ye],G,N,!0),ye++;else{const xe=ye,Fe=ye,Re=new Map;for(ye=Fe;ye<=ge;ye++){const ne=q[ye]=ce?cloneIfMounted(q[ye]):normalizeVNode(q[ye]);ne.key!=null&&Re.set(ne.key,ye)}let Oe,Me=0;const Q=ge-Fe+1;let A=!1,O=0;const X=new Array(Q);for(ye=0;ye<Q;ye++)X[ye]=0;for(ye=xe;ye<=Ce;ye++){const ne=I[ye];if(Me>=Q){Ne(ne,G,N,!0);continue}let Pe;if(ne.key!=null)Pe=Re.get(ne.key);else for(Oe=Fe;Oe<=ge;Oe++)if(X[Oe-Fe]===0&&isSameVNodeType(ne,q[Oe])){Pe=Oe;break}Pe===void 0?Ne(ne,G,N,!0):(X[Pe-Fe]=ye+1,Pe>=O?O=Pe:A=!0,C(ne,q[Pe],fe,null,G,N,B,H,ce),Me++)}const pe=A?getSequence(X):EMPTY_ARR;for(Oe=pe.length-1,ye=Q-1;ye>=0;ye--){const ne=Fe+ye,Pe=q[ne],K=ne+1<Ee?q[ne+1].el:Ae;X[ye]===0?C(null,Pe,fe,K,G,N,B,H,ce):A&&(Oe<0||ye!==pe[Oe]?ke(Pe,fe,K,2):Oe--)}}},ke=(I,q,fe,Ae,G=null)=>{const{el:N,type:B,transition:H,children:ce,shapeFlag:ye}=I;if(ye&6){ke(I.component.subTree,q,fe,Ae);return}if(ye&128){I.suspense.move(q,fe,Ae);return}if(ye&64){B.move(I,q,fe,se);return}if(B===Fragment){n(N,q,fe);for(let Ce=0;Ce<ce.length;Ce++)ke(ce[Ce],q,fe,Ae);n(I.anchor,q,fe);return}if(B===Static){j(I,q,fe);return}if(Ae!==2&&ye&1&&H)if(Ae===0)H.beforeEnter(N),n(N,q,fe),queuePostRenderEffect(()=>H.enter(N),G);else{const{leave:Ce,delayLeave:ge,afterLeave:xe}=H,Fe=()=>n(N,q,fe),Re=()=>{Ce(N,()=>{Fe(),xe&&xe()})};ge?ge(N,Fe,Re):Re()}else n(N,q,fe)},Ne=(I,q,fe,Ae=!1,G=!1)=>{const{type:N,props:B,ref:H,children:ce,dynamicChildren:ye,shapeFlag:Ee,patchFlag:Ce,dirs:ge}=I;if(H!=null&&setRef(H,null,fe,I,!0),Ee&256){q.ctx.deactivate(I);return}const xe=Ee&1&&ge,Fe=!isAsyncWrapper(I);let Re;if(Fe&&(Re=B&&B.onVnodeBeforeUnmount)&&invokeVNodeHook(Re,q,I),Ee&6)ie(I.component,fe,Ae);else{if(Ee&128){I.suspense.unmount(fe,Ae);return}xe&&invokeDirectiveHook(I,null,q,"beforeUnmount"),Ee&64?I.type.remove(I,q,fe,G,se,Ae):ye&&(N!==Fragment||Ce>0&&Ce&64)?U(ye,q,fe,!1,!0):(N===Fragment&&Ce&384||!G&&Ee&16)&&U(ce,q,fe),Ae&&de(I)}(Fe&&(Re=B&&B.onVnodeUnmounted)||xe)&&queuePostRenderEffect(()=>{Re&&invokeVNodeHook(Re,q,I),xe&&invokeDirectiveHook(I,null,q,"unmounted")},fe)},de=I=>{const{type:q,el:fe,anchor:Ae,transition:G}=I;if(q===Fragment){$(fe,Ae);return}if(q===Static){W(I);return}const N=()=>{a(fe),G&&!G.persisted&&G.afterLeave&&G.afterLeave()};if(I.shapeFlag&1&&G&&!G.persisted){const{leave:B,delayLeave:H}=G,ce=()=>B(fe,N);H?H(I.el,N,ce):ce()}else N()},$=(I,q)=>{let fe;for(;I!==q;)fe=b(I),a(I),I=fe;a(q)},ie=(I,q,fe)=>{const{bum:Ae,scope:G,update:N,subTree:B,um:H}=I;Ae&&invokeArrayFns(Ae),G.stop(),N&&(N.active=!1,Ne(B,I,q,fe)),H&&queuePostRenderEffect(H,q),queuePostRenderEffect(()=>{I.isUnmounted=!0},q),q&&q.pendingBranch&&!q.isUnmounted&&I.asyncDep&&!I.asyncResolved&&I.suspenseId===q.pendingId&&(q.deps--,q.deps===0&&q.resolve())},U=(I,q,fe,Ae=!1,G=!1,N=0)=>{for(let B=N;B<I.length;B++)Ne(I[B],q,fe,Ae,G)},L=I=>I.shapeFlag&6?L(I.component.subTree):I.shapeFlag&128?I.suspense.next():b(I.anchor||I.el),J=(I,q,fe)=>{I==null?q._vnode&&Ne(q._vnode,null,null,!0):C(q._vnode||null,I,q,null,null,null,fe),flushPreFlushCbs(),flushPostFlushCbs(),q._vnode=I},se={p:C,um:Ne,m:ke,r:de,mt:he,mc:V,pc:be,pbc:ee,n:L,o:e};let ve,Z;return t&&([ve,Z]=t(se)),{render:J,hydrate:ve,createApp:createAppAPI(J,ve)}}function resolveChildrenNamespace({type:e,props:t},r){return r==="svg"&&e==="foreignObject"||r==="mathml"&&e==="annotation-xml"&&t&&t.encoding&&t.encoding.includes("html")?void 0:r}function toggleRecurse({effect:e,update:t},r){e.allowRecurse=t.allowRecurse=r}function needTransition(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function traverseStaticChildren(e,t,r=!1){const n=e.children,a=t.children;if(isArray$4(n)&&isArray$4(a))for(let s=0;s<n.length;s++){const o=n[s];let l=a[s];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=a[s]=cloneIfMounted(a[s]),l.el=o.el),r||traverseStaticChildren(o,l)),l.type===Text&&(l.el=o.el)}}function getSequence(e){const t=e.slice(),r=[0];let n,a,s,o,l;const f=e.length;for(n=0;n<f;n++){const u=e[n];if(u!==0){if(a=r[r.length-1],e[a]<u){t[n]=a,r.push(n);continue}for(s=0,o=r.length-1;s<o;)l=s+o>>1,e[r[l]]<u?s=l+1:o=l;u<e[r[s]]&&(s>0&&(t[n]=r[s-1]),r[s]=n)}}for(s=r.length,o=r[s-1];s-- >0;)r[s]=o,o=t[o];return r}function locateNonHydratedAsyncRoot(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:locateNonHydratedAsyncRoot(t)}const isTeleport=e=>e.__isTeleport,Fragment=Symbol.for("v-fgt"),Text=Symbol.for("v-txt"),Comment=Symbol.for("v-cmt"),Static=Symbol.for("v-stc"),blockStack=[];let currentBlock=null;function openBlock(e=!1){blockStack.push(currentBlock=e?null:[])}function closeBlock(){blockStack.pop(),currentBlock=blockStack[blockStack.length-1]||null}let isBlockTreeEnabled=1;function setBlockTracking(e){isBlockTreeEnabled+=e}function setupBlock(e){return e.dynamicChildren=isBlockTreeEnabled>0?currentBlock||EMPTY_ARR:null,closeBlock(),isBlockTreeEnabled>0&&currentBlock&&currentBlock.push(e),e}function createElementBlock(e,t,r,n,a,s){return setupBlock(createBaseVNode(e,t,r,n,a,s,!0))}function createBlock(e,t,r,n,a){return setupBlock(createVNode(e,t,r,n,a,!0))}function isVNode(e){return e?e.__v_isVNode===!0:!1}function isSameVNodeType(e,t){return e.type===t.type&&e.key===t.key}const InternalObjectKey="__vInternal",normalizeKey=({key:e})=>e??null,normalizeRef=({ref:e,ref_key:t,ref_for:r})=>(typeof e=="number"&&(e=""+e),e!=null?isString$2(e)||isRef(e)||isFunction$4(e)?{i:currentRenderingInstance,r:e,k:t,f:!!r}:e:null);function createBaseVNode(e,t=null,r=null,n=0,a=null,s=e===Fragment?0:1,o=!1,l=!1){const f={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&normalizeKey(t),ref:t&&normalizeRef(t),scopeId:currentScopeId,slotScopeIds:null,children:r,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:n,dynamicProps:a,dynamicChildren:null,appContext:null,ctx:currentRenderingInstance};return l?(normalizeChildren(f,r),s&128&&e.normalize(f)):r&&(f.shapeFlag|=isString$2(r)?8:16),isBlockTreeEnabled>0&&!o&&currentBlock&&(f.patchFlag>0||s&6)&&f.patchFlag!==32&&currentBlock.push(f),f}const createVNode=_createVNode;function _createVNode(e,t=null,r=null,n=0,a=null,s=!1){if((!e||e===NULL_DYNAMIC_COMPONENT)&&(e=Comment),isVNode(e)){const l=cloneVNode(e,t,!0);return r&&normalizeChildren(l,r),isBlockTreeEnabled>0&&!s&&currentBlock&&(l.shapeFlag&6?currentBlock[currentBlock.indexOf(e)]=l:currentBlock.push(l)),l.patchFlag|=-2,l}if(isClassComponent(e)&&(e=e.__vccOpts),t){t=guardReactiveProps(t);let{class:l,style:f}=t;l&&!isString$2(l)&&(t.class=normalizeClass(l)),isObject$4(f)&&(isProxy(f)&&!isArray$4(f)&&(f=extend$1({},f)),t.style=normalizeStyle(f))}const o=isString$2(e)?1:isSuspense(e)?128:isTeleport(e)?64:isObject$4(e)?4:isFunction$4(e)?2:0;return createBaseVNode(e,t,r,n,a,o,s,!0)}function guardReactiveProps(e){return e?isProxy(e)||InternalObjectKey in e?extend$1({},e):e:null}function cloneVNode(e,t,r=!1){const{props:n,ref:a,patchFlag:s,children:o}=e,l=t?mergeProps(n||{},t):n;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&normalizeKey(l),ref:t&&t.ref?r&&a?isArray$4(a)?a.concat(normalizeRef(t)):[a,normalizeRef(t)]:normalizeRef(t):a,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Fragment?s===-1?16:s|16:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&cloneVNode(e.ssContent),ssFallback:e.ssFallback&&cloneVNode(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function createTextVNode(e=" ",t=0){return createVNode(Text,null,e,t)}function createCommentVNode(e="",t=!1){return t?(openBlock(),createBlock(Comment,null,e)):createVNode(Comment,null,e)}function normalizeVNode(e){return e==null||typeof e=="boolean"?createVNode(Comment):isArray$4(e)?createVNode(Fragment,null,e.slice()):typeof e=="object"?cloneIfMounted(e):createVNode(Text,null,String(e))}function cloneIfMounted(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:cloneVNode(e)}function normalizeChildren(e,t){let r=0;const{shapeFlag:n}=e;if(t==null)t=null;else if(isArray$4(t))r=16;else if(typeof t=="object")if(n&65){const a=t.default;a&&(a._c&&(a._d=!1),normalizeChildren(e,a()),a._c&&(a._d=!0));return}else{r=32;const a=t._;!a&&!(InternalObjectKey in t)?t._ctx=currentRenderingInstance:a===3&&currentRenderingInstance&&(currentRenderingInstance.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else isFunction$4(t)?(t={default:t,_ctx:currentRenderingInstance},r=32):(t=String(t),n&64?(r=16,t=[createTextVNode(t)]):r=8);e.children=t,e.shapeFlag|=r}function mergeProps(...e){const t={};for(let r=0;r<e.length;r++){const n=e[r];for(const a in n)if(a==="class")t.class!==n.class&&(t.class=normalizeClass([t.class,n.class]));else if(a==="style")t.style=normalizeStyle([t.style,n.style]);else if(isOn(a)){const s=t[a],o=n[a];o&&s!==o&&!(isArray$4(s)&&s.includes(o))&&(t[a]=s?[].concat(s,o):o)}else a!==""&&(t[a]=n[a])}return t}function invokeVNodeHook(e,t,r,n=null){callWithAsyncErrorHandling(e,t,7,[r,n])}const emptyAppContext=createAppContext();let uid=0;function createComponentInstance(e,t,r){const n=e.type,a=(t?t.appContext:e.appContext)||emptyAppContext,s={uid:uid++,vnode:e,type:n,parent:t,appContext:a,root:null,next:null,subTree:null,effect:null,update:null,scope:new EffectScope(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(a.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:normalizePropsOptions(n,a),emitsOptions:normalizeEmitsOptions(n,a),emit:null,emitted:null,propsDefaults:EMPTY_OBJ,inheritAttrs:n.inheritAttrs,ctx:EMPTY_OBJ,data:EMPTY_OBJ,props:EMPTY_OBJ,attrs:EMPTY_OBJ,slots:EMPTY_OBJ,refs:EMPTY_OBJ,setupState:EMPTY_OBJ,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:r,suspenseId:r?r.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=emit.bind(null,s),e.ce&&e.ce(s),s}let currentInstance=null;const getCurrentInstance=()=>currentInstance||currentRenderingInstance;let internalSetCurrentInstance,setInSSRSetupState;{const e=getGlobalThis(),t=(r,n)=>{let a;return(a=e[r])||(a=e[r]=[]),a.push(n),s=>{a.length>1?a.forEach(o=>o(s)):a[0](s)}};internalSetCurrentInstance=t("__VUE_INSTANCE_SETTERS__",r=>currentInstance=r),setInSSRSetupState=t("__VUE_SSR_SETTERS__",r=>isInSSRComponentSetup=r)}const setCurrentInstance=e=>{internalSetCurrentInstance(e),e.scope.on()},unsetCurrentInstance=()=>{currentInstance&&currentInstance.scope.off(),internalSetCurrentInstance(null)};function isStatefulComponent(e){return e.vnode.shapeFlag&4}let isInSSRComponentSetup=!1;function setupComponent(e,t=!1){t&&setInSSRSetupState(t);const{props:r,children:n}=e.vnode,a=isStatefulComponent(e);initProps(e,r,a,t),initSlots(e,n);const s=a?setupStatefulComponent(e,t):void 0;return t&&setInSSRSetupState(!1),s}function setupStatefulComponent(e,t){const r=e.type;e.accessCache=Object.create(null),e.proxy=markRaw(new Proxy(e.ctx,PublicInstanceProxyHandlers));const{setup:n}=r;if(n){const a=e.setupContext=n.length>1?createSetupContext(e):null;setCurrentInstance(e),pauseTracking();const s=callWithErrorHandling(n,e,0,[e.props,a]);if(resetTracking(),unsetCurrentInstance(),isPromise(s)){if(s.then(unsetCurrentInstance,unsetCurrentInstance),t)return s.then(o=>{handleSetupResult(e,o,t)}).catch(o=>{handleError(o,e,0)});e.asyncDep=s}else handleSetupResult(e,s,t)}else finishComponentSetup(e,t)}function handleSetupResult(e,t,r){isFunction$4(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:isObject$4(t)&&(e.setupState=proxyRefs(t)),finishComponentSetup(e,r)}let compile;function finishComponentSetup(e,t,r){const n=e.type;if(!e.render){if(!t&&compile&&!n.render){const a=n.template||resolveMergedOptions(e).template;if(a){const{isCustomElement:s,compilerOptions:o}=e.appContext.config,{delimiters:l,compilerOptions:f}=n,u=extend$1(extend$1({isCustomElement:s,delimiters:l},o),f);n.render=compile(a,u)}}e.render=n.render||NOOP}{setCurrentInstance(e),pauseTracking();try{applyOptions(e)}finally{resetTracking(),unsetCurrentInstance()}}}function getAttrsProxy(e){return e.attrsProxy||(e.attrsProxy=new Proxy(e.attrs,{get(t,r){return track(e,"get","$attrs"),t[r]}}))}function createSetupContext(e){const t=r=>{e.exposed=r||{}};return{get attrs(){return getAttrsProxy(e)},slots:e.slots,emit:e.emit,expose:t}}function getExposeProxy(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(proxyRefs(markRaw(e.exposed)),{get(t,r){if(r in t)return t[r];if(r in publicPropertiesMap)return publicPropertiesMap[r](e)},has(t,r){return r in t||r in publicPropertiesMap}}))}const classifyRE=/(?:^|[-_])(\w)/g,classify=e=>e.replace(classifyRE,t=>t.toUpperCase()).replace(/[-_]/g,"");function getComponentName(e,t=!0){return isFunction$4(e)?e.displayName||e.name:e.name||t&&e.__name}function formatComponentName(e,t,r=!1){let n=getComponentName(t);if(!n&&t.__file){const a=t.__file.match(/([^/\\]+)\.\w+$/);a&&(n=a[1])}if(!n&&e&&e.parent){const a=s=>{for(const o in s)if(s[o]===t)return o};n=a(e.components||e.parent.type.components)||a(e.appContext.components)}return n?classify(n):r?"App":"Anonymous"}function isClassComponent(e){return isFunction$4(e)&&"__vccOpts"in e}const computed=(e,t)=>computed$1(e,t,isInSSRComponentSetup);function h(e,t,r){const n=arguments.length;return n===2?isObject$4(t)&&!isArray$4(t)?isVNode(t)?createVNode(e,null,[t]):createVNode(e,t):createVNode(e,null,t):(n>3?r=Array.prototype.slice.call(arguments,2):n===3&&isVNode(r)&&(r=[r]),createVNode(e,t,r))}const ssrContextKey=Symbol.for("v-scx"),useSSRContext=()=>inject(ssrContextKey),version="3.4.0",svgNS="http://www.w3.org/2000/svg",mathmlNS="http://www.w3.org/1998/Math/MathML",doc=typeof document<"u"?document:null,templateContainer=doc&&doc.createElement("template"),nodeOps={insert:(e,t,r)=>{t.insertBefore(e,r||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,r,n)=>{const a=t==="svg"?doc.createElementNS(svgNS,e):t==="mathml"?doc.createElementNS(mathmlNS,e):doc.createElement(e,r?{is:r}:void 0);return e==="select"&&n&&n.multiple!=null&&a.setAttribute("multiple",n.multiple),a},createText:e=>doc.createTextNode(e),createComment:e=>doc.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>doc.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,r,n,a,s){const o=r?r.previousSibling:t.lastChild;if(a&&(a===s||a.nextSibling))for(;t.insertBefore(a.cloneNode(!0),r),!(a===s||!(a=a.nextSibling)););else{templateContainer.innerHTML=n==="svg"?`<svg>${e}</svg>`:n==="mathml"?`<math>${e}</math>`:e;const l=templateContainer.content;if(n==="svg"||n==="mathml"){const f=l.firstChild;for(;f.firstChild;)l.appendChild(f.firstChild);l.removeChild(f)}t.insertBefore(l,r)}return[o?o.nextSibling:t.firstChild,r?r.previousSibling:t.lastChild]}},vtcKey=Symbol("_vtc");function patchClass(e,t,r){const n=e[vtcKey];n&&(t=(t?[t,...n]:[...n]).join(" ")),t==null?e.removeAttribute("class"):r?e.setAttribute("class",t):e.className=t}const vShowOldKey=Symbol("_vod"),vShow={beforeMount(e,{value:t},{transition:r}){e[vShowOldKey]=e.style.display==="none"?"":e.style.display,r&&t?r.beforeEnter(e):setDisplay(e,t)},mounted(e,{value:t},{transition:r}){r&&t&&r.enter(e)},updated(e,{value:t,oldValue:r},{transition:n}){!t!=!r&&(n?t?(n.beforeEnter(e),setDisplay(e,!0),n.enter(e)):n.leave(e,()=>{setDisplay(e,!1)}):setDisplay(e,t))},beforeUnmount(e,{value:t}){setDisplay(e,t)}};function setDisplay(e,t){e.style.display=t?e[vShowOldKey]:"none"}const CSS_VAR_TEXT=Symbol("");function patchStyle(e,t,r){const n=e.style,a=isString$2(r);if(r&&!a){if(t&&!isString$2(t))for(const s in t)r[s]==null&&setStyle(n,s,"");for(const s in r)setStyle(n,s,r[s])}else{const s=n.display;if(a){if(t!==r){const o=n[CSS_VAR_TEXT];o&&(r+=";"+o),n.cssText=r}}else t&&e.removeAttribute("style");vShowOldKey in e&&(n.display=s)}}const importantRE=/\s*!important$/;function setStyle(e,t,r){if(isArray$4(r))r.forEach(n=>setStyle(e,t,n));else if(r==null&&(r=""),t.startsWith("--"))e.setProperty(t,r);else{const n=autoPrefix(e,t);importantRE.test(r)?e.setProperty(hyphenate(n),r.replace(importantRE,""),"important"):e[n]=r}}const prefixes=["Webkit","Moz","ms"],prefixCache={};function autoPrefix(e,t){const r=prefixCache[t];if(r)return r;let n=camelize(t);if(n!=="filter"&&n in e)return prefixCache[t]=n;n=capitalize(n);for(let a=0;a<prefixes.length;a++){const s=prefixes[a]+n;if(s in e)return prefixCache[t]=s}return t}const xlinkNS="http://www.w3.org/1999/xlink";function patchAttr(e,t,r,n,a){if(n&&t.startsWith("xlink:"))r==null?e.removeAttributeNS(xlinkNS,t.slice(6,t.length)):e.setAttributeNS(xlinkNS,t,r);else{const s=isSpecialBooleanAttr(t);r==null||s&&!includeBooleanAttr(r)?e.removeAttribute(t):e.setAttribute(t,s?"":r)}}function patchDOMProp(e,t,r,n,a,s,o){if(t==="innerHTML"||t==="textContent"){n&&o(n,a,s),e[t]=r??"";return}const l=e.tagName;if(t==="value"&&l!=="PROGRESS"&&!l.includes("-")){e._value=r;const u=l==="OPTION"?e.getAttribute("value"):e.value,m=r??"";u!==m&&(e.value=m),r==null&&e.removeAttribute(t);return}let f=!1;if(r===""||r==null){const u=typeof e[t];u==="boolean"?r=includeBooleanAttr(r):r==null&&u==="string"?(r="",f=!0):u==="number"&&(r=0,f=!0)}try{e[t]=r}catch{}f&&e.removeAttribute(t)}function addEventListener(e,t,r,n){e.addEventListener(t,r,n)}function removeEventListener(e,t,r,n){e.removeEventListener(t,r,n)}const veiKey=Symbol("_vei");function patchEvent(e,t,r,n,a=null){const s=e[veiKey]||(e[veiKey]={}),o=s[t];if(n&&o)o.value=n;else{const[l,f]=parseName(t);if(n){const u=s[t]=createInvoker(n,a);addEventListener(e,l,u,f)}else o&&(removeEventListener(e,l,o,f),s[t]=void 0)}}const optionsModifierRE=/(?:Once|Passive|Capture)$/;function parseName(e){let t;if(optionsModifierRE.test(e)){t={};let n;for(;n=e.match(optionsModifierRE);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):hyphenate(e.slice(2)),t]}let cachedNow=0;const p$1=Promise.resolve(),getNow=()=>cachedNow||(p$1.then(()=>cachedNow=0),cachedNow=Date.now());function createInvoker(e,t){const r=n=>{if(!n._vts)n._vts=Date.now();else if(n._vts<=r.attached)return;callWithAsyncErrorHandling(patchStopImmediatePropagation(n,r.value),t,5,[n])};return r.value=e,r.attached=getNow(),r}function patchStopImmediatePropagation(e,t){if(isArray$4(t)){const r=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{r.call(e),e._stopped=!0},t.map(n=>a=>!a._stopped&&n&&n(a))}else return t}const isNativeOn=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,patchProp=(e,t,r,n,a,s,o,l,f)=>{const u=a==="svg";t==="class"?patchClass(e,n,u):t==="style"?patchStyle(e,r,n):isOn(t)?isModelListener(t)||patchEvent(e,t,r,n,o):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):shouldSetAsProp(e,t,n,u))?patchDOMProp(e,t,n,s,o,l,f):(t==="true-value"?e._trueValue=n:t==="false-value"&&(e._falseValue=n),patchAttr(e,t,n,u))};function shouldSetAsProp(e,t,r,n){if(n)return!!(t==="innerHTML"||t==="textContent"||t in e&&isNativeOn(t)&&isFunction$4(r));if(t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA")return!1;if(t==="width"||t==="height"){const a=e.tagName;if(a==="IMG"||a==="VIDEO"||a==="CANVAS"||a==="SOURCE")return!1}return isNativeOn(t)&&isString$2(r)?!1:t in e}const getModelAssigner=e=>{const t=e.props["onUpdate:modelValue"]||!1;return isArray$4(t)?r=>invokeArrayFns(t,r):t};function onCompositionStart(e){e.target.composing=!0}function onCompositionEnd(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const assignKey=Symbol("_assign"),vModelText={created(e,{modifiers:{lazy:t,trim:r,number:n}},a){e[assignKey]=getModelAssigner(a);const s=n||a.props&&a.props.type==="number";addEventListener(e,t?"change":"input",o=>{if(o.target.composing)return;let l=e.value;r&&(l=l.trim()),s&&(l=looseToNumber(l)),e[assignKey](l)}),r&&addEventListener(e,"change",()=>{e.value=e.value.trim()}),t||(addEventListener(e,"compositionstart",onCompositionStart),addEventListener(e,"compositionend",onCompositionEnd),addEventListener(e,"change",onCompositionEnd))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,modifiers:{lazy:r,trim:n,number:a}},s){if(e[assignKey]=getModelAssigner(s),e.composing)return;const o=a||e.type==="number"?looseToNumber(e.value):e.value,l=t??"";o!==l&&(document.activeElement===e&&e.type!=="range"&&(r||n&&e.value.trim()===l)||(e.value=l))}},vModelCheckbox={deep:!0,created(e,t,r){e[assignKey]=getModelAssigner(r),addEventListener(e,"change",()=>{const n=e._modelValue,a=getValue$2(e),s=e.checked,o=e[assignKey];if(isArray$4(n)){const l=looseIndexOf(n,a),f=l!==-1;if(s&&!f)o(n.concat(a));else if(!s&&f){const u=[...n];u.splice(l,1),o(u)}}else if(isSet(n)){const l=new Set(n);s?l.add(a):l.delete(a),o(l)}else o(getCheckboxValue(e,s))})},mounted:setChecked,beforeUpdate(e,t,r){e[assignKey]=getModelAssigner(r),setChecked(e,t,r)}};function setChecked(e,{value:t,oldValue:r},n){e._modelValue=t,isArray$4(t)?e.checked=looseIndexOf(t,n.props.value)>-1:isSet(t)?e.checked=t.has(n.props.value):t!==r&&(e.checked=looseEqual(t,getCheckboxValue(e,!0)))}const vModelRadio={created(e,{value:t},r){e.checked=looseEqual(t,r.props.value),e[assignKey]=getModelAssigner(r),addEventListener(e,"change",()=>{e[assignKey](getValue$2(e))})},beforeUpdate(e,{value:t,oldValue:r},n){e[assignKey]=getModelAssigner(n),t!==r&&(e.checked=looseEqual(t,n.props.value))}},vModelSelect={deep:!0,created(e,{value:t,modifiers:{number:r}},n){const a=isSet(t);addEventListener(e,"change",()=>{const s=Array.prototype.filter.call(e.options,o=>o.selected).map(o=>r?looseToNumber(getValue$2(o)):getValue$2(o));e[assignKey](e.multiple?a?new Set(s):s:s[0])}),e[assignKey]=getModelAssigner(n)},mounted(e,{value:t}){setSelected(e,t)},beforeUpdate(e,t,r){e[assignKey]=getModelAssigner(r)},updated(e,{value:t}){setSelected(e,t)}};function setSelected(e,t){const r=e.multiple;if(!(r&&!isArray$4(t)&&!isSet(t))){for(let n=0,a=e.options.length;n<a;n++){const s=e.options[n],o=getValue$2(s);if(r)isArray$4(t)?s.selected=looseIndexOf(t,o)>-1:s.selected=t.has(o);else if(looseEqual(getValue$2(s),t)){e.selectedIndex!==n&&(e.selectedIndex=n);return}}!r&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}}function getValue$2(e){return"_value"in e?e._value:e.value}function getCheckboxValue(e,t){const r=t?"_trueValue":"_falseValue";return r in e?e[r]:t}const vModelDynamic={created(e,t,r){callModelHook(e,t,r,null,"created")},mounted(e,t,r){callModelHook(e,t,r,null,"mounted")},beforeUpdate(e,t,r,n){callModelHook(e,t,r,n,"beforeUpdate")},updated(e,t,r,n){callModelHook(e,t,r,n,"updated")}};function resolveDynamicModel(e,t){switch(e){case"SELECT":return vModelSelect;case"TEXTAREA":return vModelText;default:switch(t){case"checkbox":return vModelCheckbox;case"radio":return vModelRadio;default:return vModelText}}}function callModelHook(e,t,r,n,a){const o=resolveDynamicModel(e.tagName,r.props&&r.props.type)[a];o&&o(e,t,r,n)}const systemModifiers=["ctrl","shift","alt","meta"],modifierGuards={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>systemModifiers.some(r=>e[`${r}Key`]&&!t.includes(r))},withModifiers=(e,t)=>{const r=e._withMods||(e._withMods={}),n=t.join(".");return r[n]||(r[n]=(a,...s)=>{for(let o=0;o<t.length;o++){const l=modifierGuards[t[o]];if(l&&l(a,t))return}return e(a,...s)})},keyNames={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},withKeys=(e,t)=>{const r=e._withKeys||(e._withKeys={}),n=t.join(".");return r[n]||(r[n]=a=>{if(!("key"in a))return;const s=hyphenate(a.key);if(t.some(o=>o===s||keyNames[o]===s))return e(a)})},rendererOptions=extend$1({patchProp},nodeOps);let renderer;function ensureRenderer(){return renderer||(renderer=createRenderer(rendererOptions))}const createApp=(...e)=>{const t=ensureRenderer().createApp(...e),{mount:r}=t;return t.mount=n=>{const a=normalizeContainer(n);if(!a)return;const s=t._component;!isFunction$4(s)&&!s.render&&!s.template&&(s.template=a.innerHTML),a.innerHTML="";const o=r(a,!1,resolveRootNamespace(a));return a instanceof Element&&(a.removeAttribute("v-cloak"),a.setAttribute("data-v-app","")),o},t};function resolveRootNamespace(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function normalizeContainer(e){return isString$2(e)?document.querySelector(e):e}var __defProp$2=Object.defineProperty,__defNormalProp$2=(e,t,r)=>t in e?__defProp$2(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,__publicField$1=(e,t,r)=>(__defNormalProp$2(e,typeof t!="symbol"?t+"":t,r),r),_a,_b;const proto$2$1=String.prototype;proto$2$1.capitalize=function(){return`${this[0].toUpperCase()}${this.substring(1).toLowerCase()}`};proto$2$1.equals=function(e){return this.toLowerCase()===(e==null?void 0:e.toLowerCase())};let Enum$2=class{constructor(t,r=!0){Array.isArray(t)?t.forEach((n,a)=>{const s=this.valueToKey(n);r?this[s]=a:this[s]=n}):Object.assign(this,t)}valueToKey(t){return String(t).split(/(?=[A-Z])|-/).map(r=>r.capitalize()).join("")}get count(){return this.keys.length}get keys(){return Object.keys(this)}get values(){return Object.keys(this).map(t=>this[t])}get options(){return Object.keys(this).map(t=>({id:this[t],value:t}))}toString(){const t=[];return Object.keys(this).forEach(n=>{const a=typeof this[n];t.push(`* @property {${a.capitalize()}} ${n}`)}),`/**
`+t.join(`
`)+`
 */`}};const Month$1=new Enum$2(["January","February","March","April","May","June","July","August","September","October","November","December"]),Weekday$1=new Enum$2(["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]),proto$1$1=Date.prototype,TotalMonths$1=Month$1.count,TotalDays$1=Weekday$1.count;proto$1$1.getWeekStart=function(e={}){const{year:t=this.getFullYear(),yearOffset:r=0,month:n=this.getMonth(),dateOffset:a=0,isEnd:s=!1,startingDay:o=Weekday$1.Monday,isWeek:l=!0}=e;let{monthOffset:f=0,date:u=this.getDate()}=e;!l&&s&&(f=1,u=0);const m=new Date(t+r,n+f,u+a);if(l){const v=m.getDay();o<v?m.setDate(m.getDate()-(v-o)):o>v&&m.setDate(m.getDate()-(v+(TotalDays$1-o))),s&&m.setDate(m.getDate()+Weekday$1.Saturday)}return m};proto$1$1.getMonthStart=function(e={}){return e.isWeek=e.isWeek||!1,e.date=1,this.getWeekStart(e)};proto$1$1.getMonthEnd=function(e={}){return e.isEnd=!0,this.getMonthStart(e)};proto$1$1.getYearStart=function(e={}){return e.month=Month$1.January,this.getMonthStart(e)};proto$1$1.getYearEnd=function(e={}){return e.isEnd=!0,e.month=Month$1.December,this.getMonthStart(e)};proto$1$1.getQuarterStart=function(e={}){const{isEnd:t=!1}=e;let{month:r=this.getMonth()}=e;if(r=r+(e.monthOffset||0),r<0||r>Month$1.December){const n=r<0?-1:1,a=Math.abs(r)/TotalMonths$1,s=n===-1?Math.ceil(a):Math.floor(a);r-=s*TotalMonths$1*n,e.yearOffset=(e.yearOffset||0)+s*n}return r<Month$1.April?r=t?Month$1.March:Month$1.January:r<Month$1.July?r=t?Month$1.June:Month$1.April:r<Month$1.October?r=t?Month$1.September:Month$1.July:r=t?Month$1.December:Month$1.October,e.month=r,e.monthOffset=0,this.getMonthStart(e)};proto$1$1.getQuarterEnd=function(e={}){return e.isEnd=!0,this.getQuarterStart(e)};proto$1$1.toMMDDYYYY=function(){return Intl.DateTimeFormat("en-US",{month:"2-digit",day:"2-digit",year:"numeric"}).format(this)};function isUndefined$1(e){return e===void 0}function isNull$1(e){return e===null}function isDefined$1(e){return e!=null}function isEmpty$3(e){return isUndefined$1(e)||isNull$1(e)||isNumber$1(e)&&isNaN(e)||e===""||isArray$3(e)&&e.length===0||isObject$1$1(e)&&Object.values(e).length===0}function isString$1(e){return typeof e=="string"}function isNumber$1(e){return typeof e=="number"}function isBoolean$1(e){return typeof e=="boolean"}function isDate$1(e){return e instanceof Date}function isArray$3(e){return Array.isArray(e)}function makeArray$1(e){return isArray$3(e)?e:[e]}function isObject$1$1(e){return(e==null?void 0:e.constructor)===Object}function isFunction$3(e){return typeof e=="function"}function hasTarget(e,t){return e===t||e.contains(t)}function parseNumber$2(e,t=2){if(isDefined$1(e))return e=isNumber$1(e)?e:parseFloat(e),+e.toFixed(t)}function parseInteger$1(e){return parseNumber$2(e,0)}function parseBoolean$1(e){return isBoolean$1(e)||!isDefined$1(e)?e:e==="false"||e==="0"?!1:!!e}function parseDate$1(e){return isDate$1(e)?e:(e=new Date(e),isNaN(e)?void 0:e)}function parseRaw$1(e){try{return JSON.parse(e)}catch{console.error(`value could not be parse ${e}`);return}}function parseArray$1(e){if(isDefined$1(e))return isArray$3(e)?e:parseRaw$1(e)}function parseObject$1(e){if(isDefined$1(e))return isObject$1$1(e)?e:parseRaw$1(e)}function parseString$1(e){if(isDefined$1(e))return isString$1(e)?e:String(e)}function cloneDeep$1(e){return parseRaw$1(JSON.stringify(e))}function commonSort$1(e,t,r=-1){return e===t?0:e<t?r:-1*r}const proto$3=Array.prototype;proto$3.remove=function(e){if(!isEmpty$3(e)){e=makeArray$1(e);for(const t of e){let r=t;isFunction$3(r)||(r=a=>a===t);const n=this.findIndex(r);n!==-1&&this.splice(n,1)}}};proto$3.add=function(e,t=this.length){return this.splice(t,0,e),e};proto$3.addUnique=function(e,t){const r=this.find(n=>n===e);return r||(this.add(e,t),e)};/**
  * vee-validate v4.5.11
  * (c) 2022 Abdelrahman Awad
  * @license MIT
  */function isCallable$3(e){return typeof e=="function"}const isObject$3=e=>e!==null&&!!e&&typeof e=="object"&&!Array.isArray(e),RULES={};function defineRule(e,t){guardExtend(e,t),RULES[e]=t}function resolveRule(e){return RULES[e]}function guardExtend(e,t){if(!isCallable$3(t))throw new Error(`Extension Error: The validator '${e}' must be a function.`)}const FormContextKey=Symbol("vee-validate-form"),FieldContextKey=Symbol("vee-validate-field-instance");function isLocator(e){return isCallable$3(e)&&!!e.__locatorRef}function isYupValidator(e){return!!e&&isCallable$3(e.validate)}function hasCheckedAttr(e){return e==="checkbox"||e==="radio"}function isContainerValue(e){return isObject$3(e)||Array.isArray(e)}function isNotNestedPath(e){return/^\[.+\]$/i.test(e)}function isNativeMultiSelect(e){return isNativeSelect(e)&&e.multiple}function isNativeSelect(e){return e.tagName==="SELECT"}function isEvent(e){return e?!!(typeof Event<"u"&&isCallable$3(Event)&&e instanceof Event||e&&e.srcElement):!1}function cleanupNonNestedPath(e){return isNotNestedPath(e)?e.replace(/\[|\]/gi,""):e}function getFromPath(e,t,r){return e?isNotNestedPath(t)?e[cleanupNonNestedPath(t)]:(t||"").split(/\.|\[(\d+)\]/).filter(Boolean).reduce((a,s)=>isContainerValue(a)&&s in a?a[s]:r,e):r}function keysOf(e){return Object.keys(e)}function injectWithSelf(e,t=void 0){const r=getCurrentInstance();return(r==null?void 0:r.provides[e])||inject(e,t)}function resolveNextCheckboxValue(e,t,r){if(Array.isArray(e)){const n=[...e],a=n.indexOf(t);return a>=0?n.splice(a,1):n.push(t),n}return e===t?r:t}function getBoundValue(e){if(hasValueBinding(e))return e._value}function hasValueBinding(e){return"_value"in e}function normalizeEventValue(e){if(!isEvent(e))return e;const t=e.target;if(hasCheckedAttr(t.type)&&hasValueBinding(t))return getBoundValue(t);if(t.type==="file"&&t.files)return Array.from(t.files);if(isNativeMultiSelect(t))return Array.from(t.options).filter(r=>r.selected&&!r.disabled).map(getBoundValue);if(isNativeSelect(t)){const r=Array.from(t.options).find(n=>n.selected);return r?getBoundValue(r):t.value}return t.value}function normalizeRules(e){const t={};return Object.defineProperty(t,"_$$isNormalized",{value:!0,writable:!1,enumerable:!1,configurable:!1}),e?isObject$3(e)&&e._$$isNormalized?e:isObject$3(e)?Object.keys(e).reduce((r,n)=>{const a=normalizeParams(e[n]);return e[n]!==!1&&(r[n]=buildParams(a)),r},t):typeof e!="string"?t:e.split("|").reduce((r,n)=>{const a=parseRule(n);return a.name&&(r[a.name]=buildParams(a.params)),r},t):t}function normalizeParams(e){return e===!0?[]:Array.isArray(e)||isObject$3(e)?e:[e]}function buildParams(e){const t=r=>typeof r=="string"&&r[0]==="@"?createLocator(r.slice(1)):r;return Array.isArray(e)?e.map(t):e instanceof RegExp?[e]:Object.keys(e).reduce((r,n)=>(r[n]=t(e[n]),r),{})}const parseRule=e=>{let t=[];const r=e.split(":")[0];return e.includes(":")&&(t=e.split(":").slice(1).join(":").split(",")),{name:r,params:t}};function createLocator(e){const t=r=>getFromPath(r,e)||r[e];return t.__locatorRef=e,t}function extractLocators(e){return Array.isArray(e)?e.filter(isLocator):keysOf(e).filter(t=>isLocator(e[t])).map(t=>e[t])}const DEFAULT_CONFIG={generateMessage:({field:e})=>`${e} is not valid.`,bails:!0,validateOnBlur:!0,validateOnChange:!0,validateOnInput:!1,validateOnModelUpdate:!0};let currentConfig=Object.assign({},DEFAULT_CONFIG);const getConfig=()=>currentConfig,setConfig=e=>{currentConfig=Object.assign(Object.assign({},currentConfig),e)},configure$1=setConfig;async function validate(e,t,r={}){const n=r==null?void 0:r.bails,a={name:(r==null?void 0:r.name)||"{field}",rules:t,bails:n??!0,formData:(r==null?void 0:r.values)||{}},o=(await _validate(a,e)).errors;return{errors:o,valid:!o.length}}async function _validate(e,t){if(isYupValidator(e.rules))return validateFieldWithYup(t,e.rules,{bails:e.bails});if(isCallable$3(e.rules)||Array.isArray(e.rules)){const o={field:e.name,form:e.formData,value:t},l=Array.isArray(e.rules)?e.rules:[e.rules],f=l.length,u=[];for(let m=0;m<f;m++){const v=l[m],b=await v(t,o);if(typeof b!="string"&&b)continue;const F=typeof b=="string"?b:_generateFieldError(o);if(u.push(F),e.bails)return{errors:u}}return{errors:u}}const r=Object.assign(Object.assign({},e),{rules:normalizeRules(e.rules)}),n=[],a=Object.keys(r.rules),s=a.length;for(let o=0;o<s;o++){const l=a[o],f=await _test(r,t,{name:l,params:r.rules[l]});if(f.error&&(n.push(f.error),e.bails))return{errors:n}}return{errors:n}}async function validateFieldWithYup(e,t,r){var n;return{errors:await t.validate(e,{abortEarly:(n=r.bails)!==null&&n!==void 0?n:!0}).then(()=>[]).catch(s=>{if(s.name==="ValidationError")return s.errors;throw s})}}async function _test(e,t,r){const n=resolveRule(r.name);if(!n)throw new Error(`No such validator '${r.name}' exists.`);const a=fillTargetValues(r.params,e.formData),s={field:e.name,value:t,form:e.formData,rule:Object.assign(Object.assign({},r),{params:a})},o=await n(t,a,s);return typeof o=="string"?{error:o}:{error:o?void 0:_generateFieldError(s)}}function _generateFieldError(e){const t=getConfig().generateMessage;return t?t(e):"Field is invalid"}function fillTargetValues(e,t){const r=n=>isLocator(n)?n(t):n;return Array.isArray(e)?e.map(r):Object.keys(e).reduce((n,a)=>(n[a]=r(e[a]),n),{})}function set$1(e,t,r){typeof r.value=="object"&&(r.value=klona(r.value)),!r.enumerable||r.get||r.set||!r.configurable||!r.writable||t==="__proto__"?Object.defineProperty(e,t,r):e[t]=r.value}function klona(e){if(typeof e!="object")return e;var t=0,r,n,a,s=Object.prototype.toString.call(e);if(s==="[object Object]"?a=Object.create(e.__proto__||null):s==="[object Array]"?a=Array(e.length):s==="[object Set]"?(a=new Set,e.forEach(function(o){a.add(klona(o))})):s==="[object Map]"?(a=new Map,e.forEach(function(o,l){a.set(klona(l),klona(o))})):s==="[object Date]"?a=new Date(+e):s==="[object RegExp]"?a=new RegExp(e.source,e.flags):s==="[object DataView]"?a=new e.constructor(klona(e.buffer)):s==="[object ArrayBuffer]"?a=e.slice(0):s.slice(-6)==="Array]"&&(a=new e.constructor(e)),a){for(n=Object.getOwnPropertySymbols(e);t<n.length;t++)set$1(a,n[t],Object.getOwnPropertyDescriptor(e,n[t]));for(t=0,n=Object.getOwnPropertyNames(e);t<n.length;t++)Object.hasOwnProperty.call(a,r=n[t])&&a[r]===e[r]||set$1(a,r,Object.getOwnPropertyDescriptor(e,r))}return a||e}var es6=function e(t,r){if(t===r)return!0;if(t&&r&&typeof t=="object"&&typeof r=="object"){if(t.constructor!==r.constructor)return!1;var n,a,s;if(Array.isArray(t)){if(n=t.length,n!=r.length)return!1;for(a=n;a--!==0;)if(!e(t[a],r[a]))return!1;return!0}if(t instanceof Map&&r instanceof Map){if(t.size!==r.size)return!1;for(a of t.entries())if(!r.has(a[0]))return!1;for(a of t.entries())if(!e(a[1],r.get(a[0])))return!1;return!0}if(t instanceof Set&&r instanceof Set){if(t.size!==r.size)return!1;for(a of t.entries())if(!r.has(a[0]))return!1;return!0}if(ArrayBuffer.isView(t)&&ArrayBuffer.isView(r)){if(n=t.length,n!=r.length)return!1;for(a=n;a--!==0;)if(t[a]!==r[a])return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if(s=Object.keys(t),n=s.length,n!==Object.keys(r).length)return!1;for(a=n;a--!==0;)if(!Object.prototype.hasOwnProperty.call(r,s[a]))return!1;for(a=n;a--!==0;){var o=s[a];if(!e(t[o],r[o]))return!1}return!0}return t!==t&&r!==r};let ID_COUNTER=0;function useFieldState(e,t){const{value:r,initialValue:n,setInitialValue:a}=_useFieldValue(e,t.modelValue,!t.standalone),{errorMessage:s,errors:o,setErrors:l}=_useFieldErrors(e,!t.standalone),f=_useFieldMeta(r,n,o),u=ID_COUNTER>=Number.MAX_SAFE_INTEGER?0:++ID_COUNTER;function m(v){var b;"value"in v&&(r.value=v.value),"errors"in v&&l(v.errors),"touched"in v&&(f.touched=(b=v.touched)!==null&&b!==void 0?b:f.touched),"initialValue"in v&&a(v.initialValue)}return{id:u,path:e,value:r,initialValue:n,meta:f,errors:o,errorMessage:s,setState:m}}function _useFieldValue(e,t,r){const n=r?injectWithSelf(FormContextKey,void 0):void 0,a=ref(unref(t));function s(){return n?getFromPath(n.meta.value.initialValues,unref(e),unref(a)):unref(a)}function o(m){if(!n){a.value=m;return}n.setFieldInitialValue(unref(e),m)}const l=computed(s);if(!n)return{value:ref(s()),initialValue:l,setInitialValue:o};const f=t?unref(t):getFromPath(n.values,unref(e),unref(l));return n.stageInitialValue(unref(e),f),{value:computed({get(){return getFromPath(n.values,unref(e))},set(m){n.setFieldValue(unref(e),m)}}),initialValue:l,setInitialValue:o}}function _useFieldMeta(e,t,r){const n=reactive({touched:!1,pending:!1,valid:!0,validated:!!unref(r).length,initialValue:computed(()=>unref(t)),dirty:computed(()=>!es6(unref(e),unref(t)))});return watch(r,a=>{n.valid=!a.length},{immediate:!0,flush:"sync"}),n}function _useFieldErrors(e,t){const r=t?injectWithSelf(FormContextKey,void 0):void 0;function n(s){return s?Array.isArray(s)?s:[s]:[]}if(!r){const s=ref([]);return{errors:s,errorMessage:computed(()=>s.value[0]),setErrors:o=>{s.value=n(o)}}}const a=computed(()=>r.errorBag.value[unref(e)]||[]);return{errors:a,errorMessage:computed(()=>a.value[0]),setErrors:s=>{r.setFieldErrorBag(unref(e),n(s))}}}function useField(e,t,r){return hasCheckedAttr(r==null?void 0:r.type)?useCheckboxField(e,t,r):_useField(e,t,r)}function _useField(e,t,r){const{initialValue:n,validateOnMount:a,bails:s,type:o,checkedValue:l,label:f,validateOnValueUpdate:u,uncheckedValue:m,standalone:v}=normalizeOptions(unref(e),r),b=v?void 0:injectWithSelf(FormContextKey);let P=!1;const{id:F,value:C,initialValue:D,meta:E,setState:k,errors:j,errorMessage:W}=useFieldState(e,{modelValue:n,standalone:v}),M=()=>{E.touched=!0},S=computed(()=>{let ae=unref(t);const ke=unref(b==null?void 0:b.schema);return ke&&!isYupValidator(ke)&&(ae=extractRuleFromSchema(ke,unref(e))||ae),isYupValidator(ae)||isCallable$3(ae)||Array.isArray(ae)?ae:normalizeRules(ae)});async function T(ae){var ke,Ne;return b!=null&&b.validateSchema?(ke=(await b.validateSchema(ae)).results[unref(e)])!==null&&ke!==void 0?ke:{valid:!0,errors:[]}:validate(C.value,S.value,{name:unref(f)||unref(e),values:(Ne=b==null?void 0:b.values)!==null&&Ne!==void 0?Ne:{},bails:s})}async function V(){E.pending=!0,E.validated=!0;const ae=await T("validated-only");return P&&(ae.valid=!0,ae.errors=[]),k({errors:ae.errors}),E.pending=!1,ae}async function _(){const ae=await T("silent");return P&&(ae.valid=!0),E.valid=ae.valid,ae}function ee(ae){return!(ae!=null&&ae.mode)||(ae==null?void 0:ae.mode)==="force"||(ae==null?void 0:ae.mode)==="validated-only"?V():_()}const re=(ae,ke=!0)=>{const Ne=normalizeEventValue(ae);C.value=Ne,!u&&ke&&V()};onMounted(()=>{if(a)return V();(!b||!b.validateSchema)&&_()});function te(ae){E.touched=ae}let oe;function he(){oe=watch(C,u?V:_,{deep:!0})}he();function me(ae){var ke;oe==null||oe();const Ne=ae&&"value"in ae?ae.value:D.value;k({value:klona(Ne),initialValue:klona(Ne),touched:(ke=ae==null?void 0:ae.touched)!==null&&ke!==void 0?ke:!1,errors:(ae==null?void 0:ae.errors)||[]}),E.pending=!1,E.validated=!1,_(),nextTick(()=>{he()})}function we(ae){C.value=ae}function Se(ae){k({errors:Array.isArray(ae)?ae:[ae]})}const be={id:F,name:e,label:f,value:C,meta:E,errors:j,errorMessage:W,type:o,checkedValue:l,uncheckedValue:m,bails:s,resetField:me,handleReset:()=>me(),validate:ee,handleChange:re,handleBlur:M,setState:k,setTouched:te,setErrors:Se,setValue:we};if(provide(FieldContextKey,be),isRef(t)&&typeof unref(t)!="function"&&watch(t,(ae,ke)=>{es6(ae,ke)||(E.validated?V():_())},{deep:!0}),!b)return be;b.register(be),onBeforeUnmount(()=>{P=!0,b.unregister(be)});const le=computed(()=>{const ae=S.value;return!ae||isCallable$3(ae)||isYupValidator(ae)||Array.isArray(ae)?{}:Object.keys(ae).reduce((ke,Ne)=>{const de=extractLocators(ae[Ne]).map($=>$.__locatorRef).reduce(($,ie)=>{const U=getFromPath(b.values,ie)||b.values[ie];return U!==void 0&&($[ie]=U),$},{});return Object.assign(ke,de),ke},{})});return watch(le,(ae,ke)=>{if(!Object.keys(ae).length)return;!es6(ae,ke)&&(E.validated?V():_())}),be}function normalizeOptions(e,t){const r=()=>({initialValue:void 0,validateOnMount:!1,bails:!0,rules:"",label:e,validateOnValueUpdate:!0,standalone:!1});if(!t)return r();const n="valueProp"in t?t.valueProp:t.checkedValue;return Object.assign(Object.assign(Object.assign({},r()),t||{}),{checkedValue:n})}function extractRuleFromSchema(e,t){if(e)return e[t]}function useCheckboxField(e,t,r){const n=r!=null&&r.standalone?void 0:injectWithSelf(FormContextKey),a=r==null?void 0:r.checkedValue,s=r==null?void 0:r.uncheckedValue;function o(l){const f=l.handleChange,u=computed(()=>{const v=unref(l.value),b=unref(a);return Array.isArray(v)?v.includes(b):b===v});function m(v,b=!0){var P,F;if(u.value===((F=(P=v)===null||P===void 0?void 0:P.target)===null||F===void 0?void 0:F.checked))return;let C=normalizeEventValue(v);n||(C=resolveNextCheckboxValue(unref(l.value),unref(a),unref(s))),f(C,b)}return onBeforeUnmount(()=>{u.value&&m(unref(a),!1)}),Object.assign(Object.assign({},l),{checked:u,checkedValue:a,uncheckedValue:s,handleChange:m})}return o(_useField(e,t,r))}const FieldType$1=new Enum$2(["String","Integer","Decimal","Boolean","Date","Model","Collection","Array","Object"]);function parseValue$1(e,t){const{type:r}=t;if(isDefined$1(r))switch(r){case FieldType$1.Integer:e=getValue$1(parseInteger$1(e),t,0);break;case Number:case FieldType$1.Decimal:e=getValue$1(parseNumber$2(e,t.precision),t,0);break;case Boolean:case FieldType$1.Boolean:e=getValue$1(parseBoolean$1(e),t,!1);break;case Date:case FieldType$1.Date:e=getValue$1(parseDate$1(e),t,null);break;case FieldType$1.Collection:e=t.collection?new t.collection(e):new Collection$1(e,t.model);break;case FieldType$1.Model:e=new t.model(e);break;case Array:case FieldType$1.Array:e=parseArray$1(e);break;case Object:case FieldType$1.Object:e=getValue$1(parseObject$1(e),t,{});break;case String:case FieldType$1.String:e=getValue$1(parseString$1(e),t,"");break;default:e??(e=t.defaultValue),isDefined$1(e)&&!(e instanceof r)&&(e=new r(e));break}return e}function getValue$1(e,t,r){return isEmpty$3(e)&&(e="defaultValue"in t?t.defaultValue:r),e}let Model$1=class{constructor(t){__publicField$1(this,"isModel",!0),__publicField$1(this,"_snapshot",null),__publicField$1(this,"_fields",null),__publicField$1(this,"_trackChanges",!1),t??(t={});for(const{name:r}of this.fields)r in t||(t[r]=null);this.set(t)}get TrackChanges(){return this._trackChanges}set TrackChanges(t){this._trackChanges=t,this.commit()}getDefaultFields(){return[]}get fields(){let t=this._fields;return t||(this.fields=t=this.getDefaultFields()),t}set fields(t){this._fields=t}reset(){this.set(this._snapshot)}commit(){this.TrackChanges?this._snapshot=this.getData():delete this._snapshot}set(t,r=!1){r&&this.reset();for(const n in t){const a=this.fields.find(s=>s.name===n);a?this[a.name]=parseValue$1(t[a.name],a):(this.fields.push({name:n,custom:!0}),this[n]=t[n])}}clone(t){return new this.constructor(this.getData(t))}getData({include:t,exclude:r}={}){const n={},a=[...this.fields];t&&t.forEach(s=>a.push({name:s})),this._visited=!0;for(const s of a){const{name:o}=s;if(r&&r.indexOf(o)!==-1)continue;const l=this[o];l!=null&&l.isModel||l!=null&&l.isCollection?l._visited||(n[o]=l.getData({include:t,exclude:r})):isArray$3(l)||isObject$1$1(l)?n[o]=cloneDeep$1(l):n[o]=l}return delete this._visited,n}static toClassDescription(){const t=[];return new this().fields.forEach(n=>{let{type:a}=n;return FieldType$1.values.includes(a)?a===FieldType$1.Collection?a=`Collection<${n.model.name}>`:a===FieldType$1.Model&&(a=`${n.model.name}`):a=a.name,t.push(`* @property {${a}} ${n.name}`)}),`/**
`+t.join(`
`)+`
 */`}};const GroupKey$1="groupKey",GroupDisplay$1="groupDisplay",SelectedCls$2="list-item-selected";let Collection$1=class mt extends Array{constructor(t,r=Model$1){super(),__publicField$1(this,"isCollection",!0),__publicField$1(this,"_idField","id"),__publicField$1(this,"_displayField","value"),__publicField$1(this,"_records",[]),__publicField$1(this,"_groups",null),__publicField$1(this,"_filters",[]),__publicField$1(this,"_sorters",[]),__publicField$1(this,"parent",null),__publicField$1(this,_a,null),__publicField$1(this,_b,null),t??(t={}),this.suspend(!0),this.model=t.model||r,delete t.model,isArray$3(t)?this.records=t:Object.assign(this,t),this.suspend(),this.init()}clear(){this.length=0}add(t,{clear:r=!1,suppress:n=!1}={}){isEmpty$3(t)||(t=makeArray$1(t),this.suspend(n),this.records=r?t:this.records.concat(t),this.suspend())}clearFilters(){this.filters=[]}sum(t){return this.records.reduce((r,n)=>r+n[t])}addFilters(t,{suppress:r=!1}={}){isEmpty$3(t)||(t=makeArray$1(t),this.suspend(r),this.filters=this.filters.concat(t),this.suspend())}removeFilters(t,r){if(!isEmpty$3(t)){t=makeArray$1(t);for(const n of t)this.filters.remove(({id:a})=>a===n);this.suspend(r),this.init(),this.suspend()}}suspend(t){this._suspended=t}addSorters(t,{suppress:r=!1}={}){isEmpty$3(t)||(t=makeArray$1(t),this.suspend(r),this.sorters=this.sorters.concat(t),this.suspend())}removeSorters(t,{suppress:r=!1}={}){if(!isEmpty$3(t)){t=makeArray$1(t);for(const n of t)this.sorters.remove(({id:a})=>a===n);this.suspend(r),this.init(),this.suspend()}}group({key:t,display:r},n=this.records){this.clear();const a={};n.forEach(s=>{const o=s[t],l=a[o];l?l.records.push(s):a[o]={[GroupKey$1]:o,records:[s]}});for(const{[GroupKey$1]:s,records:o}of Object.values(a)){const l=new mt({records:o,parent:this});l[GroupDisplay$1]=r?r(l):s,this[GroupKey$1]=t,this.push(l)}this.sort({property:GroupDisplay$1},!1)}find(t){return this.records.find(t)}sort(t=this.sorters,r=!0){!t||this._suspended||(t=makeArray$1(t),t.forEach(n=>{if(isObject$1$1(n)){const{property:a,direction:s=-1}=n;n=(o,l)=>commonSort$1(o[a],l[a],s)}r?this.records.sort(n):super.sort(n)}))}init(){if(this._suspended)return;const{groups:t,filters:r}=this;let{records:n}=this;if(!isEmpty$3(r)){let a=[];r.forEach((s,o)=>{o===0||s.or||(n=a,a=[]);let l=s.fn;if(!l){let{value:f}=s;const{property:u,exact:m=!1}=s;m||(f=new RegExp(f,"i")),l=v=>{const b=v[u];return m?b===f:f.test(b)}}n.forEach(f=>{l(f)&&a.push(f)})}),n=a}if(t){let a=this;for(let s=0;s<t.length;s++)if(s===0)this.group(t[s],n);else{let o=[];a.forEach(l=>{l.group(t[s]),o=o.concat(l)}),a=o}}else this.clear(),n.forEach(a=>this.push(a)),this.sort()}getOptionId(t){if(t)return isArray$3(t)?t[GroupDisplay$1]:t[this.idField]}getOptionDisplay(t){if(t)return isArray$3(t)?t[GroupDisplay$1]:t[this.displayField]}getOptionCls(t,r){if(this.isGrouped)return"group-wrapper";const n=["list-item"],{idField:a}=this,s=t[a];for(const o of r)if(s===o[a]){n.push(SelectedCls$2);break}return n}clone(t){const{groups:r,idField:n,displayField:a,sorters:s,filters:o,model:l}=this;return new this.constructor({idField:n,displayField:a,groups:r,sorters:s,filters:o,model:l,records:this.getData(t)})}getData(t){const r=[];return this._visited=!0,this.forEach(n=>{const a=makeArray$1(n.getData(t));r.push(...a)}),delete this._visited,r}get first(){return this[0]}get last(){return this[this.length-1]}set sorters(t){t==null||t.map((r,n)=>(r.id||(r.id=n),r)),this._sorters=t,this.sort()}get sorters(){return this._sorters}set filters(t){t==null||t.map((r,n)=>(r.id||(r.id=n),r)),this._filters=t,this.init()}get filters(){return this._filters}set records(t){const r=[],{model:n}=this;t.forEach(a=>{a.isModel?r.push(a):r.push(new n(a))}),this._records=r,this.init()}get records(){return this._records}set groups(t){isEmpty$3(t)?this[GroupKey$1]=null:isObject$1$1(t)&&(t=[t]),this._groups=t,this.init()}get groups(){return this._groups}get idField(){var t;return((t=this.parent)==null?void 0:t.idField)||this._idField}set idField(t){this._idField=t}get displayField(){var t;return((t=this.parent)==null?void 0:t.displayField)||this._displayField}set displayField(t){this._displayField=t}get isGrouped(){return!isEmpty$3(this[GroupKey$1])}static get[(_a=GroupKey$1,_b=GroupDisplay$1,Symbol.species)](){return Array}};/*!
 * Font Awesome Free 6.1.1 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 * Copyright 2022 Fonticons, Inc.
 */var faChevronDown={prefix:"fas",iconName:"chevron-down",icon:[448,512,[],"f078","M224 416c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L224 338.8l169.4-169.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-192 192C240.4 412.9 232.2 416 224 416z"]},faMinus={prefix:"fas",iconName:"minus",icon:[448,512,[8722,10134,8211,"subtract"],"f068","M400 288h-352c-17.69 0-32-14.32-32-32.01s14.31-31.99 32-31.99h352c17.69 0 32 14.3 32 31.99S417.7 288 400 288z"]},faPlus={prefix:"fas",iconName:"plus",icon:[448,512,[10133,61543,"add"],"2b","M432 256c0 17.69-14.33 32.01-32 32.01H256v144c0 17.69-14.33 31.99-32 31.99s-32-14.3-32-31.99v-144H48c-17.67 0-32-14.32-32-32.01s14.33-31.99 32-31.99H192v-144c0-17.69 14.33-32.01 32-32.01s32 14.32 32 32.01v144h144C417.7 224 432 238.3 432 256z"]},faSquare={prefix:"fas",iconName:"square",icon:[448,512,[9723,9724,61590,9632],"f0c8","M0 96C0 60.65 28.65 32 64 32H384C419.3 32 448 60.65 448 96V416C448 451.3 419.3 480 384 480H64C28.65 480 0 451.3 0 416V96z"]},faTriangleExclamation={prefix:"fas",iconName:"triangle-exclamation",icon:[512,512,[9888,"exclamation-triangle","warning"],"f071","M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z"]},faExclamationTriangle=faTriangleExclamation,faWindowRestore={prefix:"fas",iconName:"window-restore",icon:[512,512,[],"f2d2","M432 64H208C199.2 64 192 71.16 192 80V96H128V80C128 35.82 163.8 0 208 0H432C476.2 0 512 35.82 512 80V304C512 348.2 476.2 384 432 384H416V320H432C440.8 320 448 312.8 448 304V80C448 71.16 440.8 64 432 64zM0 192C0 156.7 28.65 128 64 128H320C355.3 128 384 156.7 384 192V448C384 483.3 355.3 512 320 512H64C28.65 512 0 483.3 0 448V192zM96 256H288C305.7 256 320 241.7 320 224C320 206.3 305.7 192 288 192H96C78.33 192 64 206.3 64 224C64 241.7 78.33 256 96 256z"]},faXmark={prefix:"fas",iconName:"xmark",icon:[320,512,[128473,10005,10006,10060,215,"close","multiply","remove","times"],"f00d","M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z"]},Icon={AlertTriangle:faExclamationTriangle,PickerDown:faChevronDown,Close:faXmark,Plus:faPlus,Maximize:faSquare,Minus:faMinus,Restore:faWindowRestore};(function(){try{var e=document.createElement("style");e.innerText='*,:before,:after{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}:before,:after{--tw-content: ""}html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;font-family:Open Sans}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}ol,ul,menu{list-style:none;margin:0;padding:0}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{opacity:1;color:#9ca3af}input:-ms-input-placeholder,textarea:-ms-input-placeholder{opacity:1;color:#9ca3af}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}button,[role=button]{cursor:pointer}:disabled{cursor:default}img,svg,video,canvas,audio,iframe,embed,object{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}*,:before,:after{--tw-translate-x: 0;--tw-translate-y: 0;--tw-rotate: 0;--tw-skew-x: 0;--tw-skew-y: 0;--tw-scale-x: 1;--tw-scale-y: 1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness: proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width: 0px;--tw-ring-offset-color: #fff;--tw-ring-color: rgb(59 130 246 / .5);--tw-ring-offset-shadow: 0 0 #0000;--tw-ring-shadow: 0 0 #0000;--tw-shadow: 0 0 #0000;--tw-shadow-colored: 0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.field-number input{-moz-appearance:textfield}.field-number input::-webkit-outer-spin-button,.field-number input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}.field-tags-wrapper-collapse,.field-tags-wrapper-expand,.field-tags-wrapper{margin-top:.25rem;margin-right:.25rem;display:inline-block;border-radius:.25rem;border-width:1px;--tw-bg-opacity: 1;background-color:rgb(229 231 235 / var(--tw-bg-opacity));padding:.25rem;font-size:.75rem;line-height:1rem;--tw-text-opacity: 1;color:rgb(75 85 99 / var(--tw-text-opacity))}.field-tags-wrapper-collapse,.field-tags-wrapper-expand{cursor:pointer;font-weight:700}.fields-tags-close-icon{margin-left:.25rem;display:inline-block;cursor:pointer}.fields-tags-close-icon:hover{--tw-text-opacity: 1;color:rgb(153 27 27 / var(--tw-text-opacity))}.base-dialog-body{flex:1 1 0%;padding:.5rem}.overlay-container{pointer-events:auto;position:absolute}.view-dialog{top:0px;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;width:100%;--tw-bg-opacity: 1;background-color:rgb(255 255 255 / var(--tw-bg-opacity));--tw-shadow: 0 1px 3px 0 rgb(0 0 0 / .1), 0 1px 2px -1px rgb(0 0 0 / .1);--tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow);height:calc(100% - 2.25rem)}.pointer-events-auto{pointer-events:auto}.invisible{visibility:hidden}.absolute{position:absolute}.relative{position:relative}.sticky{position:-webkit-sticky;position:sticky}.top-24{top:6rem}.top-0{top:0px}.right-0{right:0px}.bottom-0{bottom:0px}.z-10{z-index:10}.mx-2{margin-left:.5rem;margin-right:.5rem}.box-border{box-sizing:border-box}.inline-block{display:inline-block}.flex{display:flex}.list-item{display:list-item}.h-64{height:16rem}.h-full{height:100%}.h-8{height:2rem}.h-6{height:1.5rem}.h-36{height:9rem}.w-48{width:12rem}.w-24{width:6rem}.w-full{width:100%}.w-32{width:8rem}.w-auto{width:auto}.w-6{width:1.5rem}.w-14{width:3.5rem}.flex-1{flex:1 1 0%}.cursor-help{cursor:help}.cursor-pointer{cursor:pointer}.appearance-none{-webkit-appearance:none;-moz-appearance:none;appearance:none}.flex-row-reverse{flex-direction:row-reverse}.flex-col{flex-direction:column}.flex-col-reverse{flex-direction:column-reverse}.flex-wrap{flex-wrap:wrap}.items-center{align-items:center}.items-stretch{align-items:stretch}.space-x-0>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(0px * var(--tw-space-x-reverse));margin-left:calc(0px * calc(1 - var(--tw-space-x-reverse)))}.space-x-1>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.25rem * var(--tw-space-x-reverse));margin-left:calc(.25rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-2>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.5rem * var(--tw-space-x-reverse));margin-left:calc(.5rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-3>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.75rem * var(--tw-space-x-reverse));margin-left:calc(.75rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-4>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(1rem * var(--tw-space-x-reverse));margin-left:calc(1rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-5>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(1.25rem * var(--tw-space-x-reverse));margin-left:calc(1.25rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-6>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(1.5rem * var(--tw-space-x-reverse));margin-left:calc(1.5rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-7>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(1.75rem * var(--tw-space-x-reverse));margin-left:calc(1.75rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-8>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(2rem * var(--tw-space-x-reverse));margin-left:calc(2rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-9>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(2.25rem * var(--tw-space-x-reverse));margin-left:calc(2.25rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-10>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(2.5rem * var(--tw-space-x-reverse));margin-left:calc(2.5rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-11>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(2.75rem * var(--tw-space-x-reverse));margin-left:calc(2.75rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-12>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(3rem * var(--tw-space-x-reverse));margin-left:calc(3rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-14>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(3.5rem * var(--tw-space-x-reverse));margin-left:calc(3.5rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-16>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(4rem * var(--tw-space-x-reverse));margin-left:calc(4rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-20>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(5rem * var(--tw-space-x-reverse));margin-left:calc(5rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-24>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(6rem * var(--tw-space-x-reverse));margin-left:calc(6rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-28>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(7rem * var(--tw-space-x-reverse));margin-left:calc(7rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-32>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(8rem * var(--tw-space-x-reverse));margin-left:calc(8rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-36>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(9rem * var(--tw-space-x-reverse));margin-left:calc(9rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-40>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(10rem * var(--tw-space-x-reverse));margin-left:calc(10rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-44>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(11rem * var(--tw-space-x-reverse));margin-left:calc(11rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-48>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(12rem * var(--tw-space-x-reverse));margin-left:calc(12rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-52>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(13rem * var(--tw-space-x-reverse));margin-left:calc(13rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-56>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(14rem * var(--tw-space-x-reverse));margin-left:calc(14rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-60>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(15rem * var(--tw-space-x-reverse));margin-left:calc(15rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-64>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(16rem * var(--tw-space-x-reverse));margin-left:calc(16rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-72>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(18rem * var(--tw-space-x-reverse));margin-left:calc(18rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-80>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(20rem * var(--tw-space-x-reverse));margin-left:calc(20rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-96>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(24rem * var(--tw-space-x-reverse));margin-left:calc(24rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-px>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(1px * var(--tw-space-x-reverse));margin-left:calc(1px * calc(1 - var(--tw-space-x-reverse)))}.space-x-0\\.5>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.125rem * var(--tw-space-x-reverse));margin-left:calc(.125rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-1\\.5>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.375rem * var(--tw-space-x-reverse));margin-left:calc(.375rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-2\\.5>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.625rem * var(--tw-space-x-reverse));margin-left:calc(.625rem * calc(1 - var(--tw-space-x-reverse)))}.space-x-3\\.5>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.875rem * var(--tw-space-x-reverse));margin-left:calc(.875rem * calc(1 - var(--tw-space-x-reverse)))}.space-y-0>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(0px * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(0px * var(--tw-space-y-reverse))}.space-y-1>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.25rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.25rem * var(--tw-space-y-reverse))}.space-y-2>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.5rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.5rem * var(--tw-space-y-reverse))}.space-y-3>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.75rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.75rem * var(--tw-space-y-reverse))}.space-y-4>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(1rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1rem * var(--tw-space-y-reverse))}.space-y-5>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(1.25rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1.25rem * var(--tw-space-y-reverse))}.space-y-6>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1.5rem * var(--tw-space-y-reverse))}.space-y-7>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(1.75rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1.75rem * var(--tw-space-y-reverse))}.space-y-8>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(2rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(2rem * var(--tw-space-y-reverse))}.space-y-9>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(2.25rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(2.25rem * var(--tw-space-y-reverse))}.space-y-10>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(2.5rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(2.5rem * var(--tw-space-y-reverse))}.space-y-11>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(2.75rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(2.75rem * var(--tw-space-y-reverse))}.space-y-12>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(3rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(3rem * var(--tw-space-y-reverse))}.space-y-14>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(3.5rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(3.5rem * var(--tw-space-y-reverse))}.space-y-16>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(4rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(4rem * var(--tw-space-y-reverse))}.space-y-20>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(5rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(5rem * var(--tw-space-y-reverse))}.space-y-24>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(6rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(6rem * var(--tw-space-y-reverse))}.space-y-28>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(7rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(7rem * var(--tw-space-y-reverse))}.space-y-32>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(8rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(8rem * var(--tw-space-y-reverse))}.space-y-36>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(9rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(9rem * var(--tw-space-y-reverse))}.space-y-40>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(10rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(10rem * var(--tw-space-y-reverse))}.space-y-44>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(11rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(11rem * var(--tw-space-y-reverse))}.space-y-48>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(12rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(12rem * var(--tw-space-y-reverse))}.space-y-52>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(13rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(13rem * var(--tw-space-y-reverse))}.space-y-56>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(14rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(14rem * var(--tw-space-y-reverse))}.space-y-60>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(15rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(15rem * var(--tw-space-y-reverse))}.space-y-64>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(16rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(16rem * var(--tw-space-y-reverse))}.space-y-72>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(18rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(18rem * var(--tw-space-y-reverse))}.space-y-80>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(20rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(20rem * var(--tw-space-y-reverse))}.space-y-96>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(24rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(24rem * var(--tw-space-y-reverse))}.space-y-px>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(1px * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1px * var(--tw-space-y-reverse))}.space-y-0\\.5>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.125rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.125rem * var(--tw-space-y-reverse))}.space-y-1\\.5>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.375rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.375rem * var(--tw-space-y-reverse))}.space-y-2\\.5>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.625rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.625rem * var(--tw-space-y-reverse))}.space-y-3\\.5>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.875rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.875rem * var(--tw-space-y-reverse))}.space-y-reverse>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 1}.space-x-reverse>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 1}.overflow-auto{overflow:auto}.text-ellipsis{text-overflow:ellipsis}.text-clip{text-overflow:clip}.rounded{border-radius:.25rem}.rounded-sm{border-radius:.125rem}.border{border-width:1px}.border-b-2{border-bottom-width:2px}.border-t{border-top-width:1px}.border-gray-300{--tw-border-opacity: 1;border-color:rgb(209 213 219 / var(--tw-border-opacity))}.bg-slate-800{--tw-bg-opacity: 1;background-color:rgb(30 41 59 / var(--tw-bg-opacity))}.bg-slate-700{--tw-bg-opacity: 1;background-color:rgb(51 65 85 / var(--tw-bg-opacity))}.bg-blue-200{--tw-bg-opacity: 1;background-color:rgb(191 219 254 / var(--tw-bg-opacity))}.bg-slate-100{--tw-bg-opacity: 1;background-color:rgb(241 245 249 / var(--tw-bg-opacity))}.bg-transparent{background-color:transparent}.bg-white{--tw-bg-opacity: 1;background-color:rgb(255 255 255 / var(--tw-bg-opacity))}.bg-slate-500{--tw-bg-opacity: 1;background-color:rgb(100 116 139 / var(--tw-bg-opacity))}.p-2{padding:.5rem}.px-2{padding-left:.5rem;padding-right:.5rem}.py-0\\.5{padding-top:.125rem;padding-bottom:.125rem}.py-0{padding-top:0;padding-bottom:0}.py-1{padding-top:.25rem;padding-bottom:.25rem}.pr-2{padding-right:.5rem}.pb-1{padding-bottom:.25rem}.pl-1{padding-left:.25rem}.pl-0\\.5{padding-left:.125rem}.pl-0{padding-left:0}.pr-1{padding-right:.25rem}.pr-0{padding-right:0}.text-left{text-align:left}.text-center{text-align:center}.text-right{text-align:right}.text-justify{text-align:justify}.indent-px{text-indent:1px}.text-xs{font-size:.75rem;line-height:1rem}.text-sm{font-size:.875rem;line-height:1.25rem}.text-base{font-size:1rem;line-height:1.5rem}.text-lg{font-size:1.125rem;line-height:1.75rem}.text-xl{font-size:1.25rem;line-height:1.75rem}.text-2xl{font-size:1.5rem;line-height:2rem}.text-3xl{font-size:1.875rem;line-height:2.25rem}.text-4xl{font-size:2.25rem;line-height:2.5rem}.text-5xl{font-size:3rem;line-height:1}.text-6xl{font-size:3.75rem;line-height:1}.text-7xl{font-size:4.5rem;line-height:1}.text-8xl{font-size:6rem;line-height:1}.text-9xl{font-size:8rem;line-height:1}.font-semibold{font-weight:600}.font-normal{font-weight:400}.leading-7{line-height:1.75rem}.leading-6{line-height:1.5rem}.text-inherit{color:inherit}.text-current{color:currentColor}.text-transparent{color:transparent}.text-black{--tw-text-opacity: 1;color:rgb(0 0 0 / var(--tw-text-opacity))}.text-white{--tw-text-opacity: 1;color:rgb(255 255 255 / var(--tw-text-opacity))}.text-slate-50{--tw-text-opacity: 1;color:rgb(248 250 252 / var(--tw-text-opacity))}.text-slate-100{--tw-text-opacity: 1;color:rgb(241 245 249 / var(--tw-text-opacity))}.text-slate-200{--tw-text-opacity: 1;color:rgb(226 232 240 / var(--tw-text-opacity))}.text-slate-300{--tw-text-opacity: 1;color:rgb(203 213 225 / var(--tw-text-opacity))}.text-slate-400{--tw-text-opacity: 1;color:rgb(148 163 184 / var(--tw-text-opacity))}.text-slate-500{--tw-text-opacity: 1;color:rgb(100 116 139 / var(--tw-text-opacity))}.text-slate-600{--tw-text-opacity: 1;color:rgb(71 85 105 / var(--tw-text-opacity))}.text-slate-700{--tw-text-opacity: 1;color:rgb(51 65 85 / var(--tw-text-opacity))}.text-slate-800{--tw-text-opacity: 1;color:rgb(30 41 59 / var(--tw-text-opacity))}.text-slate-900{--tw-text-opacity: 1;color:rgb(15 23 42 / var(--tw-text-opacity))}.text-gray-50{--tw-text-opacity: 1;color:rgb(249 250 251 / var(--tw-text-opacity))}.text-gray-100{--tw-text-opacity: 1;color:rgb(243 244 246 / var(--tw-text-opacity))}.text-gray-200{--tw-text-opacity: 1;color:rgb(229 231 235 / var(--tw-text-opacity))}.text-gray-300{--tw-text-opacity: 1;color:rgb(209 213 219 / var(--tw-text-opacity))}.text-gray-400{--tw-text-opacity: 1;color:rgb(156 163 175 / var(--tw-text-opacity))}.text-gray-500{--tw-text-opacity: 1;color:rgb(107 114 128 / var(--tw-text-opacity))}.text-gray-600{--tw-text-opacity: 1;color:rgb(75 85 99 / var(--tw-text-opacity))}.text-gray-700{--tw-text-opacity: 1;color:rgb(55 65 81 / var(--tw-text-opacity))}.text-gray-800{--tw-text-opacity: 1;color:rgb(31 41 55 / var(--tw-text-opacity))}.text-gray-900{--tw-text-opacity: 1;color:rgb(17 24 39 / var(--tw-text-opacity))}.text-zinc-50{--tw-text-opacity: 1;color:rgb(250 250 250 / var(--tw-text-opacity))}.text-zinc-100{--tw-text-opacity: 1;color:rgb(244 244 245 / var(--tw-text-opacity))}.text-zinc-200{--tw-text-opacity: 1;color:rgb(228 228 231 / var(--tw-text-opacity))}.text-zinc-300{--tw-text-opacity: 1;color:rgb(212 212 216 / var(--tw-text-opacity))}.text-zinc-400{--tw-text-opacity: 1;color:rgb(161 161 170 / var(--tw-text-opacity))}.text-zinc-500{--tw-text-opacity: 1;color:rgb(113 113 122 / var(--tw-text-opacity))}.text-zinc-600{--tw-text-opacity: 1;color:rgb(82 82 91 / var(--tw-text-opacity))}.text-zinc-700{--tw-text-opacity: 1;color:rgb(63 63 70 / var(--tw-text-opacity))}.text-zinc-800{--tw-text-opacity: 1;color:rgb(39 39 42 / var(--tw-text-opacity))}.text-zinc-900{--tw-text-opacity: 1;color:rgb(24 24 27 / var(--tw-text-opacity))}.text-neutral-50{--tw-text-opacity: 1;color:rgb(250 250 250 / var(--tw-text-opacity))}.text-neutral-100{--tw-text-opacity: 1;color:rgb(245 245 245 / var(--tw-text-opacity))}.text-neutral-200{--tw-text-opacity: 1;color:rgb(229 229 229 / var(--tw-text-opacity))}.text-neutral-300{--tw-text-opacity: 1;color:rgb(212 212 212 / var(--tw-text-opacity))}.text-neutral-400{--tw-text-opacity: 1;color:rgb(163 163 163 / var(--tw-text-opacity))}.text-neutral-500{--tw-text-opacity: 1;color:rgb(115 115 115 / var(--tw-text-opacity))}.text-neutral-600{--tw-text-opacity: 1;color:rgb(82 82 82 / var(--tw-text-opacity))}.text-neutral-700{--tw-text-opacity: 1;color:rgb(64 64 64 / var(--tw-text-opacity))}.text-neutral-800{--tw-text-opacity: 1;color:rgb(38 38 38 / var(--tw-text-opacity))}.text-neutral-900{--tw-text-opacity: 1;color:rgb(23 23 23 / var(--tw-text-opacity))}.text-stone-50{--tw-text-opacity: 1;color:rgb(250 250 249 / var(--tw-text-opacity))}.text-stone-100{--tw-text-opacity: 1;color:rgb(245 245 244 / var(--tw-text-opacity))}.text-stone-200{--tw-text-opacity: 1;color:rgb(231 229 228 / var(--tw-text-opacity))}.text-stone-300{--tw-text-opacity: 1;color:rgb(214 211 209 / var(--tw-text-opacity))}.text-stone-400{--tw-text-opacity: 1;color:rgb(168 162 158 / var(--tw-text-opacity))}.text-stone-500{--tw-text-opacity: 1;color:rgb(120 113 108 / var(--tw-text-opacity))}.text-stone-600{--tw-text-opacity: 1;color:rgb(87 83 78 / var(--tw-text-opacity))}.text-stone-700{--tw-text-opacity: 1;color:rgb(68 64 60 / var(--tw-text-opacity))}.text-stone-800{--tw-text-opacity: 1;color:rgb(41 37 36 / var(--tw-text-opacity))}.text-stone-900{--tw-text-opacity: 1;color:rgb(28 25 23 / var(--tw-text-opacity))}.text-red-50{--tw-text-opacity: 1;color:rgb(254 242 242 / var(--tw-text-opacity))}.text-red-100{--tw-text-opacity: 1;color:rgb(254 226 226 / var(--tw-text-opacity))}.text-red-200{--tw-text-opacity: 1;color:rgb(254 202 202 / var(--tw-text-opacity))}.text-red-300{--tw-text-opacity: 1;color:rgb(252 165 165 / var(--tw-text-opacity))}.text-red-400{--tw-text-opacity: 1;color:rgb(248 113 113 / var(--tw-text-opacity))}.text-red-500{--tw-text-opacity: 1;color:rgb(239 68 68 / var(--tw-text-opacity))}.text-red-600{--tw-text-opacity: 1;color:rgb(220 38 38 / var(--tw-text-opacity))}.text-red-700{--tw-text-opacity: 1;color:rgb(185 28 28 / var(--tw-text-opacity))}.text-red-800{--tw-text-opacity: 1;color:rgb(153 27 27 / var(--tw-text-opacity))}.text-red-900{--tw-text-opacity: 1;color:rgb(127 29 29 / var(--tw-text-opacity))}.text-orange-50{--tw-text-opacity: 1;color:rgb(255 247 237 / var(--tw-text-opacity))}.text-orange-100{--tw-text-opacity: 1;color:rgb(255 237 213 / var(--tw-text-opacity))}.text-orange-200{--tw-text-opacity: 1;color:rgb(254 215 170 / var(--tw-text-opacity))}.text-orange-300{--tw-text-opacity: 1;color:rgb(253 186 116 / var(--tw-text-opacity))}.text-orange-400{--tw-text-opacity: 1;color:rgb(251 146 60 / var(--tw-text-opacity))}.text-orange-500{--tw-text-opacity: 1;color:rgb(249 115 22 / var(--tw-text-opacity))}.text-orange-600{--tw-text-opacity: 1;color:rgb(234 88 12 / var(--tw-text-opacity))}.text-orange-700{--tw-text-opacity: 1;color:rgb(194 65 12 / var(--tw-text-opacity))}.text-orange-800{--tw-text-opacity: 1;color:rgb(154 52 18 / var(--tw-text-opacity))}.text-orange-900{--tw-text-opacity: 1;color:rgb(124 45 18 / var(--tw-text-opacity))}.text-amber-50{--tw-text-opacity: 1;color:rgb(255 251 235 / var(--tw-text-opacity))}.text-amber-100{--tw-text-opacity: 1;color:rgb(254 243 199 / var(--tw-text-opacity))}.text-amber-200{--tw-text-opacity: 1;color:rgb(253 230 138 / var(--tw-text-opacity))}.text-amber-300{--tw-text-opacity: 1;color:rgb(252 211 77 / var(--tw-text-opacity))}.text-amber-400{--tw-text-opacity: 1;color:rgb(251 191 36 / var(--tw-text-opacity))}.text-amber-500{--tw-text-opacity: 1;color:rgb(245 158 11 / var(--tw-text-opacity))}.text-amber-600{--tw-text-opacity: 1;color:rgb(217 119 6 / var(--tw-text-opacity))}.text-amber-700{--tw-text-opacity: 1;color:rgb(180 83 9 / var(--tw-text-opacity))}.text-amber-800{--tw-text-opacity: 1;color:rgb(146 64 14 / var(--tw-text-opacity))}.text-amber-900{--tw-text-opacity: 1;color:rgb(120 53 15 / var(--tw-text-opacity))}.text-yellow-50{--tw-text-opacity: 1;color:rgb(254 252 232 / var(--tw-text-opacity))}.text-yellow-100{--tw-text-opacity: 1;color:rgb(254 249 195 / var(--tw-text-opacity))}.text-yellow-200{--tw-text-opacity: 1;color:rgb(254 240 138 / var(--tw-text-opacity))}.text-yellow-300{--tw-text-opacity: 1;color:rgb(253 224 71 / var(--tw-text-opacity))}.text-yellow-400{--tw-text-opacity: 1;color:rgb(250 204 21 / var(--tw-text-opacity))}.text-yellow-500{--tw-text-opacity: 1;color:rgb(234 179 8 / var(--tw-text-opacity))}.text-yellow-600{--tw-text-opacity: 1;color:rgb(202 138 4 / var(--tw-text-opacity))}.text-yellow-700{--tw-text-opacity: 1;color:rgb(161 98 7 / var(--tw-text-opacity))}.text-yellow-800{--tw-text-opacity: 1;color:rgb(133 77 14 / var(--tw-text-opacity))}.text-yellow-900{--tw-text-opacity: 1;color:rgb(113 63 18 / var(--tw-text-opacity))}.text-lime-50{--tw-text-opacity: 1;color:rgb(247 254 231 / var(--tw-text-opacity))}.text-lime-100{--tw-text-opacity: 1;color:rgb(236 252 203 / var(--tw-text-opacity))}.text-lime-200{--tw-text-opacity: 1;color:rgb(217 249 157 / var(--tw-text-opacity))}.text-lime-300{--tw-text-opacity: 1;color:rgb(190 242 100 / var(--tw-text-opacity))}.text-lime-400{--tw-text-opacity: 1;color:rgb(163 230 53 / var(--tw-text-opacity))}.text-lime-500{--tw-text-opacity: 1;color:rgb(132 204 22 / var(--tw-text-opacity))}.text-lime-600{--tw-text-opacity: 1;color:rgb(101 163 13 / var(--tw-text-opacity))}.text-lime-700{--tw-text-opacity: 1;color:rgb(77 124 15 / var(--tw-text-opacity))}.text-lime-800{--tw-text-opacity: 1;color:rgb(63 98 18 / var(--tw-text-opacity))}.text-lime-900{--tw-text-opacity: 1;color:rgb(54 83 20 / var(--tw-text-opacity))}.text-green-50{--tw-text-opacity: 1;color:rgb(240 253 244 / var(--tw-text-opacity))}.text-green-100{--tw-text-opacity: 1;color:rgb(220 252 231 / var(--tw-text-opacity))}.text-green-200{--tw-text-opacity: 1;color:rgb(187 247 208 / var(--tw-text-opacity))}.text-green-300{--tw-text-opacity: 1;color:rgb(134 239 172 / var(--tw-text-opacity))}.text-green-400{--tw-text-opacity: 1;color:rgb(74 222 128 / var(--tw-text-opacity))}.text-green-500{--tw-text-opacity: 1;color:rgb(34 197 94 / var(--tw-text-opacity))}.text-green-600{--tw-text-opacity: 1;color:rgb(22 163 74 / var(--tw-text-opacity))}.text-green-700{--tw-text-opacity: 1;color:rgb(21 128 61 / var(--tw-text-opacity))}.text-green-800{--tw-text-opacity: 1;color:rgb(22 101 52 / var(--tw-text-opacity))}.text-green-900{--tw-text-opacity: 1;color:rgb(20 83 45 / var(--tw-text-opacity))}.text-emerald-50{--tw-text-opacity: 1;color:rgb(236 253 245 / var(--tw-text-opacity))}.text-emerald-100{--tw-text-opacity: 1;color:rgb(209 250 229 / var(--tw-text-opacity))}.text-emerald-200{--tw-text-opacity: 1;color:rgb(167 243 208 / var(--tw-text-opacity))}.text-emerald-300{--tw-text-opacity: 1;color:rgb(110 231 183 / var(--tw-text-opacity))}.text-emerald-400{--tw-text-opacity: 1;color:rgb(52 211 153 / var(--tw-text-opacity))}.text-emerald-500{--tw-text-opacity: 1;color:rgb(16 185 129 / var(--tw-text-opacity))}.text-emerald-600{--tw-text-opacity: 1;color:rgb(5 150 105 / var(--tw-text-opacity))}.text-emerald-700{--tw-text-opacity: 1;color:rgb(4 120 87 / var(--tw-text-opacity))}.text-emerald-800{--tw-text-opacity: 1;color:rgb(6 95 70 / var(--tw-text-opacity))}.text-emerald-900{--tw-text-opacity: 1;color:rgb(6 78 59 / var(--tw-text-opacity))}.text-teal-50{--tw-text-opacity: 1;color:rgb(240 253 250 / var(--tw-text-opacity))}.text-teal-100{--tw-text-opacity: 1;color:rgb(204 251 241 / var(--tw-text-opacity))}.text-teal-200{--tw-text-opacity: 1;color:rgb(153 246 228 / var(--tw-text-opacity))}.text-teal-300{--tw-text-opacity: 1;color:rgb(94 234 212 / var(--tw-text-opacity))}.text-teal-400{--tw-text-opacity: 1;color:rgb(45 212 191 / var(--tw-text-opacity))}.text-teal-500{--tw-text-opacity: 1;color:rgb(20 184 166 / var(--tw-text-opacity))}.text-teal-600{--tw-text-opacity: 1;color:rgb(13 148 136 / var(--tw-text-opacity))}.text-teal-700{--tw-text-opacity: 1;color:rgb(15 118 110 / var(--tw-text-opacity))}.text-teal-800{--tw-text-opacity: 1;color:rgb(17 94 89 / var(--tw-text-opacity))}.text-teal-900{--tw-text-opacity: 1;color:rgb(19 78 74 / var(--tw-text-opacity))}.text-cyan-50{--tw-text-opacity: 1;color:rgb(236 254 255 / var(--tw-text-opacity))}.text-cyan-100{--tw-text-opacity: 1;color:rgb(207 250 254 / var(--tw-text-opacity))}.text-cyan-200{--tw-text-opacity: 1;color:rgb(165 243 252 / var(--tw-text-opacity))}.text-cyan-300{--tw-text-opacity: 1;color:rgb(103 232 249 / var(--tw-text-opacity))}.text-cyan-400{--tw-text-opacity: 1;color:rgb(34 211 238 / var(--tw-text-opacity))}.text-cyan-500{--tw-text-opacity: 1;color:rgb(6 182 212 / var(--tw-text-opacity))}.text-cyan-600{--tw-text-opacity: 1;color:rgb(8 145 178 / var(--tw-text-opacity))}.text-cyan-700{--tw-text-opacity: 1;color:rgb(14 116 144 / var(--tw-text-opacity))}.text-cyan-800{--tw-text-opacity: 1;color:rgb(21 94 117 / var(--tw-text-opacity))}.text-cyan-900{--tw-text-opacity: 1;color:rgb(22 78 99 / var(--tw-text-opacity))}.text-sky-50{--tw-text-opacity: 1;color:rgb(240 249 255 / var(--tw-text-opacity))}.text-sky-100{--tw-text-opacity: 1;color:rgb(224 242 254 / var(--tw-text-opacity))}.text-sky-200{--tw-text-opacity: 1;color:rgb(186 230 253 / var(--tw-text-opacity))}.text-sky-300{--tw-text-opacity: 1;color:rgb(125 211 252 / var(--tw-text-opacity))}.text-sky-400{--tw-text-opacity: 1;color:rgb(56 189 248 / var(--tw-text-opacity))}.text-sky-500{--tw-text-opacity: 1;color:rgb(14 165 233 / var(--tw-text-opacity))}.text-sky-600{--tw-text-opacity: 1;color:rgb(2 132 199 / var(--tw-text-opacity))}.text-sky-700{--tw-text-opacity: 1;color:rgb(3 105 161 / var(--tw-text-opacity))}.text-sky-800{--tw-text-opacity: 1;color:rgb(7 89 133 / var(--tw-text-opacity))}.text-sky-900{--tw-text-opacity: 1;color:rgb(12 74 110 / var(--tw-text-opacity))}.text-blue-50{--tw-text-opacity: 1;color:rgb(239 246 255 / var(--tw-text-opacity))}.text-blue-100{--tw-text-opacity: 1;color:rgb(219 234 254 / var(--tw-text-opacity))}.text-blue-200{--tw-text-opacity: 1;color:rgb(191 219 254 / var(--tw-text-opacity))}.text-blue-300{--tw-text-opacity: 1;color:rgb(147 197 253 / var(--tw-text-opacity))}.text-blue-400{--tw-text-opacity: 1;color:rgb(96 165 250 / var(--tw-text-opacity))}.text-blue-500{--tw-text-opacity: 1;color:rgb(59 130 246 / var(--tw-text-opacity))}.text-blue-600{--tw-text-opacity: 1;color:rgb(37 99 235 / var(--tw-text-opacity))}.text-blue-700{--tw-text-opacity: 1;color:rgb(29 78 216 / var(--tw-text-opacity))}.text-blue-800{--tw-text-opacity: 1;color:rgb(30 64 175 / var(--tw-text-opacity))}.text-blue-900{--tw-text-opacity: 1;color:rgb(30 58 138 / var(--tw-text-opacity))}.text-indigo-50{--tw-text-opacity: 1;color:rgb(238 242 255 / var(--tw-text-opacity))}.text-indigo-100{--tw-text-opacity: 1;color:rgb(224 231 255 / var(--tw-text-opacity))}.text-indigo-200{--tw-text-opacity: 1;color:rgb(199 210 254 / var(--tw-text-opacity))}.text-indigo-300{--tw-text-opacity: 1;color:rgb(165 180 252 / var(--tw-text-opacity))}.text-indigo-400{--tw-text-opacity: 1;color:rgb(129 140 248 / var(--tw-text-opacity))}.text-indigo-500{--tw-text-opacity: 1;color:rgb(99 102 241 / var(--tw-text-opacity))}.text-indigo-600{--tw-text-opacity: 1;color:rgb(79 70 229 / var(--tw-text-opacity))}.text-indigo-700{--tw-text-opacity: 1;color:rgb(67 56 202 / var(--tw-text-opacity))}.text-indigo-800{--tw-text-opacity: 1;color:rgb(55 48 163 / var(--tw-text-opacity))}.text-indigo-900{--tw-text-opacity: 1;color:rgb(49 46 129 / var(--tw-text-opacity))}.text-violet-50{--tw-text-opacity: 1;color:rgb(245 243 255 / var(--tw-text-opacity))}.text-violet-100{--tw-text-opacity: 1;color:rgb(237 233 254 / var(--tw-text-opacity))}.text-violet-200{--tw-text-opacity: 1;color:rgb(221 214 254 / var(--tw-text-opacity))}.text-violet-300{--tw-text-opacity: 1;color:rgb(196 181 253 / var(--tw-text-opacity))}.text-violet-400{--tw-text-opacity: 1;color:rgb(167 139 250 / var(--tw-text-opacity))}.text-violet-500{--tw-text-opacity: 1;color:rgb(139 92 246 / var(--tw-text-opacity))}.text-violet-600{--tw-text-opacity: 1;color:rgb(124 58 237 / var(--tw-text-opacity))}.text-violet-700{--tw-text-opacity: 1;color:rgb(109 40 217 / var(--tw-text-opacity))}.text-violet-800{--tw-text-opacity: 1;color:rgb(91 33 182 / var(--tw-text-opacity))}.text-violet-900{--tw-text-opacity: 1;color:rgb(76 29 149 / var(--tw-text-opacity))}.text-purple-50{--tw-text-opacity: 1;color:rgb(250 245 255 / var(--tw-text-opacity))}.text-purple-100{--tw-text-opacity: 1;color:rgb(243 232 255 / var(--tw-text-opacity))}.text-purple-200{--tw-text-opacity: 1;color:rgb(233 213 255 / var(--tw-text-opacity))}.text-purple-300{--tw-text-opacity: 1;color:rgb(216 180 254 / var(--tw-text-opacity))}.text-purple-400{--tw-text-opacity: 1;color:rgb(192 132 252 / var(--tw-text-opacity))}.text-purple-500{--tw-text-opacity: 1;color:rgb(168 85 247 / var(--tw-text-opacity))}.text-purple-600{--tw-text-opacity: 1;color:rgb(147 51 234 / var(--tw-text-opacity))}.text-purple-700{--tw-text-opacity: 1;color:rgb(126 34 206 / var(--tw-text-opacity))}.text-purple-800{--tw-text-opacity: 1;color:rgb(107 33 168 / var(--tw-text-opacity))}.text-purple-900{--tw-text-opacity: 1;color:rgb(88 28 135 / var(--tw-text-opacity))}.text-fuchsia-50{--tw-text-opacity: 1;color:rgb(253 244 255 / var(--tw-text-opacity))}.text-fuchsia-100{--tw-text-opacity: 1;color:rgb(250 232 255 / var(--tw-text-opacity))}.text-fuchsia-200{--tw-text-opacity: 1;color:rgb(245 208 254 / var(--tw-text-opacity))}.text-fuchsia-300{--tw-text-opacity: 1;color:rgb(240 171 252 / var(--tw-text-opacity))}.text-fuchsia-400{--tw-text-opacity: 1;color:rgb(232 121 249 / var(--tw-text-opacity))}.text-fuchsia-500{--tw-text-opacity: 1;color:rgb(217 70 239 / var(--tw-text-opacity))}.text-fuchsia-600{--tw-text-opacity: 1;color:rgb(192 38 211 / var(--tw-text-opacity))}.text-fuchsia-700{--tw-text-opacity: 1;color:rgb(162 28 175 / var(--tw-text-opacity))}.text-fuchsia-800{--tw-text-opacity: 1;color:rgb(134 25 143 / var(--tw-text-opacity))}.text-fuchsia-900{--tw-text-opacity: 1;color:rgb(112 26 117 / var(--tw-text-opacity))}.text-pink-50{--tw-text-opacity: 1;color:rgb(253 242 248 / var(--tw-text-opacity))}.text-pink-100{--tw-text-opacity: 1;color:rgb(252 231 243 / var(--tw-text-opacity))}.text-pink-200{--tw-text-opacity: 1;color:rgb(251 207 232 / var(--tw-text-opacity))}.text-pink-300{--tw-text-opacity: 1;color:rgb(249 168 212 / var(--tw-text-opacity))}.text-pink-400{--tw-text-opacity: 1;color:rgb(244 114 182 / var(--tw-text-opacity))}.text-pink-500{--tw-text-opacity: 1;color:rgb(236 72 153 / var(--tw-text-opacity))}.text-pink-600{--tw-text-opacity: 1;color:rgb(219 39 119 / var(--tw-text-opacity))}.text-pink-700{--tw-text-opacity: 1;color:rgb(190 24 93 / var(--tw-text-opacity))}.text-pink-800{--tw-text-opacity: 1;color:rgb(157 23 77 / var(--tw-text-opacity))}.text-pink-900{--tw-text-opacity: 1;color:rgb(131 24 67 / var(--tw-text-opacity))}.text-rose-50{--tw-text-opacity: 1;color:rgb(255 241 242 / var(--tw-text-opacity))}.text-rose-100{--tw-text-opacity: 1;color:rgb(255 228 230 / var(--tw-text-opacity))}.text-rose-200{--tw-text-opacity: 1;color:rgb(254 205 211 / var(--tw-text-opacity))}.text-rose-300{--tw-text-opacity: 1;color:rgb(253 164 175 / var(--tw-text-opacity))}.text-rose-400{--tw-text-opacity: 1;color:rgb(251 113 133 / var(--tw-text-opacity))}.text-rose-500{--tw-text-opacity: 1;color:rgb(244 63 94 / var(--tw-text-opacity))}.text-rose-600{--tw-text-opacity: 1;color:rgb(225 29 72 / var(--tw-text-opacity))}.text-rose-700{--tw-text-opacity: 1;color:rgb(190 18 60 / var(--tw-text-opacity))}.text-rose-800{--tw-text-opacity: 1;color:rgb(159 18 57 / var(--tw-text-opacity))}.text-rose-900{--tw-text-opacity: 1;color:rgb(136 19 55 / var(--tw-text-opacity))}.text-opacity-0{--tw-text-opacity: 0}.text-opacity-5{--tw-text-opacity: .05}.text-opacity-10{--tw-text-opacity: .1}.text-opacity-20{--tw-text-opacity: .2}.text-opacity-25{--tw-text-opacity: .25}.text-opacity-30{--tw-text-opacity: .3}.text-opacity-40{--tw-text-opacity: .4}.text-opacity-50{--tw-text-opacity: .5}.text-opacity-60{--tw-text-opacity: .6}.text-opacity-70{--tw-text-opacity: .7}.text-opacity-75{--tw-text-opacity: .75}.text-opacity-80{--tw-text-opacity: .8}.text-opacity-90{--tw-text-opacity: .9}.text-opacity-95{--tw-text-opacity: .95}.text-opacity-100{--tw-text-opacity: 1}.shadow{--tw-shadow: 0 1px 3px 0 rgb(0 0 0 / .1), 0 1px 2px -1px rgb(0 0 0 / .1);--tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.shadow-top{--tw-shadow: 0 -1px 3px 0 rgb(0 0 0 / .1), 0 1px 2px -1px rgb(0 0 0 / .1);--tw-shadow-colored: 0 -1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.blur{--tw-blur: blur(8px);filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.drop-shadow{--tw-drop-shadow: drop-shadow(0 1px 2px rgb(0 0 0 / .1)) drop-shadow(0 1px 1px rgb(0 0 0 / .06));filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.filter{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}body,html,#app{height:100%;width:100%}#app{position:relative;display:flex;height:100%;width:100%;flex-direction:column;align-items:stretch;font-size:1rem;line-height:1.5rem;font-family:Open Sans,Helvetica,Arial,sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.focus-within\\:outline:focus-within{outline-style:solid}.focus-within\\:outline-2:focus-within{outline-width:2px}.hover\\:bg-slate-600:hover{--tw-bg-opacity: 1;background-color:rgb(71 85 105 / var(--tw-bg-opacity))}.hover\\:bg-blue-300:hover{--tw-bg-opacity: 1;background-color:rgb(147 197 253 / var(--tw-bg-opacity))}.hover\\:bg-slate-300:hover{--tw-bg-opacity: 1;background-color:rgb(203 213 225 / var(--tw-bg-opacity))}.hover\\:text-blue-400:hover{--tw-text-opacity: 1;color:rgb(96 165 250 / var(--tw-text-opacity))}.group:hover .group-hover\\:visible{visibility:visible}@font-face{font-family:Open Sans;font-style:normal;font-display:swap;font-weight:400;src:url(data:font/woff2;base64,) format("woff2"),url(data:font/woff;base64,) format("woff");unicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F}@font-face{font-family:Open Sans;font-style:normal;font-display:swap;font-weight:400;src:url(data:font/woff2;base64,) format("woff2"),url(data:font/woff;base64,) format("woff");unicode-range:U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116}@font-face{font-family:Open Sans;font-style:normal;font-display:swap;font-weight:400;src:url(data:font/woff2;base64,d09GMgABAAAAAA6AABIAAAAAGuQAAA4dAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGjIbgS4cPAZgP1NUQVReADwIgXwJnxQREAqCLIIoCwoAATYCJAMQBCAFhHgHIAyFHxueGSMRwsYBCH5/eQR/dcAbii/dQgwwl3bdoc9Y/KFiquobhCHvVkU31hBuSnCtGH1wMW6EJLP+83jZn/vykgErz4KzVSql8irbZsWCM104K3m630KI/3btk5Im1igokPBQDsi/UWt7M2jmN7sNk34RMQ2NCg2/t2bWPYQ9C6SF0qtl2TkPUbcpYIojeQKSYWAZzsmrvV2+cuocl/Zd/pI0HTdgP58/jEKVPVaFQvgtJDiJUQfP/2+umtZ+cBljJQ6haZbf7YYQzUF+nPpJn+zkoluLj2V4AI6yElpC8p6sxE+KfxT9Kd9e9m27Yw50BHTNgRYqKyzAbJkbYsSo4oBNZy/JNSvw8NvYOvArhoiwH2Htu04HgcEJYCONRxgIglwMhFu3npPVQv42VmRjLLGsom48PLMW+zrgmeeb0w5Py5yZPng6ZvR1wQMOAIYBBoDAKrgTzs72Po5Qi4WGxB5IGEl6L4IZBBl2ELIRjGLqdeKaeDskuNVaB8aOxn7T+DqeLoHYOF5FPMBWS8m13jQ3HhmPjEd2Rl4FvDvnu2gnREBM488BOKxnbL9QZrshL0bxiStXYyU9mFCf8P5q238XAfP/bAtAJ7wfqRJvB1iy1G7i24Zqn2QU2MLZfS1EwMLX0kcA/cUzTrFMhWAM1CbAKBqzYYgocNpp2XtHgm2PAzhGGSKJJX0xx3CQKATVk9qdZvs+vO3DIfQmpFDYxNsRro54lQQYX4v5Vt/1f3j9fQ5D9W8AXHTZ/m3xeav5ivyevU7Y4ZLznkSnzQ5rt90RS5y1LblY67DTNvse6yxKFdZZ4rDjLrslSHWdnQ45kQqXBPLFeVcDIp2vDko67yb45PioS5xxxQ1rbHUwueil22DHuPQ5y623xT7TO1/3PRZZYaM9qcJiuvyr7XXYhfawsES0ItQY2HHhglJz6OCB/RvWr1u7ZvUqfeWK5cuWLin+r7/8/NOPP3z/3bfffP3Vl198/tnN9dXldDIeBf/k8aOHF0NnHwzu93ud9r27d263mo16rfj4vWxluZJG3zvjs+lKqZJEq/9yqyVzNSwJ+3XQbQi+Y3Wra/NzpbVTrOHByNX9YSLzDplLcZL2ML5eqdXjVmdoKZcZgc7N+kaNG25jtGEGJEdAkxlXHcbN/d4ttbjNan1JJsBYwiSCDn+PVxEL3lrLv0bRbRxjzrBmO83UolPSQt+fgVnpS6VUA0kqy5PRfmz8gEsUtaGF+EtXT+0BDYCn9Upo8S+mz+QhYyIY8KhtJQc8szIv7lp2F+U2WZNzZfYnpJ+IdbUSSamLhfTZJPr0PxvasjyB59mAfU7qzJk/dbHIdAtIrEQaVlUY5VcmrbTXjZydTpX+TqxHhnXmPeMSTrDFZrhLElps4I4YDUVCsBYfU0iCt8wtvT1cmCP3KXeBEQLjFPh+bKC3U6yiYlYsip05WEw/lfHN+qJ3E2Ah3DLIQTbo8didd5LenzkScychkKmZ0GkqdL2Yw3BVj5m2pB1wE7Ull94Tm2+xw0H9otKQNKfgSaqVPNLQ8Pbd3WdAMAF3e6e4GBST7obvWcour7RbnTt/gnayb0CWp4pdrH5FdvJYnp21pL4ztPBqfHqcXaA3su3RFjfD2e6sQaEx5sJHdzEYKzes2nhAHnPeXO2irJBYIeNA+kEQjaR/ENH4ID1MDiNqC2vwxPQUiThFLDtKjiIL7FZglP1fOeec3riReR4Rwbftlbp0ATKG5wAWpyqyUqe1eyOtViiPMDTn1UqrE/09076wDuAKknBOh+cYxmFwxrlWrMXlwsL5uSNmubqfY549KXOn/DKbb9nIgSbwHTAIMOMrPxxSv0l/aCW984R7NvpjmaVxUDR2SkbHzO88r1bSFZKbzJ+kdM9oh37A+PLr9FKSkedRySND/PgWrwRf0leTnptxlR7jIWnjfEKSmoXWULJrNU0c+tFlwNhOXW9j3ENQiLJdyveMbcSK8xHk56rXuTaFutKDcUv1PCnClTTWFDaccX25gJsRiWS8yznlRdSgxvqicTMOIMDsgmiI5vlkR0o7MHVMdrxuRdxP+HBsGd8vwwScWw1Cs+q4aZN35L0LE6fVKXRBl2Ero+OvabcLvxcPLYUg/U942BxKu2Dn9oabctpom3X8qg30EcFoAmYWkJLA8pNuwChuNQiaMGzkcTZ2DIcpxKfNRCgExgfCEgU9pHLWLuoJnFIH7i5Jmcv9UvNSCIRJb6CxJZUiOzLyAg5ZAs7xwBvWlFFB69wFBakzTEM4tyfpCtICFUbBKxGbJk4uwpKKiW2z0hwzzybA1KLH1VoJurJrQLHtEHXCKTgdWvAa81BuruHz4L1WQfYQaC5znpuGj1xZgFvGOBDpXr1jm45uDYxTiMC5LSPd+9rN2Gb1QivTZI+hgsp3G4KFYuaEiHTuCwvGFJOeF6kh0NsNH1gtqTL7fVngPQvvXDWsi0hEFcPKgBpO01t3XUKIPowS22jK1cptLK2tOzK6abeg14BmcUuZ/TKoBnpMiG0KTw9OffjBIqwMJuR84UQeiMZzC407Nx21C6s160VlCjo9EPqNzLdx8JTdQfMkgeAKlBacFNC9BkQTQNTT3M6EgM2BtJM2+Dkp6PD2CNyTI6mLUKNHpVK2viY3Xif85IxdbVtAV+1HqFMgEtHLE0eGAXM7n5pzw72GOF63lho59npI4E/GLKPGiY7QRAkwYJSGcutL5AcgLEUFZxNoI8yIKbdjKeZgdk1taYLzg5kE3NxJ0qHtJRzjiji5caCGlFt+9SXE2IHdqbaKo8MXBjCugnUWNfJ926A8WX8jrAY4y9i/t3G8FjYYq9A0DmWW/X1N0p2BhZY4tZsOQlZjJbtmCpX9xxQiPaCwQEDw6if/fhxwSV6D05C90hl/wIG10UXUd+rbudS8Q0zKoLDL6y6uwsZOaoLz7Q8jDbRdwuplgHpHXoDik6vMR8RGSp4NXJpqRcJSCHGLS1a73tcbe7iuU6neLw7HEom8jeHAm2hLOOMWNP78/9RzD4wOivQ9QFm3vwF3+oN4atuEaBOW2ivXLBf37Z/EWPgfdAosNLXK6j9USdWuPrltrnj5T97jzi8eGxLdBLBMhZ/xpiCBUjjV0S5ICKYJRen9TPZG863uTfKr9IaWM0r3k/27opwfN0qWwLBmc8cBz2X2L6ctyjxqaqUvQtlWpC7yEvCCR9PabNl2jAmGaAT4npCAp1Y01jTp9cB8MMtWGq+0/p3WfX4zbobCNIGihDf/ojmplHDkX7VdYQg9tHEHeFcGbzsJtJnCQ9X4wGrKCRCqhdLulqZPg8zNuQSCvyE/6aXM3oV1+s4PPsowJtNuv+gXbXsed5qC40pT9nQBokJo6TpUZULGWHOIsx9dL2WG8BYwp5HJ7Xl7EASYYYUDJsOAC2AOR242cGEXM4Rb2EUBs8yXYcEuW/BS/c1XX7Vufv31t2nVO5/Ytnz01qLvW6/Jm7/xDq1527r51TeXqre80eTjKi3zx3dr9kb9x38O+n/xVqv+krp7+L1LaujFx/9qP3f53/bzT4yNXPpwz5hR93zy1vC7Do6uevCzu1tdb++5dPnNPfNcd8d8O/5z+Z1dbXa3e9jeD6LaM844y+4IyymcU90ybaW729YyvyUjszjZezQ18qfbJ4YPrFTEOAwDUT5AJgj/7zIOCwCQ8a30p/jcHXFOwRcuWnzwyl45JfU2gclOhjvrX0yANz1dscfabIgKCpK4TkCyHP1sJSenBaXt3Vt/IAiAgJLDXjk7zZX/m9lmBgC89ezDfwDw3kKO+efof69ER80zAUhgAAACXl+NLOcpSH8EEMA7c/4cHpJysLzPB/Hz1IP85By7hGMaEQxuJOMwsPtdayDIwonrhhG3jOVXYS0hGFeZse371wrIxLNrOQYSWysimgavleChwjVOpNPUMwiw026xlmCl4zfhaUYUXdoXOba0b+W43Cd/EKW69VjMp9U8Lfp4ICNFDR6Md8Sc0Kjn5C4J48wQ9gMenQ3d2nw7ax6KzT+5xbM+nBkeFAf3wJCL5K2YpxWJ/KGZkjBrmE4rntzdD3WYYy5Idunjl6xT5/7BrY2oDY/FK+eZr+NUnzQkIUVZmYdKjVwJNLk/uIVEca1tvCYkT+jUNttay5t40l2/FJoJPdjiN4tv29NSmxQ4dEhS4asno1GFOk3S2yTcBOxs7mwDOnSakeRqB0/ULbOMZZNqMS4AXJJxFGR8CaWW7C9WF2sLshsT5mcb9GVfSfBnPocvE8nezERPlkF3RqIrbWpCZ5rrSPdke7pskxOtOxTzaCle5KrwMbcoZ06J3KR8ojRfNjIzz8kZufNZcdOyrHyclR5lmai0uIuEkROTkkvm0RxrqSnewyDG7n5UZD9048Kc7IaJTqDTDvjeKe/67o63y9uua7k40XQVqh1Zt13NUllYLreeSJSZezgzE6c8Ry3uGEYeGaVD40OBLm5fk8SefMmV83bkSdb0a6ddeg1KqUVMGJx/guGnx035MSmeOzFkfb8pJ7rEvoF1W9B88DCRINez0iMF7bLw9nlBVTfma/a5n+8iusycokbi//p9SN1TUoNS3Wqw5tYcsl0VZa7aNa65+Er+AxdchlO1yVbVJEsqTYM6NasmaS9IP0gM2oeVbvgB3A2yyGZVkJlq1pjmYivZD0xwQ1AUke6knYHx3to7TcbYVsAyelKANgaGjAvQxoAyZmJA2hiAeic19xNt19Zt24a4ktrAznHNNwUgrkTrZ6x0THM/F7ZrJX544fV6/X54px5eoK2pdlNSDIqV2sMMvaUADcio+9c+1oOrz/XCRAIAAA==) format("woff2"),url(data:font/woff;base64,) format("woff");unicode-range:U+1F00-1FFF}@font-face{font-family:Open Sans;font-style:normal;font-display:swap;font-weight:400;src:url(data:font/woff2;base64,) format("woff2"),url(data:font/woff;base64,) format("woff");unicode-range:U+0370-03FF}@font-face{font-family:Open Sans;font-style:normal;font-display:swap;font-weight:400;src:url(data:font/woff2;base64,d09GMgABAAAAAB1cABIAAAAAN3AAABz1AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGlYbiFQcgWYGYD9TVEFUXgCBNAiBfAmfFBEQCq4ApggLgSQAATYCJAOCRAQgBYR4ByAMhR8bnjEVbFyFh40DgHH/Q0f0/7cEahLTzh9SWgYsDPDAIGW0lw19LAeAMjqfXNhYhuY5jXkHh/PkXdTeyEgYyV8J0YIiN5RMJzz9TNcXschlYgfJQcN3QYLB5rtun2Mt4dL2x9ynv+mw2Zj9nQGxqf9x8THTCElm/X91X973hJb0cUPgiUcKYcU+34sEdsKeNlwSLzV9WmradOQf+G32/icUEGUKGIUYGIkK1kzEBiUErMQowIjGyK1dZRjbde6i3G4Q1e/9X8/unvcjIGySGEMhDBpsikKhkOYbS1DmlUdyT+4j/MMGXBjQQDA45vflzKQhVAA7UP0qyYLsMFrGgCmTbk2gW7YHDqcFPmVe7e3ye1GzN/T5bgXUef6Z6T6pF1gUlecLgMsyVr+fEvxEd+pY2KpOjSJSqY8rqNrUBhH2vStQFlgcH87ZpeUAjQilrhxYMTZmnXOvvjSq6kPr/3SW7YzGOsvekIJ2qvOhnXDRHVQpU9RpGs8fj1YzI+2O5QPLC/ju2Q7Jy/YRLQUISuCOkCvq0qVOioaLqklVxl9D3wM0qflrGCuoL3TM+/3M3oDrxjSNhhgURKTZxnKuqV+5sSBAwRCy8CFovH88MCAQSgADCNuAIX5KvFALg86bCRMuQqQoPNH44iQQQACBGIYTP1mAAw4eHG9uogQYrxtV5cB4ryosA8aHwjwVML7kaiqBAQsAnEDQ92HQB6jRnsKWSj9sSIfDe65BB6eAs/HAwCOfH9jPKrDIl/O44PilAMdhoa7WAgNduTYAhTELT4tFadbTXYXo/tmXxEZ0l7v+29cZvmT/7/4DdWBq4UqGIGdWjND5QcCj8fJA10cxNoA05fPS/b6fsgwldEBWYcY5nvtcvyRSUMIx3xaRPDeL32Q6i7jALqVqXGe3UFfPQMYAb7f35BA+YZ/LldxbeZBnWc39qHryRb7L/qWO5M+sNzGgeNQANaZcs7Iph3LN9a43xamQ3EjuqVgW5Eo4jXO4yC33pkvFDaKN7aHS5s7Wq9pcO/E++1RdENcs+049Ei/I/qS++qB+qDf1d70DgWL0MYYYals0o53avdlABHQoBJXJeGYBUsgX4ZWAKvHMgckPaOdFC9kJwGgI6CaQWBEswcpsGqDd9HAEgzMGSAK2hFAdGNQ0kNHNhOF1kyRIlKPqIXYPUNOh0N9AEgCbiBlUdGfeOiRAZrq0kN8AmIQUkDfkjYpyZliuQTtIEkDYNjD36iEJYAMngAAggTqqK5RcURlTITRSRIpkMbXQTKBJAAtCLEgNqQmjRBqpbAnJPiBHJJXAhHjfkyRg+BCuwU0jBOQfZUo8JUkApGDV2sDMew9MX0kRIMbeMwKQwoXL5RTGMdfTsLIy1aDSGEyh+2s+AGsJO1NOzCMiHMIhrnHOTDhdJOD65O+qqD5hXpwKAcwwueMIF08ii1InZEFr4OJucf84J86NB8aD4sFmyEdDADwQwZQ5C9Zs2GLAYieihQNQvvMY4PPY5du1sGtSdjQRDmD40Oa9EMYg18A/CY3+3wfY9zUMaBsAZKw6A5DDAjLZOgYAdzBKT47W79YoEQTg3HulBgGg/xh8EMQKCngwxkQqw4iFglAAUo7GIlrAl+oY9ayxZQyz41whpY2F7T3TGGj/EXvA4GH7uryurBvr7vrh4YG3nLchb0PfRuBJWAeghY/h6/iZ7fo2IBMuCv9fKaL7a3+513bh+lgTDdcf59M92H/m7/lr/pw/5ncEWYumIuHOoCfHm1hQQfeD/KkcOKZ7bwta2fwjwHcOmL3Ye3SJg9RYY5tx+433554KQxaVGbNJk11GE6THop2G/KJXQ2IfoonqWx1w0pjua1oLtsHhfsd8lT0OOaKQ3+UMSjHZcbfP1HzzSw46qtuI+QSp0aHfuE12a9Vn2Az/5Ef8okGbAVOJRaMO8lObtmjv6UY3KSJQd0Bt7b3P4hfm52b7+3p7urs6O9rbWluamxob6utqNWpVTXVVZUV5WWmJsth/sjUZjwrvPrx/93Yzt+bNxuvhoNd99fLF80671WzUPz2bLC0+FQfvKn42WapWouD8oper6mLoCuaNYFlKKHtGd/omqymtrWKNEjJmxQY/ll0NroVF5AqgbTxYZ8CdXm4ok+1AjRnDGld33lZxrgyu5hBz03nbK5nXHs02v3nBgvtlArrSjgOmoz1UqkDvHl9VP2/AstQydqas2UzQpmARpobuWbEg3F9MDXBF5TAqbqeO3nBJ0JQb5G7LNuEhTEXkYwYlbvCX/MtyyEdE0JGLrpEp0HZWdbtvWO9QZitrsrbsrltpv0+sq5XAmIQi3lsRynhvVW7KYYR8b7X5hYkr99SG6V6eUU5KgyGCipFnokVxp2/YfqvKcpTUSgpYNDQqCSmxaN8ixNgbejIS7WCOyY5SG8uYjdXmY9gaw1H7mCJcTwpZELAyT/R4abZceLz4eGWqx/cHEolfwn3+RUBGuBWoRzqqSb+/pPoGWlKlI7//iGuQkZo9JxnbWnI3nAsjn/Z6Ahuvyc2vAT26n1FAPs3uoVrJAi9NeVvnb2VwVBENOqu4ioQgGUQ5MLoDTml71bbmhd31JsjwRLENdxyW41kYJs86UvVyg1IlY8OOuQsulS0HG63Myd3UBBFbI667kQGGjFfR0sqjDQruTpiu65TUZe6ukJ68KxwNLGIgGeOH0cNArMN1V0yewhdPFQc/ih4ZGplu0F2of84ZZ3R8V3ZxQYSya7bVlvXIRyjZQxZPVZCYaG2Px9UKZQEv01q10umF8lXa3TQGooUkbY3qMxf8yMfjalqxlqarF7WaNXAz0dcfY8IBVmaZPcFqdQ57Gneae5CRgAGvgzw3iQ5zI2E3X/TAvH6Sx7KDRl7RyCrZMEK8v1atxFcUTZs9nXgkp458GEdb97FlHhWOC8GlI3fJrNsgtqDtSMBtf6wkVJOFnI0BKFwfW0TVN5rGVuuOZaBrJjZakYYIIlrvleG9mkk00HQpcn07iu/IepFxkPEii4JElrfSOKhw2KZtHsijLkjyhO/yK+uMG6gh1KpSj/zNSeq9RxXcnkqmUNpCps0dsuNoWC9ToEviaGrzAZhAq40Gx/E0o+6Ss+SciVZorTJWFdrymwtuu7I7Hfq0c0Ohl1XeAPYIDcCsNoN6wi6pZcriCisDvh+vDQwMoKRluR5vMER9uIWgEnRqvdHUcjxlP0Huwrk5gSkd8wQdcFZVGWvboBNgCTM3WDJ2vn5Yu6TwhC0uhYoHZCz5HVm/j3dJBJlGGy5lTQnVaam1VxXMgmyBtveo0NLKIjNn+WYJR9KwZf68xIE1x9LWSZsmEtA3WN5GGYKUe8II+e7bTRh9mVbmL0ouVADRrFvOh8pAK+MhAq8mvnySra6+krBuDKTNDO0Ml3juVemcBJQhq4+mlN/Gm6UZj+MSePqluQkS3okRAAVfPikMpVwFOqrJlBIcYQSw8pXScxFRZXct2UjgGPIC/pX1BAbMtpIYRgwPc9u5AEV7bnjZGsP2YuWINAMDFR/TTDXzDnpdZXcNORbzBBQ9In48lPzYoT1ovzc28udO8JBolLpo1Pu2oTeNe4D1vFIxj/WEVansmpr3EVWvfTrQYguK6xzVoaIWHI0Absav/VEOihos8biFf2GQLW7foWxkYDLX6a6bUSRZXWl38XWNG39QN3YNcFvdb8FsyIzC2sqzt6ZRQzOrZuyW6U44t6QqMWjhRLRDN3cYJKWFuMA9A6WdAAMy94LRhdAueENW+VxmwE6jC5AWHr3pBepqQ755U45F+wYEjnQg7a2tErasHdAwpAN240G4eAfmBoNk2LiXewG6vpWVsLtgaEbi+2UrxuWGSFD199amr7FBWiktSMKy031vR5vNAhBIaeLN3Bik0hBho6wXwp1kHQoHiTIKkG9/6rfbRxmQHTR2sjX4oPfYIa/pQPJkQzOjZi1cogQi3sXTTYswtZaXB/Y1yVCIe6VdPv8hOnkfURl9ubxUWBGUcSUdux7SLvQUsy5I1eqFr3LnaglC/u9QdxV89f1FeExmG2DERaj43f+JVChsP/WC6Fwgkt7jsOeedKeyY2omtNfcv2NqD813gFT4PypjqqykC6nmDoKxPb72WPpFV363uuLNtwN2XKJdD1nFHGx3fJh7gmliN7lQWq9K/77wM8Y9HoNO/9vxQwxywwnF96P7P4Z8/p0RMQQZjdp6x4K2l933VucV0CA2ioah5JQcaG0k+UHQDrwzv/xBsexUJuikRQt6XCOtHgy+ZWWqXTSATL/I3KUolmL7D6zz/WnaLMm8FVSU2OEvNRYNJd7zV1pvYOT01oxpwGp4ccpKSxdZ/JoqbRjGGhGhy/Cl5Gx1oY9Oz2QBWvkFcj3eUXYHfdZh4z/hL4DrkIf8tPpt2HIBbWIsLymtO3Qb4J5QjYdulM2ykTU35ZmUDwfqaA06Q4+MqSeOYghYOPRgug2QJVdE1hd4wEkElQH6L4iivy3xLgdFCaFO5nYomYOvZ02XtWAoCAhXwPjLLCLwa5fTZz45eGpm5u4zt2b1neWD6zcP8rkTJy93jio1c/Kzyytn4ROSynJwVbbUXobvs5XDxMJtIjK8aGgtLEQxV75E5TJ9uoYIzzW8/ZBIXGkc3gD2NDANT3U2iS0k82trpBkW12E+msgKaI81Leecf90gzZAsRIhoOIT8aCgGFgbejFu7cajsnIeRacjNV2IZIiPcW3Yvgx5ZJbzvLHETYQjloSGdqpeERgHncn35N+EmQnr46tI1Mz2s1GaQ/pKq1WGasxZZq5Dx+G71PDhHlJc1Sykw0gyF0RoygqunxB2QvS1TS8rceouLNLWN9FWSXC3NhoYivVXXSRTtACvETXkaSPEwj1PZ7pAtlfnTzGY1OEe2pkSjIaohVm6npm30RSD+LlAve4cRgGXypvs+xvMAm9f3X15EeDjIyzljyA88H50Oaaw2s8at9FktnXSYmQubPo+hWvFMXJDvD9RTnkqodxhHA9Jjq8cNl+pglf1YndGYLzDEuuDDLwlJXa7e7rKwvqVcPBVzDTKMXrbaPtKerWJVb2hNvLm8cDl70mBuIjh7o6iSDSM1sq7fsQr1Skrl2jyf72qxnn3m5baq7N5nYB+G438vG3FkqATh+dZNGz3M/2B1GvqrwNfJYh9xe7HdYT6wZkOrnEPCNR1WIpls+qXiZ8QLcUEyI++sBmWnntHEk/VWZgjAU5QR20bheqlQ4mqxaC9DD5okJ5pEgzUPDfd0miK79hI9lq1ure5+hEgwaF5dubo4xfZ+iGxAxodNbaaWW1oGHM9IdvPDvt5u1fr9RSFTCcJqDktyYFWVyYkbxMmXoQGi++iDuEaWdEJOC3YXYm5bgcs5VgL3rkiGqbyVDriHj84BTxWRpnTzAtSX5PyKOedNatusSJ6R1vX6IGRsUIVyhDhfHocd12kSXytK52MwyPmk62yQIGSQaRdtrtgclzDYOT89feRXw5D4UjpX05TEpcf/cPhL4mG2AtKphq8Sw4UXj+/N0BpivK6xTAwrvuRvphdONI9Fyu3McP4q8P2xrbz+7XKzSupZted3xyvpVkel8XZ+OUJ2Z276M37ykfu3mkVU3TETD2oM6sqqlIY9f7p4DePz8MNxeC0+tqCPcns1JaZ/3Vov2oUyPUg9oWcZjpfS5m7fsRO0x7N4h63V/GdS30KRfRLh+1GZsZyXZ0v+jtUr/bif+pgo1VUHNV6mpe0c8zQ3YerWa4MnmjeIfXovl7VSzs7UKquUhpp4nHfYI9KswchXCtykENuG9a4ZMXn9OkXY9q2B1H/mhO0+W9OjwO8DnnT2dard/O1mr4he88HrLcIk3KM/6fKSBAHz9YajwFxXL2Xgt+Ej1aMmr16nCNq/MUjlzByYaaioKSfn8TAenq04IW7AdMGE324ZmiXPtuU5CR0edXXu75zzWw1LUvsmCGo5wqA41hfNjY6v/eLmW3xjqT1RI6fyLfjNVmFZojxLnm0C425rkekBU76NIq8zyjm7i0Hb8SJg/46GWcOlHy9l2kybGz7bIfBv80zRl+XHmPC0/RHk3pl0HLvoJK/ukUcknRHN2J19yaDLJGOBwqcsEAuoKgNORJG9uyU7YfVbemXo8UqPo8Rbff7S4DrKsz+l4dr15sLeLKx/0Sle3SWPSKcsKyVZFX481WLiSEGE6BPext1OlMdZP1+eOLVlH/nE+IXhrD8P7wPmuHoyU28bPqp2nLo+nxQ//CVZ4rvkrR3Mto6wS3WdiTVbVvNRL89WnABnlI9bum5sYGhTUGP+/qeC+4KXTE15meSbicH5Be2MuKgKu8MreNs1G6085fwg5V6SXR09kM+juofXODrrxb+Zvfmp7Z5vwZZwgzbTBpyLOPBA0GhkA01DGQ0FW4i1g7vOEEv8mrxNExsYGIazWP/umEyO9wuS0v548a9sqsK/iU2oJhfldBkVmIwUcGOdSnsZ2abRZgcL6xyuxE+pmfP4sXTsXvwihi8aYQ1EpigteTZxNudr5MbzxuE2JeWzCW4lIdoRQS03Qug6QNkiuBz3atkz147jl4iopbLk9V+nvV6QIzRc09PDJNapg/eMv9LsmY+sf/fOY2I+/aFBoz97u7+Hnth1jj/wTlRP3nLGQkHeRjcL9PlJNeP9/J2mgZ2QMODdmeZSEZLsWfvlSoL1t8sWLdr0Wb7Xbq+JtMywrdGLib5GyjqzCEEvQ2SdnP6xY5LTkw6VqdRkowqTq8frGVQQjhHk8TU+cWWe/fpxiRiJr8JohBpJjeLnjfzCM2Il1bl4r3PbouI862vJQsZnLy1aJ3JyzPql7ya/UVtcueBwuF9MyPGgXPGwo+ZxvGyvo4D1pGvE/ZVzElEhDfRosjY3/tHc6OOj8Nq2u3EbJGPq6X3zWW6TS3RVeAK5yWa3qXiwpA1hXz53+2xuLEciFGY8IDWZ6W0zfc8lxW3gHbvrECd5Gp3aYzxSYL1Pj6zny9xFlUbTRJa5jw6H2w8uN5wUZ5uKzeQljbQ0WiFZYWa57cfv9n9nenqmrqy61FDTzWCp0Xr8ixE5bgq3sWH0KB8oGF/77zC4il8h7Qj5LNKoMaDtO88l/QxLzy2WHga9wVdC+NyonUKNCeqNmNqaDv04ndiXMEA55Oe91Z9NVEXc80v1l4325rq80VoKrHsx1LWzXVK32LjMvI0+MTifkQK9g8RxbFBGMyHNdHIxPqniBknCXtg3U19RXWa4JnBMQ0V8rmE6beF4cJ4FjZilsL/aOfWz7Oy5fAqHidqxKiMdWVwjiz+YlyKT2drA1WWC5wNOIMwSi9NFc6u2Gyym6SMALMrweCwqFm0lpptgxthMhMkr92u2NPdgSFQkGnrgkolQN3PHiFNZaIn8zhMk7RzKhP6fMRoFc/uvd4zh2TmxWP4Me5ajE8tI/68EVUAF2mEnCEgJOT1H8/M3RBUigqv2/qi4TBzt6H0i0H7wkjqs2wiOPvDOdu4tO/ta4utP/at419OcNGNMloe+gLrRSp3FpWPeuoBODxhj9L1+hWSGOOCdZdxSHRzOTLpb5eDnB+b/RFsvDFnWoDXGOfwceDPgEbgzf7WXqzMe9rfOt5TwxrriMhnA+d6TTBav0pUj8fwJ5S8Lv3RmPLlbv3TZEXViC0gPEtcGQ7UlSSYNbIRHxbfNrtcxae1SpktmMX6ygehK676my/kl777PxOejI1PPbkRKTL/NeozQFkWM2FYtmIS0POKYQeJC5BtqkVHPiKRhkPAYJR0ZROYGkmUaqxAzn+qE1Ph0IKm+qYrk+OY1e2MopoWtIIxvRWxUd9i0tmOQ7NsQJXRCbBmKlEyGvUSISIjeTEywujMAuLZ17wDASqCytCEklsqgjnPN5GjNZk6kItE+h7wNYNHxsThbPvvfWqy5A/GJjY+i3Mi+AkjGlu5ukXSU2b1/munazbxMAk1lHlSMUNngU7HVeWMOENqTtfw/OjTaqgX8mkSlD2VpCnwtdmMdpwghJinhqC26M4QHPTYdWmec97tRqqPDOGBp/QLyxF7s4ehI0+RBT8KYcOFWaa0z1omV/YS+L0+BJULg4A22mnR075sU8FRRJU4uOBVG9TBZrQ7LwNtbz02DcBuEuDWLH8q7Rp0CAkIx4O4nXajn1/7HAFL+cEyNH0ilkKFRHsQ6XzNcIlgxBu9RdgbR/xLAW0FVDJyDz+yuk29QFD/3wL7+HQx3nO+Zpu14CkLfS/n9oEGksaBwfx/SsYpfiuh+P6X7RpowpPxZHOA1Dzst6rPCrBWQGmF0NNJ8B3/QhZ4ejCUQ237UQR9v6KC5OY5F43EwjidhaTVoH6XNVgvuD9z5BDugYNG9RyNIujZ4lESYl4SA04bMMQItoFaTC3RiIZoy6WxWBMr2bDju4JyXvqcZzNADHUUOu1gkqk01h4q+3jTQfwbSah5PV3VSeDFdqLv0eHyuZz7hVvfSAvlgzzDWoOGyl+94Ig/OBrOZU7RaiVwORnI5GRr94jzoxhbGUsbjQKp2+f1hj/NoNJ2GumOfRfJ7DW9QBqx9HRpPNc9tVUGbJfMS6DxANJiUP3aHGMl7mg/iq0k1SsqeLt2PryPfc20WRsgdLWaGs5rwGi/NxgBpJ0Yv4qgokvdTSAZ6WhcKEFaFInmU7W99HcSvEAgAGJio2d91ZA+2f3kPAACvH934B4CP61PK/+b/Xmab3QnAAwMAAAH8HapI2NNFfiDZPqunYMPoOqxFqUVlipXl88Se4gR2ACsxe3gem4EK7gsPR0uPKgyh/OMuFHbnJzv7d4/0Z/j05XFGB/vmH7vyv92tQu08VDlnhMyXFHNNZX8Cg62FcG462jpwX/uIFpUzzZOfCCo5NJCdD8HSXVmz74Y/wb4J1AnrhNxpOJhGP+iu3xL/b4+9SHQXTCbm41h8EV/znUvzGehKMVYf4CkWRyAAWGECXTYcoEDhZRHwlQfdMIAAoA9HuM2wBAD8BK5LETB2SKCIeWUpBjgeLcUCM+hSHFjEYSkeGAldYgh+yRqHAARkEpYiQES2TsO6LyIWbO4TVmyeEtb4i78mSpVqjVRKFFPSYGDzLkIGiYELQ6HqLCopFMsloZ5FsiesUmqr/KcwQm0WSkup1NLZGZ1FdRUG8bpUipVoUKyWx1P+LCukNIuqqVauUFGRXUlDzYuH9NXxXC6DEKI6U6xW+WgVX568XzLBYghFTOEYOfEsHrDTqe1IQ6ROMCVRIqDXHmb3XHMEeNyllo+zqp6g8nQYlvMUrGr2IsSXSEbOWghZoQowUwKtsEKuQ8QZNFPpyidCEYKXMJCdVLcZ22sod1PIhVu/GxV1AULU7jqa/SD1+phqLa2aNat606lasiqnLFRMuny2rLLZKh2zSvpiKPv7KO5VKOqjUTiUumDwRvIHIfI63MrtdE7LOrv1WFltJLPl4G1Yp9c9K62OKOpiyCuJyKopqVWtpSVbkkKLC9wSFVkpeYfkXAizJch0UnqzEhOdkNRZ8Uk44mIrNtIxTCw+09HMm8WjU6JoViQei4AOR88KI5FQ8mFjSDokoKxg/4cgf0qgf4F7/leX9puK5+zTVyjyC86G57yZZYM0OeEoSh94bDEgcgDmcHb4wMAJW98239DMR2BxViZnOTp47ABze1wwrJ+5YX6YvOaj3oqPfKsKWSGwQ8WWg0IqBthr8lfZg07s2a5h65SNIkIKp9CK3/C/nlBQfId2R/0KS4EQ2JdSwS6pVbBigLbzr4WhwISXOORctHcSt0Xn9HSihGOE5E3HkIE7RzGrhqekHcPz8wbpq3T5cQQZe9k7OgrWzxOOacXyExiYIorjKBq1omlhMZFINbhxOwt1pgJXoFxaYNORF6nKCkfV+VSIgGdQ45edJzze/ok/SzMAAA==) format("woff2"),url(data:font/woff;base64,) format("woff");unicode-range:U+0590-05FF,U+200C-2010,U+20AA,U+25CC,U+FB1D-FB4F}@font-face{font-family:Open Sans;font-style:normal;font-display:swap;font-weight:400;src:url(data:font/woff2;base64,) format("woff2"),url(data:font/woff;base64,) format("woff");unicode-range:U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB}@font-face{font-family:Open Sans;font-style:normal;font-display:swap;font-weight:400;src:url(data:font/woff2;base64,) format("woff2"),url(data:font/woff;base64,) format("woff");unicode-range:U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF}@font-face{font-family:Open Sans;font-style:normal;font-display:swap;font-weight:400;src:url(data:font/woff2;base64,) format("woff2"),url(data:font/woff;base64,) format("woff");unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}.tooltip-base[data-v-d35d8fc6]{visibility:hidden;position:absolute;z-index:10;width:8rem;cursor:help;border-width:1px;--tw-bg-opacity: 1;background-color:rgb(255 255 255 / var(--tw-bg-opacity));padding:.5rem;font-family:Open Sans;font-size:.875rem;line-height:1.25rem;font-weight:400;--tw-text-opacity: 1;color:rgb(0 0 0 / var(--tw-text-opacity));--tw-drop-shadow: drop-shadow(0 1px 2px rgb(0 0 0 / .1)) drop-shadow(0 1px 1px rgb(0 0 0 / .06));filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.group:hover .tooltip-base[data-v-d35d8fc6]{visibility:visible}.base-label{font-size:.875rem;line-height:1.25rem;font-weight:600;text-transform:uppercase;--tw-text-opacity: 1;color:rgb(71 85 105 / var(--tw-text-opacity))}.list-item-empty{padding:.25rem .5rem;--tw-text-opacity: 1;color:rgb(156 163 175 / var(--tw-text-opacity))}.list-item{cursor:pointer;padding:.25rem .5rem}.list-item:hover{--tw-bg-opacity: 1;background-color:rgb(203 213 225 / var(--tw-bg-opacity))}.list-item.list-item-selected,.list-item:hover{box-shadow:inset 2px 0 #3b82f6}.list-item.list-item-selected{--tw-bg-opacity: 1;background-color:rgb(219 234 254 / var(--tw-bg-opacity));--tw-text-opacity: 1;color:rgb(29 78 216 / var(--tw-text-opacity))}.group{height:2rem;padding-left:.5rem;padding-right:.5rem;font-size:.875rem;line-height:2rem;--tw-text-opacity: 1;color:rgb(156 163 175 / var(--tw-text-opacity))}.group-wrapper:not(:first-child){border-top-width:1px}.base-icon[data-v-50cc951a]{display:inline-block}.toolbar[data-v-50cc951a]{cursor:pointer}.blue[data-v-50cc951a]{--tw-text-opacity: 1;color:rgb(30 64 175 / var(--tw-text-opacity))}.blue[data-v-50cc951a]:hover{--tw-text-opacity: 1;color:rgb(96 165 250 / var(--tw-text-opacity))}.base-button .base-button-text[data-v-e765be52]{display:flex}.base-button.default[data-v-e765be52]{position:relative;--tw-bg-opacity: 1;background-color:rgb(191 219 254 / var(--tw-bg-opacity));padding:.125rem .5rem;--tw-shadow: 0 1px 2px 0 rgb(0 0 0 / .05);--tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.base-button.default[data-v-e765be52]:hover{--tw-bg-opacity: 1;background-color:rgb(147 197 253 / var(--tw-bg-opacity))}.base-button.default.toggled[data-v-e765be52],.base-button.default[data-v-e765be52]:focus-within{--tw-bg-opacity: 1;background-color:rgb(96 165 250 / var(--tw-bg-opacity))}.base-button.default .base-button-text[data-v-e765be52]{font-size:.875rem;line-height:1.25rem;text-transform:uppercase}.base-button.lg[data-v-e765be52]{height:2rem}.base-button.lg .base-button-text[data-v-e765be52]{font-size:1rem;line-height:1.5rem}.base-button.xl[data-v-e765be52]{height:3rem}.base-button.rounded[data-v-e765be52]{border-radius:.125rem}.base-button.circular[data-v-e765be52]{border-radius:9999px}.base-field[data-v-d06880ce]{display:flex}.base-field.left[data-v-d06880ce]{flex-direction:row}.base-field.left[data-v-d06880ce]>:not([hidden])~:not([hidden]),.base-field.right[data-v-d06880ce]>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.5rem * var(--tw-space-x-reverse));margin-left:calc(.5rem * calc(1 - var(--tw-space-x-reverse)))}.base-field.right[data-v-d06880ce]{flex-direction:row-reverse}.base-field.right[data-v-d06880ce]>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 1 }.base-field.top[data-v-d06880ce]{flex-direction:column}.base-field.top[data-v-d06880ce]>:not([hidden])~:not([hidden]),.base-field.down[data-v-d06880ce]>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 0;margin-top:calc(.25rem * calc(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.25rem * var(--tw-space-y-reverse))}.base-field.down[data-v-d06880ce]{flex-direction:column-reverse}.base-field.down[data-v-d06880ce]>:not([hidden])~:not([hidden]){--tw-space-y-reverse: 1 }[data-v-d06880ce] .base-label{line-height:1.5rem}.field-text[data-v-d06880ce]{position:relative;display:flex;border-radius:.125rem;border-width:1px;--tw-border-opacity: 1;border-color:rgb(209 213 219 / var(--tw-border-opacity));--tw-bg-opacity: 1;background-color:rgb(241 245 249 / var(--tw-bg-opacity))}.field-text[data-v-d06880ce]:focus-within{outline-style:solid;outline-width:2px;outline-color:#3b82f6}.field-text input[data-v-d06880ce]:not([type=checkbox]){background-color:transparent;padding-left:.25rem;padding-right:.25rem}.field-text input[data-v-d06880ce]:not([type=checkbox]):focus{outline:2px solid transparent;outline-offset:2px}.field-invalid[data-v-d06880ce]:focus-within{outline-style:solid;outline-width:2px;outline-color:#ef4444}.field-invalid[data-v-d06880ce]:not(:focus-within){--tw-border-opacity: 1;border-color:rgb(239 68 68 / var(--tw-border-opacity))}.checkbox[data-v-92dd509a] .field-text{display:flex;height:1.5rem;width:1.5rem;cursor:pointer;align-items:center}.checkbox[data-v-92dd509a] .field-text input{height:100%;width:100%;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;border-radius:.125rem;border-width:1px}.checkbox[data-v-92dd509a] .field-text input:checked:after{display:inline-block;height:100%;width:100%;text-align:center;font-size:1.25rem;line-height:1.25rem;content:"\\2714"}[data-v-26d0b8f0] .field-text .field-text-input{padding-left:.25rem;padding-right:.125rem}[data-v-55140278] .field-text .field-text-input{padding-left:.125rem;padding-right:.25rem}.field-combo-box-list-wrapper[data-v-7a5ae1ca]{pointer-events:auto;position:absolute;top:6rem;z-index:10;height:9rem;width:100%;overflow:auto;border-radius:.25rem;border-width:1px;--tw-border-opacity: 1;border-color:rgb(209 213 219 / var(--tw-border-opacity));--tw-bg-opacity: 1;background-color:rgb(255 255 255 / var(--tw-bg-opacity));text-indent:1px;--tw-shadow: 0 1px 3px 0 rgb(0 0 0 / .1), 0 1px 2px -1px rgb(0 0 0 / .1);--tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.field-combo-box-picker[data-v-7a5ae1ca]{position:absolute;top:0px;right:0px;box-sizing:border-box;cursor:pointer;padding-right:.5rem;font-size:.75rem;line-height:1.5rem}.field-combo-box-picker[data-v-7a5ae1ca]:hover{--tw-text-opacity: 1;color:rgb(37 99 235 / var(--tw-text-opacity))}.multi-select[data-v-7a5ae1ca] .field-text-input{margin-top:.25rem}.multi-select[data-v-7a5ae1ca] .field-text{flex-direction:column;padding-bottom:.25rem;padding-left:.25rem}.multi-select.tags-below[data-v-7a5ae1ca] .field-text{flex-direction:column-reverse}.multi-select.tags-inline[data-v-7a5ae1ca] .field-text{flex-direction:row}[data-v-7a5ae1ca] .field-text{box-sizing:border-box;flex-wrap:wrap;padding-right:1.25rem}[data-v-7a5ae1ca] .field-text-input{width:100%;flex:1 1 0%}.base-dialog[data-v-25732f10]{display:flex;height:100%;width:100%;flex-direction:column}.header-blue .base-dialog-header[data-v-25732f10]{--tw-bg-opacity: 1;background-color:rgb(51 65 85 / var(--tw-bg-opacity));--tw-text-opacity: 1;color:rgb(245 245 244 / var(--tw-text-opacity))}.header-blue .toolbar[data-v-25732f10]:hover{--tw-text-opacity: 1;color:rgb(214 211 209 / var(--tw-text-opacity))}.base-dialog-header[data-v-25732f10]{display:flex;padding:.25rem .5rem}.base-dialog-header-title[data-v-25732f10]{flex:1 1 0%}.base-dialog-header-toolbar[data-v-25732f10]>:not([hidden])~:not([hidden]){--tw-space-x-reverse: 0;margin-right:calc(.5rem * var(--tw-space-x-reverse));margin-left:calc(.5rem * calc(1 - var(--tw-space-x-reverse)))}',document.head.appendChild(e)}catch(t){console.error("vite-plugin-css-injected-by-js",t)}})();/**
* vee-validate v4.5.11
* (c) 2022 Abdelrahman Awad
* @license MIT
*/function isCallable$2(e){return typeof e=="function"}const isObject$2=e=>e!==null&&!!e&&typeof e=="object"&&!Array.isArray(e);function interpolate(e,t){return e.replace(/(\d:)?{([^}]+)}/g,function(r,n,a){if(!n||!t.params)return a in t?t[a]:t.params&&a in t.params?t.params[a]:`{${a}}`;if(!Array.isArray(t.params))return a in t.params?t.params[a]:`{${a}}`;const s=Number(n.replace(":",""));return s in t.params?t.params[s]:`${n}{${a}}`})}function merge$1(e,t){return Object.keys(t).forEach(r=>{if(isObject$2(t[r])){e[r]||(e[r]={}),merge$1(e[r],t[r]);return}e[r]=t[r]}),e}class Dictionary{constructor(t,r){this.container={},this.locale=t,this.merge(r)}resolve(t){return this.format(this.locale,t)}getLocaleDefault(t,r){var n,a,s,o,l;return((s=(a=(n=this.container[t])===null||n===void 0?void 0:n.fields)===null||a===void 0?void 0:a[r])===null||s===void 0?void 0:s._default)||((l=(o=this.container[t])===null||o===void 0?void 0:o.messages)===null||l===void 0?void 0:l._default)}format(t,r){var n,a,s,o,l,f,u,m;let v;const{field:b,rule:P,form:F}=r,C=(s=(a=(n=this.container[t])===null||n===void 0?void 0:n.names)===null||a===void 0?void 0:a[b])!==null&&s!==void 0?s:b;return P?(v=((f=(l=(o=this.container[t])===null||o===void 0?void 0:o.fields)===null||l===void 0?void 0:l[b])===null||f===void 0?void 0:f[P.name])||((m=(u=this.container[t])===null||u===void 0?void 0:u.messages)===null||m===void 0?void 0:m[P.name]),v||(v=this.getLocaleDefault(t,b)||`${C} is not valid`),isCallable$2(v)?v(r):interpolate(v,Object.assign(Object.assign({},F),{field:C,params:P.params}))):(v=this.getLocaleDefault(t,b)||`${C} is not valid`,isCallable$2(v)?v(r):interpolate(v,Object.assign(Object.assign({},F),{field:C})))}merge(t){merge$1(this.container,t)}}let DICTIONARY;function localize(e,t){DICTIONARY||(DICTIONARY=new Dictionary("en",{}));const r=n=>DICTIONARY.resolve(n);return typeof e=="string"?(DICTIONARY.locale=e,t&&DICTIONARY.merge({[e]:t}),r):(DICTIONARY.merge(e),r)}const WHITESPACE_RE=/^\s+$/;configure$1({generateMessage:localize("en",{messages:{required:"Value is required",minLength:"Value is too short",maxLength:"Value is too long",minValue:"Value is too small",maxValue:"Value is too large",whitespace:"Value is only whitespaces"}})});defineRule("required",e=>isEmpty$3(e)===!1);defineRule("minLength",(e,[t])=>e.length>=t);defineRule("maxLength",(e,[t])=>e.length<=t);defineRule("minValue",(e,[t])=>isEmpty$3(e)||e>=t);defineRule("maxValue",(e,[t])=>isEmpty$3(e)||e<=t);defineRule("whitespace",e=>!WHITESPACE_RE.test(e));class OverlayManager extends HTMLElement{constructor(){super(),document.body.appendChild(this)}add(t){this.appendChild(t)}remove(t){this.removeChild(t)}}customElements.define("overlay-manager",OverlayManager);const mouseDownDocument={mounted(e,t){document.addEventListener("mousedown",t.value)},unmounted(e,t){document.removeEventListener("mousedown",t.value)}},scrollDocument={mounted(e,t){document.addEventListener("scroll",t.value,!0)},unmounted(e,t){document.removeEventListener("scroll",t.value,!0)}};var core$3={install(e){const t=new OverlayManager;e.provide("OverlayManager",t),e.config.globalProperties.Icon=Icon,e.directive("mousedown-document",mouseDownDocument),e.directive("scroll-document",scrollDocument)}},__defProp$1=Object.defineProperty,__defProps=Object.defineProperties,__getOwnPropDescs=Object.getOwnPropertyDescriptors,__getOwnPropSymbols=Object.getOwnPropertySymbols,__hasOwnProp$1=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable,__defNormalProp$1=(e,t,r)=>t in e?__defProp$1(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,__spreadValues=(e,t)=>{for(var r in t||(t={}))__hasOwnProp$1.call(t,r)&&__defNormalProp$1(e,r,t[r]);if(__getOwnPropSymbols)for(var r of __getOwnPropSymbols(t))__propIsEnum.call(t,r)&&__defNormalProp$1(e,r,t[r]);return e},__spreadProps=(e,t)=>__defProps(e,__getOwnPropDescs(t)),_export_sfc$1=(e,t)=>{const r=e.__vccOpts||e;for(const[n,a]of t)r[n]=a;return r};const _sfc_main$f={name:"BaseOverlay",setup(){const e=ref(null),t=inject("OverlayManager");return onMounted(()=>{t.add(e.value)}),onBeforeUnmount(()=>{t.remove(e.value)}),{rootEl:e}}},_hoisted_1$b={ref:"rootEl",class:"overlay-container"};function _sfc_render$f(e,t,r,n,a,s){return openBlock(),createElementBlock("div",_hoisted_1$b,[renderSlot(e.$slots,"default")],512)}var BaseOverlay=_export_sfc$1(_sfc_main$f,[["render",_sfc_render$f]]);const TooltipPositions=new Enum$2(["right-middle","right-top","right-bottom","middle","middle-top","middle-bottom","left-middle","left-top","left-bottom"],!1);TooltipPositions.RIGHT_MIDDLE;const _sfc_main$d={name:"BaseLabel",props:{value:{type:String,required:!0},separator:{type:String,default:":"}}},_hoisted_1$9={class:"base-label"};function _sfc_render$d(e,t,r,n,a,s){return openBlock(),createElementBlock("label",_hoisted_1$9,toDisplayString(r.value)+toDisplayString(r.separator),1)}var BaseLabel=_export_sfc$1(_sfc_main$d,[["render",_sfc_render$d]]);const SelectedCls$1="list-item-selected",_sfc_main$c={name:"BaseList",emits:["update:selections","click:item"],props:{options:{type:[Array,Object],default:()=>[]},selections:{type:Array,default:()=>[]}},setup(e,{emit:t}){const r=ref(null);watchEffect(()=>{const{options:v}=e;r.value=v!=null&&v.isCollection?v:new Collection$1(v)});const n=computed(()=>r.value.idField),a=computed(()=>r.value.displayField),s=computed(()=>r.value.isGrouped);function o(v){t("update:selections",...v)}function l(v){t("click:item",...v)}function f(...v){o(v)}function u(...v){l(v)}function m(v,b,P){v.stopPropagation(),v.preventDefault(),!P&&(o([b,v.target.classList.contains(SelectedCls$1)]),l([b]))}return{records:r,isGrouped:s,idField:n,displayField:a,onMouseDownListItem:m,onUpdateSelections:f,onClickItem:u}}},_hoisted_1$8={class:"base-list"},_hoisted_2$2$1=["onMousedown"],_hoisted_3$1$1={class:"group"},_hoisted_4$1$1={key:0,class:"list-item-empty"};function _sfc_render$c(e,t,r,n,a,s){const o=resolveComponent("BaseList",!0);return openBlock(),createElementBlock("ul",_hoisted_1$8,[(openBlock(!0),createElementBlock(Fragment,null,renderList(n.records,l=>(openBlock(),createElementBlock("li",{key:l.fullPath,class:normalizeClass(n.records.getOptionCls(l,r.selections)),onMousedown:f=>n.onMouseDownListItem(f,l,n.isGrouped)},[n.isGrouped?(openBlock(),createElementBlock(Fragment,{key:0},[createBaseVNode("div",_hoisted_3$1$1,[renderSlot(e.$slots,"groupDisplay",{group:l},()=>[createTextVNode(" Group: "+toDisplayString(n.records.getOptionDisplay(l)),1)])]),createVNode(o,{options:l,selections:r.selections,"onUpdate:selections":n.onUpdateSelections,"onClick:item":n.onClickItem},createSlots({_:2},[renderList(e.$slots,(f,u)=>({name:u,fn:withCtx(m=>[renderSlot(e.$slots,u,normalizeProps(guardReactiveProps(m)))])}))]),1032,["options","selections","onUpdate:selections","onClick:item"])],64)):renderSlot(e.$slots,"listItemDisplay",{key:1,option:l},()=>[createTextVNode(toDisplayString(n.records.getOptionDisplay(l)),1)])],42,_hoisted_2$2$1))),128)),renderSlot(e.$slots,"emptyList",{},()=>[n.records.length?createCommentVNode("",!0):(openBlock(),createElementBlock("li",_hoisted_4$1$1," No Records "))])])}var BaseList=_export_sfc$1(_sfc_main$c,[["render",_sfc_render$c]]);/*!
 * Font Awesome Free 6.1.1 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 * Copyright 2022 Fonticons, Inc.
 */function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),r.push.apply(r,n)}return r}function _objectSpread2(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};t%2?ownKeys(Object(r),!0).forEach(function(n){_defineProperty$1(e,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))})}return e}function _typeof$1(e){"@babel/helpers - typeof";return _typeof$1=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$1(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function _defineProperty$1(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _iterableToArray(e){if(typeof Symbol<"u"&&e[Symbol.iterator]!=null||e["@@iterator"]!=null)return Array.from(e)}function _iterableToArrayLimit(e,t){var r=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(r!=null){var n=[],a=!0,s=!1,o,l;try{for(r=r.call(e);!(a=(o=r.next()).done)&&(n.push(o.value),!(t&&n.length===t));a=!0);}catch(f){s=!0,l=f}finally{try{!a&&r.return!=null&&r.return()}finally{if(s)throw l}}return n}}function _unsupportedIterableToArray(e,t){if(e){if(typeof e=="string")return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);if(r==="Object"&&e.constructor&&(r=e.constructor.name),r==="Map"||r==="Set")return Array.from(e);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return _arrayLikeToArray(e,t)}}function _arrayLikeToArray(e,t){(t==null||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function _nonIterableSpread(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _nonIterableRest(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var noop$4=function(){},_WINDOW={},_DOCUMENT={},_MUTATION_OBSERVER=null,_PERFORMANCE={mark:noop$4,measure:noop$4};try{typeof window<"u"&&(_WINDOW=window),typeof document<"u"&&(_DOCUMENT=document),typeof MutationObserver<"u"&&(_MUTATION_OBSERVER=MutationObserver),typeof performance<"u"&&(_PERFORMANCE=performance)}catch{}var _ref=_WINDOW.navigator||{},_ref$userAgent=_ref.userAgent,userAgent=_ref$userAgent===void 0?"":_ref$userAgent,WINDOW=_WINDOW,DOCUMENT=_DOCUMENT,MUTATION_OBSERVER=_MUTATION_OBSERVER,PERFORMANCE=_PERFORMANCE;WINDOW.document;var IS_DOM=!!DOCUMENT.documentElement&&!!DOCUMENT.head&&typeof DOCUMENT.addEventListener=="function"&&typeof DOCUMENT.createElement=="function",IS_IE=~userAgent.indexOf("MSIE")||~userAgent.indexOf("Trident/"),NAMESPACE_IDENTIFIER="___FONT_AWESOME___",UNITS_IN_GRID=16,DEFAULT_FAMILY_PREFIX="fa",DEFAULT_REPLACEMENT_CLASS="svg-inline--fa",DATA_FA_I2SVG="data-fa-i2svg",DATA_FA_PSEUDO_ELEMENT="data-fa-pseudo-element",DATA_FA_PSEUDO_ELEMENT_PENDING="data-fa-pseudo-element-pending",DATA_PREFIX="data-prefix",DATA_ICON="data-icon",HTML_CLASS_I2SVG_BASE_CLASS="fontawesome-i2svg",MUTATION_APPROACH_ASYNC="async",TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS=["HTML","HEAD","STYLE","SCRIPT"],PRODUCTION$1=function(){try{return!0}catch{return!1}}(),PREFIX_TO_STYLE={fas:"solid","fa-solid":"solid",far:"regular","fa-regular":"regular",fal:"light","fa-light":"light",fat:"thin","fa-thin":"thin",fad:"duotone","fa-duotone":"duotone",fab:"brands","fa-brands":"brands",fak:"kit","fa-kit":"kit",fa:"solid"},STYLE_TO_PREFIX={solid:"fas",regular:"far",light:"fal",thin:"fat",duotone:"fad",brands:"fab",kit:"fak"},PREFIX_TO_LONG_STYLE={fab:"fa-brands",fad:"fa-duotone",fak:"fa-kit",fal:"fa-light",far:"fa-regular",fas:"fa-solid",fat:"fa-thin"},LONG_STYLE_TO_PREFIX={"fa-brands":"fab","fa-duotone":"fad","fa-kit":"fak","fa-light":"fal","fa-regular":"far","fa-solid":"fas","fa-thin":"fat"},ICON_SELECTION_SYNTAX_PATTERN=/fa[srltdbk\-\ ]/,LAYERS_TEXT_CLASSNAME="fa-layers-text",FONT_FAMILY_PATTERN=/Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Kit)?.*/i,FONT_WEIGHT_TO_PREFIX={900:"fas",400:"far",normal:"far",300:"fal",100:"fat"},oneToTen=[1,2,3,4,5,6,7,8,9,10],oneToTwenty=oneToTen.concat([11,12,13,14,15,16,17,18,19,20]),ATTRIBUTES_WATCHED_FOR_MUTATION=["class","data-prefix","data-icon","data-fa-transform","data-fa-mask"],DUOTONE_CLASSES={GROUP:"duotone-group",SWAP_OPACITY:"swap-opacity",PRIMARY:"primary",SECONDARY:"secondary"},RESERVED_CLASSES=[].concat(_toConsumableArray(Object.keys(STYLE_TO_PREFIX)),["2xs","xs","sm","lg","xl","2xl","beat","border","fade","beat-fade","bounce","flip-both","flip-horizontal","flip-vertical","flip","fw","inverse","layers-counter","layers-text","layers","li","pull-left","pull-right","pulse","rotate-180","rotate-270","rotate-90","rotate-by","shake","spin-pulse","spin-reverse","spin","stack-1x","stack-2x","stack","ul",DUOTONE_CLASSES.GROUP,DUOTONE_CLASSES.SWAP_OPACITY,DUOTONE_CLASSES.PRIMARY,DUOTONE_CLASSES.SECONDARY]).concat(oneToTen.map(function(e){return"".concat(e,"x")})).concat(oneToTwenty.map(function(e){return"w-".concat(e)})),initial=WINDOW.FontAwesomeConfig||{};function getAttrConfig(e){var t=DOCUMENT.querySelector("script["+e+"]");if(t)return t.getAttribute(e)}function coerce(e){return e===""?!0:e==="false"?!1:e==="true"?!0:e}if(DOCUMENT&&typeof DOCUMENT.querySelector=="function"){var attrs=[["data-family-prefix","familyPrefix"],["data-style-default","styleDefault"],["data-replacement-class","replacementClass"],["data-auto-replace-svg","autoReplaceSvg"],["data-auto-add-css","autoAddCss"],["data-auto-a11y","autoA11y"],["data-search-pseudo-elements","searchPseudoElements"],["data-observe-mutations","observeMutations"],["data-mutate-approach","mutateApproach"],["data-keep-original-source","keepOriginalSource"],["data-measure-performance","measurePerformance"],["data-show-missing-icons","showMissingIcons"]];attrs.forEach(function(e){var t=_slicedToArray(e,2),r=t[0],n=t[1],a=coerce(getAttrConfig(r));a!=null&&(initial[n]=a)})}var _default$1={familyPrefix:DEFAULT_FAMILY_PREFIX,styleDefault:"solid",replacementClass:DEFAULT_REPLACEMENT_CLASS,autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,mutateApproach:"async",keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0},_config=_objectSpread2(_objectSpread2({},_default$1),initial);_config.autoReplaceSvg||(_config.observeMutations=!1);var config={};Object.keys(_config).forEach(function(e){Object.defineProperty(config,e,{enumerable:!0,set:function(r){_config[e]=r,_onChangeCb.forEach(function(n){return n(config)})},get:function(){return _config[e]}})});WINDOW.FontAwesomeConfig=config;var _onChangeCb=[];function onChange(e){return _onChangeCb.push(e),function(){_onChangeCb.splice(_onChangeCb.indexOf(e),1)}}var d=UNITS_IN_GRID,meaninglessTransform={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function insertCss(e){if(!(!e||!IS_DOM)){var t=DOCUMENT.createElement("style");t.setAttribute("type","text/css"),t.innerHTML=e;for(var r=DOCUMENT.head.childNodes,n=null,a=r.length-1;a>-1;a--){var s=r[a],o=(s.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(o)>-1&&(n=s)}return DOCUMENT.head.insertBefore(t,n),e}}var idPool="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";function nextUniqueId(){for(var e=12,t="";e-- >0;)t+=idPool[Math.random()*62|0];return t}function toArray(e){for(var t=[],r=(e||[]).length>>>0;r--;)t[r]=e[r];return t}function classArray(e){return e.classList?toArray(e.classList):(e.getAttribute("class")||"").split(" ").filter(function(t){return t})}function htmlEscape(e){return"".concat(e).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function joinAttributes(e){return Object.keys(e||{}).reduce(function(t,r){return t+"".concat(r,'="').concat(htmlEscape(e[r]),'" ')},"").trim()}function joinStyles(e){return Object.keys(e||{}).reduce(function(t,r){return t+"".concat(r,": ").concat(e[r].trim(),";")},"")}function transformIsMeaningful(e){return e.size!==meaninglessTransform.size||e.x!==meaninglessTransform.x||e.y!==meaninglessTransform.y||e.rotate!==meaninglessTransform.rotate||e.flipX||e.flipY}function transformForSvg(e){var t=e.transform,r=e.containerWidth,n=e.iconWidth,a={transform:"translate(".concat(r/2," 256)")},s="translate(".concat(t.x*32,", ").concat(t.y*32,") "),o="scale(".concat(t.size/16*(t.flipX?-1:1),", ").concat(t.size/16*(t.flipY?-1:1),") "),l="rotate(".concat(t.rotate," 0 0)"),f={transform:"".concat(s," ").concat(o," ").concat(l)},u={transform:"translate(".concat(n/2*-1," -256)")};return{outer:a,inner:f,path:u}}function transformForCss(e){var t=e.transform,r=e.width,n=r===void 0?UNITS_IN_GRID:r,a=e.height,s=a===void 0?UNITS_IN_GRID:a,o=e.startCentered,l=o===void 0?!1:o,f="";return l&&IS_IE?f+="translate(".concat(t.x/d-n/2,"em, ").concat(t.y/d-s/2,"em) "):l?f+="translate(calc(-50% + ".concat(t.x/d,"em), calc(-50% + ").concat(t.y/d,"em)) "):f+="translate(".concat(t.x/d,"em, ").concat(t.y/d,"em) "),f+="scale(".concat(t.size/d*(t.flipX?-1:1),", ").concat(t.size/d*(t.flipY?-1:1),") "),f+="rotate(".concat(t.rotate,"deg) "),f}var baseStyles=`:root, :host {
  --fa-font-solid: normal 900 1em/1 "Font Awesome 6 Solid";
  --fa-font-regular: normal 400 1em/1 "Font Awesome 6 Regular";
  --fa-font-light: normal 300 1em/1 "Font Awesome 6 Light";
  --fa-font-thin: normal 100 1em/1 "Font Awesome 6 Thin";
  --fa-font-duotone: normal 900 1em/1 "Font Awesome 6 Duotone";
  --fa-font-brands: normal 400 1em/1 "Font Awesome 6 Brands";
}

svg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {
  overflow: visible;
  box-sizing: content-box;
}

.svg-inline--fa {
  display: var(--fa-display, inline-block);
  height: 1em;
  overflow: visible;
  vertical-align: -0.125em;
}
.svg-inline--fa.fa-2xs {
  vertical-align: 0.1em;
}
.svg-inline--fa.fa-xs {
  vertical-align: 0em;
}
.svg-inline--fa.fa-sm {
  vertical-align: -0.0714285705em;
}
.svg-inline--fa.fa-lg {
  vertical-align: -0.2em;
}
.svg-inline--fa.fa-xl {
  vertical-align: -0.25em;
}
.svg-inline--fa.fa-2xl {
  vertical-align: -0.3125em;
}
.svg-inline--fa.fa-pull-left {
  margin-right: var(--fa-pull-margin, 0.3em);
  width: auto;
}
.svg-inline--fa.fa-pull-right {
  margin-left: var(--fa-pull-margin, 0.3em);
  width: auto;
}
.svg-inline--fa.fa-li {
  width: var(--fa-li-width, 2em);
  top: 0.25em;
}
.svg-inline--fa.fa-fw {
  width: var(--fa-fw-width, 1.25em);
}

.fa-layers svg.svg-inline--fa {
  bottom: 0;
  left: 0;
  margin: auto;
  position: absolute;
  right: 0;
  top: 0;
}

.fa-layers-counter, .fa-layers-text {
  display: inline-block;
  position: absolute;
  text-align: center;
}

.fa-layers {
  display: inline-block;
  height: 1em;
  position: relative;
  text-align: center;
  vertical-align: -0.125em;
  width: 1em;
}
.fa-layers svg.svg-inline--fa {
  -webkit-transform-origin: center center;
          transform-origin: center center;
}

.fa-layers-text {
  left: 50%;
  top: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  -webkit-transform-origin: center center;
          transform-origin: center center;
}

.fa-layers-counter {
  background-color: var(--fa-counter-background-color, #ff253a);
  border-radius: var(--fa-counter-border-radius, 1em);
  box-sizing: border-box;
  color: var(--fa-inverse, #fff);
  line-height: var(--fa-counter-line-height, 1);
  max-width: var(--fa-counter-max-width, 5em);
  min-width: var(--fa-counter-min-width, 1.5em);
  overflow: hidden;
  padding: var(--fa-counter-padding, 0.25em 0.5em);
  right: var(--fa-right, 0);
  text-overflow: ellipsis;
  top: var(--fa-top, 0);
  -webkit-transform: scale(var(--fa-counter-scale, 0.25));
          transform: scale(var(--fa-counter-scale, 0.25));
  -webkit-transform-origin: top right;
          transform-origin: top right;
}

.fa-layers-bottom-right {
  bottom: var(--fa-bottom, 0);
  right: var(--fa-right, 0);
  top: auto;
  -webkit-transform: scale(var(--fa-layers-scale, 0.25));
          transform: scale(var(--fa-layers-scale, 0.25));
  -webkit-transform-origin: bottom right;
          transform-origin: bottom right;
}

.fa-layers-bottom-left {
  bottom: var(--fa-bottom, 0);
  left: var(--fa-left, 0);
  right: auto;
  top: auto;
  -webkit-transform: scale(var(--fa-layers-scale, 0.25));
          transform: scale(var(--fa-layers-scale, 0.25));
  -webkit-transform-origin: bottom left;
          transform-origin: bottom left;
}

.fa-layers-top-right {
  top: var(--fa-top, 0);
  right: var(--fa-right, 0);
  -webkit-transform: scale(var(--fa-layers-scale, 0.25));
          transform: scale(var(--fa-layers-scale, 0.25));
  -webkit-transform-origin: top right;
          transform-origin: top right;
}

.fa-layers-top-left {
  left: var(--fa-left, 0);
  right: auto;
  top: var(--fa-top, 0);
  -webkit-transform: scale(var(--fa-layers-scale, 0.25));
          transform: scale(var(--fa-layers-scale, 0.25));
  -webkit-transform-origin: top left;
          transform-origin: top left;
}

.fa-1x {
  font-size: 1em;
}

.fa-2x {
  font-size: 2em;
}

.fa-3x {
  font-size: 3em;
}

.fa-4x {
  font-size: 4em;
}

.fa-5x {
  font-size: 5em;
}

.fa-6x {
  font-size: 6em;
}

.fa-7x {
  font-size: 7em;
}

.fa-8x {
  font-size: 8em;
}

.fa-9x {
  font-size: 9em;
}

.fa-10x {
  font-size: 10em;
}

.fa-2xs {
  font-size: 0.625em;
  line-height: 0.1em;
  vertical-align: 0.225em;
}

.fa-xs {
  font-size: 0.75em;
  line-height: 0.0833333337em;
  vertical-align: 0.125em;
}

.fa-sm {
  font-size: 0.875em;
  line-height: 0.0714285718em;
  vertical-align: 0.0535714295em;
}

.fa-lg {
  font-size: 1.25em;
  line-height: 0.05em;
  vertical-align: -0.075em;
}

.fa-xl {
  font-size: 1.5em;
  line-height: 0.0416666682em;
  vertical-align: -0.125em;
}

.fa-2xl {
  font-size: 2em;
  line-height: 0.03125em;
  vertical-align: -0.1875em;
}

.fa-fw {
  text-align: center;
  width: 1.25em;
}

.fa-ul {
  list-style-type: none;
  margin-left: var(--fa-li-margin, 2.5em);
  padding-left: 0;
}
.fa-ul > li {
  position: relative;
}

.fa-li {
  left: calc(var(--fa-li-width, 2em) * -1);
  position: absolute;
  text-align: center;
  width: var(--fa-li-width, 2em);
  line-height: inherit;
}

.fa-border {
  border-color: var(--fa-border-color, #eee);
  border-radius: var(--fa-border-radius, 0.1em);
  border-style: var(--fa-border-style, solid);
  border-width: var(--fa-border-width, 0.08em);
  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);
}

.fa-pull-left {
  float: left;
  margin-right: var(--fa-pull-margin, 0.3em);
}

.fa-pull-right {
  float: right;
  margin-left: var(--fa-pull-margin, 0.3em);
}

.fa-beat {
  -webkit-animation-name: fa-beat;
          animation-name: fa-beat;
  -webkit-animation-delay: var(--fa-animation-delay, 0);
          animation-delay: var(--fa-animation-delay, 0);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);
          animation-timing-function: var(--fa-animation-timing, ease-in-out);
}

.fa-bounce {
  -webkit-animation-name: fa-bounce;
          animation-name: fa-bounce;
  -webkit-animation-delay: var(--fa-animation-delay, 0);
          animation-delay: var(--fa-animation-delay, 0);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));
          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));
}

.fa-fade {
  -webkit-animation-name: fa-fade;
          animation-name: fa-fade;
  -webkit-animation-delay: var(--fa-animation-delay, 0);
          animation-delay: var(--fa-animation-delay, 0);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));
          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));
}

.fa-beat-fade {
  -webkit-animation-name: fa-beat-fade;
          animation-name: fa-beat-fade;
  -webkit-animation-delay: var(--fa-animation-delay, 0);
          animation-delay: var(--fa-animation-delay, 0);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));
          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));
}

.fa-flip {
  -webkit-animation-name: fa-flip;
          animation-name: fa-flip;
  -webkit-animation-delay: var(--fa-animation-delay, 0);
          animation-delay: var(--fa-animation-delay, 0);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);
          animation-timing-function: var(--fa-animation-timing, ease-in-out);
}

.fa-shake {
  -webkit-animation-name: fa-shake;
          animation-name: fa-shake;
  -webkit-animation-delay: var(--fa-animation-delay, 0);
          animation-delay: var(--fa-animation-delay, 0);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, linear);
          animation-timing-function: var(--fa-animation-timing, linear);
}

.fa-spin {
  -webkit-animation-name: fa-spin;
          animation-name: fa-spin;
  -webkit-animation-delay: var(--fa-animation-delay, 0);
          animation-delay: var(--fa-animation-delay, 0);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 2s);
          animation-duration: var(--fa-animation-duration, 2s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, linear);
          animation-timing-function: var(--fa-animation-timing, linear);
}

.fa-spin-reverse {
  --fa-animation-direction: reverse;
}

.fa-pulse,
.fa-spin-pulse {
  -webkit-animation-name: fa-spin;
          animation-name: fa-spin;
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));
          animation-timing-function: var(--fa-animation-timing, steps(8));
}

@media (prefers-reduced-motion: reduce) {
  .fa-beat,
.fa-bounce,
.fa-fade,
.fa-beat-fade,
.fa-flip,
.fa-pulse,
.fa-shake,
.fa-spin,
.fa-spin-pulse {
    -webkit-animation-delay: -1ms;
            animation-delay: -1ms;
    -webkit-animation-duration: 1ms;
            animation-duration: 1ms;
    -webkit-animation-iteration-count: 1;
            animation-iteration-count: 1;
    transition-delay: 0s;
    transition-duration: 0s;
  }
}
@-webkit-keyframes fa-beat {
  0%, 90% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  45% {
    -webkit-transform: scale(var(--fa-beat-scale, 1.25));
            transform: scale(var(--fa-beat-scale, 1.25));
  }
}
@keyframes fa-beat {
  0%, 90% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  45% {
    -webkit-transform: scale(var(--fa-beat-scale, 1.25));
            transform: scale(var(--fa-beat-scale, 1.25));
  }
}
@-webkit-keyframes fa-bounce {
  0% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
  10% {
    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);
            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);
  }
  30% {
    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));
            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));
  }
  50% {
    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);
            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);
  }
  57% {
    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));
            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));
  }
  64% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
  100% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
}
@keyframes fa-bounce {
  0% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
  10% {
    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);
            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);
  }
  30% {
    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));
            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));
  }
  50% {
    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);
            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);
  }
  57% {
    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));
            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));
  }
  64% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
  100% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
}
@-webkit-keyframes fa-fade {
  50% {
    opacity: var(--fa-fade-opacity, 0.4);
  }
}
@keyframes fa-fade {
  50% {
    opacity: var(--fa-fade-opacity, 0.4);
  }
}
@-webkit-keyframes fa-beat-fade {
  0%, 100% {
    opacity: var(--fa-beat-fade-opacity, 0.4);
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  50% {
    opacity: 1;
    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));
            transform: scale(var(--fa-beat-fade-scale, 1.125));
  }
}
@keyframes fa-beat-fade {
  0%, 100% {
    opacity: var(--fa-beat-fade-opacity, 0.4);
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  50% {
    opacity: 1;
    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));
            transform: scale(var(--fa-beat-fade-scale, 1.125));
  }
}
@-webkit-keyframes fa-flip {
  50% {
    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));
            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));
  }
}
@keyframes fa-flip {
  50% {
    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));
            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));
  }
}
@-webkit-keyframes fa-shake {
  0% {
    -webkit-transform: rotate(-15deg);
            transform: rotate(-15deg);
  }
  4% {
    -webkit-transform: rotate(15deg);
            transform: rotate(15deg);
  }
  8%, 24% {
    -webkit-transform: rotate(-18deg);
            transform: rotate(-18deg);
  }
  12%, 28% {
    -webkit-transform: rotate(18deg);
            transform: rotate(18deg);
  }
  16% {
    -webkit-transform: rotate(-22deg);
            transform: rotate(-22deg);
  }
  20% {
    -webkit-transform: rotate(22deg);
            transform: rotate(22deg);
  }
  32% {
    -webkit-transform: rotate(-12deg);
            transform: rotate(-12deg);
  }
  36% {
    -webkit-transform: rotate(12deg);
            transform: rotate(12deg);
  }
  40%, 100% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
}
@keyframes fa-shake {
  0% {
    -webkit-transform: rotate(-15deg);
            transform: rotate(-15deg);
  }
  4% {
    -webkit-transform: rotate(15deg);
            transform: rotate(15deg);
  }
  8%, 24% {
    -webkit-transform: rotate(-18deg);
            transform: rotate(-18deg);
  }
  12%, 28% {
    -webkit-transform: rotate(18deg);
            transform: rotate(18deg);
  }
  16% {
    -webkit-transform: rotate(-22deg);
            transform: rotate(-22deg);
  }
  20% {
    -webkit-transform: rotate(22deg);
            transform: rotate(22deg);
  }
  32% {
    -webkit-transform: rotate(-12deg);
            transform: rotate(-12deg);
  }
  36% {
    -webkit-transform: rotate(12deg);
            transform: rotate(12deg);
  }
  40%, 100% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
}
@-webkit-keyframes fa-spin {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
  }
}
@keyframes fa-spin {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
  }
}
.fa-rotate-90 {
  -webkit-transform: rotate(90deg);
          transform: rotate(90deg);
}

.fa-rotate-180 {
  -webkit-transform: rotate(180deg);
          transform: rotate(180deg);
}

.fa-rotate-270 {
  -webkit-transform: rotate(270deg);
          transform: rotate(270deg);
}

.fa-flip-horizontal {
  -webkit-transform: scale(-1, 1);
          transform: scale(-1, 1);
}

.fa-flip-vertical {
  -webkit-transform: scale(1, -1);
          transform: scale(1, -1);
}

.fa-flip-both,
.fa-flip-horizontal.fa-flip-vertical {
  -webkit-transform: scale(-1, -1);
          transform: scale(-1, -1);
}

.fa-rotate-by {
  -webkit-transform: rotate(var(--fa-rotate-angle, none));
          transform: rotate(var(--fa-rotate-angle, none));
}

.fa-stack {
  display: inline-block;
  vertical-align: middle;
  height: 2em;
  position: relative;
  width: 2.5em;
}

.fa-stack-1x,
.fa-stack-2x {
  bottom: 0;
  left: 0;
  margin: auto;
  position: absolute;
  right: 0;
  top: 0;
  z-index: var(--fa-stack-z-index, auto);
}

.svg-inline--fa.fa-stack-1x {
  height: 1em;
  width: 1.25em;
}
.svg-inline--fa.fa-stack-2x {
  height: 2em;
  width: 2.5em;
}

.fa-inverse {
  color: var(--fa-inverse, #fff);
}

.sr-only,
.fa-sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.sr-only-focusable:not(:focus),
.fa-sr-only-focusable:not(:focus) {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.svg-inline--fa .fa-primary {
  fill: var(--fa-primary-color, currentColor);
  opacity: var(--fa-primary-opacity, 1);
}

.svg-inline--fa .fa-secondary {
  fill: var(--fa-secondary-color, currentColor);
  opacity: var(--fa-secondary-opacity, 0.4);
}

.svg-inline--fa.fa-swap-opacity .fa-primary {
  opacity: var(--fa-secondary-opacity, 0.4);
}

.svg-inline--fa.fa-swap-opacity .fa-secondary {
  opacity: var(--fa-primary-opacity, 1);
}

.svg-inline--fa mask .fa-primary,
.svg-inline--fa mask .fa-secondary {
  fill: black;
}

.fad.fa-inverse,
.fa-duotone.fa-inverse {
  color: var(--fa-inverse, #fff);
}`;function css(){var e=DEFAULT_FAMILY_PREFIX,t=DEFAULT_REPLACEMENT_CLASS,r=config.familyPrefix,n=config.replacementClass,a=baseStyles;if(r!==e||n!==t){var s=new RegExp("\\.".concat(e,"\\-"),"g"),o=new RegExp("\\--".concat(e,"\\-"),"g"),l=new RegExp("\\.".concat(t),"g");a=a.replace(s,".".concat(r,"-")).replace(o,"--".concat(r,"-")).replace(l,".".concat(n))}return a}var _cssInserted=!1;function ensureCss(){config.autoAddCss&&!_cssInserted&&(insertCss(css()),_cssInserted=!0)}var InjectCSS={mixout:function(){return{dom:{css,insertCss:ensureCss}}},hooks:function(){return{beforeDOMElementCreation:function(){ensureCss()},beforeI2svg:function(){ensureCss()}}}},w=WINDOW||{};w[NAMESPACE_IDENTIFIER]||(w[NAMESPACE_IDENTIFIER]={});w[NAMESPACE_IDENTIFIER].styles||(w[NAMESPACE_IDENTIFIER].styles={});w[NAMESPACE_IDENTIFIER].hooks||(w[NAMESPACE_IDENTIFIER].hooks={});w[NAMESPACE_IDENTIFIER].shims||(w[NAMESPACE_IDENTIFIER].shims=[]);var namespace=w[NAMESPACE_IDENTIFIER],functions=[],listener=function e(){DOCUMENT.removeEventListener("DOMContentLoaded",e),loaded=1,functions.map(function(t){return t()})},loaded=!1;IS_DOM&&(loaded=(DOCUMENT.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(DOCUMENT.readyState),loaded||DOCUMENT.addEventListener("DOMContentLoaded",listener));function domready(e){IS_DOM&&(loaded?setTimeout(e,0):functions.push(e))}function toHtml(e){var t=e.tag,r=e.attributes,n=r===void 0?{}:r,a=e.children,s=a===void 0?[]:a;return typeof e=="string"?htmlEscape(e):"<".concat(t," ").concat(joinAttributes(n),">").concat(s.map(toHtml).join(""),"</").concat(t,">")}function iconFromMapping(e,t,r){if(e&&e[t]&&e[t][r])return{prefix:t,iconName:r,icon:e[t][r]}}var bindInternal4=function(t,r){return function(n,a,s,o){return t.call(r,n,a,s,o)}},reduce=function(t,r,n,a){var s=Object.keys(t),o=s.length,l=a!==void 0?bindInternal4(r,a):r,f,u,m;for(n===void 0?(f=1,m=t[s[0]]):(f=0,m=n);f<o;f++)u=s[f],m=l(m,t[u],u,t);return m};function ucs2decode(e){for(var t=[],r=0,n=e.length;r<n;){var a=e.charCodeAt(r++);if(a>=55296&&a<=56319&&r<n){var s=e.charCodeAt(r++);(s&64512)==56320?t.push(((a&1023)<<10)+(s&1023)+65536):(t.push(a),r--)}else t.push(a)}return t}function toHex(e){var t=ucs2decode(e);return t.length===1?t[0].toString(16):null}function codePointAt(e,t){var r=e.length,n=e.charCodeAt(t),a;return n>=55296&&n<=56319&&r>t+1&&(a=e.charCodeAt(t+1),a>=56320&&a<=57343)?(n-55296)*1024+a-56320+65536:n}function normalizeIcons(e){return Object.keys(e).reduce(function(t,r){var n=e[r],a=!!n.icon;return a?t[n.iconName]=n.icon:t[r]=n,t},{})}function defineIcons(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},n=r.skipHooks,a=n===void 0?!1:n,s=normalizeIcons(t);typeof namespace.hooks.addPack=="function"&&!a?namespace.hooks.addPack(e,normalizeIcons(t)):namespace.styles[e]=_objectSpread2(_objectSpread2({},namespace.styles[e]||{}),s),e==="fas"&&defineIcons("fa",t)}var styles=namespace.styles,shims=namespace.shims,LONG_STYLE=Object.values(PREFIX_TO_LONG_STYLE),_defaultUsablePrefix=null,_byUnicode={},_byLigature={},_byOldName={},_byOldUnicode={},_byAlias={},PREFIXES=Object.keys(PREFIX_TO_STYLE);function isReserved(e){return~RESERVED_CLASSES.indexOf(e)}function getIconName(e,t){var r=t.split("-"),n=r[0],a=r.slice(1).join("-");return n===e&&a!==""&&!isReserved(a)?a:null}var build=function(){var t=function(s){return reduce(styles,function(o,l,f){return o[f]=reduce(l,s,{}),o},{})};_byUnicode=t(function(a,s,o){if(s[3]&&(a[s[3]]=o),s[2]){var l=s[2].filter(function(f){return typeof f=="number"});l.forEach(function(f){a[f.toString(16)]=o})}return a}),_byLigature=t(function(a,s,o){if(a[o]=o,s[2]){var l=s[2].filter(function(f){return typeof f=="string"});l.forEach(function(f){a[f]=o})}return a}),_byAlias=t(function(a,s,o){var l=s[2];return a[o]=o,l.forEach(function(f){a[f]=o}),a});var r="far"in styles||config.autoFetchSvg,n=reduce(shims,function(a,s){var o=s[0],l=s[1],f=s[2];return l==="far"&&!r&&(l="fas"),typeof o=="string"&&(a.names[o]={prefix:l,iconName:f}),typeof o=="number"&&(a.unicodes[o.toString(16)]={prefix:l,iconName:f}),a},{names:{},unicodes:{}});_byOldName=n.names,_byOldUnicode=n.unicodes,_defaultUsablePrefix=getCanonicalPrefix(config.styleDefault)};onChange(function(e){_defaultUsablePrefix=getCanonicalPrefix(e.styleDefault)});build();function byUnicode(e,t){return(_byUnicode[e]||{})[t]}function byLigature(e,t){return(_byLigature[e]||{})[t]}function byAlias(e,t){return(_byAlias[e]||{})[t]}function byOldName(e){return _byOldName[e]||{prefix:null,iconName:null}}function byOldUnicode(e){var t=_byOldUnicode[e],r=byUnicode("fas",e);return t||(r?{prefix:"fas",iconName:r}:null)||{prefix:null,iconName:null}}function getDefaultUsablePrefix(){return _defaultUsablePrefix}var emptyCanonicalIcon=function(){return{prefix:null,iconName:null,rest:[]}};function getCanonicalPrefix(e){var t=PREFIX_TO_STYLE[e],r=STYLE_TO_PREFIX[e]||STYLE_TO_PREFIX[t],n=e in namespace.styles?e:null;return r||n||null}function getCanonicalIcon(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=t.skipLookups,n=r===void 0?!1:r,a=null,s=e.reduce(function(o,l){var f=getIconName(config.familyPrefix,l);if(styles[l]?(l=LONG_STYLE.includes(l)?LONG_STYLE_TO_PREFIX[l]:l,a=l,o.prefix=l):PREFIXES.indexOf(l)>-1?(a=l,o.prefix=getCanonicalPrefix(l)):f?o.iconName=f:l!==config.replacementClass&&o.rest.push(l),!n&&o.prefix&&o.iconName){var u=a==="fa"?byOldName(o.iconName):{},m=byAlias(o.prefix,o.iconName);u.prefix&&(a=null),o.iconName=u.iconName||m||o.iconName,o.prefix=u.prefix||o.prefix,o.prefix==="far"&&!styles.far&&styles.fas&&!config.autoFetchSvg&&(o.prefix="fas")}return o},emptyCanonicalIcon());return(s.prefix==="fa"||a==="fa")&&(s.prefix=getDefaultUsablePrefix()||"fas"),s}var Library=function(){function e(){_classCallCheck(this,e),this.definitions={}}return _createClass(e,[{key:"add",value:function(){for(var r=this,n=arguments.length,a=new Array(n),s=0;s<n;s++)a[s]=arguments[s];var o=a.reduce(this._pullDefinitions,{});Object.keys(o).forEach(function(l){r.definitions[l]=_objectSpread2(_objectSpread2({},r.definitions[l]||{}),o[l]),defineIcons(l,o[l]);var f=PREFIX_TO_LONG_STYLE[l];f&&defineIcons(f,o[l]),build()})}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(r,n){var a=n.prefix&&n.iconName&&n.icon?{0:n}:n;return Object.keys(a).map(function(s){var o=a[s],l=o.prefix,f=o.iconName,u=o.icon,m=u[2];r[l]||(r[l]={}),m.length>0&&m.forEach(function(v){typeof v=="string"&&(r[l][v]=u)}),r[l][f]=u}),r}}]),e}(),_plugins=[],_hooks={},providers={},defaultProviderKeys=Object.keys(providers);function registerPlugins(e,t){var r=t.mixoutsTo;return _plugins=e,_hooks={},Object.keys(providers).forEach(function(n){defaultProviderKeys.indexOf(n)===-1&&delete providers[n]}),_plugins.forEach(function(n){var a=n.mixout?n.mixout():{};if(Object.keys(a).forEach(function(o){typeof a[o]=="function"&&(r[o]=a[o]),_typeof$1(a[o])==="object"&&Object.keys(a[o]).forEach(function(l){r[o]||(r[o]={}),r[o][l]=a[o][l]})}),n.hooks){var s=n.hooks();Object.keys(s).forEach(function(o){_hooks[o]||(_hooks[o]=[]),_hooks[o].push(s[o])})}n.provides&&n.provides(providers)}),r}function chainHooks(e,t){for(var r=arguments.length,n=new Array(r>2?r-2:0),a=2;a<r;a++)n[a-2]=arguments[a];var s=_hooks[e]||[];return s.forEach(function(o){t=o.apply(null,[t].concat(n))}),t}function callHooks(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var a=_hooks[e]||[];a.forEach(function(s){s.apply(null,r)})}function callProvided(){var e=arguments[0],t=Array.prototype.slice.call(arguments,1);return providers[e]?providers[e].apply(null,t):void 0}function findIconDefinition(e){e.prefix==="fa"&&(e.prefix="fas");var t=e.iconName,r=e.prefix||getDefaultUsablePrefix();if(t)return t=byAlias(r,t)||t,iconFromMapping(library.definitions,r,t)||iconFromMapping(namespace.styles,r,t)}var library=new Library,noAuto=function(){config.autoReplaceSvg=!1,config.observeMutations=!1,callHooks("noAuto")},dom={i2svg:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return IS_DOM?(callHooks("beforeI2svg",t),callProvided("pseudoElements2svg",t),callProvided("i2svg",t)):Promise.reject("Operation requires a DOM of some kind.")},watch:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},r=t.autoReplaceSvgRoot;config.autoReplaceSvg===!1&&(config.autoReplaceSvg=!0),config.observeMutations=!0,domready(function(){autoReplace({autoReplaceSvgRoot:r}),callHooks("watch",t)})}},parse$1={icon:function(t){if(t===null)return null;if(_typeof$1(t)==="object"&&t.prefix&&t.iconName)return{prefix:t.prefix,iconName:byAlias(t.prefix,t.iconName)||t.iconName};if(Array.isArray(t)&&t.length===2){var r=t[1].indexOf("fa-")===0?t[1].slice(3):t[1],n=getCanonicalPrefix(t[0]);return{prefix:n,iconName:byAlias(n,r)||r}}if(typeof t=="string"&&(t.indexOf("".concat(config.familyPrefix,"-"))>-1||t.match(ICON_SELECTION_SYNTAX_PATTERN))){var a=getCanonicalIcon(t.split(" "),{skipLookups:!0});return{prefix:a.prefix||getDefaultUsablePrefix(),iconName:byAlias(a.prefix,a.iconName)||a.iconName}}if(typeof t=="string"){var s=getDefaultUsablePrefix();return{prefix:s,iconName:byAlias(s,t)||t}}}},api={noAuto,config,dom,parse:parse$1,library,findIconDefinition,toHtml},autoReplace=function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},r=t.autoReplaceSvgRoot,n=r===void 0?DOCUMENT:r;(Object.keys(namespace.styles).length>0||config.autoFetchSvg)&&IS_DOM&&config.autoReplaceSvg&&api.dom.i2svg({node:n})};function domVariants(e,t){return Object.defineProperty(e,"abstract",{get:t}),Object.defineProperty(e,"html",{get:function(){return e.abstract.map(function(n){return toHtml(n)})}}),Object.defineProperty(e,"node",{get:function(){if(IS_DOM){var n=DOCUMENT.createElement("div");return n.innerHTML=e.html,n.children}}}),e}function asIcon(e){var t=e.children,r=e.main,n=e.mask,a=e.attributes,s=e.styles,o=e.transform;if(transformIsMeaningful(o)&&r.found&&!n.found){var l=r.width,f=r.height,u={x:l/f/2,y:.5};a.style=joinStyles(_objectSpread2(_objectSpread2({},s),{},{"transform-origin":"".concat(u.x+o.x/16,"em ").concat(u.y+o.y/16,"em")}))}return[{tag:"svg",attributes:a,children:t}]}function asSymbol(e){var t=e.prefix,r=e.iconName,n=e.children,a=e.attributes,s=e.symbol,o=s===!0?"".concat(t,"-").concat(config.familyPrefix,"-").concat(r):s;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:_objectSpread2(_objectSpread2({},a),{},{id:o}),children:n}]}]}function makeInlineSvgAbstract(e){var t=e.icons,r=t.main,n=t.mask,a=e.prefix,s=e.iconName,o=e.transform,l=e.symbol,f=e.title,u=e.maskId,m=e.titleId,v=e.extra,b=e.watchable,P=b===void 0?!1:b,F=n.found?n:r,C=F.width,D=F.height,E=a==="fak",k=[config.replacementClass,s?"".concat(config.familyPrefix,"-").concat(s):""].filter(function(_){return v.classes.indexOf(_)===-1}).filter(function(_){return _!==""||!!_}).concat(v.classes).join(" "),j={children:[],attributes:_objectSpread2(_objectSpread2({},v.attributes),{},{"data-prefix":a,"data-icon":s,class:k,role:v.attributes.role||"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 ".concat(C," ").concat(D)})},W=E&&!~v.classes.indexOf("fa-fw")?{width:"".concat(C/D*16*.0625,"em")}:{};P&&(j.attributes[DATA_FA_I2SVG]=""),f&&(j.children.push({tag:"title",attributes:{id:j.attributes["aria-labelledby"]||"title-".concat(m||nextUniqueId())},children:[f]}),delete j.attributes.title);var M=_objectSpread2(_objectSpread2({},j),{},{prefix:a,iconName:s,main:r,mask:n,maskId:u,transform:o,symbol:l,styles:_objectSpread2(_objectSpread2({},W),v.styles)}),S=n.found&&r.found?callProvided("generateAbstractMask",M)||{children:[],attributes:{}}:callProvided("generateAbstractIcon",M)||{children:[],attributes:{}},T=S.children,V=S.attributes;return M.children=T,M.attributes=V,l?asSymbol(M):asIcon(M)}function makeLayersTextAbstract(e){var t=e.content,r=e.width,n=e.height,a=e.transform,s=e.title,o=e.extra,l=e.watchable,f=l===void 0?!1:l,u=_objectSpread2(_objectSpread2(_objectSpread2({},o.attributes),s?{title:s}:{}),{},{class:o.classes.join(" ")});f&&(u[DATA_FA_I2SVG]="");var m=_objectSpread2({},o.styles);transformIsMeaningful(a)&&(m.transform=transformForCss({transform:a,startCentered:!0,width:r,height:n}),m["-webkit-transform"]=m.transform);var v=joinStyles(m);v.length>0&&(u.style=v);var b=[];return b.push({tag:"span",attributes:u,children:[t]}),s&&b.push({tag:"span",attributes:{class:"sr-only"},children:[s]}),b}function makeLayersCounterAbstract(e){var t=e.content,r=e.title,n=e.extra,a=_objectSpread2(_objectSpread2(_objectSpread2({},n.attributes),r?{title:r}:{}),{},{class:n.classes.join(" ")}),s=joinStyles(n.styles);s.length>0&&(a.style=s);var o=[];return o.push({tag:"span",attributes:a,children:[t]}),r&&o.push({tag:"span",attributes:{class:"sr-only"},children:[r]}),o}var styles$1=namespace.styles;function asFoundIcon(e){var t=e[0],r=e[1],n=e.slice(4),a=_slicedToArray(n,1),s=a[0],o=null;return Array.isArray(s)?o={tag:"g",attributes:{class:"".concat(config.familyPrefix,"-").concat(DUOTONE_CLASSES.GROUP)},children:[{tag:"path",attributes:{class:"".concat(config.familyPrefix,"-").concat(DUOTONE_CLASSES.SECONDARY),fill:"currentColor",d:s[0]}},{tag:"path",attributes:{class:"".concat(config.familyPrefix,"-").concat(DUOTONE_CLASSES.PRIMARY),fill:"currentColor",d:s[1]}}]}:o={tag:"path",attributes:{fill:"currentColor",d:s}},{found:!0,width:t,height:r,icon:o}}var missingIconResolutionMixin={found:!1,width:512,height:512};function maybeNotifyMissing(e,t){!PRODUCTION$1&&!config.showMissingIcons&&e&&console.error('Icon with name "'.concat(e,'" and prefix "').concat(t,'" is missing.'))}function findIcon(e,t){var r=t;return t==="fa"&&config.styleDefault!==null&&(t=getDefaultUsablePrefix()),new Promise(function(n,a){if(callProvided("missingIconAbstract"),r==="fa"){var s=byOldName(e)||{};e=s.iconName||e,t=s.prefix||t}if(e&&t&&styles$1[t]&&styles$1[t][e]){var o=styles$1[t][e];return n(asFoundIcon(o))}maybeNotifyMissing(e,t),n(_objectSpread2(_objectSpread2({},missingIconResolutionMixin),{},{icon:config.showMissingIcons&&e?callProvided("missingIconAbstract")||{}:{}}))})}var noop$1$1=function(){},p=config.measurePerformance&&PERFORMANCE&&PERFORMANCE.mark&&PERFORMANCE.measure?PERFORMANCE:{mark:noop$1$1,measure:noop$1$1},preamble='FA "6.1.1"',begin=function(t){return p.mark("".concat(preamble," ").concat(t," begins")),function(){return end(t)}},end=function(t){p.mark("".concat(preamble," ").concat(t," ends")),p.measure("".concat(preamble," ").concat(t),"".concat(preamble," ").concat(t," begins"),"".concat(preamble," ").concat(t," ends"))},perf={begin,end},noop$2$1=function(){};function isWatched(e){var t=e.getAttribute?e.getAttribute(DATA_FA_I2SVG):null;return typeof t=="string"}function hasPrefixAndIcon(e){var t=e.getAttribute?e.getAttribute(DATA_PREFIX):null,r=e.getAttribute?e.getAttribute(DATA_ICON):null;return t&&r}function hasBeenReplaced(e){return e&&e.classList&&e.classList.contains&&e.classList.contains(config.replacementClass)}function getMutator(){if(config.autoReplaceSvg===!0)return mutators.replace;var e=mutators[config.autoReplaceSvg];return e||mutators.replace}function createElementNS(e){return DOCUMENT.createElementNS("http://www.w3.org/2000/svg",e)}function createElement(e){return DOCUMENT.createElement(e)}function convertSVG(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=t.ceFn,n=r===void 0?e.tag==="svg"?createElementNS:createElement:r;if(typeof e=="string")return DOCUMENT.createTextNode(e);var a=n(e.tag);Object.keys(e.attributes||[]).forEach(function(o){a.setAttribute(o,e.attributes[o])});var s=e.children||[];return s.forEach(function(o){a.appendChild(convertSVG(o,{ceFn:n}))}),a}function nodeAsComment(e){var t=" ".concat(e.outerHTML," ");return t="".concat(t,"Font Awesome fontawesome.com "),t}var mutators={replace:function(t){var r=t[0];if(r.parentNode)if(t[1].forEach(function(a){r.parentNode.insertBefore(convertSVG(a),r)}),r.getAttribute(DATA_FA_I2SVG)===null&&config.keepOriginalSource){var n=DOCUMENT.createComment(nodeAsComment(r));r.parentNode.replaceChild(n,r)}else r.remove()},nest:function(t){var r=t[0],n=t[1];if(~classArray(r).indexOf(config.replacementClass))return mutators.replace(t);var a=new RegExp("".concat(config.familyPrefix,"-.*"));if(delete n[0].attributes.id,n[0].attributes.class){var s=n[0].attributes.class.split(" ").reduce(function(l,f){return f===config.replacementClass||f.match(a)?l.toSvg.push(f):l.toNode.push(f),l},{toNode:[],toSvg:[]});n[0].attributes.class=s.toSvg.join(" "),s.toNode.length===0?r.removeAttribute("class"):r.setAttribute("class",s.toNode.join(" "))}var o=n.map(function(l){return toHtml(l)}).join(`
`);r.setAttribute(DATA_FA_I2SVG,""),r.innerHTML=o}};function performOperationSync(e){e()}function perform(e,t){var r=typeof t=="function"?t:noop$2$1;if(e.length===0)r();else{var n=performOperationSync;config.mutateApproach===MUTATION_APPROACH_ASYNC&&(n=WINDOW.requestAnimationFrame||performOperationSync),n(function(){var a=getMutator(),s=perf.begin("mutate");e.map(a),s(),r()})}}var disabled=!1;function disableObservation(){disabled=!0}function enableObservation(){disabled=!1}var mo=null;function observe(e){if(MUTATION_OBSERVER&&config.observeMutations){var t=e.treeCallback,r=t===void 0?noop$2$1:t,n=e.nodeCallback,a=n===void 0?noop$2$1:n,s=e.pseudoElementsCallback,o=s===void 0?noop$2$1:s,l=e.observeMutationsRoot,f=l===void 0?DOCUMENT:l;mo=new MUTATION_OBSERVER(function(u){if(!disabled){var m=getDefaultUsablePrefix();toArray(u).forEach(function(v){if(v.type==="childList"&&v.addedNodes.length>0&&!isWatched(v.addedNodes[0])&&(config.searchPseudoElements&&o(v.target),r(v.target)),v.type==="attributes"&&v.target.parentNode&&config.searchPseudoElements&&o(v.target.parentNode),v.type==="attributes"&&isWatched(v.target)&&~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(v.attributeName))if(v.attributeName==="class"&&hasPrefixAndIcon(v.target)){var b=getCanonicalIcon(classArray(v.target)),P=b.prefix,F=b.iconName;v.target.setAttribute(DATA_PREFIX,P||m),F&&v.target.setAttribute(DATA_ICON,F)}else hasBeenReplaced(v.target)&&a(v.target)})}}),IS_DOM&&mo.observe(f,{childList:!0,attributes:!0,characterData:!0,subtree:!0})}}function disconnect(){mo&&mo.disconnect()}function styleParser(e){var t=e.getAttribute("style"),r=[];return t&&(r=t.split(";").reduce(function(n,a){var s=a.split(":"),o=s[0],l=s.slice(1);return o&&l.length>0&&(n[o]=l.join(":").trim()),n},{})),r}function classParser(e){var t=e.getAttribute("data-prefix"),r=e.getAttribute("data-icon"),n=e.innerText!==void 0?e.innerText.trim():"",a=getCanonicalIcon(classArray(e));return a.prefix||(a.prefix=getDefaultUsablePrefix()),t&&r&&(a.prefix=t,a.iconName=r),a.iconName&&a.prefix||a.prefix&&n.length>0&&(a.iconName=byLigature(a.prefix,e.innerText)||byUnicode(a.prefix,toHex(e.innerText))),a}function attributesParser(e){var t=toArray(e.attributes).reduce(function(a,s){return a.name!=="class"&&a.name!=="style"&&(a[s.name]=s.value),a},{}),r=e.getAttribute("title"),n=e.getAttribute("data-fa-title-id");return config.autoA11y&&(r?t["aria-labelledby"]="".concat(config.replacementClass,"-title-").concat(n||nextUniqueId()):(t["aria-hidden"]="true",t.focusable="false")),t}function blankMeta(){return{iconName:null,title:null,titleId:null,prefix:null,transform:meaninglessTransform,symbol:!1,mask:{iconName:null,prefix:null,rest:[]},maskId:null,extra:{classes:[],styles:{},attributes:{}}}}function parseMeta(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{styleParser:!0},r=classParser(e),n=r.iconName,a=r.prefix,s=r.rest,o=attributesParser(e),l=chainHooks("parseNodeAttributes",{},e),f=t.styleParser?styleParser(e):[];return _objectSpread2({iconName:n,title:e.getAttribute("title"),titleId:e.getAttribute("data-fa-title-id"),prefix:a,transform:meaninglessTransform,mask:{iconName:null,prefix:null,rest:[]},maskId:null,symbol:!1,extra:{classes:s,styles:f,attributes:o}},l)}var styles$2=namespace.styles;function generateMutation(e){var t=config.autoReplaceSvg==="nest"?parseMeta(e,{styleParser:!1}):parseMeta(e);return~t.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)?callProvided("generateLayersText",e,t):callProvided("generateSvgReplacementMutation",e,t)}function onTree(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;if(!IS_DOM)return Promise.resolve();var r=DOCUMENT.documentElement.classList,n=function(v){return r.add("".concat(HTML_CLASS_I2SVG_BASE_CLASS,"-").concat(v))},a=function(v){return r.remove("".concat(HTML_CLASS_I2SVG_BASE_CLASS,"-").concat(v))},s=config.autoFetchSvg?Object.keys(PREFIX_TO_STYLE):Object.keys(styles$2),o=[".".concat(LAYERS_TEXT_CLASSNAME,":not([").concat(DATA_FA_I2SVG,"])")].concat(s.map(function(m){return".".concat(m,":not([").concat(DATA_FA_I2SVG,"])")})).join(", ");if(o.length===0)return Promise.resolve();var l=[];try{l=toArray(e.querySelectorAll(o))}catch{}if(l.length>0)n("pending"),a("complete");else return Promise.resolve();var f=perf.begin("onTree"),u=l.reduce(function(m,v){try{var b=generateMutation(v);b&&m.push(b)}catch(P){PRODUCTION$1||P.name==="MissingIcon"&&console.error(P)}return m},[]);return new Promise(function(m,v){Promise.all(u).then(function(b){perform(b,function(){n("active"),n("complete"),a("pending"),typeof t=="function"&&t(),f(),m()})}).catch(function(b){f(),v(b)})})}function onNode(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;generateMutation(e).then(function(r){r&&perform([r],t)})}function resolveIcons(e){return function(t){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=(t||{}).icon?t:findIconDefinition(t||{}),a=r.mask;return a&&(a=(a||{}).icon?a:findIconDefinition(a||{})),e(n,_objectSpread2(_objectSpread2({},r),{},{mask:a}))}}var render=function(t){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=r.transform,a=n===void 0?meaninglessTransform:n,s=r.symbol,o=s===void 0?!1:s,l=r.mask,f=l===void 0?null:l,u=r.maskId,m=u===void 0?null:u,v=r.title,b=v===void 0?null:v,P=r.titleId,F=P===void 0?null:P,C=r.classes,D=C===void 0?[]:C,E=r.attributes,k=E===void 0?{}:E,j=r.styles,W=j===void 0?{}:j;if(t){var M=t.prefix,S=t.iconName,T=t.icon;return domVariants(_objectSpread2({type:"icon"},t),function(){return callHooks("beforeDOMElementCreation",{iconDefinition:t,params:r}),config.autoA11y&&(b?k["aria-labelledby"]="".concat(config.replacementClass,"-title-").concat(F||nextUniqueId()):(k["aria-hidden"]="true",k.focusable="false")),makeInlineSvgAbstract({icons:{main:asFoundIcon(T),mask:f?asFoundIcon(f.icon):{found:!1,width:null,height:null,icon:{}}},prefix:M,iconName:S,transform:_objectSpread2(_objectSpread2({},meaninglessTransform),a),symbol:o,title:b,maskId:m,titleId:F,extra:{attributes:k,styles:W,classes:D}})})}},ReplaceElements={mixout:function(){return{icon:resolveIcons(render)}},hooks:function(){return{mutationObserverCallbacks:function(r){return r.treeCallback=onTree,r.nodeCallback=onNode,r}}},provides:function(t){t.i2svg=function(r){var n=r.node,a=n===void 0?DOCUMENT:n,s=r.callback,o=s===void 0?function(){}:s;return onTree(a,o)},t.generateSvgReplacementMutation=function(r,n){var a=n.iconName,s=n.title,o=n.titleId,l=n.prefix,f=n.transform,u=n.symbol,m=n.mask,v=n.maskId,b=n.extra;return new Promise(function(P,F){Promise.all([findIcon(a,l),m.iconName?findIcon(m.iconName,m.prefix):Promise.resolve({found:!1,width:512,height:512,icon:{}})]).then(function(C){var D=_slicedToArray(C,2),E=D[0],k=D[1];P([r,makeInlineSvgAbstract({icons:{main:E,mask:k},prefix:l,iconName:a,transform:f,symbol:u,maskId:v,title:s,titleId:o,extra:b,watchable:!0})])}).catch(F)})},t.generateAbstractIcon=function(r){var n=r.children,a=r.attributes,s=r.main,o=r.transform,l=r.styles,f=joinStyles(l);f.length>0&&(a.style=f);var u;return transformIsMeaningful(o)&&(u=callProvided("generateAbstractTransformGrouping",{main:s,transform:o,containerWidth:s.width,iconWidth:s.width})),n.push(u||s.icon),{children:n,attributes:a}}}},Layers={mixout:function(){return{layer:function(r){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=n.classes,s=a===void 0?[]:a;return domVariants({type:"layer"},function(){callHooks("beforeDOMElementCreation",{assembler:r,params:n});var o=[];return r(function(l){Array.isArray(l)?l.map(function(f){o=o.concat(f.abstract)}):o=o.concat(l.abstract)}),[{tag:"span",attributes:{class:["".concat(config.familyPrefix,"-layers")].concat(_toConsumableArray(s)).join(" ")},children:o}]})}}}},LayersCounter={mixout:function(){return{counter:function(r){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=n.title,s=a===void 0?null:a,o=n.classes,l=o===void 0?[]:o,f=n.attributes,u=f===void 0?{}:f,m=n.styles,v=m===void 0?{}:m;return domVariants({type:"counter",content:r},function(){return callHooks("beforeDOMElementCreation",{content:r,params:n}),makeLayersCounterAbstract({content:r.toString(),title:s,extra:{attributes:u,styles:v,classes:["".concat(config.familyPrefix,"-layers-counter")].concat(_toConsumableArray(l))}})})}}}},LayersText={mixout:function(){return{text:function(r){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=n.transform,s=a===void 0?meaninglessTransform:a,o=n.title,l=o===void 0?null:o,f=n.classes,u=f===void 0?[]:f,m=n.attributes,v=m===void 0?{}:m,b=n.styles,P=b===void 0?{}:b;return domVariants({type:"text",content:r},function(){return callHooks("beforeDOMElementCreation",{content:r,params:n}),makeLayersTextAbstract({content:r,transform:_objectSpread2(_objectSpread2({},meaninglessTransform),s),title:l,extra:{attributes:v,styles:P,classes:["".concat(config.familyPrefix,"-layers-text")].concat(_toConsumableArray(u))}})})}}},provides:function(t){t.generateLayersText=function(r,n){var a=n.title,s=n.transform,o=n.extra,l=null,f=null;if(IS_IE){var u=parseInt(getComputedStyle(r).fontSize,10),m=r.getBoundingClientRect();l=m.width/u,f=m.height/u}return config.autoA11y&&!a&&(o.attributes["aria-hidden"]="true"),Promise.resolve([r,makeLayersTextAbstract({content:r.innerHTML,width:l,height:f,transform:s,title:a,extra:o,watchable:!0})])}}},CLEAN_CONTENT_PATTERN=new RegExp('"',"ug"),SECONDARY_UNICODE_RANGE=[1105920,1112319];function hexValueFromContent(e){var t=e.replace(CLEAN_CONTENT_PATTERN,""),r=codePointAt(t,0),n=r>=SECONDARY_UNICODE_RANGE[0]&&r<=SECONDARY_UNICODE_RANGE[1],a=t.length===2?t[0]===t[1]:!1;return{value:toHex(a?t[0]:t),isSecondary:n||a}}function replaceForPosition(e,t){var r="".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(t.replace(":","-"));return new Promise(function(n,a){if(e.getAttribute(r)!==null)return n();var s=toArray(e.children),o=s.filter(function(S){return S.getAttribute(DATA_FA_PSEUDO_ELEMENT)===t})[0],l=WINDOW.getComputedStyle(e,t),f=l.getPropertyValue("font-family").match(FONT_FAMILY_PATTERN),u=l.getPropertyValue("font-weight"),m=l.getPropertyValue("content");if(o&&!f)return e.removeChild(o),n();if(f&&m!=="none"&&m!==""){var v=l.getPropertyValue("content"),b=~["Solid","Regular","Light","Thin","Duotone","Brands","Kit"].indexOf(f[2])?STYLE_TO_PREFIX[f[2].toLowerCase()]:FONT_WEIGHT_TO_PREFIX[u],P=hexValueFromContent(v),F=P.value,C=P.isSecondary,D=f[0].startsWith("FontAwesome"),E=byUnicode(b,F),k=E;if(D){var j=byOldUnicode(F);j.iconName&&j.prefix&&(E=j.iconName,b=j.prefix)}if(E&&!C&&(!o||o.getAttribute(DATA_PREFIX)!==b||o.getAttribute(DATA_ICON)!==k)){e.setAttribute(r,k),o&&e.removeChild(o);var W=blankMeta(),M=W.extra;M.attributes[DATA_FA_PSEUDO_ELEMENT]=t,findIcon(E,b).then(function(S){var T=makeInlineSvgAbstract(_objectSpread2(_objectSpread2({},W),{},{icons:{main:S,mask:emptyCanonicalIcon()},prefix:b,iconName:k,extra:M,watchable:!0})),V=DOCUMENT.createElement("svg");t==="::before"?e.insertBefore(V,e.firstChild):e.appendChild(V),V.outerHTML=T.map(function(_){return toHtml(_)}).join(`
`),e.removeAttribute(r),n()}).catch(a)}else n()}else n()})}function replace2(e){return Promise.all([replaceForPosition(e,"::before"),replaceForPosition(e,"::after")])}function processable(e){return e.parentNode!==document.head&&!~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(e.tagName.toUpperCase())&&!e.getAttribute(DATA_FA_PSEUDO_ELEMENT)&&(!e.parentNode||e.parentNode.tagName!=="svg")}function searchPseudoElements(e){if(IS_DOM)return new Promise(function(t,r){var n=toArray(e.querySelectorAll("*")).filter(processable).map(replace2),a=perf.begin("searchPseudoElements");disableObservation(),Promise.all(n).then(function(){a(),enableObservation(),t()}).catch(function(){a(),enableObservation(),r()})})}var PseudoElements={hooks:function(){return{mutationObserverCallbacks:function(r){return r.pseudoElementsCallback=searchPseudoElements,r}}},provides:function(t){t.pseudoElements2svg=function(r){var n=r.node,a=n===void 0?DOCUMENT:n;config.searchPseudoElements&&searchPseudoElements(a)}}},_unwatched=!1,MutationObserver$1={mixout:function(){return{dom:{unwatch:function(){disableObservation(),_unwatched=!0}}}},hooks:function(){return{bootstrap:function(){observe(chainHooks("mutationObserverCallbacks",{}))},noAuto:function(){disconnect()},watch:function(r){var n=r.observeMutationsRoot;_unwatched?enableObservation():observe(chainHooks("mutationObserverCallbacks",{observeMutationsRoot:n}))}}}},parseTransformString=function(t){var r={size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0};return t.toLowerCase().split(" ").reduce(function(n,a){var s=a.toLowerCase().split("-"),o=s[0],l=s.slice(1).join("-");if(o&&l==="h")return n.flipX=!0,n;if(o&&l==="v")return n.flipY=!0,n;if(l=parseFloat(l),isNaN(l))return n;switch(o){case"grow":n.size=n.size+l;break;case"shrink":n.size=n.size-l;break;case"left":n.x=n.x-l;break;case"right":n.x=n.x+l;break;case"up":n.y=n.y-l;break;case"down":n.y=n.y+l;break;case"rotate":n.rotate=n.rotate+l;break}return n},r)},PowerTransforms={mixout:function(){return{parse:{transform:function(r){return parseTransformString(r)}}}},hooks:function(){return{parseNodeAttributes:function(r,n){var a=n.getAttribute("data-fa-transform");return a&&(r.transform=parseTransformString(a)),r}}},provides:function(t){t.generateAbstractTransformGrouping=function(r){var n=r.main,a=r.transform,s=r.containerWidth,o=r.iconWidth,l={transform:"translate(".concat(s/2," 256)")},f="translate(".concat(a.x*32,", ").concat(a.y*32,") "),u="scale(".concat(a.size/16*(a.flipX?-1:1),", ").concat(a.size/16*(a.flipY?-1:1),") "),m="rotate(".concat(a.rotate," 0 0)"),v={transform:"".concat(f," ").concat(u," ").concat(m)},b={transform:"translate(".concat(o/2*-1," -256)")},P={outer:l,inner:v,path:b};return{tag:"g",attributes:_objectSpread2({},P.outer),children:[{tag:"g",attributes:_objectSpread2({},P.inner),children:[{tag:n.icon.tag,children:n.icon.children,attributes:_objectSpread2(_objectSpread2({},n.icon.attributes),P.path)}]}]}}}},ALL_SPACE={x:0,y:0,width:"100%",height:"100%"};function fillBlack(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return e.attributes&&(e.attributes.fill||t)&&(e.attributes.fill="black"),e}function deGroup(e){return e.tag==="g"?e.children:[e]}var Masks={hooks:function(){return{parseNodeAttributes:function(r,n){var a=n.getAttribute("data-fa-mask"),s=a?getCanonicalIcon(a.split(" ").map(function(o){return o.trim()})):emptyCanonicalIcon();return s.prefix||(s.prefix=getDefaultUsablePrefix()),r.mask=s,r.maskId=n.getAttribute("data-fa-mask-id"),r}}},provides:function(t){t.generateAbstractMask=function(r){var n=r.children,a=r.attributes,s=r.main,o=r.mask,l=r.maskId,f=r.transform,u=s.width,m=s.icon,v=o.width,b=o.icon,P=transformForSvg({transform:f,containerWidth:v,iconWidth:u}),F={tag:"rect",attributes:_objectSpread2(_objectSpread2({},ALL_SPACE),{},{fill:"white"})},C=m.children?{children:m.children.map(fillBlack)}:{},D={tag:"g",attributes:_objectSpread2({},P.inner),children:[fillBlack(_objectSpread2({tag:m.tag,attributes:_objectSpread2(_objectSpread2({},m.attributes),P.path)},C))]},E={tag:"g",attributes:_objectSpread2({},P.outer),children:[D]},k="mask-".concat(l||nextUniqueId()),j="clip-".concat(l||nextUniqueId()),W={tag:"mask",attributes:_objectSpread2(_objectSpread2({},ALL_SPACE),{},{id:k,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[F,E]},M={tag:"defs",children:[{tag:"clipPath",attributes:{id:j},children:deGroup(b)},W]};return n.push(M,{tag:"rect",attributes:_objectSpread2({fill:"currentColor","clip-path":"url(#".concat(j,")"),mask:"url(#".concat(k,")")},ALL_SPACE)}),{children:n,attributes:a}}}},MissingIconIndicator={provides:function(t){var r=!1;WINDOW.matchMedia&&(r=WINDOW.matchMedia("(prefers-reduced-motion: reduce)").matches),t.missingIconAbstract=function(){var n=[],a={fill:"currentColor"},s={attributeType:"XML",repeatCount:"indefinite",dur:"2s"};n.push({tag:"path",attributes:_objectSpread2(_objectSpread2({},a),{},{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"})});var o=_objectSpread2(_objectSpread2({},s),{},{attributeName:"opacity"}),l={tag:"circle",attributes:_objectSpread2(_objectSpread2({},a),{},{cx:"256",cy:"364",r:"28"}),children:[]};return r||l.children.push({tag:"animate",attributes:_objectSpread2(_objectSpread2({},s),{},{attributeName:"r",values:"28;14;28;28;14;28;"})},{tag:"animate",attributes:_objectSpread2(_objectSpread2({},o),{},{values:"1;0;1;1;0;1;"})}),n.push(l),n.push({tag:"path",attributes:_objectSpread2(_objectSpread2({},a),{},{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),children:r?[]:[{tag:"animate",attributes:_objectSpread2(_objectSpread2({},o),{},{values:"1;0;0;0;0;1;"})}]}),r||n.push({tag:"path",attributes:_objectSpread2(_objectSpread2({},a),{},{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),children:[{tag:"animate",attributes:_objectSpread2(_objectSpread2({},o),{},{values:"0;0;1;1;0;0;"})}]}),{tag:"g",attributes:{class:"missing"},children:n}}}},SvgSymbols={hooks:function(){return{parseNodeAttributes:function(r,n){var a=n.getAttribute("data-fa-symbol"),s=a===null?!1:a===""?!0:a;return r.symbol=s,r}}}},plugins$2=[InjectCSS,ReplaceElements,Layers,LayersCounter,LayersText,PseudoElements,MutationObserver$1,PowerTransforms,Masks,MissingIconIndicator,SvgSymbols];registerPlugins(plugins$2,{mixoutsTo:api});api.noAuto;api.config;api.library;api.dom;var parse$1$1=api.parse;api.findIconDefinition;api.toHtml;var icon2=api.icon;api.layer;api.text;api.counter;var commonjsGlobal$1=typeof window<"u"?window:typeof global$1<"u"?global$1:typeof self<"u"?self:{};function createCommonjsModule(e,t){return t={exports:{}},e(t,t.exports),t.exports}var humps=createCommonjsModule(function(e){(function(t){var r=function(E,k,j){if(!u(k)||v(k)||b(k)||P(k)||f(k))return k;var W,M=0,S=0;if(m(k))for(W=[],S=k.length;M<S;M++)W.push(r(E,k[M],j));else{W={};for(var T in k)Object.prototype.hasOwnProperty.call(k,T)&&(W[E(T,j)]=r(E,k[T],j))}return W},n=function(E,k){k=k||{};var j=k.separator||"_",W=k.split||/(?=[A-Z])/;return E.split(W).join(j)},a=function(E){return F(E)?E:(E=E.replace(/[\-_\s]+(.)?/g,function(k,j){return j?j.toUpperCase():""}),E.substr(0,1).toLowerCase()+E.substr(1))},s=function(E){var k=a(E);return k.substr(0,1).toUpperCase()+k.substr(1)},o=function(E,k){return n(E,k).toLowerCase()},l=Object.prototype.toString,f=function(E){return typeof E=="function"},u=function(E){return E===Object(E)},m=function(E){return l.call(E)=="[object Array]"},v=function(E){return l.call(E)=="[object Date]"},b=function(E){return l.call(E)=="[object RegExp]"},P=function(E){return l.call(E)=="[object Boolean]"},F=function(E){return E=E-0,E===E},C=function(E,k){var j=k&&"process"in k?k.process:k;return typeof j!="function"?E:function(W,M){return j(W,E,M)}},D={camelize:a,decamelize:o,pascalize:s,depascalize:o,camelizeKeys:function(E,k){return r(C(a,k),E)},decamelizeKeys:function(E,k){return r(C(o,k),E,k)},pascalizeKeys:function(E,k){return r(C(s,k),E)},depascalizeKeys:function(){return this.decamelizeKeys.apply(this,arguments)}};e.exports?e.exports=D:t.humps=D})(commonjsGlobal$1)}),_typeof$2=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},defineProperty=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},objectWithoutProperties=function(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r};function styleToObject(e){return e.split(";").map(function(t){return t.trim()}).filter(function(t){return t}).reduce(function(t,r){var n=r.indexOf(":"),a=humps.camelize(r.slice(0,n)),s=r.slice(n+1).trim();return t[a]=s,t},{})}function classToObject(e){return e.split(/\s+/).reduce(function(t,r){return t[r]=!0,t},{})}function convert$2(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};if(typeof e=="string")return e;var n=(e.children||[]).map(function(f){return convert$2(f)}),a=Object.keys(e.attributes||{}).reduce(function(f,u){var m=e.attributes[u];switch(u){case"class":f.class=classToObject(m);break;case"style":f.style=styleToObject(m);break;default:f.attrs[u]=m}return f},{attrs:{},class:{},style:{}});r.class;var s=r.style,o=s===void 0?{}:s,l=objectWithoutProperties(r,["class","style"]);return h(e.tag,_extends({},t,{class:a.class,style:_extends({},a.style,o)},a.attrs,l),n)}var PRODUCTION=!1;try{PRODUCTION=!0}catch{}function log(){if(!PRODUCTION&&console&&typeof console.error=="function"){var e;(e=console).error.apply(e,arguments)}}function objectWithKey(e,t){return Array.isArray(t)&&t.length>0||!Array.isArray(t)&&t?defineProperty({},e,t):{}}function classList(e){var t,r=(t={"fa-spin":e.spin,"fa-pulse":e.pulse,"fa-fw":e.fixedWidth,"fa-border":e.border,"fa-li":e.listItem,"fa-inverse":e.inverse,"fa-flip-horizontal":e.flip==="horizontal"||e.flip==="both","fa-flip-vertical":e.flip==="vertical"||e.flip==="both"},defineProperty(t,"fa-"+e.size,e.size!==null),defineProperty(t,"fa-rotate-"+e.rotation,e.rotation!==null),defineProperty(t,"fa-pull-"+e.pull,e.pull!==null),defineProperty(t,"fa-swap-opacity",e.swapOpacity),t);return Object.keys(r).map(function(n){return r[n]?n:null}).filter(function(n){return n})}function normalizeIconArgs(e){if(e===null)return null;if((typeof e>"u"?"undefined":_typeof$2(e))==="object"&&e.prefix&&e.iconName)return e;if(Array.isArray(e)&&e.length===2)return{prefix:e[0],iconName:e[1]};if(typeof e=="string")return{prefix:"fas",iconName:e}}var FontAwesomeIcon=defineComponent({name:"FontAwesomeIcon",props:{border:{type:Boolean,default:!1},fixedWidth:{type:Boolean,default:!1},flip:{type:String,default:null,validator:function(t){return["horizontal","vertical","both"].indexOf(t)>-1}},icon:{type:[Object,Array,String],required:!0},mask:{type:[Object,Array,String],default:null},listItem:{type:Boolean,default:!1},pull:{type:String,default:null,validator:function(t){return["right","left"].indexOf(t)>-1}},pulse:{type:Boolean,default:!1},rotation:{type:[String,Number],default:null,validator:function(t){return[90,180,270].indexOf(Number.parseInt(t,10))>-1}},swapOpacity:{type:Boolean,default:!1},size:{type:String,default:null,validator:function(t){return["lg","xs","sm","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"].indexOf(t)>-1}},spin:{type:Boolean,default:!1},transform:{type:[String,Object],default:null},symbol:{type:[Boolean,String],default:!1},title:{type:String,default:null},inverse:{type:Boolean,default:!1}},setup:function(t,r){var n=r.attrs,a=computed(function(){return normalizeIconArgs(t.icon)}),s=computed(function(){return objectWithKey("classes",classList(t))}),o=computed(function(){return objectWithKey("transform",typeof t.transform=="string"?parse$1$1.transform(t.transform):t.transform)}),l=computed(function(){return objectWithKey("mask",normalizeIconArgs(t.mask))}),f=computed(function(){return icon2(a.value,_extends({},s.value,o.value,l.value,{symbol:t.symbol,title:t.title}))});watch(f,function(m){if(!m)return log("Could not find one or more icon(s)",a.value,l.value)},{immediate:!0});var u=computed(function(){return f.value?convert$2(f.value.abstract[0],{},n):null});return function(){return u.value}}});const _sfc_main$b={name:"BaseIcon",components:{FontAwesomeIcon},props:{icon:{type:Object,required:!0}}},_hoisted_1$7={class:"base-icon"};function _sfc_render$b(e,t,r,n,a,s){const o=resolveComponent("FontAwesomeIcon");return openBlock(),createElementBlock("div",_hoisted_1$7,[renderSlot(e.$slots,"default",{},()=>[createVNode(o,{"fixed-width":!0,icon:r.icon},null,8,["icon"])],!0),renderSlot(e.$slots,"tooltip",{},void 0,!0)])}var BaseIcon=_export_sfc$1(_sfc_main$b,[["render",_sfc_render$b],["__scopeId","data-v-50cc951a"]]);const _sfc_main$a={name:"BaseItems",components:{BaseIcon},emits:["remove:selection"],setup(e,{emit:t}){function r(n){t("remove:selection",n)}return{onClickRemoveOption:r}}},_hoisted_1$6={class:"field-tags-wrapper"},_hoisted_2$1$1={class:"item-text"};function _sfc_render$a(e,t,r,n,a,s){const o=resolveComponent("BaseIcon");return openBlock(),createElementBlock("div",_hoisted_1$6,[createBaseVNode("span",_hoisted_2$1$1,[renderSlot(e.$slots,"default")]),createVNode(o,{icon:e.Icon.Close,class:"fields-tags-close-icon",onClick:n.onClickRemoveOption},null,8,["icon","onClick"])])}var BaseItems=_export_sfc$1(_sfc_main$a,[["render",_sfc_render$a]]);const _sfc_main$9={name:"BaseButton",emits:["update:toggled"],components:{BaseIcon},props:{text:{type:String,default:""},icon:{type:String,default:""},toggleable:{type:Boolean,default:!1},toggled:{type:Boolean,default:!1}},setup(e,{emit:t}){const r=ref(null),n=ref(e.toggled);function a({target:f,pointerId:u}){f.setPointerCapture(u)}function s(){var f;n.value||(f=r.value)==null||f.blur()}function o({target:f,pointerId:u}){f.releasePointerCapture(u),e.toggleable&&(n.value=!n.value,t("update:toggled",n.value)),s()}watch(n,()=>s()),watch(()=>e.toggled,f=>n.value=f),watch(()=>e.toggleable,f=>{f||(n.value=!1)});const l=computed(()=>{const f=[];return n.value&&f.push("toggled"),f});return{element:r,elementCls:l,onMouseUpButton:o,onMouseDownButton:a}}},_hoisted_1$5={class:"base-button-text"};function _sfc_render$9(e,t,r,n,a,s){const o=resolveComponent("BaseIcon");return openBlock(),createElementBlock("button",{ref:"element",class:normalizeClass(["base-button",n.elementCls]),onMousedown:t[0]||(t[0]=(...l)=>n.onMouseDownButton&&n.onMouseDownButton(...l)),onMouseup:t[1]||(t[1]=(...l)=>n.onMouseUpButton&&n.onMouseUpButton(...l))},[renderSlot(e.$slots,"icon",{},()=>[r.icon?(openBlock(),createBlock(o,{key:0,icon:r.icon},null,8,["icon"])):createCommentVNode("",!0)],!0),renderSlot(e.$slots,"default",{},()=>[createBaseVNode("span",_hoisted_1$5,toDisplayString(r.text),1)],!0),renderSlot(e.$slots,"menu",{},void 0,!0)],34)}var BaseButton=_export_sfc$1(_sfc_main$9,[["render",_sfc_render$9],["__scopeId","data-v-e765be52"]]);function useFieldRules(e){return{required:e.required,whitespace:!e.allowEmptyWhitespace}}function useInputAttrs(e){return{required:e.required,type:e.inputType}}const FieldLabelAlign=new Enum$2(["left","right","top","down"],!1);let fieldCount=1;const _sfc_main$7={name:"BaseField",components:{BaseLabel,BaseIcon},emits:["update:modelValue","change:validity","change:dirty","click:field","blur:field","focus:field","input:field"],props:{label:{type:String,default:""},labelWidth:{type:String,default:"w-24"},modelValue:{type:[String,Number,Boolean],default:""},inputType:{type:String,default:"text"},inputCls:{type:[Object,String],default:"w-full"},inputWidth:{type:String,default:"flex-1"},labelAlign:{type:String,default:FieldLabelAlign.Left},required:{type:Boolean,default:!1},allowEmptyWhitespace:{type:Boolean,default:!1},minLength:{type:Number,default:void 0},maxLength:{type:Number,default:void 0},minValue:{type:Number,default:void 0},maxValue:{type:Number,default:void 0},step:{type:Number,default:void 0},validateOnInit:{type:Boolean,default:!1},inputAttrsCfg:{type:Function,default:e=>__spreadProps(__spreadValues({},useInputAttrs(e)),{minlength:e.minLength,maxlength:e.maxLength})},rulesCfg:{type:Function,default:e=>__spreadProps(__spreadValues({},useFieldRules(e)),{minLength:e.minLength?[e.minLength]:!1,maxLength:e.maxLength?[e.maxLength]:!1})},parseValue:{type:Function,default:parseString$1},id:{type:String,default:()=>`input-${fieldCount++}`}},setup(e,{emit:t}){const r=ref(null),n=ref(null),a=computed(()=>e.rulesCfg(e)),s=useField(e.label||`field-${e.inputType}`,a,{initialValue:e.modelValue,validateOnMount:e.validateOnInit,type:e.inputType,checkedValue:!0,uncheckedValue:!1});s.setTouched(e.validateOnInit);function o(C){t("update:modelValue",C)}watch(computed(()=>e.modelValue),C=>{s.handleChange(C,!1)});const l=computed(()=>({"field-invalid":s.meta.touched&&s.meta.valid===!1}));watch(a,async C=>{C&&(await nextTick(),await s.validate())}),watch(computed(()=>s.meta.valid),C=>{s.meta.touched&&t("change:validity",C)}),watch(computed(()=>s.meta.dirty),C=>{s.meta.touched&&t("change:dirty",C)});const f=computed(()=>s.errors.value),u=computed(()=>s.meta.touched&&f.value.length);function m(C){t("click:field",C)}function v(C){t("input:field",C.target.value)}function b(){r.value.select(),t("focus:field")}function P(){s.setTouched(!0);const C=e.parseValue(e.modelValue);C!==e.modelValue&&o(C),s.validate(),t("blur:field")}const F=computed({get(){return s.value.value},set(C){o(C)}});return{field:s,value:F,inputWrapper:n,inputWrapperCls:l,fieldErrors:f,showErrors:u,inputEl:r,onBlurField:P,onFocusField:b,onMouseDownField:m,onInputField:v,inputAttrs:e.inputAttrsCfg(e)}}},_hoisted_1$4=["id"];function _sfc_render$7(e,t,r,n,a,s){const o=resolveComponent("BaseLabel"),l=resolveComponent("BaseIcon");return openBlock(),createElementBlock("div",{class:normalizeClass(["base-field",r.labelAlign])},[r.label?(openBlock(),createBlock(o,{key:0,value:r.label,class:normalizeClass(r.labelWidth),for:r.id},null,8,["value","class","for"])):createCommentVNode("",!0),createBaseVNode("div",{class:normalizeClass(["relative",r.inputWidth])},[createBaseVNode("div",{ref:"inputWrapper",class:normalizeClass(["field-text",n.inputWrapperCls])},[renderSlot(e.$slots,"beforeItems",{},void 0,!0),withDirectives(createBaseVNode("input",mergeProps(n.inputAttrs,{id:r.id,ref:"inputEl","onUpdate:modelValue":t[0]||(t[0]=f=>n.value=f),class:["field-text-input",r.inputCls],onMousedown:t[1]||(t[1]=(...f)=>n.onMouseDownField&&n.onMouseDownField(...f)),onFocus:t[2]||(t[2]=(...f)=>n.onFocusField&&n.onFocusField(...f)),onBlur:t[3]||(t[3]=(...f)=>n.onBlurField&&n.onBlurField(...f)),onInput:t[4]||(t[4]=(...f)=>n.onInputField&&n.onInputField(...f))}),null,16,_hoisted_1$4),[[vModelDynamic,n.value]]),renderSlot(e.$slots,"afterItems",{},void 0,!0)],2),withDirectives(createVNode(l,{icon:e.Icon.AlertTriangle,class:"text-red-800"},{default:withCtx(()=>[createBaseVNode("ul",null,[(openBlock(!0),createElementBlock(Fragment,null,renderList(n.fieldErrors,(f,u)=>(openBlock(),createElementBlock("li",{key:u},toDisplayString(f),1))),128))])]),_:1},8,["icon"]),[[vShow,n.showErrors]])],2)],2)}var BaseField=_export_sfc$1(_sfc_main$7,[["render",_sfc_render$7],["__scopeId","data-v-d06880ce"]]);const _sfc_main$6={name:"FieldCheckBox",components:{BaseField},props:{parseValue:{type:Function,default:parseBoolean$1}}};function _sfc_render$6(e,t,r,n,a,s){const o=resolveComponent("BaseField");return openBlock(),createBlock(o,{"input-type":"checkbox","input-width":"w-auto",class:"checkbox","parse-value":r.parseValue},null,8,["parse-value"])}var FieldCheckBox=_export_sfc$1(_sfc_main$6,[["render",_sfc_render$6],["__scopeId","data-v-92dd509a"]]);const _sfc_main$5={name:"FieldNumber",components:{BaseField},props:{step:{type:Number,default:.01},inputAttrsCfg:{type:Function,default:e=>__spreadProps(__spreadValues({},useInputAttrs(e)),{min:e.minValue,max:e.maxValue,step:e.step})},rulesCfg:{type:Function,default:e=>__spreadProps(__spreadValues({},useFieldRules(e)),{minValue:e.minValue?[e.minValue]:!1,maxValue:e.maxValue?[e.maxValue]:!1})}},setup(){return{parseNumber:parseNumber$2}}};function _sfc_render$5(e,t,r,n,a,s){const o=resolveComponent("BaseField");return openBlock(),createBlock(o,mergeProps({ref:"fieldEl"},e.$props,{class:"field-number","input-type":"number","parse-value":n.parseNumber,onKeydown:[t[0]||(t[0]=withKeys(withModifiers(()=>{},["prevent"]),["down"])),t[1]||(t[1]=withKeys(withModifiers(()=>{},["prevent"]),["up"]))],onWheel:t[2]||(t[2]=withModifiers(()=>{},["prevent"]))}),createSlots({_:2},[renderList(e.$slots,(l,f)=>({name:f,fn:withCtx(u=>[renderSlot(e.$slots,f,normalizeProps(guardReactiveProps(u)))])}))]),1040,["parse-value"])}var FieldNumber=_export_sfc$1(_sfc_main$5,[["render",_sfc_render$5]]);const _sfc_main$3$1={name:"FieldInteger",components:{FieldNumber},setup(){return{parseInteger:parseInteger$1}}};function _sfc_render$3$1(e,t,r,n,a,s){const o=resolveComponent("FieldNumber");return openBlock(),createBlock(o,mergeProps(e.$props,{step:1,"parse-value":n.parseInteger}),null,16,["parse-value"])}var FieldInteger=_export_sfc$1(_sfc_main$3$1,[["render",_sfc_render$3$1]]);new Enum$2({Above:"tags-above",Below:"tags-below",Inline:"tags-inline"});const SearchFilter="searchFilter",SelectionsFilter="selectionsFilter",ListPadding=8,ListHeight=144+ListPadding,_sfc_main$1$1={name:"FieldComboBox",components:{BaseOverlay,BaseList,BaseIcon,BaseItems,BaseField},emits:["update:expanded","update:modelValue","update:selected"],props:{modelValue:{type:[String,Number,Array],default:null},multiSelect:{type:Boolean,default:!1},options:{type:Array,default:()=>[]},expanded:{type:Boolean,default:!1},idField:{type:String,default:null},displayField:{type:String,default:null},maxSelectedTags:{type:Number,default:2},filterSelections:{type:Boolean,default:!1},filterFn:{type:Function,default:null},groups:{type:Array,default:null},groupSort:{type:Function,default:null}},setup(e,{emit:t}){const r=ref(null),n=ref(null),a=ref(e.expanded),s=ref(null),o=ref(!1),l=ref(null),f=computed(()=>l.value.length-e.maxSelectedTags),u=computed(()=>f.value>0&&!o.value),m=computed(()=>{const{groups:he}=e;let{options:me,filterFn:we,displayField:Se,idField:be}=e;me.isCollection?me=me.clone():me=new Collection$1(me),be?me.idField=be:be=me.idField,Se?me.displayField=Se:Se=me.displayField;const le=unref(s);if(me.removeFilters([SearchFilter,SelectionsFilter],!0),le){if(!we){const ae=new RegExp(le,"i");we=ke=>ae.test(ke[Se])}me.addFilters({id:SearchFilter,fn:we},{suppress:!0})}if(e.multiSelect&&e.filterSelections){const ae=unref(l);isEmpty$3(ae)||me.addFilters({id:SelectionsFilter,fn:ke=>{let Ne=!0;for(const de of ae)if(de[be]===ke[be]){Ne=!1;break}return Ne}},{suppress:!0})}return me.groups=he,me}),v=computed(()=>m.value.displayField);l.value=F();const b=computed({get(){var he;const me=unref(s);return isEmpty$3(me)?e.multiSelect?"":(he=l.value[0])==null?void 0:he[v.value]:me},set(he){s.value=he}}),P=computed(()=>e.multiSelect?"multi-select":"");function F(){const he=[],{idField:me}=m.value;let{modelValue:we}=e;return isEmpty$3(we)||(we=makeArray$1(we),we.forEach(Se=>{var be;const le=(be=e.options)==null?void 0:be.find(ae=>ae[me]===Se);le&&he.push(le)})),he}watch(()=>e.modelValue,()=>{l.value=F(),t("update:selected",e.multiSelect?l.value:l.value[0])},{immediate:!0}),watch(()=>e.expanded,he=>{C(he)}),watch(()=>e.multiSelect,he=>{var me;he||_({option:(me=l.value)==null?void 0:me[0]})});function C(he=!a.value){if(a.value=he,he){const{inputWrapper:me}=r.value,{style:we}=n.value.$el,Se=me.getBoundingClientRect(),{left:be,width:le,bottom:ae}=Se;let{top:ke}=Se;innerHeight<ae+ListHeight?ke-=ListHeight:ke=ae+ListPadding,we.top=`${ke+scrollY}px`,we.left=`${be-2}px`,we.width=`${le+4}px`}t("update:expanded",he)}function D(){var he;if(!e.multiSelect)return;let{modelValue:me}=e;if(isEmpty$3(me)||!isEmpty$3(s.value))return;me=me[me.length-1];const{idField:we}=m.value;_({option:(he=e.options)==null?void 0:he.find(Se=>Se[we]===me),remove:!0})}function E(he){C(),he.stopPropagation()}function k(he){e.multiSelect||isEmpty$3(he)&&_({shouldBlur:!1})}function j(){W()}function W(){C(!1),s.value=null}function M(){C()}function S(he){_({option:he,remove:!0})}function T(he){const{target:me}=he;a.value&&!(hasTarget(n.value.$el,me)||hasTarget(r.value.$el,me))&&W()}function V({target:he}){a.value&&!n.value.$el.contains(he)&&C(!1)}function _({option:he,remove:me,shouldBlur:we=!e.multiSelect}={}){let Se=null;const{multiSelect:be}=e;let{modelValue:le}=e;const ae=m.value.getOptionId(he);be?(isArray$3(le)||(le=[le]),me?Se=le.filter(ke=>ke!==ae):Se=le.concat(ae)):me||(Se=ae),we&&W(),t("update:modelValue",Se)}function ee(he,me){_({option:he,remove:me})}function re(){o.value=!1}function te(){o.value=!0}function oe(he,me){return o.value||me<e.maxSelectedTags}return{selections:l,showExpandTags:u,showCollapseTags:o,collapsedTagCount:f,isExpanded:a,fieldEl:r,dropdownListEl:n,displayValue:b,componentCls:P,optionsAvailable:m,displayFieldFm:v,isTagVisible:oe,getSelections:F,onClickPicker:M,onClickField:E,onInputField:k,onTabField:j,onUpdateSelections:ee,onClickItemRemove:S,onKeyBackspace:D,onClickExpandTags:te,onClickCollapseTags:re,onMouseDownDocument:T,onScrollDocument:V}}},_hoisted_1$1$1={key:0};function _sfc_render$1$1(e,t,r,n,a,s){const o=resolveComponent("BaseItems"),l=resolveComponent("BaseIcon"),f=resolveComponent("BaseList"),u=resolveComponent("BaseOverlay"),m=resolveComponent("BaseField"),v=resolveDirective("mousedown-document"),b=resolveDirective("scroll-document");return withDirectives((openBlock(),createBlock(m,{ref:"fieldEl",modelValue:n.displayValue,"onUpdate:modelValue":t[2]||(t[2]=P=>n.displayValue=P),class:normalizeClass(["field-combo-box",n.componentCls]),onKeydown:[withKeys(n.onKeyBackspace,["delete"]),withKeys(n.onTabField,["tab"])],"onInput:field":n.onInputField,"onClick:field":n.onClickField},{beforeItems:withCtx(()=>[r.multiSelect?(openBlock(),createElementBlock("div",_hoisted_1$1$1,[renderSlot(e.$slots,"itemsDisplay",{},()=>[(openBlock(!0),createElementBlock(Fragment,null,renderList(n.selections,(P,F)=>withDirectives((openBlock(),createBlock(o,{key:P[n.optionsAvailable.idField],"onRemove:selection":C=>n.onClickItemRemove(P)},{default:withCtx(()=>[createTextVNode(toDisplayString(P[n.displayFieldFm]),1)]),_:2},1032,["onRemove:selection"])),[[vShow,n.isTagVisible(P,F)]])),128))],!0),withDirectives(createBaseVNode("div",{class:"field-tags-wrapper-collapse",onClick:t[0]||(t[0]=(...P)=>n.onClickExpandTags&&n.onClickExpandTags(...P))},[createBaseVNode("span",null,"+ "+toDisplayString(n.collapsedTagCount),1)],512),[[vShow,n.showExpandTags]]),withDirectives(createBaseVNode("div",{class:"field-tags-wrapper-expand",onClick:t[1]||(t[1]=(...P)=>n.onClickCollapseTags&&n.onClickCollapseTags(...P))},[createBaseVNode("span",null,"- "+toDisplayString(n.collapsedTagCount),1)],512),[[vShow,n.showCollapseTags]])])):createCommentVNode("",!0)]),afterItems:withCtx(()=>[createVNode(l,{class:"field-combo-box-picker",icon:e.Icon.PickerDown,onClick:n.onClickPicker},null,8,["icon","onClick"]),withDirectives(createVNode(u,{ref:"dropdownListEl",class:"field-combo-box-list-wrapper"},{default:withCtx(()=>[renderSlot(e.$slots,"list",{expanded:n.isExpanded,options:n.optionsAvailable,selections:n.selections},()=>[renderSlot(e.$slots,"listBefore",{},void 0,!0),createVNode(f,{selections:n.selections,options:n.optionsAvailable,"onUpdate:selections":n.onUpdateSelections},createSlots({_:2},[renderList(e.$slots,(P,F)=>({name:F,fn:withCtx(C=>[renderSlot(e.$slots,F,normalizeProps(guardReactiveProps(C)),void 0,!0)])}))]),1032,["selections","options","onUpdate:selections"]),renderSlot(e.$slots,"listAfter",{},void 0,!0)],!0)]),_:3},512),[[vShow,n.isExpanded]])]),_:3},8,["modelValue","class","onKeydown","onInput:field","onClick:field"])),[[v,n.onMouseDownDocument],[b,n.onScrollDocument]])}var FieldComboBox=_export_sfc$1(_sfc_main$1$1,[["render",_sfc_render$1$1],["__scopeId","data-v-7a5ae1ca"]]);const _sfc_main$4={name:"BaseDialog",emits:["update:open","click:close","click:minimize","click:maximize","click:restore"],components:{BaseIcon,BaseOverlay},props:{open:{type:Boolean,default:!0},minimizable:{type:Boolean,default:!0},maximizable:{type:Boolean,default:!0},title:{type:String,default:""}},setup(e,{emit:t}){const r=ref(e.open),n=ref(!0);watch(r,v=>t("update:open",v)),watch(()=>e.open,v=>{r.value=v});const a=computed(()=>e.maximizable&&n.value),s=computed(()=>e.maximizable&&!n.value);function o(){r.value=!1}function l(){t("click:close")}function f(){o(),n.value=!1,t("click:minimize")}function u(){n.value=!0,t("click:maximize")}function m(){n.value=!1,t("click:restore")}return{showMaximized:s,showRestoreDown:a,onClickClose:l,onClickMinimize:f,onClickMaximize:u,onClickRestoreDown:m}}},_hoisted_1$a={class:"base-dialog"},_hoisted_2$3={class:"base-dialog-header"},_hoisted_3$3={class:"base-dialog-header-title"},_hoisted_4$2={class:"base-dialog-header-toolbar"};function _sfc_render$4(e,t,r,n,a,s){const o=resolveComponent("BaseIcon"),l=resolveComponent("BaseOverlay");return openBlock(),createBlock(l,null,{default:withCtx(()=>[createBaseVNode("div",_hoisted_1$a,[createBaseVNode("header",_hoisted_2$3,[renderSlot(e.$slots,"title",{},()=>[createBaseVNode("span",_hoisted_3$3,toDisplayString(r.title),1)],!0),createBaseVNode("div",_hoisted_4$2,[renderSlot(e.$slots,"toolbar",{},void 0,!0),r.minimizable?(openBlock(),createBlock(o,{key:0,icon:e.Icon.Minus,class:"base-dialog-minimize-icon toolbar",onClick:n.onClickMinimize},null,8,["icon","onClick"])):createCommentVNode("",!0),withDirectives(createVNode(o,{icon:e.Icon.Maximize,class:"base-dialog-maximize-icon toolbar",onClick:n.onClickMaximize},null,8,["icon","onClick"]),[[vShow,n.showMaximized]]),withDirectives(createVNode(o,{icon:e.Icon.Restore,class:"base-dialog-maximize-icon toolbar",onClick:n.onClickRestoreDown},null,8,["icon","onClick"]),[[vShow,n.showRestoreDown]]),createVNode(o,{icon:e.Icon.Close,class:"base-dialog-close-icon toolbar",onClick:n.onClickClose},null,8,["icon","onClick"])])]),renderSlot(e.$slots,"body",{},void 0,!0),renderSlot(e.$slots,"footer",{},void 0,!0)])]),_:3})}var BaseDialog=_export_sfc$1(_sfc_main$4,[["render",_sfc_render$4],["__scopeId","data-v-25732f10"]]);const proto$2=String.prototype;proto$2.capitalize=function(){return`${this[0].toUpperCase()}${this.substring(1).toLowerCase()}`};proto$2.equals=function(e){return this.toLowerCase()===(e==null?void 0:e.toLowerCase())};let Enum$1=class{constructor(t,r=!0){Array.isArray(t)?t.forEach((n,a)=>{const s=this.valueToKey(n);r?this[s]=a:this[s]=n}):Object.assign(this,t)}valueToKey(t){return String(t).split(/(?=[A-Z])|-/).map(r=>r.capitalize()).join("")}get count(){return this.keys.length}get keys(){return Object.keys(this)}get values(){return Object.keys(this).map(t=>this[t])}get options(){return Object.keys(this).map(t=>({id:this[t],value:t}))}toString(){const t=[];return Object.keys(this).forEach(n=>{const a=typeof this[n];t.push(`* @property {${a.capitalize()}} ${n}`)}),`/**
`+t.join(`
`)+`
 */`}};const Month=new Enum$1(["January","February","March","April","May","June","July","August","September","October","November","December"]),Weekday=new Enum$1(["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]),proto$1=Date.prototype,TotalMonths=Month.count,TotalDays=Weekday.count;proto$1.getWeekStart=function(e={}){const{year:t=this.getFullYear(),yearOffset:r=0,month:n=this.getMonth(),dateOffset:a=0,isEnd:s=!1,startingDay:o=Weekday.Monday,isWeek:l=!0}=e;let{monthOffset:f=0,date:u=this.getDate()}=e;!l&&s&&(f=1,u=0);const m=new Date(t+r,n+f,u+a);if(l){const v=m.getDay();o<v?m.setDate(m.getDate()-(v-o)):o>v&&m.setDate(m.getDate()-(v+(TotalDays-o))),s&&m.setDate(m.getDate()+Weekday.Saturday)}return m};proto$1.getMonthStart=function(e={}){return e.isWeek=e.isWeek||!1,e.date=1,this.getWeekStart(e)};proto$1.getMonthEnd=function(e={}){return e.isEnd=!0,this.getMonthStart(e)};proto$1.getYearStart=function(e={}){return e.month=Month.January,this.getMonthStart(e)};proto$1.getYearEnd=function(e={}){return e.isEnd=!0,e.month=Month.December,this.getMonthStart(e)};proto$1.getQuarterStart=function(e={}){const{isEnd:t=!1}=e;let{month:r=this.getMonth()}=e;if(r=r+(e.monthOffset||0),r<0||r>Month.December){const n=r<0?-1:1,a=Math.abs(r)/TotalMonths,s=n===-1?Math.ceil(a):Math.floor(a);r-=s*TotalMonths*n,e.yearOffset=(e.yearOffset||0)+s*n}return r<Month.April?r=t?Month.March:Month.January:r<Month.July?r=t?Month.June:Month.April:r<Month.October?r=t?Month.September:Month.July:r=t?Month.December:Month.October,e.month=r,e.monthOffset=0,this.getMonthStart(e)};proto$1.getQuarterEnd=function(e={}){return e.isEnd=!0,this.getQuarterStart(e)};proto$1.toMMDDYYYY=function(){return Intl.DateTimeFormat("en-US",{month:"2-digit",day:"2-digit",year:"numeric"}).format(this)};function isUndefined(e){return e===void 0}function isNull(e){return e===null}function isDefined(e){return e!=null}function isEmpty$2(e){return isUndefined(e)||isNull(e)||isNumber(e)&&isNaN(e)||e===""||isArray$2(e)&&e.length===0||isObject$1(e)&&Object.values(e).length===0}function isString(e){return typeof e=="string"}function isNumber(e){return typeof e=="number"}function isBoolean(e){return typeof e=="boolean"}function isDate(e){return e instanceof Date}function isArray$2(e){return Array.isArray(e)}function makeArray(e){return isArray$2(e)?e:[e]}function isObject$1(e){return(e==null?void 0:e.constructor)===Object}function isFunction$2(e){return typeof e=="function"}function parseNumber$1(e,t=2){if(isDefined(e))return e=isNumber(e)?e:parseFloat(e),+e.toFixed(t)}function parseInteger(e){return parseNumber$1(e,0)}function parseBoolean(e){return isBoolean(e)||!isDefined(e)?e:e==="false"||e==="0"?!1:!!e}function parseDate(e){return isDate(e)?e:(e=new Date(e),isNaN(e)?void 0:e)}function parseRaw(e){try{return JSON.parse(e)}catch{console.error(`value could not be parse ${e}`);return}}function parseArray(e){if(isDefined(e))return isArray$2(e)?e:parseRaw(e)}function parseObject(e){if(isDefined(e))return isObject$1(e)?e:parseRaw(e)}function parseString(e){if(isDefined(e))return isString(e)?e:String(e)}function cloneDeep(e){return parseRaw(JSON.stringify(e))}function commonSort(e,t,r=-1){return e===t?0:e<t?r:-1*r}const proto=Array.prototype;proto.remove=function(e){if(!isEmpty$2(e)){e=makeArray(e);for(const t of e){let r=t;isFunction$2(r)||(r=a=>a===t);const n=this.findIndex(r);n!==-1&&this.splice(n,1)}}};proto.add=function(e,t=this.length){return this.splice(t,0,e),e};proto.addUnique=function(e,t){const r=this.find(n=>n===e);return r||(this.add(e,t),e)};const FieldType=new Enum$1(["String","Integer","Decimal","Boolean","Date","Model","Collection","Array","Object"]);function parseValue(e,t){const{type:r}=t;if(isDefined(r))switch(r){case FieldType.Integer:e=getValue(parseInteger(e),t,0);break;case Number:case FieldType.Decimal:e=getValue(parseNumber$1(e,t.precision),t,0);break;case Boolean:case FieldType.Boolean:e=getValue(parseBoolean(e),t,!1);break;case Date:case FieldType.Date:e=getValue(parseDate(e),t,null);break;case FieldType.Collection:e=t.collection?new t.collection(e):new Collection(e,t.model);break;case FieldType.Model:e=new t.model(e);break;case Array:case FieldType.Array:e=parseArray(e);break;case Object:case FieldType.Object:e=getValue(parseObject(e),t,{});break;case String:case FieldType.String:e=getValue(parseString(e),t,"");break;default:e??(e=t.defaultValue),isDefined(e)&&!(e instanceof r)&&(e=new r(e));break}return e}function getValue(e,t,r){return isEmpty$2(e)&&(e="defaultValue"in t?t.defaultValue:r),e}class Model{constructor(t){Qe(this,"isModel",!0);Qe(this,"_snapshot",null);Qe(this,"_fields",null);Qe(this,"_trackChanges",!1);t??(t={});for(const{name:r}of this.fields)r in t||(t[r]=null);this.set(t)}get TrackChanges(){return this._trackChanges}set TrackChanges(t){this._trackChanges=t,this.commit()}getDefaultFields(){return[]}get fields(){let t=this._fields;return t||(this.fields=t=this.getDefaultFields()),t}set fields(t){this._fields=t}reset(){this.set(this._snapshot)}commit(){this.TrackChanges?this._snapshot=this.getData():delete this._snapshot}set(t,r=!1){r&&this.reset();for(const n in t){const a=this.fields.find(s=>s.name===n);a?this[a.name]=parseValue(t[a.name],a):(this.fields.push({name:n,custom:!0}),this[n]=t[n])}}clone(t){return new this.constructor(this.getData(t))}getData({include:t,exclude:r}={}){const n={},a=[...this.fields];t&&t.forEach(s=>a.push({name:s})),this._visited=!0;for(const s of a){const{name:o}=s;if(r&&r.indexOf(o)!==-1)continue;const l=this[o];l!=null&&l.isModel||l!=null&&l.isCollection?l._visited||(n[o]=l.getData({include:t,exclude:r})):isArray$2(l)||isObject$1(l)?n[o]=cloneDeep(l):n[o]=l}return delete this._visited,n}static toClassDescription(){const t=[];return new this().fields.forEach(n=>{let{type:a}=n;return FieldType.values.includes(a)?a===FieldType.Collection?a=`Collection<${n.model.name}>`:a===FieldType.Model&&(a=`${n.model.name}`):a=a.name,t.push(`* @property {${a}} ${n.name}`)}),`/**
`+t.join(`
`)+`
 */`}}const GroupKey="groupKey",GroupDisplay="groupDisplay",SelectedCls="list-item-selected";var vt,bt;class Collection extends Array{constructor(r,n=Model){super();Qe(this,"isCollection",!0);Qe(this,"_idField","id");Qe(this,"_displayField","value");Qe(this,"_records",[]);Qe(this,"_groups",null);Qe(this,"_filters",[]);Qe(this,"_sorters",[]);Qe(this,"parent",null);Qe(this,vt,null);Qe(this,bt,null);r??(r={}),this.suspend(!0),this.model=r.model||n,delete r.model,isArray$2(r)?this.records=r:Object.assign(this,r),this.suspend(),this.init()}clear(){this.length=0}add(r,{clear:n=!1,suppress:a=!1}={}){isEmpty$2(r)||(r=makeArray(r),this.suspend(a),this.records=n?r:this.records.concat(r),this.suspend())}clearFilters(){this.filters=[]}sum(r){return this.records.reduce((n,a)=>n+a[r])}addFilters(r,{suppress:n=!1}={}){isEmpty$2(r)||(r=makeArray(r),this.suspend(n),this.filters=this.filters.concat(r),this.suspend())}removeFilters(r,n){if(!isEmpty$2(r)){r=makeArray(r);for(const a of r)this.filters.remove(({id:s})=>s===a);this.suspend(n),this.init(),this.suspend()}}suspend(r){this._suspended=r}addSorters(r,{suppress:n=!1}={}){isEmpty$2(r)||(r=makeArray(r),this.suspend(n),this.sorters=this.sorters.concat(r),this.suspend())}removeSorters(r,{suppress:n=!1}={}){if(!isEmpty$2(r)){r=makeArray(r);for(const a of r)this.sorters.remove(({id:s})=>s===a);this.suspend(n),this.init(),this.suspend()}}group({key:r,display:n},a=this.records){this.clear();const s={};a.forEach(o=>{const l=o[r],f=s[l];f?f.records.push(o):s[l]={[GroupKey]:l,records:[o]}});for(const{[GroupKey]:o,records:l}of Object.values(s)){const f=new Collection({records:l,parent:this});f[GroupDisplay]=n?n(f):o,this[GroupKey]=r,this.push(f)}this.sort({property:GroupDisplay},!1)}find(r){return this.records.find(r)}sort(r=this.sorters,n=!0){!r||this._suspended||(r=makeArray(r),r.forEach(a=>{if(isObject$1(a)){const{property:s,direction:o=-1}=a;a=(l,f)=>commonSort(l[s],f[s],o)}n?this.records.sort(a):super.sort(a)}))}init(){if(this._suspended)return;const{groups:r,filters:n}=this;let{records:a}=this;if(!isEmpty$2(n)){let s=[];n.forEach((o,l)=>{l===0||o.or||(a=s,s=[]);let f=o.fn;if(!f){let{value:u}=o;const{property:m,exact:v=!1}=o;v||(u=new RegExp(u,"i")),f=b=>{const P=b[m];return v?P===u:u.test(P)}}a.forEach(u=>{f(u)&&s.push(u)})}),a=s}if(r){let s=this;for(let o=0;o<r.length;o++)if(o===0)this.group(r[o],a);else{let l=[];s.forEach(f=>{f.group(r[o]),l=l.concat(f)}),s=l}}else this.clear(),a.forEach(s=>this.push(s)),this.sort()}getOptionId(r){if(r)return isArray$2(r)?r[GroupDisplay]:r[this.idField]}getOptionDisplay(r){if(r)return isArray$2(r)?r[GroupDisplay]:r[this.displayField]}getOptionCls(r,n){if(this.isGrouped)return"group-wrapper";const a=["list-item"],{idField:s}=this,o=r[s];for(const l of n)if(o===l[s]){a.push(SelectedCls);break}return a}clone(r){const{groups:n,idField:a,displayField:s,sorters:o,filters:l,model:f}=this;return new this.constructor({idField:a,displayField:s,groups:n,sorters:o,filters:l,model:f,records:this.getData(r)})}getData(r){const n=[];return this._visited=!0,this.forEach(a=>{const s=makeArray(a.getData(r));n.push(...s)}),delete this._visited,n}get first(){return this[0]}get last(){return this[this.length-1]}set sorters(r){r==null||r.map((n,a)=>(n.id||(n.id=a),n)),this._sorters=r,this.sort()}get sorters(){return this._sorters}set filters(r){r==null||r.map((n,a)=>(n.id||(n.id=a),n)),this._filters=r,this.init()}get filters(){return this._filters}set records(r){const n=[],{model:a}=this;r.forEach(s=>{s.isModel?n.push(s):n.push(new a(s))}),this._records=n,this.init()}get records(){return this._records}set groups(r){isEmpty$2(r)?this[GroupKey]=null:isObject$1(r)&&(r=[r]),this._groups=r,this.init()}get groups(){return this._groups}get idField(){var r;return((r=this.parent)==null?void 0:r.idField)||this._idField}set idField(r){this._idField=r}get displayField(){var r;return((r=this.parent)==null?void 0:r.displayField)||this._displayField}set displayField(r){this._displayField=r}get isGrouped(){return!isEmpty$2(this[GroupKey])}static get[(vt=GroupKey,bt=GroupDisplay,Symbol.species)](){return Array}}class Enum extends Model{getTrackChanges(){return!1}}class EnumStore extends Collection{constructor(t=[],r=Enum){let n;const a=[];isObject$1(t)?(n=t.records||[],delete t.records,t.model??(t.model=r),t.sorters??(t.sorters=[{property:"value"}])):n=t,super(t);const{displayField:s,idField:o}=this;if(isArray$2(n))n.forEach((f,u)=>{isObject$1(f)||(f={[s]:f}),f[o]??(f[o]=u),a.push(f)});else for(const f in n)a.push({[s]:f,[o]:n[f]});this.records=a;const l={};this.forEach(f=>l[f[s]]=f[o]),Object.assign(this,l)}getKey(t){const{idField:r}=this,n=this.find(a=>a[r]===t);return n==null?void 0:n[this.displayField]}getValue(t){const{displayField:r}=this,n=this.find(a=>a[r]===t);return n==null?void 0:n[this.idField]}findRecord(t){const{idField:r}=this;return this.find(n=>n[r]===t)}toClassDescription(){return this.sort([{property:this.displayField}],!1),`/**
${this.map(r=>` * @property {${(typeof r[this.idField]).capitalize()}} ${r[this.displayField]}`).join(`
`)}
 */`}}const Items=new EnumStore({records:{None:0,Arrow:1,ArrowSilver:2,Bomb:3,Boomerang:4,BoomerangMagical:5,Bow:6,Candle:7,CandleRed:8,Clock:9,Compass:10,Flute:11,Food:12,Heart:13,HeartHalf:130,HeartEmpty:131,HeartAlt:133,HeartContainer:14,Key:15,KeySkeleton:16,Ladder:17,Letter:18,MagicBook:19,Map:20,PotionBlue:21,PotionRed:22,PowerBracelet:23,Raft:24,RingBlue:25,RingGreen:26,RingRed:27,RupeeFive:28,RupeeOne:29,Shield:30,ShieldMagical:31,Sword:32,SwordWhite:33,SwordMagical:34,TriforceShard:35,TriforceShardAlt:355,Wand:36}});new EnumStore(["Fairy","Link","Merchant","OldMan","OldMan2","OldWoman","Zelda"]);const Enemies=new EnumStore(["Armos","Bubble","BubbleBlue","BubbleRed","Darknut","DarknutBlue","Gel","GelBlue","Ghini","Gibdo","GleeokHead","Goriya","GoriyaBlue","Keese","KeeseBlue","KeeseRed","Lanmola","LanmolaBlue","Leever","LeeverBlue","LikeLike","Lynel","LynelBlue","Moblin","MoblinBlue","Moldorm","MoldormBlue","Octorok","OctorokBlue","Patra","PatraHead","Peahat","PolsVoice","Rock","Rope","RopeBlue","Stalfos","Tektite","TektiteBlue","Trap","Vire","Wallmaster","Wizzrobe","WizzrobeBlue","Zol","ZolGray","ZolGreen","Zora"]);new EnumStore(["Aquamentus","Digdogger","Dodongo","Ganon","Gleeok","Gohma","GohmaBlue","Manhandla"]);const ScreenTemplates=new EnumStore({records:{Base:-1,Plain:0,Entrance:1,Blocks2X3Columns:2,Blocks2X3Column:3,Blocks4:4,Blocks4Alt:5,Blocks1:6,BlocksX:7,Blocks3Rows:8,WaterMaze:9,BlocksAquamentus:10,Exit:11,BlocksStairsCenter:12,WaterBrackets:13,PlainStatues:14,Sand:15,BlocksStairsEnd:16,BlocksDiagonal:17,BlocksHorizontal:18,BlocksC:19,Blocks2:20,BlocksMaze:21,WaterHorizontal:22,WaterT:23,Blocks4Statues:24,BlocksGleeok:25,WaterLadder:26,Blocks6Alt:27,WaterVertical:28,Blocks3Horizontal:29,WaterRectangle:30,PlainStatues2:31,BlocksRectangle:32,WaterHorizontal2:33,BlocksSpiral:34,Ganon:35,Ending:36,Blocks2Vertical:37,Blocks6Vertical:38,Blocks4Way:39,WaterH:40,Black:41,BlocksArrow:42,WaterHAlt:43,KeepItem:44,KeepPath:45,Shop:46}}),Tiles=new EnumStore(["Block","Bush","Castle","CastleBottomLeft","CastleBottomRight","CastleSand","CastleTop","CastleTopAlt","CastleTopLeft","CastleTopLeftAlt","CastleTopRight","CastleTopRightAlt","Dock","Door","DoorClosedX","DoorClosedY","DoorLockedX","DoorLockedY","DoorUnlockedX","DoorUnlockedY","Fire","FireAlt","Grave","GroundTile","None","PondBottom","PondBottomLeft","PondBottomRight","PondCenter","PondCenterLeft","PondCenterRight","PondTop","PondTopLeft","PondTopRight","Rock","SandBottom","SandBottomLeft","SandBottomRight","SandCenter","SandCenterLeft","SandCenterRight","SandTop","SandTopLeft","SandTopRight","SolidColor","StairsDown","StairsKeep","StairsUp","Statue","Statue1","Statue2","Transition","TreeBottomLeft","TreeBottomRight","TreeTop","TreeTopLeft","TreeTopRight","WallBottom","WallBottomLeft","WallBottomRight","WallHoleX","WallHoleY","WallKeep","WallLeftX","WallLeftY","WallLeftYFlip","WallRightX","WallRightY","WallRightYFlip","WallTop","WallTopLeft","WallTopRight","WallX","WallY","Water","WaterBottomLeft","WaterBottomRight","WaterTopLeft","WaterTopRight"]);class Color extends Model{get backgroundStyle(){return this.id===WorldColors.None?"":`background-color: #${this.id};`}}const WorldColors=new EnumStore({model:Color,records:{None:"Transparent",Black:"000000",Blue:"0000bc",BlueLight:"6888ff",BluePure:"0000FF",BlueWater:"2038ec",Brown:"c84c0c",BrownButter:"ac7c00",BrownDark:"503000",BrownLight:"f8b800",Gray:"7c7c7c",Green:"00a800",GreenDark:"005800",GreenLight:"58f898",GreenPure:"00FF00",Lime:"b8f818",Orange:"FFA044",OrangeDark:"e45c10",Peach:"fcd8a8",PurpleLight:"b8b8f8",Q1C1Accent:"008088",Q1C1Door:"183c5c",Red:"F83800",RedPure:"FF0000",Tan:"FFEFA6",Teal:"008888",TealLight:"00e8d8",TealDark:"004058",White:"fcfcfc",WhitePure:"FFFFFF"}}),IsHex=/^[0-9a-f]+$/i;class TargetColor extends Model{getDefaultFields(){return[{name:"Target",type:String},{name:"Value",type:String}]}constructor(t,r){isObject$1(t)?{Target:t,Value:r}=t:isArray$2(t)&&([t,r]=t),t&&!IsHex.test(t)&&(t=WorldColors.getValue(t)),r&&!IsHex.test(r)&&(r=WorldColors.getValue(r)),super({Target:t,Value:r})}getConfig(){const{Target:t,Value:r}=this;if(!(t===r||!r))return[WorldColors.getKey(t),WorldColors.getKey(r)]}}var commonjsGlobal=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function getDefaultExportFromCjs$1(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function getAugmentedNamespace(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var r=function n(){return this instanceof n?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};r.prototype=t.prototype}else r={};return Object.defineProperty(r,"__esModule",{value:!0}),Object.keys(e).forEach(function(n){var a=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(r,n,a.get?a:{enumerable:!0,get:function(){return e[n]}})}),r}var colorName={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]};const cssKeywords=colorName,reverseKeywords={};for(const e of Object.keys(cssKeywords))reverseKeywords[cssKeywords[e]]=e;const convert$1={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};var conversions$2=convert$1;for(const e of Object.keys(convert$1)){if(!("channels"in convert$1[e]))throw new Error("missing channels property: "+e);if(!("labels"in convert$1[e]))throw new Error("missing channel labels property: "+e);if(convert$1[e].labels.length!==convert$1[e].channels)throw new Error("channel and label counts mismatch: "+e);const{channels:t,labels:r}=convert$1[e];delete convert$1[e].channels,delete convert$1[e].labels,Object.defineProperty(convert$1[e],"channels",{value:t}),Object.defineProperty(convert$1[e],"labels",{value:r})}convert$1.rgb.hsl=function(e){const t=e[0]/255,r=e[1]/255,n=e[2]/255,a=Math.min(t,r,n),s=Math.max(t,r,n),o=s-a;let l,f;s===a?l=0:t===s?l=(r-n)/o:r===s?l=2+(n-t)/o:n===s&&(l=4+(t-r)/o),l=Math.min(l*60,360),l<0&&(l+=360);const u=(a+s)/2;return s===a?f=0:u<=.5?f=o/(s+a):f=o/(2-s-a),[l,f*100,u*100]};convert$1.rgb.hsv=function(e){let t,r,n,a,s;const o=e[0]/255,l=e[1]/255,f=e[2]/255,u=Math.max(o,l,f),m=u-Math.min(o,l,f),v=function(b){return(u-b)/6/m+1/2};return m===0?(a=0,s=0):(s=m/u,t=v(o),r=v(l),n=v(f),o===u?a=n-r:l===u?a=1/3+t-n:f===u&&(a=2/3+r-t),a<0?a+=1:a>1&&(a-=1)),[a*360,s*100,u*100]};convert$1.rgb.hwb=function(e){const t=e[0],r=e[1];let n=e[2];const a=convert$1.rgb.hsl(e)[0],s=1/255*Math.min(t,Math.min(r,n));return n=1-1/255*Math.max(t,Math.max(r,n)),[a,s*100,n*100]};convert$1.rgb.cmyk=function(e){const t=e[0]/255,r=e[1]/255,n=e[2]/255,a=Math.min(1-t,1-r,1-n),s=(1-t-a)/(1-a)||0,o=(1-r-a)/(1-a)||0,l=(1-n-a)/(1-a)||0;return[s*100,o*100,l*100,a*100]};function comparativeDistance(e,t){return(e[0]-t[0])**2+(e[1]-t[1])**2+(e[2]-t[2])**2}convert$1.rgb.keyword=function(e){const t=reverseKeywords[e];if(t)return t;let r=1/0,n;for(const a of Object.keys(cssKeywords)){const s=cssKeywords[a],o=comparativeDistance(e,s);o<r&&(r=o,n=a)}return n};convert$1.keyword.rgb=function(e){return cssKeywords[e]};convert$1.rgb.xyz=function(e){let t=e[0]/255,r=e[1]/255,n=e[2]/255;t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,r=r>.04045?((r+.055)/1.055)**2.4:r/12.92,n=n>.04045?((n+.055)/1.055)**2.4:n/12.92;const a=t*.4124+r*.3576+n*.1805,s=t*.2126+r*.7152+n*.0722,o=t*.0193+r*.1192+n*.9505;return[a*100,s*100,o*100]};convert$1.rgb.lab=function(e){const t=convert$1.rgb.xyz(e);let r=t[0],n=t[1],a=t[2];r/=95.047,n/=100,a/=108.883,r=r>.008856?r**(1/3):7.787*r+16/116,n=n>.008856?n**(1/3):7.787*n+16/116,a=a>.008856?a**(1/3):7.787*a+16/116;const s=116*n-16,o=500*(r-n),l=200*(n-a);return[s,o,l]};convert$1.hsl.rgb=function(e){const t=e[0]/360,r=e[1]/100,n=e[2]/100;let a,s,o;if(r===0)return o=n*255,[o,o,o];n<.5?a=n*(1+r):a=n+r-n*r;const l=2*n-a,f=[0,0,0];for(let u=0;u<3;u++)s=t+1/3*-(u-1),s<0&&s++,s>1&&s--,6*s<1?o=l+(a-l)*6*s:2*s<1?o=a:3*s<2?o=l+(a-l)*(2/3-s)*6:o=l,f[u]=o*255;return f};convert$1.hsl.hsv=function(e){const t=e[0];let r=e[1]/100,n=e[2]/100,a=r;const s=Math.max(n,.01);n*=2,r*=n<=1?n:2-n,a*=s<=1?s:2-s;const o=(n+r)/2,l=n===0?2*a/(s+a):2*r/(n+r);return[t,l*100,o*100]};convert$1.hsv.rgb=function(e){const t=e[0]/60,r=e[1]/100;let n=e[2]/100;const a=Math.floor(t)%6,s=t-Math.floor(t),o=255*n*(1-r),l=255*n*(1-r*s),f=255*n*(1-r*(1-s));switch(n*=255,a){case 0:return[n,f,o];case 1:return[l,n,o];case 2:return[o,n,f];case 3:return[o,l,n];case 4:return[f,o,n];case 5:return[n,o,l]}};convert$1.hsv.hsl=function(e){const t=e[0],r=e[1]/100,n=e[2]/100,a=Math.max(n,.01);let s,o;o=(2-r)*n;const l=(2-r)*a;return s=r*a,s/=l<=1?l:2-l,s=s||0,o/=2,[t,s*100,o*100]};convert$1.hwb.rgb=function(e){const t=e[0]/360;let r=e[1]/100,n=e[2]/100;const a=r+n;let s;a>1&&(r/=a,n/=a);const o=Math.floor(6*t),l=1-n;s=6*t-o,o&1&&(s=1-s);const f=r+s*(l-r);let u,m,v;switch(o){default:case 6:case 0:u=l,m=f,v=r;break;case 1:u=f,m=l,v=r;break;case 2:u=r,m=l,v=f;break;case 3:u=r,m=f,v=l;break;case 4:u=f,m=r,v=l;break;case 5:u=l,m=r,v=f;break}return[u*255,m*255,v*255]};convert$1.cmyk.rgb=function(e){const t=e[0]/100,r=e[1]/100,n=e[2]/100,a=e[3]/100,s=1-Math.min(1,t*(1-a)+a),o=1-Math.min(1,r*(1-a)+a),l=1-Math.min(1,n*(1-a)+a);return[s*255,o*255,l*255]};convert$1.xyz.rgb=function(e){const t=e[0]/100,r=e[1]/100,n=e[2]/100;let a,s,o;return a=t*3.2406+r*-1.5372+n*-.4986,s=t*-.9689+r*1.8758+n*.0415,o=t*.0557+r*-.204+n*1.057,a=a>.0031308?1.055*a**(1/2.4)-.055:a*12.92,s=s>.0031308?1.055*s**(1/2.4)-.055:s*12.92,o=o>.0031308?1.055*o**(1/2.4)-.055:o*12.92,a=Math.min(Math.max(0,a),1),s=Math.min(Math.max(0,s),1),o=Math.min(Math.max(0,o),1),[a*255,s*255,o*255]};convert$1.xyz.lab=function(e){let t=e[0],r=e[1],n=e[2];t/=95.047,r/=100,n/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,n=n>.008856?n**(1/3):7.787*n+16/116;const a=116*r-16,s=500*(t-r),o=200*(r-n);return[a,s,o]};convert$1.lab.xyz=function(e){const t=e[0],r=e[1],n=e[2];let a,s,o;s=(t+16)/116,a=r/500+s,o=s-n/200;const l=s**3,f=a**3,u=o**3;return s=l>.008856?l:(s-16/116)/7.787,a=f>.008856?f:(a-16/116)/7.787,o=u>.008856?u:(o-16/116)/7.787,a*=95.047,s*=100,o*=108.883,[a,s,o]};convert$1.lab.lch=function(e){const t=e[0],r=e[1],n=e[2];let a;a=Math.atan2(n,r)*360/2/Math.PI,a<0&&(a+=360);const o=Math.sqrt(r*r+n*n);return[t,o,a]};convert$1.lch.lab=function(e){const t=e[0],r=e[1],a=e[2]/360*2*Math.PI,s=r*Math.cos(a),o=r*Math.sin(a);return[t,s,o]};convert$1.rgb.ansi16=function(e,t=null){const[r,n,a]=e;let s=t===null?convert$1.rgb.hsv(e)[2]:t;if(s=Math.round(s/50),s===0)return 30;let o=30+(Math.round(a/255)<<2|Math.round(n/255)<<1|Math.round(r/255));return s===2&&(o+=60),o};convert$1.hsv.ansi16=function(e){return convert$1.rgb.ansi16(convert$1.hsv.rgb(e),e[2])};convert$1.rgb.ansi256=function(e){const t=e[0],r=e[1],n=e[2];return t===r&&r===n?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(r/255*5)+Math.round(n/255*5)};convert$1.ansi16.rgb=function(e){let t=e%10;if(t===0||t===7)return e>50&&(t+=3.5),t=t/10.5*255,[t,t,t];const r=(~~(e>50)+1)*.5,n=(t&1)*r*255,a=(t>>1&1)*r*255,s=(t>>2&1)*r*255;return[n,a,s]};convert$1.ansi256.rgb=function(e){if(e>=232){const s=(e-232)*10+8;return[s,s,s]}e-=16;let t;const r=Math.floor(e/36)/5*255,n=Math.floor((t=e%36)/6)/5*255,a=t%6/5*255;return[r,n,a]};convert$1.rgb.hex=function(e){const r=(((Math.round(e[0])&255)<<16)+((Math.round(e[1])&255)<<8)+(Math.round(e[2])&255)).toString(16).toUpperCase();return"000000".substring(r.length)+r};convert$1.hex.rgb=function(e){const t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];let r=t[0];t[0].length===3&&(r=r.split("").map(l=>l+l).join(""));const n=parseInt(r,16),a=n>>16&255,s=n>>8&255,o=n&255;return[a,s,o]};convert$1.rgb.hcg=function(e){const t=e[0]/255,r=e[1]/255,n=e[2]/255,a=Math.max(Math.max(t,r),n),s=Math.min(Math.min(t,r),n),o=a-s;let l,f;return o<1?l=s/(1-o):l=0,o<=0?f=0:a===t?f=(r-n)/o%6:a===r?f=2+(n-t)/o:f=4+(t-r)/o,f/=6,f%=1,[f*360,o*100,l*100]};convert$1.hsl.hcg=function(e){const t=e[1]/100,r=e[2]/100,n=r<.5?2*t*r:2*t*(1-r);let a=0;return n<1&&(a=(r-.5*n)/(1-n)),[e[0],n*100,a*100]};convert$1.hsv.hcg=function(e){const t=e[1]/100,r=e[2]/100,n=t*r;let a=0;return n<1&&(a=(r-n)/(1-n)),[e[0],n*100,a*100]};convert$1.hcg.rgb=function(e){const t=e[0]/360,r=e[1]/100,n=e[2]/100;if(r===0)return[n*255,n*255,n*255];const a=[0,0,0],s=t%1*6,o=s%1,l=1-o;let f=0;switch(Math.floor(s)){case 0:a[0]=1,a[1]=o,a[2]=0;break;case 1:a[0]=l,a[1]=1,a[2]=0;break;case 2:a[0]=0,a[1]=1,a[2]=o;break;case 3:a[0]=0,a[1]=l,a[2]=1;break;case 4:a[0]=o,a[1]=0,a[2]=1;break;default:a[0]=1,a[1]=0,a[2]=l}return f=(1-r)*n,[(r*a[0]+f)*255,(r*a[1]+f)*255,(r*a[2]+f)*255]};convert$1.hcg.hsv=function(e){const t=e[1]/100,r=e[2]/100,n=t+r*(1-t);let a=0;return n>0&&(a=t/n),[e[0],a*100,n*100]};convert$1.hcg.hsl=function(e){const t=e[1]/100,n=e[2]/100*(1-t)+.5*t;let a=0;return n>0&&n<.5?a=t/(2*n):n>=.5&&n<1&&(a=t/(2*(1-n))),[e[0],a*100,n*100]};convert$1.hcg.hwb=function(e){const t=e[1]/100,r=e[2]/100,n=t+r*(1-t);return[e[0],(n-t)*100,(1-n)*100]};convert$1.hwb.hcg=function(e){const t=e[1]/100,n=1-e[2]/100,a=n-t;let s=0;return a<1&&(s=(n-a)/(1-a)),[e[0],a*100,s*100]};convert$1.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]};convert$1.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]};convert$1.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]};convert$1.gray.hsl=function(e){return[0,0,e[0]]};convert$1.gray.hsv=convert$1.gray.hsl;convert$1.gray.hwb=function(e){return[0,100,e[0]]};convert$1.gray.cmyk=function(e){return[0,0,0,e[0]]};convert$1.gray.lab=function(e){return[e[0],0,0]};convert$1.gray.hex=function(e){const t=Math.round(e[0]/100*255)&255,n=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(n.length)+n};convert$1.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]};const conversions$1=conversions$2;function buildGraph(){const e={},t=Object.keys(conversions$1);for(let r=t.length,n=0;n<r;n++)e[t[n]]={distance:-1,parent:null};return e}function deriveBFS(e){const t=buildGraph(),r=[e];for(t[e].distance=0;r.length;){const n=r.pop(),a=Object.keys(conversions$1[n]);for(let s=a.length,o=0;o<s;o++){const l=a[o],f=t[l];f.distance===-1&&(f.distance=t[n].distance+1,f.parent=n,r.unshift(l))}}return t}function link(e,t){return function(r){return t(e(r))}}function wrapConversion(e,t){const r=[t[e].parent,e];let n=conversions$1[t[e].parent][e],a=t[e].parent;for(;t[a].parent;)r.unshift(t[a].parent),n=link(conversions$1[t[a].parent][a],n),a=t[a].parent;return n.conversion=r,n}var route$1=function(e){const t=deriveBFS(e),r={},n=Object.keys(t);for(let a=n.length,s=0;s<a;s++){const o=n[s];t[o].parent!==null&&(r[o]=wrapConversion(o,t))}return r};const conversions=conversions$2,route=route$1,convert={},models=Object.keys(conversions);function wrapRaw(e){const t=function(...r){const n=r[0];return n==null?n:(n.length>1&&(r=n),e(r))};return"conversion"in e&&(t.conversion=e.conversion),t}function wrapRounded(e){const t=function(...r){const n=r[0];if(n==null)return n;n.length>1&&(r=n);const a=e(r);if(typeof a=="object")for(let s=a.length,o=0;o<s;o++)a[o]=Math.round(a[o]);return a};return"conversion"in e&&(t.conversion=e.conversion),t}models.forEach(e=>{convert[e]={},Object.defineProperty(convert[e],"channels",{value:conversions[e].channels}),Object.defineProperty(convert[e],"labels",{value:conversions[e].labels});const t=route(e);Object.keys(t).forEach(n=>{const a=t[n];convert[e][n]=wrapRounded(a),convert[e][n].raw=wrapRaw(a)})});var colorConvert=convert;const colorConvert$1=getDefaultExportFromCjs$1(colorConvert);function dE76$1(e,t){this.x1=e,this.x2=t}dE76$1.prototype.getDeltaE=function(){var e=this.x1,t=this.x2;return Math.sqrt(Math.pow(t.L-e.L,2)+Math.pow(t.A-e.A,2)+Math.pow(t.B-e.B,2))};var dE76_1=dE76$1;function dE94$1(e,t,r){this.x1=e,this.x2=t,this.weights=r||{},this.weights.lightness=this.weights.lightness||1,this.weights.chroma=this.weights.chroma||1,this.weights.hue=this.weights.hue||1,this.weights.lightness===1?(this.weights.K1=.045,this.weights.K2=.015):(this.weights.K1=.048,this.weights.K2=.014)}dE94$1.prototype.getDeltaE=function(){var e=this.x1,t=this.x2,r=Math.sqrt,n=Math.pow;return r(n(this.calculateL(e,t),2)+n(this.calculateA(e,t),2)+n(this.calculateB(e,t),2))};dE94$1.prototype.calculateL=function(e,t){return(e.L-t.L)/this.weights.lightness};dE94$1.prototype.calculateA=function(e,t){var r=Math.sqrt,n=Math.pow,a=r(n(e.A,2)+n(e.B,2)),s=r(n(t.A,2)+n(t.B,2)),o=a-s,l=1+this.weights.K1*a;return o/(this.weights.chroma*l)};dE94$1.prototype.calculateB=function(e,t){var r=Math.sqrt,n=Math.pow,u=r(n(e.A,2)+n(e.B,2)),a=r(n(t.A,2)+n(t.B,2)),s=u-a,o=e.A-t.A,l=e.B-t.B,f=r(n(o,2)+n(l,2)-n(s,2))||0,u=r(n(e.A,2)+n(e.B,2)),m=1+this.weights.K2*u;return f/m};var dE94_1=dE94$1;function dE00$1(e,t,r){var n=Math.sqrt,a=Math.pow;this.x1=e,this.x2=t,this.weights=r||{},this.ksubL=this.weights.lightness||1,this.ksubC=this.weights.chroma||1,this.ksubH=this.weights.hue||1,this.deltaLPrime=t.L-e.L,this.LBar=(e.L+t.L)/2,this.C1=n(a(e.A,2)+a(e.B,2)),this.C2=n(a(t.A,2)+a(t.B,2)),this.CBar=(this.C1+this.C2)/2,this.aPrime1=e.A+e.A/2*(1-n(a(this.CBar,7)/(a(this.CBar,7)+a(25,7)))),this.aPrime2=t.A+t.A/2*(1-n(a(this.CBar,7)/(a(this.CBar,7)+a(25,7)))),this.CPrime1=n(a(this.aPrime1,2)+a(e.B,2)),this.CPrime2=n(a(this.aPrime2,2)+a(t.B,2)),this.CBarPrime=(this.CPrime1+this.CPrime2)/2,this.deltaCPrime=this.CPrime2-this.CPrime1,this.SsubL=1+.015*a(this.LBar-50,2)/n(20+a(this.LBar-50,2)),this.SsubC=1+.045*this.CBarPrime,this.hPrime1=0,this.hPrime2=0,this.deltahPrime=0,this.deltaHPrime=0,this.HBarPrime=0,this.T=0,this.SsubH=0,this.RsubT=0}dE00$1.prototype.getDeltaE=function(){var e=Math.sqrt,t=Math.sin,r=Math.pow;this.hPrime1=this.gethPrime1(),this.hPrime2=this.gethPrime2(),this.deltahPrime=this.getDeltahPrime(),this.deltaHPrime=2*e(this.CPrime1*this.CPrime2)*t(this.degreesToRadians(this.deltahPrime)/2),this.HBarPrime=this.getHBarPrime(),this.T=this.getT(),this.SsubH=1+.015*this.CBarPrime*this.T,this.RsubT=this.getRsubT();var n=this.deltaLPrime/(this.ksubL*this.SsubL),a=this.deltaCPrime/(this.ksubC*this.SsubC),s=this.deltaHPrime/(this.ksubH*this.SsubH);return e(r(n,2)+r(a,2)+r(s,2)+this.RsubT*a*s)};dE00$1.prototype.getRsubT=function(){var e=Math.sin,t=Math.sqrt,r=Math.pow,n=Math.exp;return-2*t(r(this.CBarPrime,7)/(r(this.CBarPrime,7)+r(25,7)))*e(this.degreesToRadians(60*n(-r((this.HBarPrime-275)/25,2))))};dE00$1.prototype.getT=function(){var e=Math.cos;return 1-.17*e(this.degreesToRadians(this.HBarPrime-30))+.24*e(this.degreesToRadians(2*this.HBarPrime))+.32*e(this.degreesToRadians(3*this.HBarPrime+6))-.2*e(this.degreesToRadians(4*this.HBarPrime-63))};dE00$1.prototype.getHBarPrime=function(){var e=Math.abs;return e(this.hPrime1-this.hPrime2)>180?(this.hPrime1+this.hPrime2+360)/2:(this.hPrime1+this.hPrime2)/2};dE00$1.prototype.getDeltahPrime=function(){var e=Math.abs;return this.C1===0||this.C2===0?0:e(this.hPrime1-this.hPrime2)<=180?this.hPrime2-this.hPrime1:this.hPrime2<=this.hPrime1?this.hPrime2-this.hPrime1+360:this.hPrime2-this.hPrime1-360};dE00$1.prototype.gethPrime1=function(){return this._gethPrimeFn(this.x1.B,this.aPrime1)};dE00$1.prototype.gethPrime2=function(){return this._gethPrimeFn(this.x2.B,this.aPrime2)};dE00$1.prototype._gethPrimeFn=function(e,t){var r;return e===0&&t===0?0:(r=this.radiansToDegrees(Math.atan2(e,t)),r>=0?r:r+360)};dE00$1.prototype.radiansToDegrees=function(e){return e*(180/Math.PI)};dE00$1.prototype.degreesToRadians=function(e){return e*(Math.PI/180)};var dE00_1=dE00$1,dE76=dE76_1,dE94=dE94_1,dE00=dE00_1;function DeltaE(){}DeltaE.prototype.getDeltaE76=function(e,t){var r=new dE76(e,t);return r.getDeltaE()};DeltaE.prototype.getDeltaE94=function(e,t){var r=new dE94(e,t);return r.getDeltaE()};DeltaE.prototype.getDeltaE00=function(e,t){var r=new dE00(e,t);return r.getDeltaE()};var src$1=new DeltaE;const deltaE=getDefaultExportFromCjs$1(src$1);var buffer$1={},base64Js$1={};base64Js$1.byteLength=byteLength$1;base64Js$1.toByteArray=toByteArray$1;base64Js$1.fromByteArray=fromByteArray$1;var lookup$1=[],revLookup$1=[],Arr$1=typeof Uint8Array<"u"?Uint8Array:Array,code$1="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var i$1=0,len$1=code$1.length;i$1<len$1;++i$1)lookup$1[i$1]=code$1[i$1],revLookup$1[code$1.charCodeAt(i$1)]=i$1;revLookup$1[45]=62;revLookup$1[95]=63;function getLens$1(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");r===-1&&(r=t);var n=r===t?0:4-r%4;return[r,n]}function byteLength$1(e){var t=getLens$1(e),r=t[0],n=t[1];return(r+n)*3/4-n}function _byteLength$1(e,t,r){return(t+r)*3/4-r}function toByteArray$1(e){var t,r=getLens$1(e),n=r[0],a=r[1],s=new Arr$1(_byteLength$1(e,n,a)),o=0,l=a>0?n-4:n,f;for(f=0;f<l;f+=4)t=revLookup$1[e.charCodeAt(f)]<<18|revLookup$1[e.charCodeAt(f+1)]<<12|revLookup$1[e.charCodeAt(f+2)]<<6|revLookup$1[e.charCodeAt(f+3)],s[o++]=t>>16&255,s[o++]=t>>8&255,s[o++]=t&255;return a===2&&(t=revLookup$1[e.charCodeAt(f)]<<2|revLookup$1[e.charCodeAt(f+1)]>>4,s[o++]=t&255),a===1&&(t=revLookup$1[e.charCodeAt(f)]<<10|revLookup$1[e.charCodeAt(f+1)]<<4|revLookup$1[e.charCodeAt(f+2)]>>2,s[o++]=t>>8&255,s[o++]=t&255),s}function tripletToBase64$1(e){return lookup$1[e>>18&63]+lookup$1[e>>12&63]+lookup$1[e>>6&63]+lookup$1[e&63]}function encodeChunk$1(e,t,r){for(var n,a=[],s=t;s<r;s+=3)n=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(e[s+2]&255),a.push(tripletToBase64$1(n));return a.join("")}function fromByteArray$1(e){for(var t,r=e.length,n=r%3,a=[],s=16383,o=0,l=r-n;o<l;o+=s)a.push(encodeChunk$1(e,o,o+s>l?l:o+s));return n===1?(t=e[r-1],a.push(lookup$1[t>>2]+lookup$1[t<<4&63]+"==")):n===2&&(t=(e[r-2]<<8)+e[r-1],a.push(lookup$1[t>>10]+lookup$1[t>>4&63]+lookup$1[t<<2&63]+"=")),a.join("")}var ieee754$1={};/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ieee754$1.read=function(e,t,r,n,a){var s,o,l=a*8-n-1,f=(1<<l)-1,u=f>>1,m=-7,v=r?a-1:0,b=r?-1:1,P=e[t+v];for(v+=b,s=P&(1<<-m)-1,P>>=-m,m+=l;m>0;s=s*256+e[t+v],v+=b,m-=8);for(o=s&(1<<-m)-1,s>>=-m,m+=n;m>0;o=o*256+e[t+v],v+=b,m-=8);if(s===0)s=1-u;else{if(s===f)return o?NaN:(P?-1:1)*(1/0);o=o+Math.pow(2,n),s=s-u}return(P?-1:1)*o*Math.pow(2,s-n)};ieee754$1.write=function(e,t,r,n,a,s){var o,l,f,u=s*8-a-1,m=(1<<u)-1,v=m>>1,b=a===23?Math.pow(2,-24)-Math.pow(2,-77):0,P=n?0:s-1,F=n?1:-1,C=t<0||t===0&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(l=isNaN(t)?1:0,o=m):(o=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-o))<1&&(o--,f*=2),o+v>=1?t+=b/f:t+=b*Math.pow(2,1-v),t*f>=2&&(o++,f/=2),o+v>=m?(l=0,o=m):o+v>=1?(l=(t*f-1)*Math.pow(2,a),o=o+v):(l=t*Math.pow(2,v-1)*Math.pow(2,a),o=0));a>=8;e[r+P]=l&255,P+=F,l/=256,a-=8);for(o=o<<a|l,u+=a;u>0;e[r+P]=o&255,P+=F,o/=256,u-=8);e[r+P-F]|=C*128};/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */(function(e){const t=base64Js$1,r=ieee754$1,n=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=m,e.SlowBuffer=M,e.INSPECT_MAX_BYTES=50;const a=2147483647;e.kMaxLength=a;const{Uint8Array:s,ArrayBuffer:o,SharedArrayBuffer:l}=globalThis;m.TYPED_ARRAY_SUPPORT=f(),!m.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function f(){try{const Q=new s(1),A={foo:function(){return 42}};return Object.setPrototypeOf(A,s.prototype),Object.setPrototypeOf(Q,A),Q.foo()===42}catch{return!1}}Object.defineProperty(m.prototype,"parent",{enumerable:!0,get:function(){if(m.isBuffer(this))return this.buffer}}),Object.defineProperty(m.prototype,"offset",{enumerable:!0,get:function(){if(m.isBuffer(this))return this.byteOffset}});function u(Q){if(Q>a)throw new RangeError('The value "'+Q+'" is invalid for option "size"');const A=new s(Q);return Object.setPrototypeOf(A,m.prototype),A}function m(Q,A,O){if(typeof Q=="number"){if(typeof A=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return F(Q)}return v(Q,A,O)}m.poolSize=8192;function v(Q,A,O){if(typeof Q=="string")return C(Q,A);if(o.isView(Q))return E(Q);if(Q==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof Q);if(xe(Q,o)||Q&&xe(Q.buffer,o)||typeof l<"u"&&(xe(Q,l)||Q&&xe(Q.buffer,l)))return k(Q,A,O);if(typeof Q=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');const X=Q.valueOf&&Q.valueOf();if(X!=null&&X!==Q)return m.from(X,A,O);const pe=j(Q);if(pe)return pe;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof Q[Symbol.toPrimitive]=="function")return m.from(Q[Symbol.toPrimitive]("string"),A,O);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof Q)}m.from=function(Q,A,O){return v(Q,A,O)},Object.setPrototypeOf(m.prototype,s.prototype),Object.setPrototypeOf(m,s);function b(Q){if(typeof Q!="number")throw new TypeError('"size" argument must be of type number');if(Q<0)throw new RangeError('The value "'+Q+'" is invalid for option "size"')}function P(Q,A,O){return b(Q),Q<=0?u(Q):A!==void 0?typeof O=="string"?u(Q).fill(A,O):u(Q).fill(A):u(Q)}m.alloc=function(Q,A,O){return P(Q,A,O)};function F(Q){return b(Q),u(Q<0?0:W(Q)|0)}m.allocUnsafe=function(Q){return F(Q)},m.allocUnsafeSlow=function(Q){return F(Q)};function C(Q,A){if((typeof A!="string"||A==="")&&(A="utf8"),!m.isEncoding(A))throw new TypeError("Unknown encoding: "+A);const O=S(Q,A)|0;let X=u(O);const pe=X.write(Q,A);return pe!==O&&(X=X.slice(0,pe)),X}function D(Q){const A=Q.length<0?0:W(Q.length)|0,O=u(A);for(let X=0;X<A;X+=1)O[X]=Q[X]&255;return O}function E(Q){if(xe(Q,s)){const A=new s(Q);return k(A.buffer,A.byteOffset,A.byteLength)}return D(Q)}function k(Q,A,O){if(A<0||Q.byteLength<A)throw new RangeError('"offset" is outside of buffer bounds');if(Q.byteLength<A+(O||0))throw new RangeError('"length" is outside of buffer bounds');let X;return A===void 0&&O===void 0?X=new s(Q):O===void 0?X=new s(Q,A):X=new s(Q,A,O),Object.setPrototypeOf(X,m.prototype),X}function j(Q){if(m.isBuffer(Q)){const A=W(Q.length)|0,O=u(A);return O.length===0||Q.copy(O,0,0,A),O}if(Q.length!==void 0)return typeof Q.length!="number"||Fe(Q.length)?u(0):D(Q);if(Q.type==="Buffer"&&Array.isArray(Q.data))return D(Q.data)}function W(Q){if(Q>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return Q|0}function M(Q){return+Q!=Q&&(Q=0),m.alloc(+Q)}m.isBuffer=function(A){return A!=null&&A._isBuffer===!0&&A!==m.prototype},m.compare=function(A,O){if(xe(A,s)&&(A=m.from(A,A.offset,A.byteLength)),xe(O,s)&&(O=m.from(O,O.offset,O.byteLength)),!m.isBuffer(A)||!m.isBuffer(O))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(A===O)return 0;let X=A.length,pe=O.length;for(let ne=0,Pe=Math.min(X,pe);ne<Pe;++ne)if(A[ne]!==O[ne]){X=A[ne],pe=O[ne];break}return X<pe?-1:pe<X?1:0},m.isEncoding=function(A){switch(String(A).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},m.concat=function(A,O){if(!Array.isArray(A))throw new TypeError('"list" argument must be an Array of Buffers');if(A.length===0)return m.alloc(0);let X;if(O===void 0)for(O=0,X=0;X<A.length;++X)O+=A[X].length;const pe=m.allocUnsafe(O);let ne=0;for(X=0;X<A.length;++X){let Pe=A[X];if(xe(Pe,s))ne+Pe.length>pe.length?(m.isBuffer(Pe)||(Pe=m.from(Pe)),Pe.copy(pe,ne)):s.prototype.set.call(pe,Pe,ne);else if(m.isBuffer(Pe))Pe.copy(pe,ne);else throw new TypeError('"list" argument must be an Array of Buffers');ne+=Pe.length}return pe};function S(Q,A){if(m.isBuffer(Q))return Q.length;if(o.isView(Q)||xe(Q,o))return Q.byteLength;if(typeof Q!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof Q);const O=Q.length,X=arguments.length>2&&arguments[2]===!0;if(!X&&O===0)return 0;let pe=!1;for(;;)switch(A){case"ascii":case"latin1":case"binary":return O;case"utf8":case"utf-8":return ce(Q).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O*2;case"hex":return O>>>1;case"base64":return Ce(Q).length;default:if(pe)return X?-1:ce(Q).length;A=(""+A).toLowerCase(),pe=!0}}m.byteLength=S;function T(Q,A,O){let X=!1;if((A===void 0||A<0)&&(A=0),A>this.length||((O===void 0||O>this.length)&&(O=this.length),O<=0)||(O>>>=0,A>>>=0,O<=A))return"";for(Q||(Q="utf8");;)switch(Q){case"hex":return Ne(this,A,O);case"utf8":case"utf-8":return Se(this,A,O);case"ascii":return ae(this,A,O);case"latin1":case"binary":return ke(this,A,O);case"base64":return we(this,A,O);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return de(this,A,O);default:if(X)throw new TypeError("Unknown encoding: "+Q);Q=(Q+"").toLowerCase(),X=!0}}m.prototype._isBuffer=!0;function V(Q,A,O){const X=Q[A];Q[A]=Q[O],Q[O]=X}m.prototype.swap16=function(){const A=this.length;if(A%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let O=0;O<A;O+=2)V(this,O,O+1);return this},m.prototype.swap32=function(){const A=this.length;if(A%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let O=0;O<A;O+=4)V(this,O,O+3),V(this,O+1,O+2);return this},m.prototype.swap64=function(){const A=this.length;if(A%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let O=0;O<A;O+=8)V(this,O,O+7),V(this,O+1,O+6),V(this,O+2,O+5),V(this,O+3,O+4);return this},m.prototype.toString=function(){const A=this.length;return A===0?"":arguments.length===0?Se(this,0,A):T.apply(this,arguments)},m.prototype.toLocaleString=m.prototype.toString,m.prototype.equals=function(A){if(!m.isBuffer(A))throw new TypeError("Argument must be a Buffer");return this===A?!0:m.compare(this,A)===0},m.prototype.inspect=function(){let A="";const O=e.INSPECT_MAX_BYTES;return A=this.toString("hex",0,O).replace(/(.{2})/g,"$1 ").trim(),this.length>O&&(A+=" ... "),"<Buffer "+A+">"},n&&(m.prototype[n]=m.prototype.inspect),m.prototype.compare=function(A,O,X,pe,ne){if(xe(A,s)&&(A=m.from(A,A.offset,A.byteLength)),!m.isBuffer(A))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof A);if(O===void 0&&(O=0),X===void 0&&(X=A?A.length:0),pe===void 0&&(pe=0),ne===void 0&&(ne=this.length),O<0||X>A.length||pe<0||ne>this.length)throw new RangeError("out of range index");if(pe>=ne&&O>=X)return 0;if(pe>=ne)return-1;if(O>=X)return 1;if(O>>>=0,X>>>=0,pe>>>=0,ne>>>=0,this===A)return 0;let Pe=ne-pe,K=X-O;const Be=Math.min(Pe,K),De=this.slice(pe,ne),z=A.slice(O,X);for(let Te=0;Te<Be;++Te)if(De[Te]!==z[Te]){Pe=De[Te],K=z[Te];break}return Pe<K?-1:K<Pe?1:0};function _(Q,A,O,X,pe){if(Q.length===0)return-1;if(typeof O=="string"?(X=O,O=0):O>2147483647?O=2147483647:O<-2147483648&&(O=-2147483648),O=+O,Fe(O)&&(O=pe?0:Q.length-1),O<0&&(O=Q.length+O),O>=Q.length){if(pe)return-1;O=Q.length-1}else if(O<0)if(pe)O=0;else return-1;if(typeof A=="string"&&(A=m.from(A,X)),m.isBuffer(A))return A.length===0?-1:ee(Q,A,O,X,pe);if(typeof A=="number")return A=A&255,typeof s.prototype.indexOf=="function"?pe?s.prototype.indexOf.call(Q,A,O):s.prototype.lastIndexOf.call(Q,A,O):ee(Q,[A],O,X,pe);throw new TypeError("val must be string, number or Buffer")}function ee(Q,A,O,X,pe){let ne=1,Pe=Q.length,K=A.length;if(X!==void 0&&(X=String(X).toLowerCase(),X==="ucs2"||X==="ucs-2"||X==="utf16le"||X==="utf-16le")){if(Q.length<2||A.length<2)return-1;ne=2,Pe/=2,K/=2,O/=2}function Be(z,Te){return ne===1?z[Te]:z.readUInt16BE(Te*ne)}let De;if(pe){let z=-1;for(De=O;De<Pe;De++)if(Be(Q,De)===Be(A,z===-1?0:De-z)){if(z===-1&&(z=De),De-z+1===K)return z*ne}else z!==-1&&(De-=De-z),z=-1}else for(O+K>Pe&&(O=Pe-K),De=O;De>=0;De--){let z=!0;for(let Te=0;Te<K;Te++)if(Be(Q,De+Te)!==Be(A,Te)){z=!1;break}if(z)return De}return-1}m.prototype.includes=function(A,O,X){return this.indexOf(A,O,X)!==-1},m.prototype.indexOf=function(A,O,X){return _(this,A,O,X,!0)},m.prototype.lastIndexOf=function(A,O,X){return _(this,A,O,X,!1)};function re(Q,A,O,X){O=Number(O)||0;const pe=Q.length-O;X?(X=Number(X),X>pe&&(X=pe)):X=pe;const ne=A.length;X>ne/2&&(X=ne/2);let Pe;for(Pe=0;Pe<X;++Pe){const K=parseInt(A.substr(Pe*2,2),16);if(Fe(K))return Pe;Q[O+Pe]=K}return Pe}function te(Q,A,O,X){return ge(ce(A,Q.length-O),Q,O,X)}function oe(Q,A,O,X){return ge(ye(A),Q,O,X)}function he(Q,A,O,X){return ge(Ce(A),Q,O,X)}function me(Q,A,O,X){return ge(Ee(A,Q.length-O),Q,O,X)}m.prototype.write=function(A,O,X,pe){if(O===void 0)pe="utf8",X=this.length,O=0;else if(X===void 0&&typeof O=="string")pe=O,X=this.length,O=0;else if(isFinite(O))O=O>>>0,isFinite(X)?(X=X>>>0,pe===void 0&&(pe="utf8")):(pe=X,X=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");const ne=this.length-O;if((X===void 0||X>ne)&&(X=ne),A.length>0&&(X<0||O<0)||O>this.length)throw new RangeError("Attempt to write outside buffer bounds");pe||(pe="utf8");let Pe=!1;for(;;)switch(pe){case"hex":return re(this,A,O,X);case"utf8":case"utf-8":return te(this,A,O,X);case"ascii":case"latin1":case"binary":return oe(this,A,O,X);case"base64":return he(this,A,O,X);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return me(this,A,O,X);default:if(Pe)throw new TypeError("Unknown encoding: "+pe);pe=(""+pe).toLowerCase(),Pe=!0}},m.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function we(Q,A,O){return A===0&&O===Q.length?t.fromByteArray(Q):t.fromByteArray(Q.slice(A,O))}function Se(Q,A,O){O=Math.min(Q.length,O);const X=[];let pe=A;for(;pe<O;){const ne=Q[pe];let Pe=null,K=ne>239?4:ne>223?3:ne>191?2:1;if(pe+K<=O){let Be,De,z,Te;switch(K){case 1:ne<128&&(Pe=ne);break;case 2:Be=Q[pe+1],(Be&192)===128&&(Te=(ne&31)<<6|Be&63,Te>127&&(Pe=Te));break;case 3:Be=Q[pe+1],De=Q[pe+2],(Be&192)===128&&(De&192)===128&&(Te=(ne&15)<<12|(Be&63)<<6|De&63,Te>2047&&(Te<55296||Te>57343)&&(Pe=Te));break;case 4:Be=Q[pe+1],De=Q[pe+2],z=Q[pe+3],(Be&192)===128&&(De&192)===128&&(z&192)===128&&(Te=(ne&15)<<18|(Be&63)<<12|(De&63)<<6|z&63,Te>65535&&Te<1114112&&(Pe=Te))}}Pe===null?(Pe=65533,K=1):Pe>65535&&(Pe-=65536,X.push(Pe>>>10&1023|55296),Pe=56320|Pe&1023),X.push(Pe),pe+=K}return le(X)}const be=4096;function le(Q){const A=Q.length;if(A<=be)return String.fromCharCode.apply(String,Q);let O="",X=0;for(;X<A;)O+=String.fromCharCode.apply(String,Q.slice(X,X+=be));return O}function ae(Q,A,O){let X="";O=Math.min(Q.length,O);for(let pe=A;pe<O;++pe)X+=String.fromCharCode(Q[pe]&127);return X}function ke(Q,A,O){let X="";O=Math.min(Q.length,O);for(let pe=A;pe<O;++pe)X+=String.fromCharCode(Q[pe]);return X}function Ne(Q,A,O){const X=Q.length;(!A||A<0)&&(A=0),(!O||O<0||O>X)&&(O=X);let pe="";for(let ne=A;ne<O;++ne)pe+=Re[Q[ne]];return pe}function de(Q,A,O){const X=Q.slice(A,O);let pe="";for(let ne=0;ne<X.length-1;ne+=2)pe+=String.fromCharCode(X[ne]+X[ne+1]*256);return pe}m.prototype.slice=function(A,O){const X=this.length;A=~~A,O=O===void 0?X:~~O,A<0?(A+=X,A<0&&(A=0)):A>X&&(A=X),O<0?(O+=X,O<0&&(O=0)):O>X&&(O=X),O<A&&(O=A);const pe=this.subarray(A,O);return Object.setPrototypeOf(pe,m.prototype),pe};function $(Q,A,O){if(Q%1!==0||Q<0)throw new RangeError("offset is not uint");if(Q+A>O)throw new RangeError("Trying to access beyond buffer length")}m.prototype.readUintLE=m.prototype.readUIntLE=function(A,O,X){A=A>>>0,O=O>>>0,X||$(A,O,this.length);let pe=this[A],ne=1,Pe=0;for(;++Pe<O&&(ne*=256);)pe+=this[A+Pe]*ne;return pe},m.prototype.readUintBE=m.prototype.readUIntBE=function(A,O,X){A=A>>>0,O=O>>>0,X||$(A,O,this.length);let pe=this[A+--O],ne=1;for(;O>0&&(ne*=256);)pe+=this[A+--O]*ne;return pe},m.prototype.readUint8=m.prototype.readUInt8=function(A,O){return A=A>>>0,O||$(A,1,this.length),this[A]},m.prototype.readUint16LE=m.prototype.readUInt16LE=function(A,O){return A=A>>>0,O||$(A,2,this.length),this[A]|this[A+1]<<8},m.prototype.readUint16BE=m.prototype.readUInt16BE=function(A,O){return A=A>>>0,O||$(A,2,this.length),this[A]<<8|this[A+1]},m.prototype.readUint32LE=m.prototype.readUInt32LE=function(A,O){return A=A>>>0,O||$(A,4,this.length),(this[A]|this[A+1]<<8|this[A+2]<<16)+this[A+3]*16777216},m.prototype.readUint32BE=m.prototype.readUInt32BE=function(A,O){return A=A>>>0,O||$(A,4,this.length),this[A]*16777216+(this[A+1]<<16|this[A+2]<<8|this[A+3])},m.prototype.readBigUInt64LE=Oe(function(A){A=A>>>0,G(A,"offset");const O=this[A],X=this[A+7];(O===void 0||X===void 0)&&N(A,this.length-8);const pe=O+this[++A]*2**8+this[++A]*2**16+this[++A]*2**24,ne=this[++A]+this[++A]*2**8+this[++A]*2**16+X*2**24;return BigInt(pe)+(BigInt(ne)<<BigInt(32))}),m.prototype.readBigUInt64BE=Oe(function(A){A=A>>>0,G(A,"offset");const O=this[A],X=this[A+7];(O===void 0||X===void 0)&&N(A,this.length-8);const pe=O*2**24+this[++A]*2**16+this[++A]*2**8+this[++A],ne=this[++A]*2**24+this[++A]*2**16+this[++A]*2**8+X;return(BigInt(pe)<<BigInt(32))+BigInt(ne)}),m.prototype.readIntLE=function(A,O,X){A=A>>>0,O=O>>>0,X||$(A,O,this.length);let pe=this[A],ne=1,Pe=0;for(;++Pe<O&&(ne*=256);)pe+=this[A+Pe]*ne;return ne*=128,pe>=ne&&(pe-=Math.pow(2,8*O)),pe},m.prototype.readIntBE=function(A,O,X){A=A>>>0,O=O>>>0,X||$(A,O,this.length);let pe=O,ne=1,Pe=this[A+--pe];for(;pe>0&&(ne*=256);)Pe+=this[A+--pe]*ne;return ne*=128,Pe>=ne&&(Pe-=Math.pow(2,8*O)),Pe},m.prototype.readInt8=function(A,O){return A=A>>>0,O||$(A,1,this.length),this[A]&128?(255-this[A]+1)*-1:this[A]},m.prototype.readInt16LE=function(A,O){A=A>>>0,O||$(A,2,this.length);const X=this[A]|this[A+1]<<8;return X&32768?X|4294901760:X},m.prototype.readInt16BE=function(A,O){A=A>>>0,O||$(A,2,this.length);const X=this[A+1]|this[A]<<8;return X&32768?X|4294901760:X},m.prototype.readInt32LE=function(A,O){return A=A>>>0,O||$(A,4,this.length),this[A]|this[A+1]<<8|this[A+2]<<16|this[A+3]<<24},m.prototype.readInt32BE=function(A,O){return A=A>>>0,O||$(A,4,this.length),this[A]<<24|this[A+1]<<16|this[A+2]<<8|this[A+3]},m.prototype.readBigInt64LE=Oe(function(A){A=A>>>0,G(A,"offset");const O=this[A],X=this[A+7];(O===void 0||X===void 0)&&N(A,this.length-8);const pe=this[A+4]+this[A+5]*2**8+this[A+6]*2**16+(X<<24);return(BigInt(pe)<<BigInt(32))+BigInt(O+this[++A]*2**8+this[++A]*2**16+this[++A]*2**24)}),m.prototype.readBigInt64BE=Oe(function(A){A=A>>>0,G(A,"offset");const O=this[A],X=this[A+7];(O===void 0||X===void 0)&&N(A,this.length-8);const pe=(O<<24)+this[++A]*2**16+this[++A]*2**8+this[++A];return(BigInt(pe)<<BigInt(32))+BigInt(this[++A]*2**24+this[++A]*2**16+this[++A]*2**8+X)}),m.prototype.readFloatLE=function(A,O){return A=A>>>0,O||$(A,4,this.length),r.read(this,A,!0,23,4)},m.prototype.readFloatBE=function(A,O){return A=A>>>0,O||$(A,4,this.length),r.read(this,A,!1,23,4)},m.prototype.readDoubleLE=function(A,O){return A=A>>>0,O||$(A,8,this.length),r.read(this,A,!0,52,8)},m.prototype.readDoubleBE=function(A,O){return A=A>>>0,O||$(A,8,this.length),r.read(this,A,!1,52,8)};function ie(Q,A,O,X,pe,ne){if(!m.isBuffer(Q))throw new TypeError('"buffer" argument must be a Buffer instance');if(A>pe||A<ne)throw new RangeError('"value" argument is out of bounds');if(O+X>Q.length)throw new RangeError("Index out of range")}m.prototype.writeUintLE=m.prototype.writeUIntLE=function(A,O,X,pe){if(A=+A,O=O>>>0,X=X>>>0,!pe){const K=Math.pow(2,8*X)-1;ie(this,A,O,X,K,0)}let ne=1,Pe=0;for(this[O]=A&255;++Pe<X&&(ne*=256);)this[O+Pe]=A/ne&255;return O+X},m.prototype.writeUintBE=m.prototype.writeUIntBE=function(A,O,X,pe){if(A=+A,O=O>>>0,X=X>>>0,!pe){const K=Math.pow(2,8*X)-1;ie(this,A,O,X,K,0)}let ne=X-1,Pe=1;for(this[O+ne]=A&255;--ne>=0&&(Pe*=256);)this[O+ne]=A/Pe&255;return O+X},m.prototype.writeUint8=m.prototype.writeUInt8=function(A,O,X){return A=+A,O=O>>>0,X||ie(this,A,O,1,255,0),this[O]=A&255,O+1},m.prototype.writeUint16LE=m.prototype.writeUInt16LE=function(A,O,X){return A=+A,O=O>>>0,X||ie(this,A,O,2,65535,0),this[O]=A&255,this[O+1]=A>>>8,O+2},m.prototype.writeUint16BE=m.prototype.writeUInt16BE=function(A,O,X){return A=+A,O=O>>>0,X||ie(this,A,O,2,65535,0),this[O]=A>>>8,this[O+1]=A&255,O+2},m.prototype.writeUint32LE=m.prototype.writeUInt32LE=function(A,O,X){return A=+A,O=O>>>0,X||ie(this,A,O,4,4294967295,0),this[O+3]=A>>>24,this[O+2]=A>>>16,this[O+1]=A>>>8,this[O]=A&255,O+4},m.prototype.writeUint32BE=m.prototype.writeUInt32BE=function(A,O,X){return A=+A,O=O>>>0,X||ie(this,A,O,4,4294967295,0),this[O]=A>>>24,this[O+1]=A>>>16,this[O+2]=A>>>8,this[O+3]=A&255,O+4};function U(Q,A,O,X,pe){Ae(A,X,pe,Q,O,7);let ne=Number(A&BigInt(4294967295));Q[O++]=ne,ne=ne>>8,Q[O++]=ne,ne=ne>>8,Q[O++]=ne,ne=ne>>8,Q[O++]=ne;let Pe=Number(A>>BigInt(32)&BigInt(4294967295));return Q[O++]=Pe,Pe=Pe>>8,Q[O++]=Pe,Pe=Pe>>8,Q[O++]=Pe,Pe=Pe>>8,Q[O++]=Pe,O}function L(Q,A,O,X,pe){Ae(A,X,pe,Q,O,7);let ne=Number(A&BigInt(4294967295));Q[O+7]=ne,ne=ne>>8,Q[O+6]=ne,ne=ne>>8,Q[O+5]=ne,ne=ne>>8,Q[O+4]=ne;let Pe=Number(A>>BigInt(32)&BigInt(4294967295));return Q[O+3]=Pe,Pe=Pe>>8,Q[O+2]=Pe,Pe=Pe>>8,Q[O+1]=Pe,Pe=Pe>>8,Q[O]=Pe,O+8}m.prototype.writeBigUInt64LE=Oe(function(A,O=0){return U(this,A,O,BigInt(0),BigInt("0xffffffffffffffff"))}),m.prototype.writeBigUInt64BE=Oe(function(A,O=0){return L(this,A,O,BigInt(0),BigInt("0xffffffffffffffff"))}),m.prototype.writeIntLE=function(A,O,X,pe){if(A=+A,O=O>>>0,!pe){const Be=Math.pow(2,8*X-1);ie(this,A,O,X,Be-1,-Be)}let ne=0,Pe=1,K=0;for(this[O]=A&255;++ne<X&&(Pe*=256);)A<0&&K===0&&this[O+ne-1]!==0&&(K=1),this[O+ne]=(A/Pe>>0)-K&255;return O+X},m.prototype.writeIntBE=function(A,O,X,pe){if(A=+A,O=O>>>0,!pe){const Be=Math.pow(2,8*X-1);ie(this,A,O,X,Be-1,-Be)}let ne=X-1,Pe=1,K=0;for(this[O+ne]=A&255;--ne>=0&&(Pe*=256);)A<0&&K===0&&this[O+ne+1]!==0&&(K=1),this[O+ne]=(A/Pe>>0)-K&255;return O+X},m.prototype.writeInt8=function(A,O,X){return A=+A,O=O>>>0,X||ie(this,A,O,1,127,-128),A<0&&(A=255+A+1),this[O]=A&255,O+1},m.prototype.writeInt16LE=function(A,O,X){return A=+A,O=O>>>0,X||ie(this,A,O,2,32767,-32768),this[O]=A&255,this[O+1]=A>>>8,O+2},m.prototype.writeInt16BE=function(A,O,X){return A=+A,O=O>>>0,X||ie(this,A,O,2,32767,-32768),this[O]=A>>>8,this[O+1]=A&255,O+2},m.prototype.writeInt32LE=function(A,O,X){return A=+A,O=O>>>0,X||ie(this,A,O,4,2147483647,-2147483648),this[O]=A&255,this[O+1]=A>>>8,this[O+2]=A>>>16,this[O+3]=A>>>24,O+4},m.prototype.writeInt32BE=function(A,O,X){return A=+A,O=O>>>0,X||ie(this,A,O,4,2147483647,-2147483648),A<0&&(A=4294967295+A+1),this[O]=A>>>24,this[O+1]=A>>>16,this[O+2]=A>>>8,this[O+3]=A&255,O+4},m.prototype.writeBigInt64LE=Oe(function(A,O=0){return U(this,A,O,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),m.prototype.writeBigInt64BE=Oe(function(A,O=0){return L(this,A,O,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});function J(Q,A,O,X,pe,ne){if(O+X>Q.length)throw new RangeError("Index out of range");if(O<0)throw new RangeError("Index out of range")}function se(Q,A,O,X,pe){return A=+A,O=O>>>0,pe||J(Q,A,O,4),r.write(Q,A,O,X,23,4),O+4}m.prototype.writeFloatLE=function(A,O,X){return se(this,A,O,!0,X)},m.prototype.writeFloatBE=function(A,O,X){return se(this,A,O,!1,X)};function ve(Q,A,O,X,pe){return A=+A,O=O>>>0,pe||J(Q,A,O,8),r.write(Q,A,O,X,52,8),O+8}m.prototype.writeDoubleLE=function(A,O,X){return ve(this,A,O,!0,X)},m.prototype.writeDoubleBE=function(A,O,X){return ve(this,A,O,!1,X)},m.prototype.copy=function(A,O,X,pe){if(!m.isBuffer(A))throw new TypeError("argument should be a Buffer");if(X||(X=0),!pe&&pe!==0&&(pe=this.length),O>=A.length&&(O=A.length),O||(O=0),pe>0&&pe<X&&(pe=X),pe===X||A.length===0||this.length===0)return 0;if(O<0)throw new RangeError("targetStart out of bounds");if(X<0||X>=this.length)throw new RangeError("Index out of range");if(pe<0)throw new RangeError("sourceEnd out of bounds");pe>this.length&&(pe=this.length),A.length-O<pe-X&&(pe=A.length-O+X);const ne=pe-X;return this===A&&typeof s.prototype.copyWithin=="function"?this.copyWithin(O,X,pe):s.prototype.set.call(A,this.subarray(X,pe),O),ne},m.prototype.fill=function(A,O,X,pe){if(typeof A=="string"){if(typeof O=="string"?(pe=O,O=0,X=this.length):typeof X=="string"&&(pe=X,X=this.length),pe!==void 0&&typeof pe!="string")throw new TypeError("encoding must be a string");if(typeof pe=="string"&&!m.isEncoding(pe))throw new TypeError("Unknown encoding: "+pe);if(A.length===1){const Pe=A.charCodeAt(0);(pe==="utf8"&&Pe<128||pe==="latin1")&&(A=Pe)}}else typeof A=="number"?A=A&255:typeof A=="boolean"&&(A=Number(A));if(O<0||this.length<O||this.length<X)throw new RangeError("Out of range index");if(X<=O)return this;O=O>>>0,X=X===void 0?this.length:X>>>0,A||(A=0);let ne;if(typeof A=="number")for(ne=O;ne<X;++ne)this[ne]=A;else{const Pe=m.isBuffer(A)?A:m.from(A,pe),K=Pe.length;if(K===0)throw new TypeError('The value "'+A+'" is invalid for argument "value"');for(ne=0;ne<X-O;++ne)this[ne+O]=Pe[ne%K]}return this};const Z={};function I(Q,A,O){Z[Q]=class extends O{constructor(){super(),Object.defineProperty(this,"message",{value:A.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${Q}]`,this.stack,delete this.name}get code(){return Q}set code(pe){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:pe,writable:!0})}toString(){return`${this.name} [${Q}]: ${this.message}`}}}I("ERR_BUFFER_OUT_OF_BOUNDS",function(Q){return Q?`${Q} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),I("ERR_INVALID_ARG_TYPE",function(Q,A){return`The "${Q}" argument must be of type number. Received type ${typeof A}`},TypeError),I("ERR_OUT_OF_RANGE",function(Q,A,O){let X=`The value of "${Q}" is out of range.`,pe=O;return Number.isInteger(O)&&Math.abs(O)>2**32?pe=q(String(O)):typeof O=="bigint"&&(pe=String(O),(O>BigInt(2)**BigInt(32)||O<-(BigInt(2)**BigInt(32)))&&(pe=q(pe)),pe+="n"),X+=` It must be ${A}. Received ${pe}`,X},RangeError);function q(Q){let A="",O=Q.length;const X=Q[0]==="-"?1:0;for(;O>=X+4;O-=3)A=`_${Q.slice(O-3,O)}${A}`;return`${Q.slice(0,O)}${A}`}function fe(Q,A,O){G(A,"offset"),(Q[A]===void 0||Q[A+O]===void 0)&&N(A,Q.length-(O+1))}function Ae(Q,A,O,X,pe,ne){if(Q>O||Q<A){const Pe=typeof A=="bigint"?"n":"";let K;throw ne>3?A===0||A===BigInt(0)?K=`>= 0${Pe} and < 2${Pe} ** ${(ne+1)*8}${Pe}`:K=`>= -(2${Pe} ** ${(ne+1)*8-1}${Pe}) and < 2 ** ${(ne+1)*8-1}${Pe}`:K=`>= ${A}${Pe} and <= ${O}${Pe}`,new Z.ERR_OUT_OF_RANGE("value",K,Q)}fe(X,pe,ne)}function G(Q,A){if(typeof Q!="number")throw new Z.ERR_INVALID_ARG_TYPE(A,"number",Q)}function N(Q,A,O){throw Math.floor(Q)!==Q?(G(Q,O),new Z.ERR_OUT_OF_RANGE(O||"offset","an integer",Q)):A<0?new Z.ERR_BUFFER_OUT_OF_BOUNDS:new Z.ERR_OUT_OF_RANGE(O||"offset",`>= ${O?1:0} and <= ${A}`,Q)}const B=/[^+/0-9A-Za-z-_]/g;function H(Q){if(Q=Q.split("=")[0],Q=Q.trim().replace(B,""),Q.length<2)return"";for(;Q.length%4!==0;)Q=Q+"=";return Q}function ce(Q,A){A=A||1/0;let O;const X=Q.length;let pe=null;const ne=[];for(let Pe=0;Pe<X;++Pe){if(O=Q.charCodeAt(Pe),O>55295&&O<57344){if(!pe){if(O>56319){(A-=3)>-1&&ne.push(239,191,189);continue}else if(Pe+1===X){(A-=3)>-1&&ne.push(239,191,189);continue}pe=O;continue}if(O<56320){(A-=3)>-1&&ne.push(239,191,189),pe=O;continue}O=(pe-55296<<10|O-56320)+65536}else pe&&(A-=3)>-1&&ne.push(239,191,189);if(pe=null,O<128){if((A-=1)<0)break;ne.push(O)}else if(O<2048){if((A-=2)<0)break;ne.push(O>>6|192,O&63|128)}else if(O<65536){if((A-=3)<0)break;ne.push(O>>12|224,O>>6&63|128,O&63|128)}else if(O<1114112){if((A-=4)<0)break;ne.push(O>>18|240,O>>12&63|128,O>>6&63|128,O&63|128)}else throw new Error("Invalid code point")}return ne}function ye(Q){const A=[];for(let O=0;O<Q.length;++O)A.push(Q.charCodeAt(O)&255);return A}function Ee(Q,A){let O,X,pe;const ne=[];for(let Pe=0;Pe<Q.length&&!((A-=2)<0);++Pe)O=Q.charCodeAt(Pe),X=O>>8,pe=O%256,ne.push(pe),ne.push(X);return ne}function Ce(Q){return t.toByteArray(H(Q))}function ge(Q,A,O,X){let pe;for(pe=0;pe<X&&!(pe+O>=A.length||pe>=Q.length);++pe)A[pe+O]=Q[pe];return pe}function xe(Q,A){return Q instanceof A||Q!=null&&Q.constructor!=null&&Q.constructor.name!=null&&Q.constructor.name===A.name}function Fe(Q){return Q!==Q}const Re=function(){const Q="0123456789abcdef",A=new Array(256);for(let O=0;O<16;++O){const X=O*16;for(let pe=0;pe<16;++pe)A[X+pe]=Q[O]+Q[pe]}return A}();function Oe(Q){return typeof BigInt>"u"?Me:Q}function Me(){throw new Error("BigInt not supported")}})(buffer$1);const Buffer$1=buffer$1.Buffer,fs$2={},__viteBrowserExternal=Object.freeze(Object.defineProperty({__proto__:null,default:fs$2},Symbol.toStringTag,{value:"Module"}));function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var browser$3={exports:{}},process=browser$3.exports={},cachedSetTimeout,cachedClearTimeout;function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}(function(){try{typeof setTimeout=="function"?cachedSetTimeout=setTimeout:cachedSetTimeout=defaultSetTimout}catch{cachedSetTimeout=defaultSetTimout}try{typeof clearTimeout=="function"?cachedClearTimeout=clearTimeout:cachedClearTimeout=defaultClearTimeout}catch{cachedClearTimeout=defaultClearTimeout}})();function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch{try{return cachedSetTimeout.call(null,e,0)}catch{return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch{try{return cachedClearTimeout.call(null,e)}catch{return cachedClearTimeout.call(this,e)}}}var queue=[],draining=!1,currentQueue,queueIndex=-1;function cleanUpNextTick(){!draining||!currentQueue||(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];queue.push(new Item$1(e,t)),queue.length===1&&!draining&&runTimeout(drainQueue)};function Item$1(e,t){this.fun=e,this.array=t}Item$1.prototype.run=function(){this.fun.apply(null,this.array)};process.title="browser";process.browser=!0;process.env={};process.argv=[];process.version="";process.versions={};function noop$3(){}process.on=noop$3;process.addListener=noop$3;process.once=noop$3;process.off=noop$3;process.removeListener=noop$3;process.removeAllListeners=noop$3;process.emit=noop$3;process.prependListener=noop$3;process.prependOnceListener=noop$3;process.listeners=function(e){return[]};process.binding=function(e){throw new Error("process.binding is not supported")};process.cwd=function(){return"/"};process.chdir=function(e){throw new Error("process.chdir is not supported")};process.umask=function(){return 0};var browserExports=browser$3.exports;const process$1=getDefaultExportFromCjs(browserExports);function assertPath(e){if(typeof e!="string")throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function normalizeStringPosix(e,t){for(var r="",n=0,a=-1,s=0,o,l=0;l<=e.length;++l){if(l<e.length)o=e.charCodeAt(l);else{if(o===47)break;o=47}if(o===47){if(!(a===l-1||s===1))if(a!==l-1&&s===2){if(r.length<2||n!==2||r.charCodeAt(r.length-1)!==46||r.charCodeAt(r.length-2)!==46){if(r.length>2){var f=r.lastIndexOf("/");if(f!==r.length-1){f===-1?(r="",n=0):(r=r.slice(0,f),n=r.length-1-r.lastIndexOf("/")),a=l,s=0;continue}}else if(r.length===2||r.length===1){r="",n=0,a=l,s=0;continue}}t&&(r.length>0?r+="/..":r="..",n=2)}else r.length>0?r+="/"+e.slice(a+1,l):r=e.slice(a+1,l),n=l-a-1;a=l,s=0}else o===46&&s!==-1?++s:s=-1}return r}function _format(e,t){var r=t.dir||t.root,n=t.base||(t.name||"")+(t.ext||"");return r?r===t.root?r+n:r+e+n:n}var posix={resolve:function(){for(var t="",r=!1,n,a=arguments.length-1;a>=-1&&!r;a--){var s;a>=0?s=arguments[a]:(n===void 0&&(n=process$1.cwd()),s=n),assertPath(s),s.length!==0&&(t=s+"/"+t,r=s.charCodeAt(0)===47)}return t=normalizeStringPosix(t,!r),r?t.length>0?"/"+t:"/":t.length>0?t:"."},normalize:function(t){if(assertPath(t),t.length===0)return".";var r=t.charCodeAt(0)===47,n=t.charCodeAt(t.length-1)===47;return t=normalizeStringPosix(t,!r),t.length===0&&!r&&(t="."),t.length>0&&n&&(t+="/"),r?"/"+t:t},isAbsolute:function(t){return assertPath(t),t.length>0&&t.charCodeAt(0)===47},join:function(){if(arguments.length===0)return".";for(var t,r=0;r<arguments.length;++r){var n=arguments[r];assertPath(n),n.length>0&&(t===void 0?t=n:t+="/"+n)}return t===void 0?".":posix.normalize(t)},relative:function(t,r){if(assertPath(t),assertPath(r),t===r||(t=posix.resolve(t),r=posix.resolve(r),t===r))return"";for(var n=1;n<t.length&&t.charCodeAt(n)===47;++n);for(var a=t.length,s=a-n,o=1;o<r.length&&r.charCodeAt(o)===47;++o);for(var l=r.length,f=l-o,u=s<f?s:f,m=-1,v=0;v<=u;++v){if(v===u){if(f>u){if(r.charCodeAt(o+v)===47)return r.slice(o+v+1);if(v===0)return r.slice(o+v)}else s>u&&(t.charCodeAt(n+v)===47?m=v:v===0&&(m=0));break}var b=t.charCodeAt(n+v),P=r.charCodeAt(o+v);if(b!==P)break;b===47&&(m=v)}var F="";for(v=n+m+1;v<=a;++v)(v===a||t.charCodeAt(v)===47)&&(F.length===0?F+="..":F+="/..");return F.length>0?F+r.slice(o+m):(o+=m,r.charCodeAt(o)===47&&++o,r.slice(o))},_makeLong:function(t){return t},dirname:function(t){if(assertPath(t),t.length===0)return".";for(var r=t.charCodeAt(0),n=r===47,a=-1,s=!0,o=t.length-1;o>=1;--o)if(r=t.charCodeAt(o),r===47){if(!s){a=o;break}}else s=!1;return a===-1?n?"/":".":n&&a===1?"//":t.slice(0,a)},basename:function(t,r){if(r!==void 0&&typeof r!="string")throw new TypeError('"ext" argument must be a string');assertPath(t);var n=0,a=-1,s=!0,o;if(r!==void 0&&r.length>0&&r.length<=t.length){if(r.length===t.length&&r===t)return"";var l=r.length-1,f=-1;for(o=t.length-1;o>=0;--o){var u=t.charCodeAt(o);if(u===47){if(!s){n=o+1;break}}else f===-1&&(s=!1,f=o+1),l>=0&&(u===r.charCodeAt(l)?--l===-1&&(a=o):(l=-1,a=f))}return n===a?a=f:a===-1&&(a=t.length),t.slice(n,a)}else{for(o=t.length-1;o>=0;--o)if(t.charCodeAt(o)===47){if(!s){n=o+1;break}}else a===-1&&(s=!1,a=o+1);return a===-1?"":t.slice(n,a)}},extname:function(t){assertPath(t);for(var r=-1,n=0,a=-1,s=!0,o=0,l=t.length-1;l>=0;--l){var f=t.charCodeAt(l);if(f===47){if(!s){n=l+1;break}continue}a===-1&&(s=!1,a=l+1),f===46?r===-1?r=l:o!==1&&(o=1):r!==-1&&(o=-1)}return r===-1||a===-1||o===0||o===1&&r===a-1&&r===n+1?"":t.slice(r,a)},format:function(t){if(t===null||typeof t!="object")throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof t);return _format("/",t)},parse:function(t){assertPath(t);var r={root:"",dir:"",base:"",ext:"",name:""};if(t.length===0)return r;var n=t.charCodeAt(0),a=n===47,s;a?(r.root="/",s=1):s=0;for(var o=-1,l=0,f=-1,u=!0,m=t.length-1,v=0;m>=s;--m){if(n=t.charCodeAt(m),n===47){if(!u){l=m+1;break}continue}f===-1&&(u=!1,f=m+1),n===46?o===-1?o=m:v!==1&&(v=1):o!==-1&&(v=-1)}return o===-1||f===-1||v===0||v===1&&o===f-1&&o===l+1?f!==-1&&(l===0&&a?r.base=r.name=t.slice(1,f):r.base=r.name=t.slice(l,f)):(l===0&&a?(r.name=t.slice(1,o),r.base=t.slice(1,f)):(r.name=t.slice(l,o),r.base=t.slice(l,f)),r.ext=t.slice(o,f)),l>0?r.dir=t.slice(0,l-1):a&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};posix.posix=posix;var pathBrowserify=posix;const Path=getDefaultExportFromCjs$1(pathBrowserify);var events={exports:{}},R=typeof Reflect=="object"?Reflect:null,ReflectApply=R&&typeof R.apply=="function"?R.apply:function(t,r,n){return Function.prototype.apply.call(t,r,n)},ReflectOwnKeys;R&&typeof R.ownKeys=="function"?ReflectOwnKeys=R.ownKeys:Object.getOwnPropertySymbols?ReflectOwnKeys=function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:ReflectOwnKeys=function(t){return Object.getOwnPropertyNames(t)};function ProcessEmitWarning(e){console&&console.warn&&console.warn(e)}var NumberIsNaN=Number.isNaN||function(t){return t!==t};function EventEmitter(){EventEmitter.init.call(this)}events.exports=EventEmitter;events.exports.once=once;EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=void 0;EventEmitter.prototype._eventsCount=0;EventEmitter.prototype._maxListeners=void 0;var defaultMaxListeners=10;function checkListener(e){if(typeof e!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}Object.defineProperty(EventEmitter,"defaultMaxListeners",{enumerable:!0,get:function(){return defaultMaxListeners},set:function(e){if(typeof e!="number"||e<0||NumberIsNaN(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");defaultMaxListeners=e}});EventEmitter.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};EventEmitter.prototype.setMaxListeners=function(t){if(typeof t!="number"||t<0||NumberIsNaN(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this};function _getMaxListeners(e){return e._maxListeners===void 0?EventEmitter.defaultMaxListeners:e._maxListeners}EventEmitter.prototype.getMaxListeners=function(){return _getMaxListeners(this)};EventEmitter.prototype.emit=function(t){for(var r=[],n=1;n<arguments.length;n++)r.push(arguments[n]);var a=t==="error",s=this._events;if(s!==void 0)a=a&&s.error===void 0;else if(!a)return!1;if(a){var o;if(r.length>0&&(o=r[0]),o instanceof Error)throw o;var l=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw l.context=o,l}var f=s[t];if(f===void 0)return!1;if(typeof f=="function")ReflectApply(f,this,r);else for(var u=f.length,m=arrayClone(f,u),n=0;n<u;++n)ReflectApply(m[n],this,r);return!0};function _addListener(e,t,r,n){var a,s,o;if(checkListener(r),s=e._events,s===void 0?(s=e._events=Object.create(null),e._eventsCount=0):(s.newListener!==void 0&&(e.emit("newListener",t,r.listener?r.listener:r),s=e._events),o=s[t]),o===void 0)o=s[t]=r,++e._eventsCount;else if(typeof o=="function"?o=s[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),a=_getMaxListeners(e),a>0&&o.length>a&&!o.warned){o.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=o.length,ProcessEmitWarning(l)}return e}EventEmitter.prototype.addListener=function(t,r){return _addListener(this,t,r,!1)};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.prependListener=function(t,r){return _addListener(this,t,r,!0)};function onceWrapper(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function _onceWrap(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},a=onceWrapper.bind(n);return a.listener=r,n.wrapFn=a,a}EventEmitter.prototype.once=function(t,r){return checkListener(r),this.on(t,_onceWrap(this,t,r)),this};EventEmitter.prototype.prependOnceListener=function(t,r){return checkListener(r),this.prependListener(t,_onceWrap(this,t,r)),this};EventEmitter.prototype.removeListener=function(t,r){var n,a,s,o,l;if(checkListener(r),a=this._events,a===void 0)return this;if(n=a[t],n===void 0)return this;if(n===r||n.listener===r)--this._eventsCount===0?this._events=Object.create(null):(delete a[t],a.removeListener&&this.emit("removeListener",t,n.listener||r));else if(typeof n!="function"){for(s=-1,o=n.length-1;o>=0;o--)if(n[o]===r||n[o].listener===r){l=n[o].listener,s=o;break}if(s<0)return this;s===0?n.shift():spliceOne(n,s),n.length===1&&(a[t]=n[0]),a.removeListener!==void 0&&this.emit("removeListener",t,l||r)}return this};EventEmitter.prototype.off=EventEmitter.prototype.removeListener;EventEmitter.prototype.removeAllListeners=function(t){var r,n,a;if(n=this._events,n===void 0)return this;if(n.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):n[t]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete n[t]),this;if(arguments.length===0){var s=Object.keys(n),o;for(a=0;a<s.length;++a)o=s[a],o!=="removeListener"&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(r=n[t],typeof r=="function")this.removeListener(t,r);else if(r!==void 0)for(a=r.length-1;a>=0;a--)this.removeListener(t,r[a]);return this};function _listeners(e,t,r){var n=e._events;if(n===void 0)return[];var a=n[t];return a===void 0?[]:typeof a=="function"?r?[a.listener||a]:[a]:r?unwrapListeners(a):arrayClone(a,a.length)}EventEmitter.prototype.listeners=function(t){return _listeners(this,t,!0)};EventEmitter.prototype.rawListeners=function(t){return _listeners(this,t,!1)};EventEmitter.listenerCount=function(e,t){return typeof e.listenerCount=="function"?e.listenerCount(t):listenerCount.call(e,t)};EventEmitter.prototype.listenerCount=listenerCount;function listenerCount(e){var t=this._events;if(t!==void 0){var r=t[e];if(typeof r=="function")return 1;if(r!==void 0)return r.length}return 0}EventEmitter.prototype.eventNames=function(){return this._eventsCount>0?ReflectOwnKeys(this._events):[]};function arrayClone(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function spliceOne(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}function unwrapListeners(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}function once(e,t){return new Promise(function(r,n){function a(o){e.removeListener(t,s),n(o)}function s(){typeof e.removeListener=="function"&&e.removeListener("error",a),r([].slice.call(arguments))}eventTargetAgnosticAddListener(e,t,s,{once:!0}),t!=="error"&&addErrorHandlerIfEventEmitter(e,a,{once:!0})})}function addErrorHandlerIfEventEmitter(e,t,r){typeof e.on=="function"&&eventTargetAgnosticAddListener(e,"error",t,r)}function eventTargetAgnosticAddListener(e,t,r,n){if(typeof e.on=="function")n.once?e.once(t,r):e.on(t,r);else if(typeof e.addEventListener=="function")e.addEventListener(t,function a(s){n.once&&e.removeEventListener(t,a),r(s)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e)}var eventsExports=events.exports;const EventEmitter$1=getDefaultExportFromCjs$1(eventsExports);function isNodePattern(e){if(typeof e>"u")return!1;if(typeof e!="function")throw new TypeError("Callback must be a function");return!0}function throwError(e,t){if(typeof e=="string"&&(e=new Error(e)),typeof t=="function")return t.call(this,e);throw e}function scan(e,t,r,n,a,s){t=Math.round(t),r=Math.round(r),n=Math.round(n),a=Math.round(a);for(let o=r;o<r+a;o++)for(let l=t;l<t+n;l++){const f=e.bitmap.width*o+l<<2;s.call(e,l,o,f)}return e}function*scanIterator(e,t,r,n,a){t=Math.round(t),r=Math.round(r),n=Math.round(n),a=Math.round(a);for(let s=r;s<r+a;s++)for(let o=t;o<t+n;o++){const l=e.bitmap.width*s+o<<2;yield{x:o,y:s,idx:l,image:e}}}function Converter$1(e,t){if(!e||!t||!e.length||!t.length)throw new Error("Bad alphabet");this.srcAlphabet=e,this.dstAlphabet=t}Converter$1.prototype.convert=function(e){var t,r,n,a={},s=this.srcAlphabet.length,o=this.dstAlphabet.length,l=e.length,f=typeof e=="string"?"":[];if(!this.isValid(e))throw new Error('Number "'+e+'" contains of non-alphabetic digits ('+this.srcAlphabet+")");if(this.srcAlphabet===this.dstAlphabet)return e;for(t=0;t<l;t++)a[t]=this.srcAlphabet.indexOf(e[t]);do{for(r=0,n=0,t=0;t<l;t++)r=r*s+a[t],r>=o?(a[n++]=parseInt(r/o,10),r=r%o):n>0&&(a[n++]=0);l=n,f=this.dstAlphabet.slice(r,r+1).concat(f)}while(n!==0);return f};Converter$1.prototype.isValid=function(e){for(var t=0;t<e.length;++t)if(this.srcAlphabet.indexOf(e[t])===-1)return!1;return!0};var converter=Converter$1,Converter=converter;function anyBase(e,t){var r=new Converter(e,t);return function(n){return r.convert(n)}}anyBase.BIN="01";anyBase.OCT="01234567";anyBase.DEC="0123456789";anyBase.HEX="0123456789abcdef";var anyBase_1=anyBase;const anyBase$1=getDefaultExportFromCjs$1(anyBase_1);var pixelmatch_1=pixelmatch;function pixelmatch(e,t,r,n,a,s){s||(s={});for(var o=s.threshold===void 0?.1:s.threshold,l=35215*o*o,f=0,u=0;u<a;u++)for(var m=0;m<n;m++){var v=(u*n+m)*4,b=colorDelta(e,t,v,v);if(b>l)!s.includeAA&&(antialiased(e,m,u,n,a,t)||antialiased(t,m,u,n,a,e))?r&&drawPixel(r,v,255,255,0):(r&&drawPixel(r,v,255,0,0),f++);else if(r){var P=blend(grayPixel(e,v),.1);drawPixel(r,v,P,P,P)}}return f}function antialiased(e,t,r,n,a,s){for(var o=Math.max(t-1,0),l=Math.max(r-1,0),f=Math.min(t+1,n-1),u=Math.min(r+1,a-1),m=(r*n+t)*4,v=0,b=0,P=0,F=0,C=0,D,E,k,j,W=o;W<=f;W++)for(var M=l;M<=u;M++)if(!(W===t&&M===r)){var S=colorDelta(e,e,m,(M*n+W)*4,!0);if(S===0?v++:S<0?P++:S>0&&b++,v>2)return!1;s&&(S<F&&(F=S,D=W,E=M),S>C&&(C=S,k=W,j=M))}return s?P===0||b===0?!1:!antialiased(e,D,E,n,a)&&!antialiased(s,D,E,n,a)||!antialiased(e,k,j,n,a)&&!antialiased(s,k,j,n,a):!0}function colorDelta(e,t,r,n,a){var s=e[r+3]/255,o=t[n+3]/255,l=blend(e[r+0],s),f=blend(e[r+1],s),u=blend(e[r+2],s),m=blend(t[n+0],o),v=blend(t[n+1],o),b=blend(t[n+2],o),P=rgb2y(l,f,u)-rgb2y(m,v,b);if(a)return P;var F=rgb2i(l,f,u)-rgb2i(m,v,b),C=rgb2q(l,f,u)-rgb2q(m,v,b);return .5053*P*P+.299*F*F+.1957*C*C}function rgb2y(e,t,r){return e*.29889531+t*.58662247+r*.11448223}function rgb2i(e,t,r){return e*.59597799-t*.2741761-r*.32180189}function rgb2q(e,t,r){return e*.21147017-t*.52261711+r*.31114694}function blend(e,t){return 255+(e-255)*t}function drawPixel(e,t,r,n,a){e[t+0]=r,e[t+1]=n,e[t+2]=a,e[t+3]=255}function grayPixel(e,t){var r=e[t+3]/255,n=blend(e[t+0],r),a=blend(e[t+1],r),s=blend(e[t+2],r);return rgb2y(n,a,s)}const pixelMatch=getDefaultExportFromCjs$1(pixelmatch_1);function _typeof(e){"@babel/helpers - typeof";return _typeof=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(e)}var trimLeft=/^\s+/,trimRight=/\s+$/;function tinycolor(e,t){if(e=e||"",t=t||{},e instanceof tinycolor)return e;if(!(this instanceof tinycolor))return new tinycolor(e,t);var r=inputToRGB(e);this._originalInput=e,this._r=r.r,this._g=r.g,this._b=r.b,this._a=r.a,this._roundA=Math.round(100*this._a)/100,this._format=t.format||r.format,this._gradientType=t.gradientType,this._r<1&&(this._r=Math.round(this._r)),this._g<1&&(this._g=Math.round(this._g)),this._b<1&&(this._b=Math.round(this._b)),this._ok=r.ok}tinycolor.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(t.r*299+t.g*587+t.b*114)/1e3},getLuminance:function(){var t=this.toRgb(),r,n,a,s,o,l;return r=t.r/255,n=t.g/255,a=t.b/255,r<=.03928?s=r/12.92:s=Math.pow((r+.055)/1.055,2.4),n<=.03928?o=n/12.92:o=Math.pow((n+.055)/1.055,2.4),a<=.03928?l=a/12.92:l=Math.pow((a+.055)/1.055,2.4),.2126*s+.7152*o+.0722*l},setAlpha:function(t){return this._a=boundAlpha(t),this._roundA=Math.round(100*this._a)/100,this},toHsv:function(){var t=rgbToHsv(this._r,this._g,this._b);return{h:t.h*360,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=rgbToHsv(this._r,this._g,this._b),r=Math.round(t.h*360),n=Math.round(t.s*100),a=Math.round(t.v*100);return this._a==1?"hsv("+r+", "+n+"%, "+a+"%)":"hsva("+r+", "+n+"%, "+a+"%, "+this._roundA+")"},toHsl:function(){var t=rgbToHsl(this._r,this._g,this._b);return{h:t.h*360,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=rgbToHsl(this._r,this._g,this._b),r=Math.round(t.h*360),n=Math.round(t.s*100),a=Math.round(t.l*100);return this._a==1?"hsl("+r+", "+n+"%, "+a+"%)":"hsla("+r+", "+n+"%, "+a+"%, "+this._roundA+")"},toHex:function(t){return rgbToHex(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return rgbaToHex(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:Math.round(this._r),g:Math.round(this._g),b:Math.round(this._b),a:this._a}},toRgbString:function(){return this._a==1?"rgb("+Math.round(this._r)+", "+Math.round(this._g)+", "+Math.round(this._b)+")":"rgba("+Math.round(this._r)+", "+Math.round(this._g)+", "+Math.round(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:Math.round(bound01(this._r,255)*100)+"%",g:Math.round(bound01(this._g,255)*100)+"%",b:Math.round(bound01(this._b,255)*100)+"%",a:this._a}},toPercentageRgbString:function(){return this._a==1?"rgb("+Math.round(bound01(this._r,255)*100)+"%, "+Math.round(bound01(this._g,255)*100)+"%, "+Math.round(bound01(this._b,255)*100)+"%)":"rgba("+Math.round(bound01(this._r,255)*100)+"%, "+Math.round(bound01(this._g,255)*100)+"%, "+Math.round(bound01(this._b,255)*100)+"%, "+this._roundA+")"},toName:function(){return this._a===0?"transparent":this._a<1?!1:hexNames[rgbToHex(this._r,this._g,this._b,!0)]||!1},toFilter:function(t){var r="#"+rgbaToArgbHex(this._r,this._g,this._b,this._a),n=r,a=this._gradientType?"GradientType = 1, ":"";if(t){var s=tinycolor(t);n="#"+rgbaToArgbHex(s._r,s._g,s._b,s._a)}return"progid:DXImageTransform.Microsoft.gradient("+a+"startColorstr="+r+",endColorstr="+n+")"},toString:function(t){var r=!!t;t=t||this._format;var n=!1,a=this._a<1&&this._a>=0,s=!r&&a&&(t==="hex"||t==="hex6"||t==="hex3"||t==="hex4"||t==="hex8"||t==="name");return s?t==="name"&&this._a===0?this.toName():this.toRgbString():(t==="rgb"&&(n=this.toRgbString()),t==="prgb"&&(n=this.toPercentageRgbString()),(t==="hex"||t==="hex6")&&(n=this.toHexString()),t==="hex3"&&(n=this.toHexString(!0)),t==="hex4"&&(n=this.toHex8String(!0)),t==="hex8"&&(n=this.toHex8String()),t==="name"&&(n=this.toName()),t==="hsl"&&(n=this.toHslString()),t==="hsv"&&(n=this.toHsvString()),n||this.toHexString())},clone:function(){return tinycolor(this.toString())},_applyModification:function(t,r){var n=t.apply(null,[this].concat([].slice.call(r)));return this._r=n._r,this._g=n._g,this._b=n._b,this.setAlpha(n._a),this},lighten:function(){return this._applyModification(_lighten,arguments)},brighten:function(){return this._applyModification(_brighten,arguments)},darken:function(){return this._applyModification(_darken,arguments)},desaturate:function(){return this._applyModification(_desaturate,arguments)},saturate:function(){return this._applyModification(_saturate,arguments)},greyscale:function(){return this._applyModification(_greyscale,arguments)},spin:function(){return this._applyModification(_spin,arguments)},_applyCombination:function(t,r){return t.apply(null,[this].concat([].slice.call(r)))},analogous:function(){return this._applyCombination(_analogous,arguments)},complement:function(){return this._applyCombination(_complement,arguments)},monochromatic:function(){return this._applyCombination(_monochromatic,arguments)},splitcomplement:function(){return this._applyCombination(_splitcomplement,arguments)},triad:function(){return this._applyCombination(polyad,[3])},tetrad:function(){return this._applyCombination(polyad,[4])}};tinycolor.fromRatio=function(e,t){if(_typeof(e)=="object"){var r={};for(var n in e)e.hasOwnProperty(n)&&(n==="a"?r[n]=e[n]:r[n]=convertToPercentage(e[n]));e=r}return tinycolor(e,t)};function inputToRGB(e){var t={r:0,g:0,b:0},r=1,n=null,a=null,s=null,o=!1,l=!1;return typeof e=="string"&&(e=stringInputToObject(e)),_typeof(e)=="object"&&(isValidCSSUnit(e.r)&&isValidCSSUnit(e.g)&&isValidCSSUnit(e.b)?(t=rgbToRgb(e.r,e.g,e.b),o=!0,l=String(e.r).substr(-1)==="%"?"prgb":"rgb"):isValidCSSUnit(e.h)&&isValidCSSUnit(e.s)&&isValidCSSUnit(e.v)?(n=convertToPercentage(e.s),a=convertToPercentage(e.v),t=hsvToRgb(e.h,n,a),o=!0,l="hsv"):isValidCSSUnit(e.h)&&isValidCSSUnit(e.s)&&isValidCSSUnit(e.l)&&(n=convertToPercentage(e.s),s=convertToPercentage(e.l),t=hslToRgb(e.h,n,s),o=!0,l="hsl"),e.hasOwnProperty("a")&&(r=e.a)),r=boundAlpha(r),{ok:o,format:e.format||l,r:Math.min(255,Math.max(t.r,0)),g:Math.min(255,Math.max(t.g,0)),b:Math.min(255,Math.max(t.b,0)),a:r}}function rgbToRgb(e,t,r){return{r:bound01(e,255)*255,g:bound01(t,255)*255,b:bound01(r,255)*255}}function rgbToHsl(e,t,r){e=bound01(e,255),t=bound01(t,255),r=bound01(r,255);var n=Math.max(e,t,r),a=Math.min(e,t,r),s,o,l=(n+a)/2;if(n==a)s=o=0;else{var f=n-a;switch(o=l>.5?f/(2-n-a):f/(n+a),n){case e:s=(t-r)/f+(t<r?6:0);break;case t:s=(r-e)/f+2;break;case r:s=(e-t)/f+4;break}s/=6}return{h:s,s:o,l}}function hslToRgb(e,t,r){var n,a,s;e=bound01(e,360),t=bound01(t,100),r=bound01(r,100);function o(u,m,v){return v<0&&(v+=1),v>1&&(v-=1),v<1/6?u+(m-u)*6*v:v<1/2?m:v<2/3?u+(m-u)*(2/3-v)*6:u}if(t===0)n=a=s=r;else{var l=r<.5?r*(1+t):r+t-r*t,f=2*r-l;n=o(f,l,e+1/3),a=o(f,l,e),s=o(f,l,e-1/3)}return{r:n*255,g:a*255,b:s*255}}function rgbToHsv(e,t,r){e=bound01(e,255),t=bound01(t,255),r=bound01(r,255);var n=Math.max(e,t,r),a=Math.min(e,t,r),s,o,l=n,f=n-a;if(o=n===0?0:f/n,n==a)s=0;else{switch(n){case e:s=(t-r)/f+(t<r?6:0);break;case t:s=(r-e)/f+2;break;case r:s=(e-t)/f+4;break}s/=6}return{h:s,s:o,v:l}}function hsvToRgb(e,t,r){e=bound01(e,360)*6,t=bound01(t,100),r=bound01(r,100);var n=Math.floor(e),a=e-n,s=r*(1-t),o=r*(1-a*t),l=r*(1-(1-a)*t),f=n%6,u=[r,o,s,s,l,r][f],m=[l,r,r,o,s,s][f],v=[s,s,l,r,r,o][f];return{r:u*255,g:m*255,b:v*255}}function rgbToHex(e,t,r,n){var a=[pad2(Math.round(e).toString(16)),pad2(Math.round(t).toString(16)),pad2(Math.round(r).toString(16))];return n&&a[0].charAt(0)==a[0].charAt(1)&&a[1].charAt(0)==a[1].charAt(1)&&a[2].charAt(0)==a[2].charAt(1)?a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0):a.join("")}function rgbaToHex(e,t,r,n,a){var s=[pad2(Math.round(e).toString(16)),pad2(Math.round(t).toString(16)),pad2(Math.round(r).toString(16)),pad2(convertDecimalToHex(n))];return a&&s[0].charAt(0)==s[0].charAt(1)&&s[1].charAt(0)==s[1].charAt(1)&&s[2].charAt(0)==s[2].charAt(1)&&s[3].charAt(0)==s[3].charAt(1)?s[0].charAt(0)+s[1].charAt(0)+s[2].charAt(0)+s[3].charAt(0):s.join("")}function rgbaToArgbHex(e,t,r,n){var a=[pad2(convertDecimalToHex(n)),pad2(Math.round(e).toString(16)),pad2(Math.round(t).toString(16)),pad2(Math.round(r).toString(16))];return a.join("")}tinycolor.equals=function(e,t){return!e||!t?!1:tinycolor(e).toRgbString()==tinycolor(t).toRgbString()};tinycolor.random=function(){return tinycolor.fromRatio({r:Math.random(),g:Math.random(),b:Math.random()})};function _desaturate(e,t){t=t===0?0:t||10;var r=tinycolor(e).toHsl();return r.s-=t/100,r.s=clamp01(r.s),tinycolor(r)}function _saturate(e,t){t=t===0?0:t||10;var r=tinycolor(e).toHsl();return r.s+=t/100,r.s=clamp01(r.s),tinycolor(r)}function _greyscale(e){return tinycolor(e).desaturate(100)}function _lighten(e,t){t=t===0?0:t||10;var r=tinycolor(e).toHsl();return r.l+=t/100,r.l=clamp01(r.l),tinycolor(r)}function _brighten(e,t){t=t===0?0:t||10;var r=tinycolor(e).toRgb();return r.r=Math.max(0,Math.min(255,r.r-Math.round(255*-(t/100)))),r.g=Math.max(0,Math.min(255,r.g-Math.round(255*-(t/100)))),r.b=Math.max(0,Math.min(255,r.b-Math.round(255*-(t/100)))),tinycolor(r)}function _darken(e,t){t=t===0?0:t||10;var r=tinycolor(e).toHsl();return r.l-=t/100,r.l=clamp01(r.l),tinycolor(r)}function _spin(e,t){var r=tinycolor(e).toHsl(),n=(r.h+t)%360;return r.h=n<0?360+n:n,tinycolor(r)}function _complement(e){var t=tinycolor(e).toHsl();return t.h=(t.h+180)%360,tinycolor(t)}function polyad(e,t){if(isNaN(t)||t<=0)throw new Error("Argument to polyad must be a positive number");for(var r=tinycolor(e).toHsl(),n=[tinycolor(e)],a=360/t,s=1;s<t;s++)n.push(tinycolor({h:(r.h+s*a)%360,s:r.s,l:r.l}));return n}function _splitcomplement(e){var t=tinycolor(e).toHsl(),r=t.h;return[tinycolor(e),tinycolor({h:(r+72)%360,s:t.s,l:t.l}),tinycolor({h:(r+216)%360,s:t.s,l:t.l})]}function _analogous(e,t,r){t=t||6,r=r||30;var n=tinycolor(e).toHsl(),a=360/r,s=[tinycolor(e)];for(n.h=(n.h-(a*t>>1)+720)%360;--t;)n.h=(n.h+a)%360,s.push(tinycolor(n));return s}function _monochromatic(e,t){t=t||6;for(var r=tinycolor(e).toHsv(),n=r.h,a=r.s,s=r.v,o=[],l=1/t;t--;)o.push(tinycolor({h:n,s:a,v:s})),s=(s+l)%1;return o}tinycolor.mix=function(e,t,r){r=r===0?0:r||50;var n=tinycolor(e).toRgb(),a=tinycolor(t).toRgb(),s=r/100,o={r:(a.r-n.r)*s+n.r,g:(a.g-n.g)*s+n.g,b:(a.b-n.b)*s+n.b,a:(a.a-n.a)*s+n.a};return tinycolor(o)};tinycolor.readability=function(e,t){var r=tinycolor(e),n=tinycolor(t);return(Math.max(r.getLuminance(),n.getLuminance())+.05)/(Math.min(r.getLuminance(),n.getLuminance())+.05)};tinycolor.isReadable=function(e,t,r){var n=tinycolor.readability(e,t),a,s;switch(s=!1,a=validateWCAG2Parms(r),a.level+a.size){case"AAsmall":case"AAAlarge":s=n>=4.5;break;case"AAlarge":s=n>=3;break;case"AAAsmall":s=n>=7;break}return s};tinycolor.mostReadable=function(e,t,r){var n=null,a=0,s,o,l,f;r=r||{},o=r.includeFallbackColors,l=r.level,f=r.size;for(var u=0;u<t.length;u++)s=tinycolor.readability(e,t[u]),s>a&&(a=s,n=tinycolor(t[u]));return tinycolor.isReadable(e,n,{level:l,size:f})||!o?n:(r.includeFallbackColors=!1,tinycolor.mostReadable(e,["#fff","#000"],r))};var names=tinycolor.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},hexNames=tinycolor.hexNames=flip$1(names);function flip$1(e){var t={};for(var r in e)e.hasOwnProperty(r)&&(t[e[r]]=r);return t}function boundAlpha(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function bound01(e,t){isOnePointZero(e)&&(e="100%");var r=isPercentage(e);return e=Math.min(t,Math.max(0,parseFloat(e))),r&&(e=parseInt(e*t,10)/100),Math.abs(e-t)<1e-6?1:e%t/parseFloat(t)}function clamp01(e){return Math.min(1,Math.max(0,e))}function parseIntFromHex(e){return parseInt(e,16)}function isOnePointZero(e){return typeof e=="string"&&e.indexOf(".")!=-1&&parseFloat(e)===1}function isPercentage(e){return typeof e=="string"&&e.indexOf("%")!=-1}function pad2(e){return e.length==1?"0"+e:""+e}function convertToPercentage(e){return e<=1&&(e=e*100+"%"),e}function convertDecimalToHex(e){return Math.round(parseFloat(e)*255).toString(16)}function convertHexToDecimal(e){return parseIntFromHex(e)/255}var matchers=function(){var e="[-\\+]?\\d+%?",t="[-\\+]?\\d*\\.\\d+%?",r="(?:"+t+")|(?:"+e+")",n="[\\s|\\(]+("+r+")[,|\\s]+("+r+")[,|\\s]+("+r+")\\s*\\)?",a="[\\s|\\(]+("+r+")[,|\\s]+("+r+")[,|\\s]+("+r+")[,|\\s]+("+r+")\\s*\\)?";return{CSS_UNIT:new RegExp(r),rgb:new RegExp("rgb"+n),rgba:new RegExp("rgba"+a),hsl:new RegExp("hsl"+n),hsla:new RegExp("hsla"+a),hsv:new RegExp("hsv"+n),hsva:new RegExp("hsva"+a),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/}}();function isValidCSSUnit(e){return!!matchers.CSS_UNIT.exec(e)}function stringInputToObject(e){e=e.replace(trimLeft,"").replace(trimRight,"").toLowerCase();var t=!1;if(names[e])e=names[e],t=!0;else if(e=="transparent")return{r:0,g:0,b:0,a:0,format:"name"};var r;return(r=matchers.rgb.exec(e))?{r:r[1],g:r[2],b:r[3]}:(r=matchers.rgba.exec(e))?{r:r[1],g:r[2],b:r[3],a:r[4]}:(r=matchers.hsl.exec(e))?{h:r[1],s:r[2],l:r[3]}:(r=matchers.hsla.exec(e))?{h:r[1],s:r[2],l:r[3],a:r[4]}:(r=matchers.hsv.exec(e))?{h:r[1],s:r[2],v:r[3]}:(r=matchers.hsva.exec(e))?{h:r[1],s:r[2],v:r[3],a:r[4]}:(r=matchers.hex8.exec(e))?{r:parseIntFromHex(r[1]),g:parseIntFromHex(r[2]),b:parseIntFromHex(r[3]),a:convertHexToDecimal(r[4]),format:t?"name":"hex8"}:(r=matchers.hex6.exec(e))?{r:parseIntFromHex(r[1]),g:parseIntFromHex(r[2]),b:parseIntFromHex(r[3]),format:t?"name":"hex"}:(r=matchers.hex4.exec(e))?{r:parseIntFromHex(r[1]+""+r[1]),g:parseIntFromHex(r[2]+""+r[2]),b:parseIntFromHex(r[3]+""+r[3]),a:convertHexToDecimal(r[4]+""+r[4]),format:t?"name":"hex8"}:(r=matchers.hex3.exec(e))?{r:parseIntFromHex(r[1]+""+r[1]),g:parseIntFromHex(r[2]+""+r[2]),b:parseIntFromHex(r[3]+""+r[3]),format:t?"name":"hex"}:!1}function validateWCAG2Parms(e){var t,r;return e=e||{level:"AA",size:"small"},t=(e.level||"AA").toUpperCase(),r=(e.size||"small").toLowerCase(),t!=="AA"&&t!=="AAA"&&(t="AA"),r!=="small"&&r!=="large"&&(r="small"),{level:t,size:r}}function ImagePHash(e,t){this.size=this.size||e,this.smallerSize=this.smallerSize||t,initCoefficients(this.size)}ImagePHash.prototype.size=32;ImagePHash.prototype.smallerSize=8;ImagePHash.prototype.distance=function(e,t){let r=0;for(let n=0;n<e.length;n++)e[n]!==t[n]&&r++;return r/e.length};ImagePHash.prototype.getHash=function(e){e=e.clone().resize(this.size,this.size),e.grayscale();const t=[];for(let o=0;o<e.bitmap.width;o++){t[o]=[];for(let l=0;l<e.bitmap.height;l++)t[o][l]=intToRGBA(e.getPixelColor(o,l)).b}const r=applyDCT(t,this.size);let n=0;for(let o=0;o<this.smallerSize;o++)for(let l=0;l<this.smallerSize;l++)n+=r[o][l];const a=n/(this.smallerSize*this.smallerSize);let s="";for(let o=0;o<this.smallerSize;o++)for(let l=0;l<this.smallerSize;l++)s+=r[o][l]>a?"1":"0";return s};function intToRGBA(e){const t={};return t.r=Math.floor(e/Math.pow(256,3)),t.g=Math.floor((e-t.r*Math.pow(256,3))/Math.pow(256,2)),t.b=Math.floor((e-t.r*Math.pow(256,3)-t.g*Math.pow(256,2))/Math.pow(256,1)),t.a=Math.floor((e-t.r*Math.pow(256,3)-t.g*Math.pow(256,2)-t.b*Math.pow(256,1))/Math.pow(256,0)),t}const c=[];function initCoefficients(e){for(let t=1;t<e;t++)c[t]=1;c[0]=1/Math.sqrt(2)}function applyDCT(e,t){const r=t,n=[];for(let a=0;a<r;a++){n[a]=[];for(let s=0;s<r;s++){let o=0;for(let l=0;l<r;l++)for(let f=0;f<r;f++)o+=Math.cos((2*l+1)/(2*r)*a*Math.PI)*Math.cos((2*f+1)/(2*r)*s*Math.PI)*e[l][f];o*=c[a]*c[s]/4,n[a][s]=o}}return n}var g$2=typeof globalThis<"u"&&globalThis||typeof self<"u"&&self||typeof global$1<"u"&&global$1||{},support={searchParams:"URLSearchParams"in g$2,iterable:"Symbol"in g$2&&"iterator"in Symbol,blob:"FileReader"in g$2&&"Blob"in g$2&&function(){try{return new Blob,!0}catch{return!1}}(),formData:"FormData"in g$2,arrayBuffer:"ArrayBuffer"in g$2};function isDataView(e){return e&&DataView.prototype.isPrototypeOf(e)}if(support.arrayBuffer)var viewClasses=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],isArrayBufferView=ArrayBuffer.isView||function(e){return e&&viewClasses.indexOf(Object.prototype.toString.call(e))>-1};function normalizeName(e){if(typeof e!="string"&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e)||e==="")throw new TypeError('Invalid character in header field name: "'+e+'"');return e.toLowerCase()}function normalizeValue(e){return typeof e!="string"&&(e=String(e)),e}function iteratorFor(e){var t={next:function(){var r=e.shift();return{done:r===void 0,value:r}}};return support.iterable&&(t[Symbol.iterator]=function(){return t}),t}function Headers(e){this.map={},e instanceof Headers?e.forEach(function(t,r){this.append(r,t)},this):Array.isArray(e)?e.forEach(function(t){if(t.length!=2)throw new TypeError("Headers constructor: expected name/value pair to be length 2, found"+t.length);this.append(t[0],t[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}Headers.prototype.append=function(e,t){e=normalizeName(e),t=normalizeValue(t);var r=this.map[e];this.map[e]=r?r+", "+t:t};Headers.prototype.delete=function(e){delete this.map[normalizeName(e)]};Headers.prototype.get=function(e){return e=normalizeName(e),this.has(e)?this.map[e]:null};Headers.prototype.has=function(e){return this.map.hasOwnProperty(normalizeName(e))};Headers.prototype.set=function(e,t){this.map[normalizeName(e)]=normalizeValue(t)};Headers.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)};Headers.prototype.keys=function(){var e=[];return this.forEach(function(t,r){e.push(r)}),iteratorFor(e)};Headers.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),iteratorFor(e)};Headers.prototype.entries=function(){var e=[];return this.forEach(function(t,r){e.push([r,t])}),iteratorFor(e)};support.iterable&&(Headers.prototype[Symbol.iterator]=Headers.prototype.entries);function consumed(e){if(!e._noBody){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}}function fileReaderReady(e){return new Promise(function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}})}function readBlobAsArrayBuffer(e){var t=new FileReader,r=fileReaderReady(t);return t.readAsArrayBuffer(e),r}function readBlobAsText(e){var t=new FileReader,r=fileReaderReady(t),n=/charset=([A-Za-z0-9_-]+)/.exec(e.type),a=n?n[1]:"utf-8";return t.readAsText(e,a),r}function readArrayBufferAsText(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}function bufferClone(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function Body(){return this.bodyUsed=!1,this._initBody=function(e){this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?typeof e=="string"?this._bodyText=e:support.blob&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:support.formData&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:support.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():support.arrayBuffer&&support.blob&&isDataView(e)?(this._bodyArrayBuffer=bufferClone(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):support.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(e)||isArrayBufferView(e))?this._bodyArrayBuffer=bufferClone(e):this._bodyText=e=Object.prototype.toString.call(e):(this._noBody=!0,this._bodyText=""),this.headers.get("content-type")||(typeof e=="string"?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):support.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},support.blob&&(this.blob=function(){var e=consumed(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))}),this.arrayBuffer=function(){if(this._bodyArrayBuffer){var e=consumed(this);return e||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}else{if(support.blob)return this.blob().then(readBlobAsArrayBuffer);throw new Error("could not read as ArrayBuffer")}},this.text=function(){var e=consumed(this);if(e)return e;if(this._bodyBlob)return readBlobAsText(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},support.formData&&(this.formData=function(){return this.text().then(decode$3)}),this.json=function(){return this.text().then(JSON.parse)},this}var methods=["CONNECT","DELETE","GET","HEAD","OPTIONS","PATCH","POST","PUT","TRACE"];function normalizeMethod(e){var t=e.toUpperCase();return methods.indexOf(t)>-1?t:e}function Request(e,t){if(!(this instanceof Request))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');t=t||{};var r=t.body;if(e instanceof Request){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new Headers(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,!r&&e._bodyInit!=null&&(r=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",(t.headers||!this.headers)&&(this.headers=new Headers(t.headers)),this.method=normalizeMethod(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal||function(){if("AbortController"in g$2){var s=new AbortController;return s.signal}}(),this.referrer=null,(this.method==="GET"||this.method==="HEAD")&&r)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(r),(this.method==="GET"||this.method==="HEAD")&&(t.cache==="no-store"||t.cache==="no-cache")){var n=/([?&])_=[^&]*/;if(n.test(this.url))this.url=this.url.replace(n,"$1_="+new Date().getTime());else{var a=/\?/;this.url+=(a.test(this.url)?"&":"?")+"_="+new Date().getTime()}}}Request.prototype.clone=function(){return new Request(this,{body:this._bodyInit})};function decode$3(e){var t=new FormData;return e.trim().split("&").forEach(function(r){if(r){var n=r.split("="),a=n.shift().replace(/\+/g," "),s=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(a),decodeURIComponent(s))}}),t}function parseHeaders$2(e){var t=new Headers,r=e.replace(/\r?\n[\t ]+/g," ");return r.split("\r").map(function(n){return n.indexOf(`
`)===0?n.substr(1,n.length):n}).forEach(function(n){var a=n.split(":"),s=a.shift().trim();if(s){var o=a.join(":").trim();try{t.append(s,o)}catch(l){console.warn("Response "+l.message)}}}),t}Body.call(Request.prototype);function Response(e,t){if(!(this instanceof Response))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');if(t||(t={}),this.type="default",this.status=t.status===void 0?200:t.status,this.status<200||this.status>599)throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");this.ok=this.status>=200&&this.status<300,this.statusText=t.statusText===void 0?"":""+t.statusText,this.headers=new Headers(t.headers),this.url=t.url||"",this._initBody(e)}Body.call(Response.prototype);Response.prototype.clone=function(){return new Response(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new Headers(this.headers),url:this.url})};Response.error=function(){var e=new Response(null,{status:200,statusText:""});return e.status=0,e.type="error",e};var redirectStatuses=[301,302,303,307,308];Response.redirect=function(e,t){if(redirectStatuses.indexOf(t)===-1)throw new RangeError("Invalid status code");return new Response(null,{status:t,headers:{location:e}})};var DOMException=g$2.DOMException;try{new DOMException}catch{DOMException=function(t,r){this.message=t,this.name=r;var n=Error(t);this.stack=n.stack},DOMException.prototype=Object.create(Error.prototype),DOMException.prototype.constructor=DOMException}function fetch$1(e,t){return new Promise(function(r,n){var a=new Request(e,t);if(a.signal&&a.signal.aborted)return n(new DOMException("Aborted","AbortError"));var s=new XMLHttpRequest;function o(){s.abort()}s.onload=function(){var u={status:s.status,statusText:s.statusText,headers:parseHeaders$2(s.getAllResponseHeaders()||"")};u.url="responseURL"in s?s.responseURL:u.headers.get("X-Request-URL");var m="response"in s?s.response:s.responseText;setTimeout(function(){r(new Response(m,u))},0)},s.onerror=function(){setTimeout(function(){n(new TypeError("Network request failed"))},0)},s.ontimeout=function(){setTimeout(function(){n(new TypeError("Network request failed"))},0)},s.onabort=function(){setTimeout(function(){n(new DOMException("Aborted","AbortError"))},0)};function l(u){try{return u===""&&g$2.location.href?g$2.location.href:u}catch{return u}}if(s.open(a.method,l(a.url),!0),a.credentials==="include"?s.withCredentials=!0:a.credentials==="omit"&&(s.withCredentials=!1),"responseType"in s&&(support.blob?s.responseType="blob":support.arrayBuffer&&(s.responseType="arraybuffer")),t&&typeof t.headers=="object"&&!(t.headers instanceof Headers||g$2.Headers&&t.headers instanceof g$2.Headers)){var f=[];Object.getOwnPropertyNames(t.headers).forEach(function(u){f.push(normalizeName(u)),s.setRequestHeader(u,normalizeValue(t.headers[u]))}),a.headers.forEach(function(u,m){f.indexOf(m)===-1&&s.setRequestHeader(m,u)})}else a.headers.forEach(function(u,m){s.setRequestHeader(m,u)});a.signal&&(a.signal.addEventListener("abort",o),s.onreadystatechange=function(){s.readyState===4&&a.signal.removeEventListener("abort",o)}),s.send(typeof a._bodyInit>"u"?null:a._bodyInit)})}fetch$1.polyfill=!0;g$2.fetch||(g$2.fetch=fetch$1,g$2.Headers=Headers,g$2.Request=Request,g$2.Response=Response);self.fetch.bind(self);const request=(e,t)=>{let{url:r,...n}=e;fetch(r,n).then(a=>{if(a.ok)return a.arrayBuffer().catch(s=>{throw new Error(`Response is not a buffer for url ${r}. Error: ${s.message}`)});throw new Error(`HTTP Status ${a.status} for url ${r}`)}).then(a=>t(null,a)).catch(a=>t(a))},AUTO=-1,HORIZONTAL_ALIGN_LEFT=1,HORIZONTAL_ALIGN_CENTER=2,HORIZONTAL_ALIGN_RIGHT=4,VERTICAL_ALIGN_TOP=8,VERTICAL_ALIGN_MIDDLE=16,VERTICAL_ALIGN_BOTTOM=32,BLEND_SOURCE_OVER="srcOver",BLEND_DESTINATION_OVER="dstOver",BLEND_MULTIPLY="multiply",BLEND_ADD="add",BLEND_SCREEN="screen",BLEND_OVERLAY="overlay",BLEND_DARKEN="darken",BLEND_LIGHTEN="lighten",BLEND_HARDLIGHT="hardLight",BLEND_DIFFERENCE="difference",BLEND_EXCLUSION="exclusion",EDGE_EXTEND=1,EDGE_WRAP=2,EDGE_CROP=3,constants$7=Object.freeze(Object.defineProperty({__proto__:null,AUTO,BLEND_ADD,BLEND_DARKEN,BLEND_DESTINATION_OVER,BLEND_DIFFERENCE,BLEND_EXCLUSION,BLEND_HARDLIGHT,BLEND_LIGHTEN,BLEND_MULTIPLY,BLEND_OVERLAY,BLEND_SCREEN,BLEND_SOURCE_OVER,EDGE_CROP,EDGE_EXTEND,EDGE_WRAP,HORIZONTAL_ALIGN_CENTER,HORIZONTAL_ALIGN_LEFT,HORIZONTAL_ALIGN_RIGHT,VERTICAL_ALIGN_BOTTOM,VERTICAL_ALIGN_MIDDLE,VERTICAL_ALIGN_TOP},Symbol.toStringTag,{value:"Module"}));function srcOver(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=(e.r*e.a+t.r*t.a*(1-e.a))/n,s=(e.g*e.a+t.g*t.a*(1-e.a))/n,o=(e.b*e.a+t.b*t.a*(1-e.a))/n;return{r:a,g:s,b:o,a:n}}function dstOver(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=(t.r*t.a+e.r*e.a*(1-t.a))/n,s=(t.g*t.a+e.g*e.a*(1-t.a))/n,o=(t.b*t.a+e.b*e.a*(1-t.a))/n;return{r:a,g:s,b:o,a:n}}function multiply(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=e.r*e.a,s=e.g*e.a,o=e.b*e.a,l=t.r*t.a,f=t.g*t.a,u=t.b*t.a,m=(a*l+a*(1-t.a)+l*(1-e.a))/n,v=(s*f+s*(1-t.a)+f*(1-e.a))/n,b=(o*u+o*(1-t.a)+u*(1-e.a))/n;return{r:m,g:v,b,a:n}}function add(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=e.r*e.a,s=e.g*e.a,o=e.b*e.a,l=t.r*t.a,f=t.g*t.a,u=t.b*t.a,m=(a+l)/n,v=(s+f)/n,b=(o+u)/n;return{r:m,g:v,b,a:n}}function screen(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=e.r*e.a,s=e.g*e.a,o=e.b*e.a,l=t.r*t.a,f=t.g*t.a,u=t.b*t.a,m=(a*t.a+l*e.a-a*l+a*(1-t.a)+l*(1-e.a))/n,v=(s*t.a+f*e.a-s*f+s*(1-t.a)+f*(1-e.a))/n,b=(o*t.a+u*e.a-o*u+o*(1-t.a)+u*(1-e.a))/n;return{r:m,g:v,b,a:n}}function overlay(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=e.r*e.a,s=e.g*e.a,o=e.b*e.a,l=t.r*t.a,f=t.g*t.a,u=t.b*t.a,m=(2*l<=t.a?2*a*l+a*(1-t.a)+l*(1-e.a):a*(1+t.a)+l*(1+e.a)-2*l*a-t.a*e.a)/n,v=(2*f<=t.a?2*s*f+s*(1-t.a)+f*(1-e.a):s*(1+t.a)+f*(1+e.a)-2*f*s-t.a*e.a)/n,b=(2*u<=t.a?2*o*u+o*(1-t.a)+u*(1-e.a):o*(1+t.a)+u*(1+e.a)-2*u*o-t.a*e.a)/n;return{r:m,g:v,b,a:n}}function darken(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=e.r*e.a,s=e.g*e.a,o=e.b*e.a,l=t.r*t.a,f=t.g*t.a,u=t.b*t.a,m=(Math.min(a*t.a,l*e.a)+a*(1-t.a)+l*(1-e.a))/n,v=(Math.min(s*t.a,f*e.a)+s*(1-t.a)+f*(1-e.a))/n,b=(Math.min(o*t.a,u*e.a)+o*(1-t.a)+u*(1-e.a))/n;return{r:m,g:v,b,a:n}}function lighten(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=e.r*e.a,s=e.g*e.a,o=e.b*e.a,l=t.r*t.a,f=t.g*t.a,u=t.b*t.a,m=(Math.max(a*t.a,l*e.a)+a*(1-t.a)+l*(1-e.a))/n,v=(Math.max(s*t.a,f*e.a)+s*(1-t.a)+f*(1-e.a))/n,b=(Math.max(o*t.a,u*e.a)+o*(1-t.a)+u*(1-e.a))/n;return{r:m,g:v,b,a:n}}function hardLight(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=e.r*e.a,s=e.g*e.a,o=e.b*e.a,l=t.r*t.a,f=t.g*t.a,u=t.b*t.a,m=(2*a<=e.a?2*a*l+a*(1-t.a)+l*(1-e.a):a*(1+t.a)+l*(1+e.a)-2*l*a-t.a*e.a)/n,v=(2*s<=e.a?2*s*f+s*(1-t.a)+f*(1-e.a):s*(1+t.a)+f*(1+e.a)-2*f*s-t.a*e.a)/n,b=(2*o<=e.a?2*o*u+o*(1-t.a)+u*(1-e.a):o*(1+t.a)+u*(1+e.a)-2*u*o-t.a*e.a)/n;return{r:m,g:v,b,a:n}}function difference(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=e.r*e.a,s=e.g*e.a,o=e.b*e.a,l=t.r*t.a,f=t.g*t.a,u=t.b*t.a,m=(a+l-2*Math.min(a*t.a,l*e.a))/n,v=(s+f-2*Math.min(s*t.a,f*e.a))/n,b=(o+u-2*Math.min(o*t.a,u*e.a))/n;return{r:m,g:v,b,a:n}}function exclusion(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;e.a*=r;const n=t.a+e.a-t.a*e.a,a=e.r*e.a,s=e.g*e.a,o=e.b*e.a,l=t.r*t.a,f=t.g*t.a,u=t.b*t.a,m=(a*t.a+l*e.a-2*a*l+a*(1-t.a)+l*(1-e.a))/n,v=(s*t.a+f*e.a-2*s*f+s*(1-t.a)+f*(1-e.a))/n,b=(o*t.a+u*e.a-2*o*u+o*(1-t.a)+u*(1-e.a))/n;return{r:m,g:v,b,a:n}}const compositeModes=Object.freeze(Object.defineProperty({__proto__:null,add,darken,difference,dstOver,exclusion,hardLight,lighten,multiply,overlay,screen,srcOver},Symbol.toStringTag,{value:"Module"}));function composite(e,t,r){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},a=arguments.length>4?arguments[4]:void 0;if(typeof n=="function"&&(a=n,n={}),!(e instanceof this.constructor))return throwError.call(this,"The source must be a Jimp image",a);if(typeof t!="number"||typeof r!="number")return throwError.call(this,"x and y must be numbers",a);let{mode:s,opacitySource:o,opacityDest:l}=n;s||(s=BLEND_SOURCE_OVER),(typeof o!="number"||o<0||o>1)&&(o=1),(typeof l!="number"||l<0||l>1)&&(l=1);const f=compositeModes[s];t=Math.round(t),r=Math.round(r);const u=this;return l!==1&&u.opacity(l),e.scanQuiet(0,0,e.bitmap.width,e.bitmap.height,function(m,v,b){const P=u.getPixelIndex(t+m,r+v,EDGE_CROP);if(P===-1)return;const F=f({r:this.bitmap.data[b+0]/255,g:this.bitmap.data[b+1]/255,b:this.bitmap.data[b+2]/255,a:this.bitmap.data[b+3]/255},{r:u.bitmap.data[P+0]/255,g:u.bitmap.data[P+1]/255,b:u.bitmap.data[P+2]/255,a:u.bitmap.data[P+3]/255},o);u.bitmap.data[P+0]=this.constructor.limit255(F.r*255),u.bitmap.data[P+1]=this.constructor.limit255(F.g*255),u.bitmap.data[P+2]=this.constructor.limit255(F.b*255),u.bitmap.data[P+3]=this.constructor.limit255(F.a*255)}),isNodePattern(a)&&a.call(this,null,this),this}const promisify=function(e,t){for(var r=arguments.length,n=new Array(r>2?r-2:0),a=2;a<r;a++)n[a-2]=arguments[a];return new Promise((s,o)=>{n.push((l,f)=>{l&&o(l),s(f)}),e.bind(t)(...n)})},promisify$1=promisify,mimeTypes={},findType=e=>Object.entries(mimeTypes).find(t=>t[1].includes(e))||[],addType=(e,t)=>{mimeTypes[e]=t},getType=e=>{const t=e.split("/").slice(-1),r=t[t.length-1].split(".").pop();return findType(r)[0]},getExtension=e=>(mimeTypes[e.toLowerCase()]||[])[0];var lib$2={},FsPromise={};const require$$0=getAugmentedNamespace(__viteBrowserExternal);Object.defineProperty(FsPromise,"__esModule",{value:!0});FsPromise.readFile=FsPromise.writeFileSync=FsPromise.writeFile=FsPromise.read=FsPromise.open=FsPromise.close=FsPromise.stat=FsPromise.createReadStream=FsPromise.pathExists=void 0;const fs$1=require$$0;FsPromise.pathExists=fs$1.existsSync;FsPromise.createReadStream=fs$1.createReadStream;async function stat(e){return new Promise((t,r)=>{fs$1.stat(e,(n,a)=>{n?r(n):t(a)})})}FsPromise.stat=stat;async function close(e){return new Promise((t,r)=>{fs$1.close(e,n=>{n?r(n):t()})})}FsPromise.close=close;async function open(e,t){return new Promise((r,n)=>{fs$1.open(e,t,(a,s)=>{a?n(a):r(s)})})}FsPromise.open=open;async function read(e,t,r,n,a){return new Promise((s,o)=>{fs$1.read(e,t,r,n,a,(l,f,u)=>{l?o(l):s({bytesRead:f,buffer:u})})})}FsPromise.read=read;async function writeFile(e,t){return new Promise((r,n)=>{fs$1.writeFile(e,t,a=>{a?n(a):r()})})}FsPromise.writeFile=writeFile;function writeFileSync(e,t){fs$1.writeFileSync(e,t)}FsPromise.writeFileSync=writeFileSync;async function readFile(e){return new Promise((t,r)=>{fs$1.readFile(e,(n,a)=>{n?r(n):t(a)})})}FsPromise.readFile=readFile;var core$2={},ReadStreamTokenizer$1={},AbstractTokenizer$1={},lib$1={},EndOfFileStream={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.EndOfStreamError=e.defaultMessages=void 0,e.defaultMessages="End-Of-Stream";class t extends Error{constructor(){super(e.defaultMessages)}}e.EndOfStreamError=t})(EndOfFileStream);var StreamReader={},Deferred$1={};Object.defineProperty(Deferred$1,"__esModule",{value:!0});Deferred$1.Deferred=void 0;class Deferred{constructor(){this.resolve=()=>null,this.reject=()=>null,this.promise=new Promise((t,r)=>{this.reject=r,this.resolve=t})}}Deferred$1.Deferred=Deferred;(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.StreamReader=e.EndOfStreamError=void 0;const t=EndOfFileStream,r=Deferred$1;var n=EndOfFileStream;Object.defineProperty(e,"EndOfStreamError",{enumerable:!0,get:function(){return n.EndOfStreamError}});const a=1*1024*1024;class s{constructor(l){if(this.s=l,this.deferred=null,this.endOfStream=!1,this.peekQueue=[],!l.read||!l.once)throw new Error("Expected an instance of stream.Readable");this.s.once("end",()=>this.reject(new t.EndOfStreamError)),this.s.once("error",f=>this.reject(f)),this.s.once("close",()=>this.reject(new Error("Stream closed")))}async peek(l,f,u){const m=await this.read(l,f,u);return this.peekQueue.push(l.subarray(f,f+m)),m}async read(l,f,u){if(u===0)return 0;if(this.peekQueue.length===0&&this.endOfStream)throw new t.EndOfStreamError;let m=u,v=0;for(;this.peekQueue.length>0&&m>0;){const b=this.peekQueue.pop();if(!b)throw new Error("peekData should be defined");const P=Math.min(b.length,m);l.set(b.subarray(0,P),f+v),v+=P,m-=P,P<b.length&&this.peekQueue.push(b.subarray(P))}for(;m>0&&!this.endOfStream;){const b=Math.min(m,a),P=await this.readFromStream(l,f+v,b);if(v+=P,P<b)break;m-=P}return v}async readFromStream(l,f,u){const m=this.s.read(u);if(m)return l.set(m,f),m.length;{const v={buffer:l,offset:f,length:u,deferred:new r.Deferred};return this.deferred=v.deferred,this.s.once("readable",()=>{this.readDeferred(v)}),v.deferred.promise}}readDeferred(l){const f=this.s.read(l.length);f?(l.buffer.set(f,l.offset),l.deferred.resolve(f.length),this.deferred=null):this.s.once("readable",()=>{this.readDeferred(l)})}reject(l){this.endOfStream=!0,this.deferred&&(this.deferred.reject(l),this.deferred=null)}}e.StreamReader=s})(StreamReader);(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.StreamReader=e.EndOfStreamError=void 0;var t=EndOfFileStream;Object.defineProperty(e,"EndOfStreamError",{enumerable:!0,get:function(){return t.EndOfStreamError}});var r=StreamReader;Object.defineProperty(e,"StreamReader",{enumerable:!0,get:function(){return r.StreamReader}})})(lib$1);Object.defineProperty(AbstractTokenizer$1,"__esModule",{value:!0});AbstractTokenizer$1.AbstractTokenizer=void 0;const peek_readable_1$3=lib$1;class AbstractTokenizer{constructor(t){this.position=0,this.numBuffer=new Uint8Array(8),this.fileInfo=t||{}}async readToken(t,r=this.position){const n=Buffer$1.alloc(t.len);if(await this.readBuffer(n,{position:r})<t.len)throw new peek_readable_1$3.EndOfStreamError;return t.get(n,0)}async peekToken(t,r=this.position){const n=Buffer$1.alloc(t.len);if(await this.peekBuffer(n,{position:r})<t.len)throw new peek_readable_1$3.EndOfStreamError;return t.get(n,0)}async readNumber(t){if(await this.readBuffer(this.numBuffer,{length:t.len})<t.len)throw new peek_readable_1$3.EndOfStreamError;return t.get(this.numBuffer,0)}async peekNumber(t){if(await this.peekBuffer(this.numBuffer,{length:t.len})<t.len)throw new peek_readable_1$3.EndOfStreamError;return t.get(this.numBuffer,0)}async ignore(t){if(this.fileInfo.size!==void 0){const r=this.fileInfo.size-this.position;if(t>r)return this.position+=r,r}return this.position+=t,t}async close(){}normalizeOptions(t,r){if(r&&r.position!==void 0&&r.position<this.position)throw new Error("`options.position` must be equal or greater than `tokenizer.position`");return r?{mayBeLess:r.mayBeLess===!0,offset:r.offset?r.offset:0,length:r.length?r.length:t.length-(r.offset?r.offset:0),position:r.position?r.position:this.position}:{mayBeLess:!1,offset:0,length:t.length,position:this.position}}}AbstractTokenizer$1.AbstractTokenizer=AbstractTokenizer;Object.defineProperty(ReadStreamTokenizer$1,"__esModule",{value:!0});ReadStreamTokenizer$1.ReadStreamTokenizer=void 0;const AbstractTokenizer_1$2=AbstractTokenizer$1,peek_readable_1$2=lib$1,maxBufferSize=256e3;class ReadStreamTokenizer extends AbstractTokenizer_1$2.AbstractTokenizer{constructor(t,r){super(r),this.streamReader=new peek_readable_1$2.StreamReader(t)}async getFileInfo(){return this.fileInfo}async readBuffer(t,r){const n=this.normalizeOptions(t,r),a=n.position-this.position;if(a>0)return await this.ignore(a),this.readBuffer(t,r);if(a<0)throw new Error("`options.position` must be equal or greater than `tokenizer.position`");if(n.length===0)return 0;const s=await this.streamReader.read(t,n.offset,n.length);if(this.position+=s,(!r||!r.mayBeLess)&&s<n.length)throw new peek_readable_1$2.EndOfStreamError;return s}async peekBuffer(t,r){const n=this.normalizeOptions(t,r);let a=0;if(n.position){const s=n.position-this.position;if(s>0){const o=new Uint8Array(n.length+s);return a=await this.peekBuffer(o,{mayBeLess:n.mayBeLess}),t.set(o.subarray(s),n.offset),a-s}else if(s<0)throw new Error("Cannot peek from a negative offset in a stream")}if(n.length>0){try{a=await this.streamReader.peek(t,n.offset,n.length)}catch(s){if(r&&r.mayBeLess&&s instanceof peek_readable_1$2.EndOfStreamError)return 0;throw s}if(!n.mayBeLess&&a<n.length)throw new peek_readable_1$2.EndOfStreamError}return a}async ignore(t){const r=Math.min(maxBufferSize,t),n=new Uint8Array(r);let a=0;for(;a<t;){const s=t-a,o=await this.readBuffer(n,{length:Math.min(r,s)});if(o<0)return o;a+=o}return a}}ReadStreamTokenizer$1.ReadStreamTokenizer=ReadStreamTokenizer;var BufferTokenizer$1={};Object.defineProperty(BufferTokenizer$1,"__esModule",{value:!0});BufferTokenizer$1.BufferTokenizer=void 0;const peek_readable_1$1=lib$1,AbstractTokenizer_1$1=AbstractTokenizer$1;class BufferTokenizer extends AbstractTokenizer_1$1.AbstractTokenizer{constructor(t,r){super(r),this.uint8Array=t,this.fileInfo.size=this.fileInfo.size?this.fileInfo.size:t.length}async readBuffer(t,r){if(r&&r.position){if(r.position<this.position)throw new Error("`options.position` must be equal or greater than `tokenizer.position`");this.position=r.position}const n=await this.peekBuffer(t,r);return this.position+=n,n}async peekBuffer(t,r){const n=this.normalizeOptions(t,r),a=Math.min(this.uint8Array.length-n.position,n.length);if(!n.mayBeLess&&a<n.length)throw new peek_readable_1$1.EndOfStreamError;return t.set(this.uint8Array.subarray(n.position,n.position+a),n.offset),a}async close(){}}BufferTokenizer$1.BufferTokenizer=BufferTokenizer;(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.fromBuffer=e.fromStream=e.EndOfStreamError=void 0;const t=ReadStreamTokenizer$1,r=BufferTokenizer$1;var n=lib$1;Object.defineProperty(e,"EndOfStreamError",{enumerable:!0,get:function(){return n.EndOfStreamError}});function a(o,l){return l=l||{},new t.ReadStreamTokenizer(o,l)}e.fromStream=a;function s(o,l){return new r.BufferTokenizer(o,l)}e.fromBuffer=s})(core$2);var FileTokenizer$1={};Object.defineProperty(FileTokenizer$1,"__esModule",{value:!0});FileTokenizer$1.fromFile=FileTokenizer$1.FileTokenizer=void 0;const AbstractTokenizer_1=AbstractTokenizer$1,peek_readable_1=lib$1,fs=FsPromise;class FileTokenizer extends AbstractTokenizer_1.AbstractTokenizer{constructor(t,r){super(r),this.fd=t}async readBuffer(t,r){const n=this.normalizeOptions(t,r);this.position=n.position;const a=await fs.read(this.fd,t,n.offset,n.length,n.position);if(this.position+=a.bytesRead,a.bytesRead<n.length&&(!r||!r.mayBeLess))throw new peek_readable_1.EndOfStreamError;return a.bytesRead}async peekBuffer(t,r){const n=this.normalizeOptions(t,r),a=await fs.read(this.fd,t,n.offset,n.length,n.position);if(!n.mayBeLess&&a.bytesRead<n.length)throw new peek_readable_1.EndOfStreamError;return a.bytesRead}async close(){return fs.close(this.fd)}}FileTokenizer$1.FileTokenizer=FileTokenizer;async function fromFile$1(e){const t=await fs.stat(e);if(!t.isFile)throw new Error(`File not a file: ${e}`);const r=await fs.open(e,"r");return new FileTokenizer(r,{path:e,size:t.size})}FileTokenizer$1.fromFile=fromFile$1;(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.fromStream=e.fromBuffer=e.EndOfStreamError=e.fromFile=void 0;const t=FsPromise,r=core$2;var n=FileTokenizer$1;Object.defineProperty(e,"fromFile",{enumerable:!0,get:function(){return n.fromFile}});var a=core$2;Object.defineProperty(e,"EndOfStreamError",{enumerable:!0,get:function(){return a.EndOfStreamError}}),Object.defineProperty(e,"fromBuffer",{enumerable:!0,get:function(){return a.fromBuffer}});async function s(o,l){if(l=l||{},o.path){const f=await t.stat(o.path);l.path=o.path,l.size=f.size}return r.fromStream(o,l)}e.fromStream=s})(lib$2);var lib={},ieee754={};/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ieee754.read=function(e,t,r,n,a){var s,o,l=a*8-n-1,f=(1<<l)-1,u=f>>1,m=-7,v=r?a-1:0,b=r?-1:1,P=e[t+v];for(v+=b,s=P&(1<<-m)-1,P>>=-m,m+=l;m>0;s=s*256+e[t+v],v+=b,m-=8);for(o=s&(1<<-m)-1,s>>=-m,m+=n;m>0;o=o*256+e[t+v],v+=b,m-=8);if(s===0)s=1-u;else{if(s===f)return o?NaN:(P?-1:1)*(1/0);o=o+Math.pow(2,n),s=s-u}return(P?-1:1)*o*Math.pow(2,s-n)};ieee754.write=function(e,t,r,n,a,s){var o,l,f,u=s*8-a-1,m=(1<<u)-1,v=m>>1,b=a===23?Math.pow(2,-24)-Math.pow(2,-77):0,P=n?0:s-1,F=n?1:-1,C=t<0||t===0&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(l=isNaN(t)?1:0,o=m):(o=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-o))<1&&(o--,f*=2),o+v>=1?t+=b/f:t+=b*Math.pow(2,1-v),t*f>=2&&(o++,f/=2),o+v>=m?(l=0,o=m):o+v>=1?(l=(t*f-1)*Math.pow(2,a),o=o+v):(l=t*Math.pow(2,v-1)*Math.pow(2,a),o=0));a>=8;e[r+P]=l&255,P+=F,l/=256,a-=8);for(o=o<<a|l,u+=a;u>0;e[r+P]=o&255,P+=F,o/=256,u-=8);e[r+P-F]|=C*128};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.AnsiStringType=e.StringType=e.BufferType=e.Uint8ArrayType=e.IgnoreType=e.Float80_LE=e.Float80_BE=e.Float64_LE=e.Float64_BE=e.Float32_LE=e.Float32_BE=e.Float16_LE=e.Float16_BE=e.INT64_BE=e.UINT64_BE=e.INT64_LE=e.UINT64_LE=e.INT32_LE=e.INT32_BE=e.INT24_BE=e.INT24_LE=e.INT16_LE=e.INT16_BE=e.INT8=e.UINT32_BE=e.UINT32_LE=e.UINT24_BE=e.UINT24_LE=e.UINT16_BE=e.UINT16_LE=e.UINT8=void 0;const t=ieee754;function r(f){return new DataView(f.buffer,f.byteOffset)}e.UINT8={len:1,get(f,u){return r(f).getUint8(u)},put(f,u,m){return r(f).setUint8(u,m),u+1}},e.UINT16_LE={len:2,get(f,u){return r(f).getUint16(u,!0)},put(f,u,m){return r(f).setUint16(u,m,!0),u+2}},e.UINT16_BE={len:2,get(f,u){return r(f).getUint16(u)},put(f,u,m){return r(f).setUint16(u,m),u+2}},e.UINT24_LE={len:3,get(f,u){const m=r(f);return m.getUint8(u)+(m.getUint16(u+1,!0)<<8)},put(f,u,m){const v=r(f);return v.setUint8(u,m&255),v.setUint16(u+1,m>>8,!0),u+3}},e.UINT24_BE={len:3,get(f,u){const m=r(f);return(m.getUint16(u)<<8)+m.getUint8(u+2)},put(f,u,m){const v=r(f);return v.setUint16(u,m>>8),v.setUint8(u+2,m&255),u+3}},e.UINT32_LE={len:4,get(f,u){return r(f).getUint32(u,!0)},put(f,u,m){return r(f).setUint32(u,m,!0),u+4}},e.UINT32_BE={len:4,get(f,u){return r(f).getUint32(u)},put(f,u,m){return r(f).setUint32(u,m),u+4}},e.INT8={len:1,get(f,u){return r(f).getInt8(u)},put(f,u,m){return r(f).setInt8(u,m),u+1}},e.INT16_BE={len:2,get(f,u){return r(f).getInt16(u)},put(f,u,m){return r(f).setInt16(u,m),u+2}},e.INT16_LE={len:2,get(f,u){return r(f).getInt16(u,!0)},put(f,u,m){return r(f).setInt16(u,m,!0),u+2}},e.INT24_LE={len:3,get(f,u){const m=e.UINT24_LE.get(f,u);return m>8388607?m-16777216:m},put(f,u,m){const v=r(f);return v.setUint8(u,m&255),v.setUint16(u+1,m>>8,!0),u+3}},e.INT24_BE={len:3,get(f,u){const m=e.UINT24_BE.get(f,u);return m>8388607?m-16777216:m},put(f,u,m){const v=r(f);return v.setUint16(u,m>>8),v.setUint8(u+2,m&255),u+3}},e.INT32_BE={len:4,get(f,u){return r(f).getInt32(u)},put(f,u,m){return r(f).setInt32(u,m),u+4}},e.INT32_LE={len:4,get(f,u){return r(f).getInt32(u,!0)},put(f,u,m){return r(f).setInt32(u,m,!0),u+4}},e.UINT64_LE={len:8,get(f,u){return r(f).getBigUint64(u,!0)},put(f,u,m){return r(f).setBigUint64(u,m,!0),u+8}},e.INT64_LE={len:8,get(f,u){return r(f).getBigInt64(u,!0)},put(f,u,m){return r(f).setBigInt64(u,m,!0),u+8}},e.UINT64_BE={len:8,get(f,u){return r(f).getBigUint64(u)},put(f,u,m){return r(f).setBigUint64(u,m),u+8}},e.INT64_BE={len:8,get(f,u){return r(f).getBigInt64(u)},put(f,u,m){return r(f).setBigInt64(u,m),u+8}},e.Float16_BE={len:2,get(f,u){return t.read(f,u,!1,10,this.len)},put(f,u,m){return t.write(f,m,u,!1,10,this.len),u+this.len}},e.Float16_LE={len:2,get(f,u){return t.read(f,u,!0,10,this.len)},put(f,u,m){return t.write(f,m,u,!0,10,this.len),u+this.len}},e.Float32_BE={len:4,get(f,u){return r(f).getFloat32(u)},put(f,u,m){return r(f).setFloat32(u,m),u+4}},e.Float32_LE={len:4,get(f,u){return r(f).getFloat32(u,!0)},put(f,u,m){return r(f).setFloat32(u,m,!0),u+4}},e.Float64_BE={len:8,get(f,u){return r(f).getFloat64(u)},put(f,u,m){return r(f).setFloat64(u,m),u+8}},e.Float64_LE={len:8,get(f,u){return r(f).getFloat64(u,!0)},put(f,u,m){return r(f).setFloat64(u,m,!0),u+8}},e.Float80_BE={len:10,get(f,u){return t.read(f,u,!1,63,this.len)},put(f,u,m){return t.write(f,m,u,!1,63,this.len),u+this.len}},e.Float80_LE={len:10,get(f,u){return t.read(f,u,!0,63,this.len)},put(f,u,m){return t.write(f,m,u,!0,63,this.len),u+this.len}};class n{constructor(u){this.len=u}get(u,m){}}e.IgnoreType=n;class a{constructor(u){this.len=u}get(u,m){return u.subarray(m,m+this.len)}}e.Uint8ArrayType=a;class s{constructor(u){this.len=u}get(u,m){return Buffer$1.from(u.subarray(m,m+this.len))}}e.BufferType=s;class o{constructor(u,m){this.len=u,this.encoding=m}get(u,m){return Buffer$1.from(u).toString(this.encoding,m,m+this.len)}}e.StringType=o;class l{constructor(u){this.len=u}static decode(u,m,v){let b="";for(let P=m;P<v;++P)b+=l.codePointToString(l.singleByteDecoder(u[P]));return b}static inRange(u,m,v){return m<=u&&u<=v}static codePointToString(u){return u<=65535?String.fromCharCode(u):(u-=65536,String.fromCharCode((u>>10)+55296,(u&1023)+56320))}static singleByteDecoder(u){if(l.inRange(u,0,127))return u;const m=l.windows1252[u-128];if(m===null)throw Error("invaliding encoding");return m}get(u,m=0){return l.decode(u,m,m+this.len)}}e.AnsiStringType=l,l.windows1252=[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]})(lib);var util$6={};util$6.stringToBytes=e=>[...e].map(t=>t.charCodeAt(0));util$6.tarHeaderChecksumMatches=(e,t=0)=>{const r=parseInt(e.toString("utf8",148,154).replace(/\0.*$/,"").trim(),8);if(isNaN(r))return!1;let n=8*32;for(let a=t;a<t+148;a++)n+=e[a];for(let a=t+156;a<t+512;a++)n+=e[a];return r===n};util$6.uint32SyncSafeToken={get:(e,t)=>e[t+3]&127|e[t+2]<<7|e[t+1]<<14|e[t]<<21,len:4};var supported$1={extensions:["jpg","png","apng","gif","webp","flif","xcf","cr2","cr3","orf","arw","dng","nef","rw2","raf","tif","bmp","icns","jxr","psd","indd","zip","tar","rar","gz","bz2","7z","dmg","mp4","mid","mkv","webm","mov","avi","mpg","mp2","mp3","m4a","oga","ogg","ogv","opus","flac","wav","spx","amr","pdf","epub","exe","swf","rtf","wasm","woff","woff2","eot","ttf","otf","ico","flv","ps","xz","sqlite","nes","crx","xpi","cab","deb","ar","rpm","Z","lz","cfb","mxf","mts","blend","bpg","docx","pptx","xlsx","3gp","3g2","jp2","jpm","jpx","mj2","aif","qcp","odt","ods","odp","xml","mobi","heic","cur","ktx","ape","wv","dcm","ics","glb","pcap","dsf","lnk","alias","voc","ac3","m4v","m4p","m4b","f4v","f4p","f4b","f4a","mie","asf","ogm","ogx","mpc","arrow","shp","aac","mp1","it","s3m","xm","ai","skp","avif","eps","lzh","pgp","asar","stl","chm","3mf","zst","jxl","vcf"],mimeTypes:["image/jpeg","image/png","image/gif","image/webp","image/flif","image/x-xcf","image/x-canon-cr2","image/x-canon-cr3","image/tiff","image/bmp","image/vnd.ms-photo","image/vnd.adobe.photoshop","application/x-indesign","application/epub+zip","application/x-xpinstall","application/vnd.oasis.opendocument.text","application/vnd.oasis.opendocument.spreadsheet","application/vnd.oasis.opendocument.presentation","application/vnd.openxmlformats-officedocument.wordprocessingml.document","application/vnd.openxmlformats-officedocument.presentationml.presentation","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet","application/zip","application/x-tar","application/x-rar-compressed","application/gzip","application/x-bzip2","application/x-7z-compressed","application/x-apple-diskimage","application/x-apache-arrow","video/mp4","audio/midi","video/x-matroska","video/webm","video/quicktime","video/vnd.avi","audio/vnd.wave","audio/qcelp","audio/x-ms-asf","video/x-ms-asf","application/vnd.ms-asf","video/mpeg","video/3gpp","audio/mpeg","audio/mp4","audio/opus","video/ogg","audio/ogg","application/ogg","audio/x-flac","audio/ape","audio/wavpack","audio/amr","application/pdf","application/x-msdownload","application/x-shockwave-flash","application/rtf","application/wasm","font/woff","font/woff2","application/vnd.ms-fontobject","font/ttf","font/otf","image/x-icon","video/x-flv","application/postscript","application/eps","application/x-xz","application/x-sqlite3","application/x-nintendo-nes-rom","application/x-google-chrome-extension","application/vnd.ms-cab-compressed","application/x-deb","application/x-unix-archive","application/x-rpm","application/x-compress","application/x-lzip","application/x-cfb","application/x-mie","application/mxf","video/mp2t","application/x-blender","image/bpg","image/jp2","image/jpx","image/jpm","image/mj2","audio/aiff","application/xml","application/x-mobipocket-ebook","image/heif","image/heif-sequence","image/heic","image/heic-sequence","image/icns","image/ktx","application/dicom","audio/x-musepack","text/calendar","text/vcard","model/gltf-binary","application/vnd.tcpdump.pcap","audio/x-dsf","application/x.ms.shortcut","application/x.apple.alias","audio/x-voc","audio/vnd.dolby.dd-raw","audio/x-m4a","image/apng","image/x-olympus-orf","image/x-sony-arw","image/x-adobe-dng","image/x-nikon-nef","image/x-panasonic-rw2","image/x-fujifilm-raf","video/x-m4v","video/3gpp2","application/x-esri-shape","audio/aac","audio/x-it","audio/x-s3m","audio/x-xm","video/MP1S","video/MP2P","application/vnd.sketchup.skp","image/avif","application/x-lzh-compressed","application/pgp-encrypted","application/x-asar","model/stl","application/vnd.ms-htmlhelp","model/3mf","image/jxl","application/zstd"]};const Token=lib,strtok3$1=core$2,{stringToBytes,tarHeaderChecksumMatches,uint32SyncSafeToken}=util$6,supported=supported$1,minimumBytes=4100;async function fromStream(e){const t=await strtok3$1.fromStream(e);try{return await fromTokenizer(t)}finally{await t.close()}}async function fromBuffer(e){if(!(e instanceof Uint8Array||e instanceof ArrayBuffer||Buffer$1.isBuffer(e)))throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof e}\``);const t=e instanceof Buffer$1?e:Buffer$1.from(e);if(!(t&&t.length>1))return;const r=strtok3$1.fromBuffer(t);return fromTokenizer(r)}function _check(e,t,r){r={offset:0,...r};for(const[n,a]of t.entries())if(r.mask){if(a!==(r.mask[n]&e[n+r.offset]))return!1}else if(a!==e[n+r.offset])return!1;return!0}async function fromTokenizer(e){try{return _fromTokenizer(e)}catch(t){if(!(t instanceof strtok3$1.EndOfStreamError))throw t}}async function _fromTokenizer(e){let t=Buffer$1.alloc(minimumBytes);const r=12,n=(s,o)=>_check(t,s,o),a=(s,o)=>n(stringToBytes(s),o);if(e.fileInfo.size||(e.fileInfo.size=Number.MAX_SAFE_INTEGER),await e.peekBuffer(t,{length:r,mayBeLess:!0}),n([66,77]))return{ext:"bmp",mime:"image/bmp"};if(n([11,119]))return{ext:"ac3",mime:"audio/vnd.dolby.dd-raw"};if(n([120,1]))return{ext:"dmg",mime:"application/x-apple-diskimage"};if(n([77,90]))return{ext:"exe",mime:"application/x-msdownload"};if(n([37,33]))return await e.peekBuffer(t,{length:24,mayBeLess:!0}),a("PS-Adobe-",{offset:2})&&a(" EPSF-",{offset:14})?{ext:"eps",mime:"application/eps"}:{ext:"ps",mime:"application/postscript"};if(n([31,160])||n([31,157]))return{ext:"Z",mime:"application/x-compress"};if(n([255,216,255]))return{ext:"jpg",mime:"image/jpeg"};if(n([73,73,188]))return{ext:"jxr",mime:"image/vnd.ms-photo"};if(n([31,139,8]))return{ext:"gz",mime:"application/gzip"};if(n([66,90,104]))return{ext:"bz2",mime:"application/x-bzip2"};if(a("ID3")){await e.ignore(6);const s=await e.readToken(uint32SyncSafeToken);return e.position+s>e.fileInfo.size?{ext:"mp3",mime:"audio/mpeg"}:(await e.ignore(s),fromTokenizer(e))}if(a("MP+"))return{ext:"mpc",mime:"audio/x-musepack"};if((t[0]===67||t[0]===70)&&n([87,83],{offset:1}))return{ext:"swf",mime:"application/x-shockwave-flash"};if(n([71,73,70]))return{ext:"gif",mime:"image/gif"};if(a("FLIF"))return{ext:"flif",mime:"image/flif"};if(a("8BPS"))return{ext:"psd",mime:"image/vnd.adobe.photoshop"};if(a("WEBP",{offset:8}))return{ext:"webp",mime:"image/webp"};if(a("MPCK"))return{ext:"mpc",mime:"audio/x-musepack"};if(a("FORM"))return{ext:"aif",mime:"audio/aiff"};if(a("icns",{offset:0}))return{ext:"icns",mime:"image/icns"};if(n([80,75,3,4])){try{for(;e.position+30<e.fileInfo.size;){await e.readBuffer(t,{length:30});const s={compressedSize:t.readUInt32LE(18),uncompressedSize:t.readUInt32LE(22),filenameLength:t.readUInt16LE(26),extraFieldLength:t.readUInt16LE(28)};if(s.filename=await e.readToken(new Token.StringType(s.filenameLength,"utf-8")),await e.ignore(s.extraFieldLength),s.filename==="META-INF/mozilla.rsa")return{ext:"xpi",mime:"application/x-xpinstall"};if(s.filename.endsWith(".rels")||s.filename.endsWith(".xml"))switch(s.filename.split("/")[0]){case"_rels":break;case"word":return{ext:"docx",mime:"application/vnd.openxmlformats-officedocument.wordprocessingml.document"};case"ppt":return{ext:"pptx",mime:"application/vnd.openxmlformats-officedocument.presentationml.presentation"};case"xl":return{ext:"xlsx",mime:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"};default:break}if(s.filename.startsWith("xl/"))return{ext:"xlsx",mime:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"};if(s.filename.startsWith("3D/")&&s.filename.endsWith(".model"))return{ext:"3mf",mime:"model/3mf"};if(s.filename==="mimetype"&&s.compressedSize===s.uncompressedSize)switch(await e.readToken(new Token.StringType(s.compressedSize,"utf-8"))){case"application/epub+zip":return{ext:"epub",mime:"application/epub+zip"};case"application/vnd.oasis.opendocument.text":return{ext:"odt",mime:"application/vnd.oasis.opendocument.text"};case"application/vnd.oasis.opendocument.spreadsheet":return{ext:"ods",mime:"application/vnd.oasis.opendocument.spreadsheet"};case"application/vnd.oasis.opendocument.presentation":return{ext:"odp",mime:"application/vnd.oasis.opendocument.presentation"};default:}if(s.compressedSize===0){let o=-1;for(;o<0&&e.position<e.fileInfo.size;)await e.peekBuffer(t,{mayBeLess:!0}),o=t.indexOf("504B0304",0,"hex"),await e.ignore(o>=0?o:t.length)}else await e.ignore(s.compressedSize)}}catch(s){if(!(s instanceof strtok3$1.EndOfStreamError))throw s}return{ext:"zip",mime:"application/zip"}}if(a("OggS")){await e.ignore(28);const s=Buffer$1.alloc(8);return await e.readBuffer(s),_check(s,[79,112,117,115,72,101,97,100])?{ext:"opus",mime:"audio/opus"}:_check(s,[128,116,104,101,111,114,97])?{ext:"ogv",mime:"video/ogg"}:_check(s,[1,118,105,100,101,111,0])?{ext:"ogm",mime:"video/ogg"}:_check(s,[127,70,76,65,67])?{ext:"oga",mime:"audio/ogg"}:_check(s,[83,112,101,101,120,32,32])?{ext:"spx",mime:"audio/ogg"}:_check(s,[1,118,111,114,98,105,115])?{ext:"ogg",mime:"audio/ogg"}:{ext:"ogx",mime:"application/ogg"}}if(n([80,75])&&(t[2]===3||t[2]===5||t[2]===7)&&(t[3]===4||t[3]===6||t[3]===8))return{ext:"zip",mime:"application/zip"};if(a("ftyp",{offset:4})&&t[8]&96){const s=t.toString("binary",8,12).replace("\0"," ").trim();switch(s){case"avif":return{ext:"avif",mime:"image/avif"};case"mif1":return{ext:"heic",mime:"image/heif"};case"msf1":return{ext:"heic",mime:"image/heif-sequence"};case"heic":case"heix":return{ext:"heic",mime:"image/heic"};case"hevc":case"hevx":return{ext:"heic",mime:"image/heic-sequence"};case"qt":return{ext:"mov",mime:"video/quicktime"};case"M4V":case"M4VH":case"M4VP":return{ext:"m4v",mime:"video/x-m4v"};case"M4P":return{ext:"m4p",mime:"video/mp4"};case"M4B":return{ext:"m4b",mime:"audio/mp4"};case"M4A":return{ext:"m4a",mime:"audio/x-m4a"};case"F4V":return{ext:"f4v",mime:"video/mp4"};case"F4P":return{ext:"f4p",mime:"video/mp4"};case"F4A":return{ext:"f4a",mime:"audio/mp4"};case"F4B":return{ext:"f4b",mime:"audio/mp4"};case"crx":return{ext:"cr3",mime:"image/x-canon-cr3"};default:return s.startsWith("3g")?s.startsWith("3g2")?{ext:"3g2",mime:"video/3gpp2"}:{ext:"3gp",mime:"video/3gpp"}:{ext:"mp4",mime:"video/mp4"}}}if(a("MThd"))return{ext:"mid",mime:"audio/midi"};if(a("wOFF")&&(n([0,1,0,0],{offset:4})||a("OTTO",{offset:4})))return{ext:"woff",mime:"font/woff"};if(a("wOF2")&&(n([0,1,0,0],{offset:4})||a("OTTO",{offset:4})))return{ext:"woff2",mime:"font/woff2"};if(n([212,195,178,161])||n([161,178,195,212]))return{ext:"pcap",mime:"application/vnd.tcpdump.pcap"};if(a("DSD "))return{ext:"dsf",mime:"audio/x-dsf"};if(a("LZIP"))return{ext:"lz",mime:"application/x-lzip"};if(a("fLaC"))return{ext:"flac",mime:"audio/x-flac"};if(n([66,80,71,251]))return{ext:"bpg",mime:"image/bpg"};if(a("wvpk"))return{ext:"wv",mime:"audio/wavpack"};if(a("%PDF")){await e.ignore(1350);const s=10*1024*1024,o=Buffer$1.alloc(Math.min(s,e.fileInfo.size));return await e.readBuffer(o,{mayBeLess:!0}),o.includes(Buffer$1.from("AIPrivateData"))?{ext:"ai",mime:"application/postscript"}:{ext:"pdf",mime:"application/pdf"}}if(n([0,97,115,109]))return{ext:"wasm",mime:"application/wasm"};if(n([73,73,42,0]))return a("CR",{offset:8})?{ext:"cr2",mime:"image/x-canon-cr2"}:n([28,0,254,0],{offset:8})||n([31,0,11,0],{offset:8})?{ext:"nef",mime:"image/x-nikon-nef"}:n([8,0,0,0],{offset:4})&&(n([45,0,254,0],{offset:8})||n([39,0,254,0],{offset:8}))?{ext:"dng",mime:"image/x-adobe-dng"}:(t=Buffer$1.alloc(24),await e.peekBuffer(t),(n([16,251,134,1],{offset:4})||n([8,0,0,0],{offset:4}))&&n([0,254,0,4,0,1,0,0,0,1,0,0,0,3,1],{offset:9})?{ext:"arw",mime:"image/x-sony-arw"}:{ext:"tif",mime:"image/tiff"});if(n([77,77,0,42]))return{ext:"tif",mime:"image/tiff"};if(a("MAC "))return{ext:"ape",mime:"audio/ape"};if(n([26,69,223,163])){async function s(){const m=await e.peekNumber(Token.UINT8);let v=128,b=0;for(;!(m&v)&&v!==0;)++b,v>>=1;const P=Buffer$1.alloc(b+1);return await e.readBuffer(P),P}async function o(){const m=await s(),v=await s();v[0]^=128>>v.length-1;const b=Math.min(6,v.length);return{id:m.readUIntBE(0,m.length),len:v.readUIntBE(v.length-b,b)}}async function l(m,v){for(;v>0;){const b=await o();if(b.id===17026)return e.readToken(new Token.StringType(b.len,"utf-8"));await e.ignore(b.len),--v}}const f=await o();switch(await l(1,f.len)){case"webm":return{ext:"webm",mime:"video/webm"};case"matroska":return{ext:"mkv",mime:"video/x-matroska"};default:return}}if(n([82,73,70,70])){if(n([65,86,73],{offset:8}))return{ext:"avi",mime:"video/vnd.avi"};if(n([87,65,86,69],{offset:8}))return{ext:"wav",mime:"audio/vnd.wave"};if(n([81,76,67,77],{offset:8}))return{ext:"qcp",mime:"audio/qcelp"}}if(a("SQLi"))return{ext:"sqlite",mime:"application/x-sqlite3"};if(n([78,69,83,26]))return{ext:"nes",mime:"application/x-nintendo-nes-rom"};if(a("Cr24"))return{ext:"crx",mime:"application/x-google-chrome-extension"};if(a("MSCF")||a("ISc("))return{ext:"cab",mime:"application/vnd.ms-cab-compressed"};if(n([237,171,238,219]))return{ext:"rpm",mime:"application/x-rpm"};if(n([197,208,211,198]))return{ext:"eps",mime:"application/eps"};if(n([40,181,47,253]))return{ext:"zst",mime:"application/zstd"};if(n([79,84,84,79,0]))return{ext:"otf",mime:"font/otf"};if(a("#!AMR"))return{ext:"amr",mime:"audio/amr"};if(a("{\\rtf"))return{ext:"rtf",mime:"application/rtf"};if(n([70,76,86,1]))return{ext:"flv",mime:"video/x-flv"};if(a("IMPM"))return{ext:"it",mime:"audio/x-it"};if(a("-lh0-",{offset:2})||a("-lh1-",{offset:2})||a("-lh2-",{offset:2})||a("-lh3-",{offset:2})||a("-lh4-",{offset:2})||a("-lh5-",{offset:2})||a("-lh6-",{offset:2})||a("-lh7-",{offset:2})||a("-lzs-",{offset:2})||a("-lz4-",{offset:2})||a("-lz5-",{offset:2})||a("-lhd-",{offset:2}))return{ext:"lzh",mime:"application/x-lzh-compressed"};if(n([0,0,1,186])){if(n([33],{offset:4,mask:[241]}))return{ext:"mpg",mime:"video/MP1S"};if(n([68],{offset:4,mask:[196]}))return{ext:"mpg",mime:"video/MP2P"}}if(a("ITSF"))return{ext:"chm",mime:"application/vnd.ms-htmlhelp"};if(n([253,55,122,88,90,0]))return{ext:"xz",mime:"application/x-xz"};if(a("<?xml "))return{ext:"xml",mime:"application/xml"};if(n([55,122,188,175,39,28]))return{ext:"7z",mime:"application/x-7z-compressed"};if(n([82,97,114,33,26,7])&&(t[6]===0||t[6]===1))return{ext:"rar",mime:"application/x-rar-compressed"};if(a("solid "))return{ext:"stl",mime:"model/stl"};if(a("BLENDER"))return{ext:"blend",mime:"application/x-blender"};if(a("!<arch>"))return await e.ignore(8),await e.readToken(new Token.StringType(13,"ascii"))==="debian-binary"?{ext:"deb",mime:"application/x-deb"}:{ext:"ar",mime:"application/x-unix-archive"};if(n([137,80,78,71,13,10,26,10])){await e.ignore(8);async function s(){return{length:await e.readToken(Token.INT32_BE),type:await e.readToken(new Token.StringType(4,"binary"))}}do{const o=await s();if(o.length<0)return;switch(o.type){case"IDAT":return{ext:"png",mime:"image/png"};case"acTL":return{ext:"apng",mime:"image/apng"};default:await e.ignore(o.length+4)}}while(e.position+8<e.fileInfo.size);return{ext:"png",mime:"image/png"}}if(n([65,82,82,79,87,49,0,0]))return{ext:"arrow",mime:"application/x-apache-arrow"};if(n([103,108,84,70,2,0,0,0]))return{ext:"glb",mime:"model/gltf-binary"};if(n([102,114,101,101],{offset:4})||n([109,100,97,116],{offset:4})||n([109,111,111,118],{offset:4})||n([119,105,100,101],{offset:4}))return{ext:"mov",mime:"video/quicktime"};if(n([73,73,82,79,8,0,0,0,24]))return{ext:"orf",mime:"image/x-olympus-orf"};if(a("gimp xcf "))return{ext:"xcf",mime:"image/x-xcf"};if(n([73,73,85,0,24,0,0,0,136,231,116,216]))return{ext:"rw2",mime:"image/x-panasonic-rw2"};if(n([48,38,178,117,142,102,207,17,166,217])){async function s(){const o=Buffer$1.alloc(16);return await e.readBuffer(o),{id:o,size:Number(await e.readToken(Token.UINT64_LE))}}for(await e.ignore(30);e.position+24<e.fileInfo.size;){const o=await s();let l=o.size-24;if(_check(o.id,[145,7,220,183,183,169,207,17,142,230,0,192,12,32,83,101])){const f=Buffer$1.alloc(16);if(l-=await e.readBuffer(f),_check(f,[64,158,105,248,77,91,207,17,168,253,0,128,95,92,68,43]))return{ext:"asf",mime:"audio/x-ms-asf"};if(_check(f,[192,239,25,188,77,91,207,17,168,253,0,128,95,92,68,43]))return{ext:"asf",mime:"video/x-ms-asf"};break}await e.ignore(l)}return{ext:"asf",mime:"application/vnd.ms-asf"}}if(n([171,75,84,88,32,49,49,187,13,10,26,10]))return{ext:"ktx",mime:"image/ktx"};if((n([126,16,4])||n([126,24,4]))&&n([48,77,73,69],{offset:4}))return{ext:"mie",mime:"application/x-mie"};if(n([39,10,0,0,0,0,0,0,0,0,0,0],{offset:2}))return{ext:"shp",mime:"application/x-esri-shape"};if(n([0,0,0,12,106,80,32,32,13,10,135,10]))switch(await e.ignore(20),await e.readToken(new Token.StringType(4,"ascii"))){case"jp2 ":return{ext:"jp2",mime:"image/jp2"};case"jpx ":return{ext:"jpx",mime:"image/jpx"};case"jpm ":return{ext:"jpm",mime:"image/jpm"};case"mjp2":return{ext:"mj2",mime:"image/mj2"};default:return}if(n([255,10])||n([0,0,0,12,74,88,76,32,13,10,135,10]))return{ext:"jxl",mime:"image/jxl"};if(n([0,0,1,186])||n([0,0,1,179]))return{ext:"mpg",mime:"video/mpeg"};if(n([0,1,0,0,0]))return{ext:"ttf",mime:"font/ttf"};if(n([0,0,1,0]))return{ext:"ico",mime:"image/x-icon"};if(n([0,0,2,0]))return{ext:"cur",mime:"image/x-icon"};if(n([208,207,17,224,161,177,26,225]))return{ext:"cfb",mime:"application/x-cfb"};if(await e.peekBuffer(t,{length:Math.min(256,e.fileInfo.size),mayBeLess:!0}),a("BEGIN:")){if(a("VCARD",{offset:6}))return{ext:"vcf",mime:"text/vcard"};if(a("VCALENDAR",{offset:6}))return{ext:"ics",mime:"text/calendar"}}if(a("FUJIFILMCCD-RAW"))return{ext:"raf",mime:"image/x-fujifilm-raf"};if(a("Extended Module:"))return{ext:"xm",mime:"audio/x-xm"};if(a("Creative Voice File"))return{ext:"voc",mime:"audio/x-voc"};if(n([4,0,0,0])&&t.length>=16){const s=t.readUInt32LE(12);if(s>12&&t.length>=s+16)try{const o=t.slice(16,s+16).toString();if(JSON.parse(o).files)return{ext:"asar",mime:"application/x-asar"}}catch{}}if(n([6,14,43,52,2,5,1,1,13,1,2,1,1,2]))return{ext:"mxf",mime:"application/mxf"};if(a("SCRM",{offset:44}))return{ext:"s3m",mime:"audio/x-s3m"};if(n([71],{offset:4})&&(n([71],{offset:192})||n([71],{offset:196})))return{ext:"mts",mime:"video/mp2t"};if(n([66,79,79,75,77,79,66,73],{offset:60}))return{ext:"mobi",mime:"application/x-mobipocket-ebook"};if(n([68,73,67,77],{offset:128}))return{ext:"dcm",mime:"application/dicom"};if(n([76,0,0,0,1,20,2,0,0,0,0,0,192,0,0,0,0,0,0,70]))return{ext:"lnk",mime:"application/x.ms.shortcut"};if(n([98,111,111,107,0,0,0,0,109,97,114,107,0,0,0,0]))return{ext:"alias",mime:"application/x.apple.alias"};if(n([76,80],{offset:34})&&(n([0,0,1],{offset:8})||n([1,0,2],{offset:8})||n([2,0,2],{offset:8})))return{ext:"eot",mime:"application/vnd.ms-fontobject"};if(n([6,6,237,245,216,29,70,229,189,49,239,231,254,116,183,29]))return{ext:"indd",mime:"application/x-indesign"};if(await e.peekBuffer(t,{length:Math.min(512,e.fileInfo.size),mayBeLess:!0}),tarHeaderChecksumMatches(t))return{ext:"tar",mime:"application/x-tar"};if(n([255,254,255,14,83,0,107,0,101,0,116,0,99,0,104,0,85,0,112,0,32,0,77,0,111,0,100,0,101,0,108,0]))return{ext:"skp",mime:"application/vnd.sketchup.skp"};if(a("-----BEGIN PGP MESSAGE-----"))return{ext:"pgp",mime:"application/pgp-encrypted"};if(t.length>=2&&n([255,224],{offset:0,mask:[255,224]})){if(n([16],{offset:1,mask:[22]}))return n([8],{offset:1,mask:[8]})?{ext:"aac",mime:"audio/aac"}:{ext:"aac",mime:"audio/aac"};if(n([2],{offset:1,mask:[6]}))return{ext:"mp3",mime:"audio/mpeg"};if(n([4],{offset:1,mask:[6]}))return{ext:"mp2",mime:"audio/mpeg"};if(n([6],{offset:1,mask:[6]}))return{ext:"mp1",mime:"audio/mpeg"}}}const stream=readableStream=>new Promise((resolve,reject)=>{const stream=eval("require")("stream");readableStream.on("error",reject),readableStream.once("readable",async()=>{const e=new stream.PassThrough;let t;stream.pipeline?t=stream.pipeline(readableStream,e,()=>{}):t=readableStream.pipe(e);const r=readableStream.read(minimumBytes)||readableStream.read()||Buffer$1.alloc(0);try{const n=await fromBuffer(r);e.fileType=n}catch(n){reject(n)}resolve(t)})}),fileType$1={fromStream,fromTokenizer,fromBuffer,stream};Object.defineProperty(fileType$1,"extensions",{get(){return new Set(supported.extensions)}});Object.defineProperty(fileType$1,"mimeTypes",{get(){return new Set(supported.mimeTypes)}});var core$1=fileType$1;const strtok3=lib$2,core=core$1;async function fromFile(e){const t=await strtok3.fromFile(e);try{return await core.fromTokenizer(t)}finally{await t.close()}}const fileType={fromFile};Object.assign(fileType,core);Object.defineProperty(fileType,"extensions",{get(){return core.extensions}});Object.defineProperty(fileType,"mimeTypes",{get(){return core.mimeTypes}});var fileType_1=fileType;const FileType=getDefaultExportFromCjs$1(fileType_1);var jpeg$2={parseSections:function(e,t){var r,n;for(e.setBigEndian(!0);e.remainingLength()>0&&n!==218;){if(e.nextUInt8()!==255)throw new Error("Invalid JPEG section offset");n=e.nextUInt8(),n>=208&&n<=217||n===218?r=0:r=e.nextUInt16()-2,t(n,e.branch(0,r)),e.skip(r)}},getSizeFromSOFSection:function(e){return e.skip(1),{height:e.nextUInt16(),width:e.nextUInt16()}},getSectionName:function(e){var t,r;switch(e){case 216:t="SOI";break;case 196:t="DHT";break;case 219:t="DQT";break;case 221:t="DRI";break;case 218:t="SOS";break;case 254:t="COM";break;case 217:t="EOI";break;default:e>=224&&e<=239?(t="APP",r=e-224):e>=192&&e<=207&&e!==196&&e!==200&&e!==204?(t="SOF",r=e-192):e>=208&&e<=215&&(t="RST",r=e-208);break}var n={name:t};return typeof r=="number"&&(n.index=r),n}};function readExifValue(e,t){switch(e){case 1:return t.nextUInt8();case 3:return t.nextUInt16();case 4:return t.nextUInt32();case 5:return[t.nextUInt32(),t.nextUInt32()];case 6:return t.nextInt8();case 8:return t.nextUInt16();case 9:return t.nextUInt32();case 10:return[t.nextInt32(),t.nextInt32()];case 11:return t.nextFloat();case 12:return t.nextDouble();default:throw new Error("Invalid format while decoding: "+e)}}function getBytesPerComponent(e){switch(e){case 1:case 2:case 6:case 7:return 1;case 3:case 8:return 2;case 4:case 9:case 11:return 4;case 5:case 10:case 12:return 8;default:return 0}}function readExifTag(e,t){var r=t.nextUInt16(),n=t.nextUInt16(),a=getBytesPerComponent(n),s=t.nextUInt32(),o=a*s,l,f;if(o>4&&(t=e.openWithOffset(t.nextUInt32())),n===2){l=t.nextString(s);var u=l.indexOf("\0");u!==-1&&(l=l.substr(0,u))}else if(n===7)l=t.nextBuffer(s);else if(n!==0)for(l=[],f=0;f<s;++f)l.push(readExifValue(n,t));return o<4&&t.skip(4-o),[r,l,n]}function readIFDSection(e,t,r){var n=t.nextUInt16(),a,s;for(s=0;s<n;++s)a=readExifTag(e,t),r(a[0],a[1],a[2])}function readHeader(e){var t=e.nextString(6);if(t!=="Exif\0\0")throw new Error("Invalid EXIF header");var r=e.mark(),n=e.nextUInt16();if(n===18761)e.setBigEndian(!1);else if(n===19789)e.setBigEndian(!0);else throw new Error("Invalid TIFF header");if(e.nextUInt16()!==42)throw new Error("Invalid TIFF data");return r}var exif$2={IFD0:1,IFD1:2,GPSIFD:3,SubIFD:4,InteropIFD:5,parseTags:function(e,t){var r;try{r=readHeader(e)}catch{return!1}var n,a,s,o=r.openWithOffset(e.nextUInt32()),l=this.IFD0;readIFDSection(r,o,function(F,C,D){switch(F){case 34853:a=C[0];break;case 34665:n=C[0];break;default:t(l,F,C,D);break}});var f=o.nextUInt32();if(f!==0){var u=r.openWithOffset(f);readIFDSection(r,u,t.bind(null,this.IFD1))}if(a){var m=r.openWithOffset(a);readIFDSection(r,m,t.bind(null,this.GPSIFD))}if(n){var v=r.openWithOffset(n),b=this.InteropIFD;readIFDSection(r,v,function(F,C,D){F===40965?s=C[0]:t(b,F,C,D)})}if(s){var P=r.openWithOffset(s);readIFDSection(r,P,t.bind(null,this.InteropIFD))}return!0}};function parseNumber(e){return parseInt(e,10)}var hours=3600,minutes=60;function parseDateTimeParts(e,t){e=e.map(parseNumber),t=t.map(parseNumber);var r=e[0],n=e[1]-1,a=e[2],s=t[0],o=t[1],l=t[2],f=Date.UTC(r,n,a,s,o,l,0),u=f/1e3;return u}function parseDateWithTimezoneFormat(e){var t=e.substr(0,10).split("-"),r=e.substr(11,8).split(":"),n=e.substr(19,6),a=n.split(":").map(parseNumber),s=a[0]*hours+a[1]*minutes,o=parseDateTimeParts(t,r);if(o-=s,typeof o=="number"&&!isNaN(o))return o}function parseDateWithSpecFormat(e){var t=e.split(" "),r=t[0].split(":"),n=t[1].split(":"),a=parseDateTimeParts(r,n);if(typeof a=="number"&&!isNaN(a))return a}function parseExifDate(e){var t=e.length===19&&e.charAt(4)===":",r=e.length===25&&e.charAt(10)==="T";if(r)return parseDateWithTimezoneFormat(e);if(t)return parseDateWithSpecFormat(e)}var date$1={parseDateWithSpecFormat,parseDateWithTimezoneFormat,parseExifDate},exif$1=exif$2,date=date$1,degreeTags=[{section:exif$1.GPSIFD,type:2,name:"GPSLatitude",refType:1,refName:"GPSLatitudeRef",posVal:"N"},{section:exif$1.GPSIFD,type:4,name:"GPSLongitude",refType:3,refName:"GPSLongitudeRef",posVal:"E"}],dateTags=[{section:exif$1.SubIFD,type:306,name:"ModifyDate"},{section:exif$1.SubIFD,type:36867,name:"DateTimeOriginal"},{section:exif$1.SubIFD,type:36868,name:"CreateDate"},{section:exif$1.SubIFD,type:306,name:"ModifyDate"}],simplify$1={castDegreeValues:function(e,t){degreeTags.forEach(function(r){var n=e(r);if(n){var a=e({section:r.section,type:r.refType,name:r.refName}),s=a===r.posVal?1:-1,o=(n[0]+n[1]/60+n[2]/3600)*s;t(r,o)}})},castDateValues:function(e,t){dateTags.forEach(function(r){var n=e(r);if(n){var a=date.parseExifDate(n);typeof a<"u"&&t(r,a)}})},simplifyValue:function(e,t){return Array.isArray(e)&&(e=e.map(function(r){return t===10||t===5?r[0]/r[1]:r}),e.length===1&&(e=e[0])),e}},exifTags,hasRequiredExifTags;function requireExifTags(){return hasRequiredExifTags||(hasRequiredExifTags=1,exifTags={exif:{1:"InteropIndex",2:"InteropVersion",11:"ProcessingSoftware",254:"SubfileType",255:"OldSubfileType",256:"ImageWidth",257:"ImageHeight",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Thresholding",264:"CellWidth",265:"CellLength",266:"FillOrder",269:"DocumentName",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",285:"PageName",286:"XPosition",287:"YPosition",288:"FreeOffsets",289:"FreeByteCounts",290:"GrayResponseUnit",291:"GrayResponseCurve",292:"T4Options",293:"T6Options",296:"ResolutionUnit",297:"PageNumber",300:"ColorResponseUnit",301:"TransferFunction",305:"Software",306:"ModifyDate",315:"Artist",316:"HostComputer",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",320:"ColorMap",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFD",332:"InkSet",333:"InkNames",334:"NumberofInks",336:"DotRange",337:"TargetPrinter",338:"ExtraSamples",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",435:"T82Options",437:"JPEGTables",512:"JPEGProc",513:"ThumbnailOffset",514:"ThumbnailLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",559:"StripRowCounts",700:"ApplicationNotes",999:"USPTOMiscellaneous",4096:"RelatedImageFileFormat",4097:"RelatedImageWidth",4098:"RelatedImageHeight",18246:"Rating",18247:"XP_DIP_XML",18248:"StitchInfo",18249:"RatingPercent",32781:"ImageID",32931:"WangTag1",32932:"WangAnnotation",32933:"WangTag3",32934:"WangTag4",32995:"Matteing",32996:"DataType",32997:"ImageDepth",32998:"TileDepth",33405:"Model2",33421:"CFARepeatPatternDim",33422:"CFAPattern2",33423:"BatteryLevel",33424:"KodakIFD",33432:"Copyright",33434:"ExposureTime",33437:"FNumber",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33550:"PixelScale",33589:"AdventScale",33590:"AdventRevision",33628:"UIC1Tag",33629:"UIC2Tag",33630:"UIC3Tag",33631:"UIC4Tag",33723:"IPTC-NAA",33918:"IntergraphPacketData",33919:"IntergraphFlagRegisters",33920:"IntergraphMatrix",33921:"INGRReserved",33922:"ModelTiePoint",34016:"Site",34017:"ColorSequence",34018:"IT8Header",34019:"RasterPadding",34020:"BitsPerRunLength",34021:"BitsPerExtendedRunLength",34022:"ColorTable",34023:"ImageColorIndicator",34024:"BackgroundColorIndicator",34025:"ImageColorValue",34026:"BackgroundColorValue",34027:"PixelIntensityRange",34028:"TransparencyIndicator",34029:"ColorCharacterization",34030:"HCUsage",34031:"TrapIndicator",34032:"CMYKEquivalent",34118:"SEMInfo",34152:"AFCP_IPTC",34232:"PixelMagicJBIGOptions",34264:"ModelTransform",34306:"WB_GRGBLevels",34310:"LeafData",34377:"PhotoshopSettings",34665:"ExifOffset",34675:"ICC_Profile",34687:"TIFF_FXExtensions",34688:"MultiProfiles",34689:"SharedData",34690:"T88Options",34732:"ImageLayer",34735:"GeoTiffDirectory",34736:"GeoTiffDoubleParams",34737:"GeoTiffAsciiParams",34850:"ExposureProgram",34852:"SpectralSensitivity",34853:"GPSInfo",34855:"ISO",34856:"Opto-ElectricConvFactor",34857:"Interlace",34858:"TimeZoneOffset",34859:"SelfTimerMode",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",34908:"FaxRecvParams",34909:"FaxSubAddress",34910:"FaxRecvTime",34954:"LeafSubIFD",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"CreateDate",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureCompensation",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37387:"FlashEnergy",37388:"SpatialFrequencyResponse",37389:"Noise",37390:"FocalPlaneXResolution",37391:"FocalPlaneYResolution",37392:"FocalPlaneResolutionUnit",37393:"ImageNumber",37394:"SecurityClassification",37395:"ImageHistory",37396:"SubjectArea",37397:"ExposureIndex",37398:"TIFF-EPStandardID",37399:"SensingMethod",37434:"CIP3DataFile",37435:"CIP3Sheet",37436:"CIP3Side",37439:"StoNits",37500:"MakerNote",37510:"UserComment",37520:"SubSecTime",37521:"SubSecTimeOriginal",37522:"SubSecTimeDigitized",37679:"MSDocumentText",37680:"MSPropertySetStorage",37681:"MSDocumentTextPosition",37724:"ImageSourceData",40091:"XPTitle",40092:"XPComment",40093:"XPAuthor",40094:"XPKeywords",40095:"XPSubject",40960:"FlashpixVersion",40961:"ColorSpace",40962:"ExifImageWidth",40963:"ExifImageHeight",40964:"RelatedSoundFile",40965:"InteropOffset",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41485:"Noise",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41489:"ImageNumber",41490:"SecurityClassification",41491:"ImageHistory",41492:"SubjectLocation",41493:"ExposureIndex",41494:"TIFF-EPStandardID",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFormat",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"OwnerName",42033:"SerialNumber",42034:"LensInfo",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42112:"GDALMetadata",42113:"GDALNoData",42240:"Gamma",44992:"ExpandSoftware",44993:"ExpandLens",44994:"ExpandFilm",44995:"ExpandFilterLens",44996:"ExpandScanner",44997:"ExpandFlashLamp",48129:"PixelFormat",48130:"Transformation",48131:"Uncompressed",48132:"ImageType",48256:"ImageWidth",48257:"ImageHeight",48258:"WidthResolution",48259:"HeightResolution",48320:"ImageOffset",48321:"ImageByteCount",48322:"AlphaOffset",48323:"AlphaByteCount",48324:"ImageDataDiscard",48325:"AlphaDataDiscard",50215:"OceScanjobDesc",50216:"OceApplicationSelector",50217:"OceIDNumber",50218:"OceImageLogic",50255:"Annotations",50341:"PrintIM",50560:"USPTOOriginalContentType",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"DNGLensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50739:"ShadowScale",50740:"DNGPrivateData",50741:"MakerNoteSafety",50752:"RawImageSegmentation",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50781:"RawDataUniqueID",50784:"AliasLayerMetadata",50827:"OriginalRawFileName",50828:"OriginalRawFileData",50829:"ActiveArea",50830:"MaskedAreas",50831:"AsShotICCProfile",50832:"AsShotPreProfileMatrix",50833:"CurrentICCProfile",50834:"CurrentPreProfileMatrix",50879:"ColorimetricReference",50898:"PanasonicTitle",50899:"PanasonicTitle2",50931:"CameraCalibrationSig",50932:"ProfileCalibrationSig",50933:"ProfileIFD",50934:"AsShotProfileName",50935:"NoiseReductionApplied",50936:"ProfileName",50937:"ProfileHueSatMapDims",50938:"ProfileHueSatMapData1",50939:"ProfileHueSatMapData2",50940:"ProfileToneCurve",50941:"ProfileEmbedPolicy",50942:"ProfileCopyright",50964:"ForwardMatrix1",50965:"ForwardMatrix2",50966:"PreviewApplicationName",50967:"PreviewApplicationVersion",50968:"PreviewSettingsName",50969:"PreviewSettingsDigest",50970:"PreviewColorSpace",50971:"PreviewDateTime",50972:"RawImageDigest",50973:"OriginalRawFileDigest",50974:"SubTileBlockSize",50975:"RowInterleaveFactor",50981:"ProfileLookTableDims",50982:"ProfileLookTableData",51008:"OpcodeList1",51009:"OpcodeList2",51022:"OpcodeList3",51041:"NoiseProfile",51043:"TimeCodes",51044:"FrameRate",51058:"TStop",51081:"ReelName",51089:"OriginalDefaultFinalSize",51090:"OriginalBestQualitySize",51091:"OriginalDefaultCropSize",51105:"CameraLabel",51107:"ProfileHueSatMapEncoding",51108:"ProfileLookTableEncoding",51109:"BaselineExposureOffset",51110:"DefaultBlackRender",51111:"NewRawImageDigest",51112:"RawToPreviewGain",51125:"DefaultUserCrop",59932:"Padding",59933:"OffsetSchema",65e3:"OwnerName",65001:"SerialNumber",65002:"Lens",65024:"KDC_IFD",65100:"RawFile",65101:"Converter",65102:"WhiteBalance",65105:"Exposure",65106:"Shadows",65107:"Brightness",65108:"Contrast",65109:"Saturation",65110:"Sharpness",65111:"Smoothness",65112:"MoireFilter"},gps:{0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"}}),exifTags}var jpeg$1=jpeg$2,exif=exif$2,simplify=simplify$1;function ExifResult(e,t,r,n,a,s,o){this.startMarker=e,this.tags=t,this.imageSize=r,this.thumbnailOffset=n,this.thumbnailLength=a,this.thumbnailType=s,this.app1Offset=o}ExifResult.prototype={hasThumbnail:function(e){return!this.thumbnailOffset||!this.thumbnailLength?!1:typeof e!="string"?!0:e.toLowerCase().trim()==="image/jpeg"?this.thumbnailType===6:e.toLowerCase().trim()==="image/tiff"?this.thumbnailType===1:!1},getThumbnailOffset:function(){return this.app1Offset+6+this.thumbnailOffset},getThumbnailLength:function(){return this.thumbnailLength},getThumbnailBuffer:function(){return this._getThumbnailStream().nextBuffer(this.thumbnailLength)},_getThumbnailStream:function(){return this.startMarker.openWithOffset(this.getThumbnailOffset())},getImageSize:function(){return this.imageSize},getThumbnailSize:function(){var e=this._getThumbnailStream(),t;return jpeg$1.parseSections(e,function(r,n){jpeg$1.getSectionName(r).name==="SOF"&&(t=jpeg$1.getSizeFromSOFSection(n))}),t}};function Parser$5(e){this.stream=e,this.flags={readBinaryTags:!1,resolveTagNames:!0,simplifyValues:!0,imageSize:!0,hidePointers:!0,returnTags:!0}}Parser$5.prototype={enableBinaryFields:function(e){return this.flags.readBinaryTags=!!e,this},enablePointers:function(e){return this.flags.hidePointers=!e,this},enableTagNames:function(e){return this.flags.resolveTagNames=!!e,this},enableImageSize:function(e){return this.flags.imageSize=!!e,this},enableReturnTags:function(e){return this.flags.returnTags=!!e,this},enableSimpleValues:function(e){return this.flags.simplifyValues=!!e,this},parse:function(){var e=this.stream.mark(),t=e.openWithOffset(0),r=this.flags,n,a,s,o,l,f,u,m,v;return r.resolveTagNames&&(u=requireExifTags()),r.resolveTagNames?(n={},m=function(b){return n[b.name]},v=function(b,P){n[b.name]=P}):(n=[],m=function(b){var P;for(P=0;P<n.length;++P)if(n[P].type===b.type&&n[P].section===b.section)return n.value},v=function(b,P){var F;for(F=0;F<n.length;++F)if(n[F].type===b.type&&n[F].section===b.section){n.value=P;return}}),jpeg$1.parseSections(t,function(b,P){var F,C=P.offsetFrom(e);b===225?(F=exif.parseTags(P,function(D,E,k,j){if(!(!r.readBinaryTags&&j===7)){if(E===513){if(s=k[0],r.hidePointers)return}else if(E===514){if(o=k[0],r.hidePointers)return}else if(E===259&&(l=k[0],r.hidePointers))return;if(r.returnTags)if(r.simplifyValues&&(k=simplify.simplifyValue(k,j)),r.resolveTagNames){var W=D===exif.GPSIFD?u.gps:u.exif,M=W[E];M||(M=u.exif[E]),n.hasOwnProperty(M)||(n[M]=k)}else n.push({section:D,type:E,value:k})}}),F&&(f=C)):r.imageSize&&jpeg$1.getSectionName(b).name==="SOF"&&(a=jpeg$1.getSizeFromSOFSection(P))}),r.simplifyValues&&(simplify.castDegreeValues(m,v),simplify.castDateValues(m,v)),new ExifResult(e,n,a,s,o,l,f)}};var parser$1=Parser$5,bufferstream,hasRequiredBufferstream;function requireBufferstream(){if(hasRequiredBufferstream)return bufferstream;hasRequiredBufferstream=1;function e(t,r,n,a){this.buffer=t,this.offset=r||0,n=typeof n=="number"?n:t.length,this.endPosition=this.offset+n,this.setBigEndian(a)}return e.prototype={setBigEndian:function(t){this.bigEndian=!!t},nextUInt8:function(){var t=this.buffer.readUInt8(this.offset);return this.offset+=1,t},nextInt8:function(){var t=this.buffer.readInt8(this.offset);return this.offset+=1,t},nextUInt16:function(){var t=this.bigEndian?this.buffer.readUInt16BE(this.offset):this.buffer.readUInt16LE(this.offset);return this.offset+=2,t},nextUInt32:function(){var t=this.bigEndian?this.buffer.readUInt32BE(this.offset):this.buffer.readUInt32LE(this.offset);return this.offset+=4,t},nextInt16:function(){var t=this.bigEndian?this.buffer.readInt16BE(this.offset):this.buffer.readInt16LE(this.offset);return this.offset+=2,t},nextInt32:function(){var t=this.bigEndian?this.buffer.readInt32BE(this.offset):this.buffer.readInt32LE(this.offset);return this.offset+=4,t},nextFloat:function(){var t=this.bigEndian?this.buffer.readFloatBE(this.offset):this.buffer.readFloatLE(this.offset);return this.offset+=4,t},nextDouble:function(){var t=this.bigEndian?this.buffer.readDoubleBE(this.offset):this.buffer.readDoubleLE(this.offset);return this.offset+=8,t},nextBuffer:function(t){var r=this.buffer.slice(this.offset,this.offset+t);return this.offset+=t,r},remainingLength:function(){return this.endPosition-this.offset},nextString:function(t){var r=this.buffer.toString("utf8",this.offset,this.offset+t);return this.offset+=t,r},mark:function(){var t=this;return{openWithOffset:function(r){return r=(r||0)+this.offset,new e(t.buffer,r,t.endPosition-r,t.bigEndian)},offset:this.offset}},offsetFrom:function(t){return this.offset-t.offset},skip:function(t){this.offset+=t},branch:function(t,r){return r=typeof r=="number"?r:this.endPosition-(this.offset+t),new e(this.buffer,this.offset+t,r,this.bigEndian)}},bufferstream=e,bufferstream}var domBufferstream,hasRequiredDomBufferstream;function requireDomBufferstream(){if(hasRequiredDomBufferstream)return domBufferstream;hasRequiredDomBufferstream=1;function e(t,r,n,a,s,o){this.global=s,r=r||0,n=n||t.byteLength-r,this.arrayBuffer=t.slice(r,r+n),this.view=new s.DataView(this.arrayBuffer,0,this.arrayBuffer.byteLength),this.setBigEndian(a),this.offset=0,this.parentOffset=(o||0)+r}return e.prototype={setBigEndian:function(t){this.littleEndian=!t},nextUInt8:function(){var t=this.view.getUint8(this.offset);return this.offset+=1,t},nextInt8:function(){var t=this.view.getInt8(this.offset);return this.offset+=1,t},nextUInt16:function(){var t=this.view.getUint16(this.offset,this.littleEndian);return this.offset+=2,t},nextUInt32:function(){var t=this.view.getUint32(this.offset,this.littleEndian);return this.offset+=4,t},nextInt16:function(){var t=this.view.getInt16(this.offset,this.littleEndian);return this.offset+=2,t},nextInt32:function(){var t=this.view.getInt32(this.offset,this.littleEndian);return this.offset+=4,t},nextFloat:function(){var t=this.view.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t},nextDouble:function(){var t=this.view.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t},nextBuffer:function(t){var r=this.arrayBuffer.slice(this.offset,this.offset+t);return this.offset+=t,r},remainingLength:function(){return this.arrayBuffer.byteLength-this.offset},nextString:function(t){var r=this.arrayBuffer.slice(this.offset,this.offset+t);return r=String.fromCharCode.apply(null,new this.global.Uint8Array(r)),this.offset+=t,r},mark:function(){var t=this;return{openWithOffset:function(r){return r=(r||0)+this.offset,new e(t.arrayBuffer,r,t.arrayBuffer.byteLength-r,!t.littleEndian,t.global,t.parentOffset)},offset:this.offset,getParentOffset:function(){return t.parentOffset}}},offsetFrom:function(t){return this.parentOffset+this.offset-(t.offset+t.getParentOffset())},skip:function(t){this.offset+=t},branch:function(t,r){return r=typeof r=="number"?r:this.arrayBuffer.byteLength-(this.offset+t),new e(this.arrayBuffer,this.offset+t,r,!this.littleEndian,this.global,this.parentOffset)}},domBufferstream=e,domBufferstream}var Parser$4=parser$1;function getGlobal(){return(0,eval)("this")}var exifParser={create:function(e,t){if(t=t||getGlobal(),e instanceof t.ArrayBuffer){var r=requireDomBufferstream();return new Parser$4(new r(e,0,e.byteLength,!0,t))}else{var n=requireBufferstream();return new Parser$4(new n(e,0,e.length,!0))}}};const EXIFParser=getDefaultExportFromCjs$1(exifParser);async function getMIMEFromBuffer(e,t){const r=await FileType.fromBuffer(e);return r?r.mime:t?getType(t):null}function getExifOrientation(e){return e._exif&&e._exif.tags&&e._exif.tags.Orientation||1}function getExifOrientationTransformation(e){const t=e.getWidth(),r=e.getHeight();switch(getExifOrientation(e)){case 1:return null;case 2:return function(n,a){return[t-n-1,a]};case 3:return function(n,a){return[t-n-1,r-a-1]};case 4:return function(n,a){return[n,r-a-1]};case 5:return function(n,a){return[a,n]};case 6:return function(n,a){return[a,r-n-1]};case 7:return function(n,a){return[t-a-1,r-n-1]};case 8:return function(n,a){return[t-a-1,n]};default:return null}}function transformBitmap(e,t,r,n){const a=e.bitmap.data,s=e.bitmap.width,o=Buffer$1.alloc(a.length);for(let l=0;l<t;l++)for(let f=0;f<r;f++){const[u,m]=n(l,f),v=t*f+l<<2,b=s*m+u<<2,P=a.readUInt32BE(b);o.writeUInt32BE(P,v)}e.bitmap.data=o,e.bitmap.width=t,e.bitmap.height=r}function exifRotate(e){if(getExifOrientation(e)<2)return;const t=getExifOrientationTransformation(e),r=getExifOrientation(e)>4,n=r?e.bitmap.height:e.bitmap.width,a=r?e.bitmap.width:e.bitmap.height;transformBitmap(e,n,a,t)}async function parseBitmap(e,t,r){const n=await getMIMEFromBuffer(e,t);if(typeof n!="string")return r(new Error("Could not find MIME for Buffer <"+t+">"));this._originalMime=n.toLowerCase();try{const a=this.getMIME();if(this.constructor.decoders[a])this.bitmap=this.constructor.decoders[a](e);else return throwError.call(this,"Unsupported MIME type: "+a,r)}catch(a){return r.call(this,a,this)}try{this._exif=EXIFParser.create(e).parse(),exifRotate(this)}catch{}return r.call(this,null,this),this}function compositeBitmapOverBackground(e,t){return new e(t.bitmap.width,t.bitmap.height,t._background).composite(t,0,0).bitmap}function getBuffer(e,t){if(e===AUTO&&(e=this.getMIME()),typeof e!="string")return throwError.call(this,"mime must be a string",t);if(typeof t!="function")return throwError.call(this,"cb must be a function",t);if(e=e.toLowerCase(),this._rgba&&this.constructor.hasAlpha[e]?this.bitmap.data=Buffer$1.from(this.bitmap.data):this.bitmap.data=compositeBitmapOverBackground(this.constructor,this).data,this.constructor.encoders[e]){const r=this.constructor.encoders[e](this);r instanceof Promise?r.then(n=>{t.call(this,null,n)}):t.call(this,null,r)}else return throwError.call(this,"Unsupported MIME type: "+e,t);return this}function getBufferAsync(e){return promisify$1(getBuffer,this,e)}var define_process_env_default$1={};function _defineProperty(e,t,r){return t=_toPropertyKey(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _toPropertyKey(e){var t=_toPrimitive(e,"string");return typeof t=="symbol"?t:String(t)}function _toPrimitive(e,t){if(typeof e!="object"||e===null)return e;var r=e[Symbol.toPrimitive];if(r!==void 0){var n=r.call(e,t||"default");if(typeof n!="object")return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return(t==="string"?String:Number)(e)}const alphabet="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_",maxHashLength=[NaN,NaN];for(let e=2;e<65;e++){const t=anyBase$1(anyBase$1.BIN,alphabet.slice(0,e))(new Array(65).join("1"));maxHashLength.push(t.length)}function noop$2(){}function isArrayBuffer$1(e){return Object.prototype.toString.call(e).toLowerCase().indexOf("arraybuffer")>-1}function bufferFromArrayBuffer(e){const t=Buffer$1.alloc(e.byteLength),r=new Uint8Array(e);for(let n=0;n<t.length;++n)t[n]=r[n];return t}function loadFromURL(e,t){request(e,(r,n)=>r?t(r):typeof n=="object"&&Buffer$1.isBuffer(n)?t(null,n):typeof n=="object"&&isArrayBuffer$1(n)?t(null,bufferFromArrayBuffer(n)):new Error(`Could not load Buffer from <${e.url}>`))}function loadBufferFromPath(e,t){fs$2&&typeof fs$2.readFile=="function"&&!e.match(/^(http|ftp)s?:\/\/./)?fs$2.readFile(e,t):loadFromURL({url:e},t)}function isRawRGBAData(e){return e&&typeof e=="object"&&typeof e.width=="number"&&typeof e.height=="number"&&(Buffer$1.isBuffer(e.data)||e.data instanceof Uint8Array||typeof Uint8ClampedArray=="function"&&e.data instanceof Uint8ClampedArray)&&(e.data.length===e.width*e.height*4||e.data.length===e.width*e.height*3)}function makeRGBABufferFromRGB(e){if(e.length%3!==0)throw new Error("Buffer length is incorrect");const t=Buffer$1.allocUnsafe(e.length/3*4);let r=0;for(let n=0;n<e.length;n++)t[r]=e[n],(n+1)%3===0&&(t[++r]=255),r++;return t}const emptyBitmap={data:null,width:null,height:null};let Jimp$1=class nt extends EventEmitter$1{constructor(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];super(),_defineProperty(this,"bitmap",emptyBitmap),_defineProperty(this,"_background",0),_defineProperty(this,"_originalMime",nt.MIME_PNG),_defineProperty(this,"_exif",null),_defineProperty(this,"_rgba",!0),_defineProperty(this,"writeAsync",l=>promisify$1(this.write,this,l)),_defineProperty(this,"getBase64Async",l=>promisify$1(this.getBase64,this,l)),_defineProperty(this,"getBuffer",getBuffer),_defineProperty(this,"getBufferAsync",getBufferAsync),_defineProperty(this,"getPixelColour",this.getPixelColor),_defineProperty(this,"setPixelColour",this.setPixelColor);const a=this;let s=noop$2;isArrayBuffer$1(r[0])&&(r[0]=bufferFromArrayBuffer(r[0]));function o(){for(var l=arguments.length,f=new Array(l),u=0;u<l;u++)f[u]=arguments[u];const[m]=f,v=m||{};v.methodName="constructor",setTimeout(()=>{m&&s===noop$2?a.emitError("constructor",m):m||a.emitMulti("constructor","initialized"),s.call(a,...f)},1)}if(typeof r[0]=="number"&&typeof r[1]=="number"||parseInt(r[0],10)&&parseInt(r[1],10)){const l=parseInt(r[0],10),f=parseInt(r[1],10);if(s=r[2],typeof r[2]=="number"&&(this._background=r[2],s=r[3]),typeof r[2]=="string"&&(this._background=nt.cssColorToHex(r[2]),s=r[3]),typeof s>"u"&&(s=noop$2),typeof s!="function")return throwError.call(this,"cb must be a function",o);this.bitmap={data:Buffer$1.alloc(l*f*4),width:l,height:f};for(let u=0;u<this.bitmap.data.length;u+=4)this.bitmap.data.writeUInt32BE(this._background,u);o(null,this)}else if(typeof r[0]=="object"&&r[0].url){if(s=r[1]||noop$2,typeof s!="function")return throwError.call(this,"cb must be a function",o);loadFromURL(r[0],(l,f)=>{if(l)return throwError.call(this,l,o);this.parseBitmap(f,r[0].url,o)})}else if(r[0]instanceof nt){const[l]=r;if(s=r[1],typeof s>"u"&&(s=noop$2),typeof s!="function")return throwError.call(this,"cb must be a function",o);this.bitmap={data:Buffer$1.from(l.bitmap.data),width:l.bitmap.width,height:l.bitmap.height},this._quality=l._quality,this._deflateLevel=l._deflateLevel,this._deflateStrategy=l._deflateStrategy,this._filterType=l._filterType,this._rgba=l._rgba,this._background=l._background,this._originalMime=l._originalMime,o(null,this)}else if(isRawRGBAData(r[0])){const[l]=r;s=r[1]||noop$2;const u=l.width*l.height*4===l.data.length?Buffer$1.from(l.data):makeRGBABufferFromRGB(l.data);this.bitmap={data:u,width:l.width,height:l.height},o(null,this)}else if(typeof r[0]=="string"){const l=r[0];if(s=r[1],typeof s>"u"&&(s=noop$2),typeof s!="function")return throwError.call(this,"cb must be a function",o);loadBufferFromPath(l,(f,u)=>{if(f)return throwError.call(this,f,o);this.parseBitmap(u,l,o)})}else if(typeof r[0]=="object"&&Buffer$1.isBuffer(r[0])){const l=r[0];if(s=r[1],typeof s!="function")return throwError.call(this,"cb must be a function",o);this.parseBitmap(l,null,o)}else{s=r[r.length-1],typeof s!="function"&&(s=r[r.length-2],typeof s!="function"&&(s=noop$2));const l=nt.__extraConstructors.find(f=>f.test(...r));if(l)new Promise((f,u)=>{l.run.call(this,f,u,...r)}).then(()=>o(null,this)).catch(o);else return throwError.call(this,"No matching constructor overloading was found. Please see the docs for how to call the Jimp constructor.",o)}}parseBitmap(t,r,n){parseBitmap.call(this,t,null,n)}rgba(t,r){return typeof t!="boolean"?throwError.call(this,"bool must be a boolean, true for RGBA or false for RGB",r):(this._rgba=t,isNodePattern(r)&&r.call(this,null,this),this)}emitMulti(t,r){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};n=Object.assign(n,{methodName:t,eventName:r}),this.emit("any",n),t&&this.emit(t,n),this.emit(r,n)}emitError(t,r){this.emitMulti(t,"error",r)}getHeight(){return this.bitmap.height}getWidth(){return this.bitmap.width}inspect(){return"<Jimp "+(this.bitmap===emptyBitmap?"pending...":this.bitmap.width+"x"+this.bitmap.height)+">"}toString(){return"[object Jimp]"}getMIME(){return this._originalMime||nt.MIME_PNG}getExtension(){const t=this.getMIME();return getExtension(t)}write(t,r){if(!fs$2||!fs$2.createWriteStream)throw new Error("Cant access the filesystem. You can use the getBase64 method.");if(typeof t!="string")return throwError.call(this,"path must be a string",r);if(typeof r>"u"&&(r=noop$2),typeof r!="function")return throwError.call(this,"cb must be a function",r);const n=getType(t)||this.getMIME(),a=Path.parse(t);return a.dir&&fs$2.mkdirSync(a.dir,{recursive:!0}),this.getBuffer(n,(s,o)=>{if(s)return throwError.call(this,s,r);const l=fs$2.createWriteStream(t);l.on("open",()=>{l.write(o),l.end()}).on("error",f=>throwError.call(this,f,r)),l.on("finish",()=>{r.call(this,null,this)})}),this}getBase64(t,r){return t===nt.AUTO&&(t=this.getMIME()),typeof t!="string"?throwError.call(this,"mime must be a string",r):typeof r!="function"?throwError.call(this,"cb must be a function",r):(this.getBuffer(t,function(n,a){if(n)return throwError.call(this,n,r);const s="data:"+t+";base64,"+a.toString("base64");r.call(this,null,s)}),this)}hash(t,r){if(t=t||64,typeof t=="function"&&(r=t,t=64),typeof t!="number")return throwError.call(this,"base must be a number",r);if(t<2||t>64)return throwError.call(this,"base must be a number between 2 and 64",r);let n=this.pHash();for(n=anyBase$1(anyBase$1.BIN,alphabet.slice(0,t))(n);n.length<maxHashLength[t];)n="0"+n;return isNodePattern(r)&&r.call(this,null,n),n}pHash(){return new ImagePHash().getHash(this)}distanceFromHash(t){const r=new ImagePHash,n=r.getHash(this);return r.distance(n,t)}getPixelIndex(t,r,n,a){let s,o;if(typeof n=="function"&&typeof a>"u"&&(a=n,n=null),n||(n=nt.EDGE_EXTEND),typeof t!="number"||typeof r!="number")return throwError.call(this,"x and y must be numbers",a);t=Math.round(t),r=Math.round(r),s=t,o=r,n===nt.EDGE_EXTEND&&(t<0&&(s=0),t>=this.bitmap.width&&(s=this.bitmap.width-1),r<0&&(o=0),r>=this.bitmap.height&&(o=this.bitmap.height-1)),n===nt.EDGE_WRAP&&(t<0&&(s=this.bitmap.width+t),t>=this.bitmap.width&&(s=t%this.bitmap.width),r<0&&(o=this.bitmap.height+r),r>=this.bitmap.height&&(o=r%this.bitmap.height));let l=this.bitmap.width*o+s<<2;return(s<0||s>=this.bitmap.width)&&(l=-1),(o<0||o>=this.bitmap.height)&&(l=-1),isNodePattern(a)&&a.call(this,null,l),l}getPixelColor(t,r,n){if(typeof t!="number"||typeof r!="number")return throwError.call(this,"x and y must be numbers",n);t=Math.round(t),r=Math.round(r);const a=this.getPixelIndex(t,r),s=this.bitmap.data.readUInt32BE(a);return isNodePattern(n)&&n.call(this,null,s),s}setPixelColor(t,r,n,a){if(typeof t!="number"||typeof r!="number"||typeof n!="number")return throwError.call(this,"hex, x and y must be numbers",a);r=Math.round(r),n=Math.round(n);const s=this.getPixelIndex(r,n);return this.bitmap.data.writeUInt32BE(t,s),isNodePattern(a)&&a.call(this,null,this),this}hasAlpha(){for(let t=0;t<this.bitmap.height;t++)for(let r=0;r<this.bitmap.width;r++){const n=this.bitmap.width*t+r<<2;if(this.bitmap.data[n+3]!==255)return!0}return!1}scanIterator(t,r,n,a){return typeof t!="number"||typeof r!="number"?throwError.call(this,"x and y must be numbers"):typeof n!="number"||typeof a!="number"?throwError.call(this,"w and h must be numbers"):scanIterator(this,t,r,n,a)}};function addConstants(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Jimp$1;Object.entries(e).forEach(r=>{let[n,a]=r;t[n]=a})}function addJimpMethods(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Jimp$1;Object.entries(e).forEach(r=>{let[n,a]=r;t.prototype[n]=a})}addConstants(constants$7);addJimpMethods({composite});Jimp$1.__extraConstructors=[];Jimp$1.appendConstructorOption=function(e,t,r){Jimp$1.__extraConstructors.push({name:e,test:t,run:r})};Jimp$1.read=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return new Promise((n,a)=>{new Jimp$1(...t,(s,o)=>{s?a(s):n(o)})})};Jimp$1.create=Jimp$1.read;Jimp$1.rgbaToInt=function(e,t,r,n,a){if(typeof e!="number"||typeof t!="number"||typeof r!="number"||typeof n!="number")return throwError.call(this,"r, g, b and a must be numbers",a);if(e<0||e>255)return throwError.call(this,"r must be between 0 and 255",a);if((t<0||t>255)&&throwError.call(this,"g must be between 0 and 255",a),r<0||r>255)return throwError.call(this,"b must be between 0 and 255",a);if(n<0||n>255)return throwError.call(this,"a must be between 0 and 255",a);e=Math.round(e),r=Math.round(r),t=Math.round(t),n=Math.round(n);const s=e*Math.pow(256,3)+t*Math.pow(256,2)+r*Math.pow(256,1)+n*Math.pow(256,0);return isNodePattern(a)&&a.call(this,null,s),s};Jimp$1.intToRGBA=function(e,t){if(typeof e!="number")return throwError.call(this,"i must be a number",t);const r={};return r.r=Math.floor(e/Math.pow(256,3)),r.g=Math.floor((e-r.r*Math.pow(256,3))/Math.pow(256,2)),r.b=Math.floor((e-r.r*Math.pow(256,3)-r.g*Math.pow(256,2))/Math.pow(256,1)),r.a=Math.floor((e-r.r*Math.pow(256,3)-r.g*Math.pow(256,2)-r.b*Math.pow(256,1))/Math.pow(256,0)),isNodePattern(t)&&t.call(this,null,r),r};Jimp$1.cssColorToHex=function(e){return e=e||0,typeof e=="number"?Number(e):parseInt(tinycolor(e).toHex8(),16)};Jimp$1.limit255=function(e){return e=Math.max(e,0),e=Math.min(e,255),e};Jimp$1.diff=function(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:.1;if(!(e instanceof Jimp$1)||!(t instanceof Jimp$1))return throwError.call(this,"img1 and img2 must be an Jimp images");const n=e.bitmap,a=t.bitmap;if((n.width!==a.width||n.height!==a.height)&&(n.width*n.height>a.width*a.height?e=e.cloneQuiet().resize(a.width,a.height):t=t.cloneQuiet().resize(n.width,n.height)),typeof r!="number"||r<0||r>1)return throwError.call(this,"threshold must be a number between 0 and 1");const s=new Jimp$1(n.width,n.height,4294967295);return{percent:pixelMatch(n.data,a.data,s.bitmap.data,s.bitmap.width,s.bitmap.height,{threshold:r})/(s.bitmap.width*s.bitmap.height),image:s}};Jimp$1.distance=function(e,t){const r=new ImagePHash,n=r.getHash(e),a=r.getHash(t);return r.distance(n,a)};Jimp$1.compareHashes=function(e,t){return new ImagePHash().distance(e,t)};Jimp$1.colorDiff=function(e,t){const r=s=>Math.pow(s,2),{max:n}=Math,a=255*255*3;return e.a!==0&&!e.a&&(e.a=255),t.a!==0&&!t.a&&(t.a=255),(n(r(e.r-t.r),r(e.r-t.r-e.a+t.a))+n(r(e.g-t.g),r(e.g-t.g-e.a+t.a))+n(r(e.b-t.b),r(e.b-t.b-e.a+t.a)))/a};function jimpEvMethod(e,t,r){const n="before-"+t,a=t.replace(/e$/,"")+"ed";Jimp$1.prototype[e]=function(){let s;for(var o=arguments.length,l=new Array(o),f=0;f<o;f++)l[f]=arguments[f];const u=l[r.length-1],m=this;typeof u=="function"?(s=function(){for(var b=arguments.length,P=new Array(b),F=0;F<b;F++)P[F]=arguments[F];const[C,D]=P;C?m.emitError(e,C):m.emitMulti(e,a,{[e]:D}),u.apply(this,P)},l[l.length-1]=s):s=!1,this.emitMulti(e,n);let v;try{v=r.apply(this,l),s||this.emitMulti(e,a,{[e]:v})}catch(b){b.methodName=e,this.emitError(e,b)}return v},Jimp$1.prototype[e+"Quiet"]=r}jimpEvMethod("clone","clone",function(e){const t=new Jimp$1(this);return isNodePattern(e)&&e.call(t,null,t),t});function jimpEvChange(e,t){jimpEvMethod(e,"change",t)}jimpEvChange("background",function(e,t){return typeof e!="number"?throwError.call(this,"hex must be a hexadecimal rgba value",t):(this._background=e,isNodePattern(t)&&t.call(this,null,this),this)});jimpEvChange("scan",function(e,t,r,n,a,s){if(typeof e!="number"||typeof t!="number")return throwError.call(this,"x and y must be numbers",s);if(typeof r!="number"||typeof n!="number")return throwError.call(this,"w and h must be numbers",s);if(typeof a!="function")return throwError.call(this,"f must be a function",s);const o=scan(this,e,t,r,n,a);return isNodePattern(s)&&s.call(this,null,o),o});if(define_process_env_default$1.ENVIRONMENT==="BROWSER"){let e;typeof window<"u"&&typeof window=="object"&&(e=window),typeof self<"u"&&typeof self=="object"&&(e=self),e.Jimp=Jimp$1,e.Buffer=Buffer$1}const Jimp$2=Jimp$1;function configure(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Jimp$2;const r={hasAlpha:{},encoders:{},decoders:{},class:{},constants:{}};function n(o){Object.entries(o).forEach(l=>{let[f,u]=l;r[f]={...r[f],...u}})}function a(o){const l=o();Array.isArray(l.mime)?addType(...l.mime):Object.entries(l.mime).forEach(f=>addType(...f)),delete l.mime,n(l)}function s(o){const l=o(jimpEvChange)||{};!l.class&&!l.constants?n({class:l}):n(l)}return e.types&&(e.types.forEach(a),t.decoders={...t.decoders,...r.decoders},t.encoders={...t.encoders,...r.encoders},t.hasAlpha={...t.hasAlpha,...r.hasAlpha}),e.plugins&&e.plugins.forEach(s),addJimpMethods(r.class,t),addConstants(r.constants,t),Jimp$2}var timm$1={};Object.defineProperty(timm$1,"__esModule",{value:!0});timm$1.clone=clone;timm$1.addLast=addLast;timm$1.addFirst=addFirst;timm$1.removeLast=removeLast;timm$1.removeFirst=removeFirst;timm$1.insert=insert;timm$1.removeAt=removeAt;timm$1.replaceAt=replaceAt;timm$1.getIn=getIn;timm$1.set=set;timm$1.setIn=setIn;timm$1.update=update;timm$1.updateIn=updateIn;timm$1.merge=merge;var mergeDeep_1=timm$1.mergeDeep=mergeDeep;timm$1.mergeIn=mergeIn;timm$1.omit=omit;timm$1.addDefaults=addDefaults;timm$1.default=void 0;/*!
 * Timm
 *
 * Immutability helpers with fast reads and acceptable writes.
 *
 * @copyright Guillermo Grau Panea 2016
 * @license MIT
 */const INVALID_ARGS="INVALID_ARGS";function throwStr(e){throw new Error(e)}function getKeysAndSymbols(e){const t=Object.keys(e);return Object.getOwnPropertySymbols?t.concat(Object.getOwnPropertySymbols(e)):t}const hasOwnProperty$2={}.hasOwnProperty;function clone(e){if(Array.isArray(e))return e.slice();const t=e,r=getKeysAndSymbols(t),n={};for(let a=0;a<r.length;a++){const s=r[a];n[s]=t[s]}return n}function isObject(e){return e!=null&&typeof e=="object"}function addLast(e,t){return Array.isArray(t)?e.concat(t):e.concat([t])}function addFirst(e,t){return Array.isArray(t)?t.concat(e):[t].concat(e)}function removeLast(e){return e.length?e.slice(0,e.length-1):e}function removeFirst(e){return e.length?e.slice(1):e}function insert(e,t,r){return e.slice(0,t).concat(Array.isArray(r)?r:[r]).concat(e.slice(t))}function removeAt(e,t){return t>=e.length||t<0?e:e.slice(0,t).concat(e.slice(t+1))}function replaceAt(e,t,r){if(e[t]===r)return e;const n=e.length,a=Array(n);for(let s=0;s<n;s++)a[s]=e[s];return a[t]=r,a}function getIn(e,t){if(Array.isArray(t)||throwStr(INVALID_ARGS),e==null)return;let r=e;for(let n=0;n<t.length;n++){const a=t[n];if(r=r!=null?r[a]:void 0,r===void 0)return r}return r}function set(e,t,r){let n=e;if(n==null&&(n=typeof t=="number"?[]:{}),n[t]===r)return n;const a=clone(n);return a[t]=r,a}function setIn(e,t,r){return t.length?doSetIn(e,t,r,0):r}function doSetIn(e,t,r,n){let a;const s=t[n];if(n===t.length-1)a=r;else{const o=isObject(e)&&isObject(e[s])?e[s]:typeof t[n+1]=="number"?[]:{};a=doSetIn(o,t,r,n+1)}return set(e,s,a)}function update(e,t,r){const n=e==null?void 0:e[t],a=r(n);return set(e,t,a)}function updateIn(e,t,r){const n=getIn(e,t),a=r(n);return setIn(e,t,a)}function merge(e,t,r,n,a,s,...o){return o.length?doMerge.call(null,!1,!1,e,t,r,n,a,s,...o):doMerge(!1,!1,e,t,r,n,a,s)}function mergeDeep(e,t,r,n,a,s,...o){return o.length?doMerge.call(null,!1,!0,e,t,r,n,a,s,...o):doMerge(!1,!0,e,t,r,n,a,s)}function mergeIn(e,t,r,n,a,s,o,...l){let f=getIn(e,t);f==null&&(f={});let u;return l.length?u=doMerge.call(null,!1,!1,f,r,n,a,s,o,...l):u=doMerge(!1,!1,f,r,n,a,s,o),setIn(e,t,u)}function omit(e,t){const r=Array.isArray(t)?t:[t];let n=!1;for(let o=0;o<r.length;o++)if(hasOwnProperty$2.call(e,r[o])){n=!0;break}if(!n)return e;const a={},s=getKeysAndSymbols(e);for(let o=0;o<s.length;o++){const l=s[o];r.indexOf(l)>=0||(a[l]=e[l])}return a}function addDefaults(e,t,r,n,a,s,...o){return o.length?doMerge.call(null,!0,!1,e,t,r,n,a,s,...o):doMerge(!0,!1,e,t,r,n,a,s)}function doMerge(e,t,r,...n){let a=r;a==null&&throwStr(INVALID_ARGS);let s=!1;for(let o=0;o<n.length;o++){const l=n[o];if(l==null)continue;const f=getKeysAndSymbols(l);if(f.length)for(let u=0;u<=f.length;u++){const m=f[u];if(e&&a[m]!==void 0)continue;let v=l[m];t&&isObject(a[m])&&isObject(v)&&(v=doMerge(e,t,a[m],v)),!(v===void 0||v===a[m])&&(s||(s=!0,a=clone(a)),a[m]=v)}}return a}const timm={clone,addLast,addFirst,removeLast,removeFirst,insert,removeAt,replaceAt,getIn,set,setIn,update,updateIn,merge,mergeDeep,mergeIn,omit,addDefaults};var _default=timm;timm$1.default=_default;var encoder$1={exports:{}};(function(e){function t(n){var a=Math.floor,s=new Array(64),o=new Array(64),l=new Array(64),f=new Array(64),u,m,v,b,P=new Array(65535),F=new Array(65535),C=new Array(64),D=new Array(64),E=[],k=0,j=7,W=new Array(64),M=new Array(64),S=new Array(64),T=new Array(256),V=new Array(2048),_,ee=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],re=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],te=[0,1,2,3,4,5,6,7,8,9,10,11],oe=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],he=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],me=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],we=[0,1,2,3,4,5,6,7,8,9,10,11],Se=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],be=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function le(H){for(var ce=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],ye=0;ye<64;ye++){var Ee=a((ce[ye]*H+50)/100);Ee<1?Ee=1:Ee>255&&(Ee=255),s[ee[ye]]=Ee}for(var Ce=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],ge=0;ge<64;ge++){var xe=a((Ce[ge]*H+50)/100);xe<1?xe=1:xe>255&&(xe=255),o[ee[ge]]=xe}for(var Fe=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],Re=0,Oe=0;Oe<8;Oe++)for(var Me=0;Me<8;Me++)l[Re]=1/(s[ee[Re]]*Fe[Oe]*Fe[Me]*8),f[Re]=1/(o[ee[Re]]*Fe[Oe]*Fe[Me]*8),Re++}function ae(H,ce){for(var ye=0,Ee=0,Ce=new Array,ge=1;ge<=16;ge++){for(var xe=1;xe<=H[ge];xe++)Ce[ce[Ee]]=[],Ce[ce[Ee]][0]=ye,Ce[ce[Ee]][1]=ge,Ee++,ye++;ye*=2}return Ce}function ke(){u=ae(re,te),m=ae(me,we),v=ae(oe,he),b=ae(Se,be)}function Ne(){for(var H=1,ce=2,ye=1;ye<=15;ye++){for(var Ee=H;Ee<ce;Ee++)F[32767+Ee]=ye,P[32767+Ee]=[],P[32767+Ee][1]=ye,P[32767+Ee][0]=Ee;for(var Ce=-(ce-1);Ce<=-H;Ce++)F[32767+Ce]=ye,P[32767+Ce]=[],P[32767+Ce][1]=ye,P[32767+Ce][0]=ce-1+Ce;H<<=1,ce<<=1}}function de(){for(var H=0;H<256;H++)V[H]=19595*H,V[H+256>>0]=38470*H,V[H+512>>0]=7471*H+32768,V[H+768>>0]=-11059*H,V[H+1024>>0]=-21709*H,V[H+1280>>0]=32768*H+8421375,V[H+1536>>0]=-27439*H,V[H+1792>>0]=-5329*H}function $(H){for(var ce=H[0],ye=H[1]-1;ye>=0;)ce&1<<ye&&(k|=1<<j),ye--,j--,j<0&&(k==255?(ie(255),ie(0)):ie(k),j=7,k=0)}function ie(H){E.push(H)}function U(H){ie(H>>8&255),ie(H&255)}function L(H,ce){var ye,Ee,Ce,ge,xe,Fe,Re,Oe,Me=0,Q,A=8,O=64;for(Q=0;Q<A;++Q){ye=H[Me],Ee=H[Me+1],Ce=H[Me+2],ge=H[Me+3],xe=H[Me+4],Fe=H[Me+5],Re=H[Me+6],Oe=H[Me+7];var X=ye+Oe,pe=ye-Oe,ne=Ee+Re,Pe=Ee-Re,K=Ce+Fe,Be=Ce-Fe,De=ge+xe,z=ge-xe,Te=X+De,He=X-De,ue=ne+K,Ie=ne-K;H[Me]=Te+ue,H[Me+4]=Te-ue;var ze=(Ie+He)*.707106781;H[Me+2]=He+ze,H[Me+6]=He-ze,Te=z+Be,ue=Be+Pe,Ie=Pe+pe;var Ge=(Te-Ie)*.382683433,Ve=.5411961*Te+Ge,je=1.306562965*Ie+Ge,Le=ue*.707106781,Ke=pe+Le,Ze=pe-Le;H[Me+5]=Ze+Ve,H[Me+3]=Ze-Ve,H[Me+1]=Ke+je,H[Me+7]=Ke-je,Me+=8}for(Me=0,Q=0;Q<A;++Q){ye=H[Me],Ee=H[Me+8],Ce=H[Me+16],ge=H[Me+24],xe=H[Me+32],Fe=H[Me+40],Re=H[Me+48],Oe=H[Me+56];var qe=ye+Oe,Ye=ye-Oe,We=Ee+Re,Xe=Ee-Re,tt=Ce+Fe,rt=Ce-Fe,Je=ge+xe,$e=ge-xe,Ue=qe+Je,et=qe-Je,_e=We+tt,it=We-tt;H[Me]=Ue+_e,H[Me+32]=Ue-_e;var lt=(it+et)*.707106781;H[Me+16]=et+lt,H[Me+48]=et-lt,Ue=$e+rt,_e=rt+Xe,it=Xe+Ye;var ct=(Ue-it)*.382683433,ft=.5411961*Ue+ct,ut=1.306562965*it+ct,ht=_e*.707106781,dt=Ye+ht,pt=Ye-ht;H[Me+40]=pt+ft,H[Me+24]=pt-ft,H[Me+8]=dt+ut,H[Me+56]=dt-ut,Me++}var at;for(Q=0;Q<O;++Q)at=H[Q]*ce[Q],C[Q]=at>0?at+.5|0:at-.5|0;return C}function J(){U(65504),U(16),ie(74),ie(70),ie(73),ie(70),ie(0),ie(1),ie(1),ie(0),U(1),U(1),ie(0),ie(0)}function se(H){if(H){U(65505),H[0]===69&&H[1]===120&&H[2]===105&&H[3]===102?U(H.length+2):(U(H.length+5+2),ie(69),ie(120),ie(105),ie(102),ie(0));for(var ce=0;ce<H.length;ce++)ie(H[ce])}}function ve(H,ce){U(65472),U(17),ie(8),U(ce),U(H),ie(3),ie(1),ie(17),ie(0),ie(2),ie(17),ie(1),ie(3),ie(17),ie(1)}function Z(){U(65499),U(132),ie(0);for(var H=0;H<64;H++)ie(s[H]);ie(1);for(var ce=0;ce<64;ce++)ie(o[ce])}function I(){U(65476),U(418),ie(0);for(var H=0;H<16;H++)ie(re[H+1]);for(var ce=0;ce<=11;ce++)ie(te[ce]);ie(16);for(var ye=0;ye<16;ye++)ie(oe[ye+1]);for(var Ee=0;Ee<=161;Ee++)ie(he[Ee]);ie(1);for(var Ce=0;Ce<16;Ce++)ie(me[Ce+1]);for(var ge=0;ge<=11;ge++)ie(we[ge]);ie(17);for(var xe=0;xe<16;xe++)ie(Se[xe+1]);for(var Fe=0;Fe<=161;Fe++)ie(be[Fe])}function q(H){typeof H>"u"||H.constructor!==Array||H.forEach(ce=>{if(typeof ce=="string"){U(65534);var ye=ce.length;U(ye+2);var Ee;for(Ee=0;Ee<ye;Ee++)ie(ce.charCodeAt(Ee))}})}function fe(){U(65498),U(12),ie(3),ie(1),ie(0),ie(2),ie(17),ie(3),ie(17),ie(0),ie(63),ie(0)}function Ae(H,ce,ye,Ee,Ce){for(var ge=Ce[0],xe=Ce[240],Fe,Re=16,Oe=63,Me=64,Q=L(H,ce),A=0;A<Me;++A)D[ee[A]]=Q[A];var O=D[0]-ye;ye=D[0],O==0?$(Ee[0]):(Fe=32767+O,$(Ee[F[Fe]]),$(P[Fe]));for(var X=63;X>0&&D[X]==0;X--);if(X==0)return $(ge),ye;for(var pe=1,ne;pe<=X;){for(var Pe=pe;D[pe]==0&&pe<=X;++pe);var K=pe-Pe;if(K>=Re){ne=K>>4;for(var Be=1;Be<=ne;++Be)$(xe);K=K&15}Fe=32767+D[pe],$(Ce[(K<<4)+F[Fe]]),$(P[Fe]),pe++}return X!=Oe&&$(ge),ye}function G(){for(var H=String.fromCharCode,ce=0;ce<256;ce++)T[ce]=H(ce)}this.encode=function(H,ce){new Date().getTime(),ce&&N(ce),E=new Array,k=0,j=7,U(65496),J(),q(H.comments),se(H.exifBuffer),Z(),ve(H.width,H.height),I(),fe();var ye=0,Ee=0,Ce=0;k=0,j=7,this.encode.displayName="_encode_";for(var ge=H.data,xe=H.width,Fe=H.height,Re=xe*4,Oe,Me=0,Q,A,O,X,pe,ne,Pe,K;Me<Fe;){for(Oe=0;Oe<Re;){for(X=Re*Me+Oe,pe=X,ne=-1,Pe=0,K=0;K<64;K++)Pe=K>>3,ne=(K&7)*4,pe=X+Pe*Re+ne,Me+Pe>=Fe&&(pe-=Re*(Me+1+Pe-Fe)),Oe+ne>=Re&&(pe-=Oe+ne-Re+4),Q=ge[pe++],A=ge[pe++],O=ge[pe++],W[K]=(V[Q]+V[A+256>>0]+V[O+512>>0]>>16)-128,M[K]=(V[Q+768>>0]+V[A+1024>>0]+V[O+1280>>0]>>16)-128,S[K]=(V[Q+1280>>0]+V[A+1536>>0]+V[O+1792>>0]>>16)-128;ye=Ae(W,l,ye,u,v),Ee=Ae(M,f,Ee,m,b),Ce=Ae(S,f,Ce,m,b),Oe+=32}Me+=8}if(j>=0){var Be=[];Be[1]=j+1,Be[0]=(1<<j+1)-1,$(Be)}return U(65497),Buffer$1.from(E)};function N(H){if(H<=0&&(H=1),H>100&&(H=100),_!=H){var ce=0;H<50?ce=Math.floor(5e3/H):ce=Math.floor(200-H*2),le(ce),_=H}}function B(){var H=new Date().getTime();n||(n=50),G(),ke(),Ne(),de(),N(n),new Date().getTime()-H}B()}e.exports=r;function r(n,a){typeof a>"u"&&(a=50);var s=new t(a),o=s.encode(n,a);return{data:o,width:n.width,height:n.height}}})(encoder$1);var encoderExports=encoder$1.exports,decoder$1={exports:{}};(function(e){var t=function(){var a=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),s=4017,o=799,l=3406,f=2276,u=1567,m=3784,v=5793,b=2896;function P(){}function F(M,S){for(var T=0,V=[],_,ee,re=16;re>0&&!M[re-1];)re--;V.push({children:[],index:0});var te=V[0],oe;for(_=0;_<re;_++){for(ee=0;ee<M[_];ee++){for(te=V.pop(),te.children[te.index]=S[T];te.index>0;){if(V.length===0)throw new Error("Could not recreate Huffman Table");te=V.pop()}for(te.index++,V.push(te);V.length<=_;)V.push(oe={children:[],index:0}),te.children[te.index]=oe.children,te=oe;T++}_+1<re&&(V.push(oe={children:[],index:0}),te.children[te.index]=oe.children,te=oe)}return V[0].children}function C(M,S,T,V,_,ee,re,te,oe,he){T.precision,T.samplesPerLine,T.scanLines;var me=T.mcusPerLine,we=T.progressive;T.maxH,T.maxV;var Se=S,be=0,le=0;function ae(){if(le>0)return le--,be>>le&1;if(be=M[S++],be==255){var Fe=M[S++];if(Fe)throw new Error("unexpected marker: "+(be<<8|Fe).toString(16))}return le=7,be>>>7}function ke(Fe){for(var Re=Fe,Oe;(Oe=ae())!==null;){if(Re=Re[Oe],typeof Re=="number")return Re;if(typeof Re!="object")throw new Error("invalid huffman sequence")}return null}function Ne(Fe){for(var Re=0;Fe>0;){var Oe=ae();if(Oe===null)return;Re=Re<<1|Oe,Fe--}return Re}function de(Fe){var Re=Ne(Fe);return Re>=1<<Fe-1?Re:Re+(-1<<Fe)+1}function $(Fe,Re){var Oe=ke(Fe.huffmanTableDC),Me=Oe===0?0:de(Oe);Re[0]=Fe.pred+=Me;for(var Q=1;Q<64;){var A=ke(Fe.huffmanTableAC),O=A&15,X=A>>4;if(O===0){if(X<15)break;Q+=16;continue}Q+=X;var pe=a[Q];Re[pe]=de(O),Q++}}function ie(Fe,Re){var Oe=ke(Fe.huffmanTableDC),Me=Oe===0?0:de(Oe)<<oe;Re[0]=Fe.pred+=Me}function U(Fe,Re){Re[0]|=ae()<<oe}var L=0;function J(Fe,Re){if(L>0){L--;return}for(var Oe=ee,Me=re;Oe<=Me;){var Q=ke(Fe.huffmanTableAC),A=Q&15,O=Q>>4;if(A===0){if(O<15){L=Ne(O)+(1<<O)-1;break}Oe+=16;continue}Oe+=O;var X=a[Oe];Re[X]=de(A)*(1<<oe),Oe++}}var se=0,ve;function Z(Fe,Re){for(var Oe=ee,Me=re,Q=0;Oe<=Me;){var A=a[Oe],O=Re[A]<0?-1:1;switch(se){case 0:var X=ke(Fe.huffmanTableAC),pe=X&15,Q=X>>4;if(pe===0)Q<15?(L=Ne(Q)+(1<<Q),se=4):(Q=16,se=1);else{if(pe!==1)throw new Error("invalid ACn encoding");ve=de(pe),se=Q?2:3}continue;case 1:case 2:Re[A]?Re[A]+=(ae()<<oe)*O:(Q--,Q===0&&(se=se==2?3:0));break;case 3:Re[A]?Re[A]+=(ae()<<oe)*O:(Re[A]=ve<<oe,se=0);break;case 4:Re[A]&&(Re[A]+=(ae()<<oe)*O);break}Oe++}se===4&&(L--,L===0&&(se=0))}function I(Fe,Re,Oe,Me,Q){var A=Oe/me|0,O=Oe%me,X=A*Fe.v+Me,pe=O*Fe.h+Q;Fe.blocks[X]===void 0&&he.tolerantDecoding||Re(Fe,Fe.blocks[X][pe])}function q(Fe,Re,Oe){var Me=Oe/Fe.blocksPerLine|0,Q=Oe%Fe.blocksPerLine;Fe.blocks[Me]===void 0&&he.tolerantDecoding||Re(Fe,Fe.blocks[Me][Q])}var fe=V.length,Ae,G,N,B,H,ce;we?ee===0?ce=te===0?ie:U:ce=te===0?J:Z:ce=$;var ye=0,Ee,Ce;fe==1?Ce=V[0].blocksPerLine*V[0].blocksPerColumn:Ce=me*T.mcusPerColumn,_||(_=Ce);for(var ge,xe;ye<Ce;){for(G=0;G<fe;G++)V[G].pred=0;if(L=0,fe==1)for(Ae=V[0],H=0;H<_;H++)q(Ae,ce,ye),ye++;else for(H=0;H<_;H++){for(G=0;G<fe;G++)for(Ae=V[G],ge=Ae.h,xe=Ae.v,N=0;N<xe;N++)for(B=0;B<ge;B++)I(Ae,ce,ye,N,B);if(ye++,ye===Ce)break}if(ye===Ce)do{if(M[S]===255&&M[S+1]!==0)break;S+=1}while(S<M.length-2);if(le=0,Ee=M[S]<<8|M[S+1],Ee<65280)throw new Error("marker was not found");if(Ee>=65488&&Ee<=65495)S+=2;else break}return S-Se}function D(M,S){var T=[],V=S.blocksPerLine,_=S.blocksPerColumn,ee=V<<3,re=new Int32Array(64),te=new Uint8Array(64);function oe(Ne,de,$){var ie=S.quantizationTable,U,L,J,se,ve,Z,I,q,fe,Ae=$,G;for(G=0;G<64;G++)Ae[G]=Ne[G]*ie[G];for(G=0;G<8;++G){var N=8*G;if(Ae[1+N]==0&&Ae[2+N]==0&&Ae[3+N]==0&&Ae[4+N]==0&&Ae[5+N]==0&&Ae[6+N]==0&&Ae[7+N]==0){fe=v*Ae[0+N]+512>>10,Ae[0+N]=fe,Ae[1+N]=fe,Ae[2+N]=fe,Ae[3+N]=fe,Ae[4+N]=fe,Ae[5+N]=fe,Ae[6+N]=fe,Ae[7+N]=fe;continue}U=v*Ae[0+N]+128>>8,L=v*Ae[4+N]+128>>8,J=Ae[2+N],se=Ae[6+N],ve=b*(Ae[1+N]-Ae[7+N])+128>>8,q=b*(Ae[1+N]+Ae[7+N])+128>>8,Z=Ae[3+N]<<4,I=Ae[5+N]<<4,fe=U-L+1>>1,U=U+L+1>>1,L=fe,fe=J*m+se*u+128>>8,J=J*u-se*m+128>>8,se=fe,fe=ve-I+1>>1,ve=ve+I+1>>1,I=fe,fe=q+Z+1>>1,Z=q-Z+1>>1,q=fe,fe=U-se+1>>1,U=U+se+1>>1,se=fe,fe=L-J+1>>1,L=L+J+1>>1,J=fe,fe=ve*f+q*l+2048>>12,ve=ve*l-q*f+2048>>12,q=fe,fe=Z*o+I*s+2048>>12,Z=Z*s-I*o+2048>>12,I=fe,Ae[0+N]=U+q,Ae[7+N]=U-q,Ae[1+N]=L+I,Ae[6+N]=L-I,Ae[2+N]=J+Z,Ae[5+N]=J-Z,Ae[3+N]=se+ve,Ae[4+N]=se-ve}for(G=0;G<8;++G){var B=G;if(Ae[8+B]==0&&Ae[16+B]==0&&Ae[24+B]==0&&Ae[32+B]==0&&Ae[40+B]==0&&Ae[48+B]==0&&Ae[56+B]==0){fe=v*$[G+0]+8192>>14,Ae[0+B]=fe,Ae[8+B]=fe,Ae[16+B]=fe,Ae[24+B]=fe,Ae[32+B]=fe,Ae[40+B]=fe,Ae[48+B]=fe,Ae[56+B]=fe;continue}U=v*Ae[0+B]+2048>>12,L=v*Ae[32+B]+2048>>12,J=Ae[16+B],se=Ae[48+B],ve=b*(Ae[8+B]-Ae[56+B])+2048>>12,q=b*(Ae[8+B]+Ae[56+B])+2048>>12,Z=Ae[24+B],I=Ae[40+B],fe=U-L+1>>1,U=U+L+1>>1,L=fe,fe=J*m+se*u+2048>>12,J=J*u-se*m+2048>>12,se=fe,fe=ve-I+1>>1,ve=ve+I+1>>1,I=fe,fe=q+Z+1>>1,Z=q-Z+1>>1,q=fe,fe=U-se+1>>1,U=U+se+1>>1,se=fe,fe=L-J+1>>1,L=L+J+1>>1,J=fe,fe=ve*f+q*l+2048>>12,ve=ve*l-q*f+2048>>12,q=fe,fe=Z*o+I*s+2048>>12,Z=Z*s-I*o+2048>>12,I=fe,Ae[0+B]=U+q,Ae[56+B]=U-q,Ae[8+B]=L+I,Ae[48+B]=L-I,Ae[16+B]=J+Z,Ae[40+B]=J-Z,Ae[24+B]=se+ve,Ae[32+B]=se-ve}for(G=0;G<64;++G){var H=128+(Ae[G]+8>>4);de[G]=H<0?0:H>255?255:H}}W(ee*_*8);for(var he,me,we=0;we<_;we++){var Se=we<<3;for(he=0;he<8;he++)T.push(new Uint8Array(ee));for(var be=0;be<V;be++){oe(S.blocks[we][be],te,re);var le=0,ae=be<<3;for(me=0;me<8;me++){var ke=T[Se+me];for(he=0;he<8;he++)ke[ae+he]=te[le++]}}}return T}function E(M){return M<0?0:M>255?255:M}P.prototype={load:function(S){var T=new XMLHttpRequest;T.open("GET",S,!0),T.responseType="arraybuffer",T.onload=(function(){var V=new Uint8Array(T.response||T.mozResponseArrayBuffer);this.parse(V),this.onload&&this.onload()}).bind(this),T.send(null)},parse:function(S){var T=this.opts.maxResolutionInMP*1e3*1e3,V=0;S.length;function _(){var O=S[V]<<8|S[V+1];return V+=2,O}function ee(){var O=_(),X=S.subarray(V,V+O-2);return V+=X.length,X}function re(O){var X=1,pe=1,ne,Pe;for(Pe in O.components)O.components.hasOwnProperty(Pe)&&(ne=O.components[Pe],X<ne.h&&(X=ne.h),pe<ne.v&&(pe=ne.v));var K=Math.ceil(O.samplesPerLine/8/X),Be=Math.ceil(O.scanLines/8/pe);for(Pe in O.components)if(O.components.hasOwnProperty(Pe)){ne=O.components[Pe];var De=Math.ceil(Math.ceil(O.samplesPerLine/8)*ne.h/X),z=Math.ceil(Math.ceil(O.scanLines/8)*ne.v/pe),Te=K*ne.h,He=Be*ne.v,ue=He*Te,Ie=[];W(ue*256);for(var ze=0;ze<He;ze++){for(var Ge=[],Ve=0;Ve<Te;Ve++)Ge.push(new Int32Array(64));Ie.push(Ge)}ne.blocksPerLine=De,ne.blocksPerColumn=z,ne.blocks=Ie}O.maxH=X,O.maxV=pe,O.mcusPerLine=K,O.mcusPerColumn=Be}var te=null,oe=null,he,me,we=[],Se=[],be=[],le=[],ae=_(),ke=-1;if(this.comments=[],ae!=65496)throw new Error("SOI not found");for(ae=_();ae!=65497;){var Ne,de;switch(ae){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var $=ee();if(ae===65534){var ie=String.fromCharCode.apply(null,$);this.comments.push(ie)}ae===65504&&$[0]===74&&$[1]===70&&$[2]===73&&$[3]===70&&$[4]===0&&(te={version:{major:$[5],minor:$[6]},densityUnits:$[7],xDensity:$[8]<<8|$[9],yDensity:$[10]<<8|$[11],thumbWidth:$[12],thumbHeight:$[13],thumbData:$.subarray(14,14+3*$[12]*$[13])}),ae===65505&&$[0]===69&&$[1]===120&&$[2]===105&&$[3]===102&&$[4]===0&&(this.exifBuffer=$.subarray(5,$.length)),ae===65518&&$[0]===65&&$[1]===100&&$[2]===111&&$[3]===98&&$[4]===101&&$[5]===0&&(oe={version:$[6],flags0:$[7]<<8|$[8],flags1:$[9]<<8|$[10],transformCode:$[11]});break;case 65499:for(var U=_(),L=U+V-2;V<L;){var J=S[V++];W(256);var se=new Int32Array(64);if(J>>4)if(J>>4===1)for(de=0;de<64;de++){var ve=a[de];se[ve]=_()}else throw new Error("DQT: invalid table spec");else for(de=0;de<64;de++){var ve=a[de];se[ve]=S[V++]}we[J&15]=se}break;case 65472:case 65473:case 65474:_(),he={},he.extended=ae===65473,he.progressive=ae===65474,he.precision=S[V++],he.scanLines=_(),he.samplesPerLine=_(),he.components={},he.componentsOrder=[];var Z=he.scanLines*he.samplesPerLine;if(Z>T){var I=Math.ceil((Z-T)/1e6);throw new Error(`maxResolutionInMP limit exceeded by ${I}MP`)}var q=S[V++],fe;for(Ne=0;Ne<q;Ne++){fe=S[V];var Ae=S[V+1]>>4,G=S[V+1]&15,N=S[V+2];if(Ae<=0||G<=0)throw new Error("Invalid sampling factor, expected values above 0");he.componentsOrder.push(fe),he.components[fe]={h:Ae,v:G,quantizationIdx:N},V+=3}re(he),Se.push(he);break;case 65476:var B=_();for(Ne=2;Ne<B;){var H=S[V++],ce=new Uint8Array(16),ye=0;for(de=0;de<16;de++,V++)ye+=ce[de]=S[V];W(16+ye);var Ee=new Uint8Array(ye);for(de=0;de<ye;de++,V++)Ee[de]=S[V];Ne+=17+ye,(H>>4?be:le)[H&15]=F(ce,Ee)}break;case 65501:_(),me=_();break;case 65500:_(),_();break;case 65498:_();var Ce=S[V++],ge=[],xe;for(Ne=0;Ne<Ce;Ne++){xe=he.components[S[V++]];var Fe=S[V++];xe.huffmanTableDC=le[Fe>>4],xe.huffmanTableAC=be[Fe&15],ge.push(xe)}var Re=S[V++],Oe=S[V++],Me=S[V++],Q=C(S,V,he,ge,me,Re,Oe,Me>>4,Me&15,this.opts);V+=Q;break;case 65535:S[V]!==255&&V--;break;default:if(S[V-3]==255&&S[V-2]>=192&&S[V-2]<=254){V-=3;break}else if(ae===224||ae==225){if(ke!==-1)throw new Error(`first unknown JPEG marker at offset ${ke.toString(16)}, second unknown JPEG marker ${ae.toString(16)} at offset ${(V-1).toString(16)}`);ke=V-1;const O=_();if(S[V+O-2]===255){V+=O-2;break}}throw new Error("unknown JPEG marker "+ae.toString(16))}ae=_()}if(Se.length!=1)throw new Error("only single frame JPEGs supported");for(var Ne=0;Ne<Se.length;Ne++){var A=Se[Ne].components;for(var de in A)A[de].quantizationTable=we[A[de].quantizationIdx],delete A[de].quantizationIdx}this.width=he.samplesPerLine,this.height=he.scanLines,this.jfif=te,this.adobe=oe,this.components=[];for(var Ne=0;Ne<he.componentsOrder.length;Ne++){var xe=he.components[he.componentsOrder[Ne]];this.components.push({lines:D(he,xe),scaleX:xe.h/he.maxH,scaleY:xe.v/he.maxV})}},getData:function(S,T){var V=this.width/S,_=this.height/T,ee,re,te,oe,he,me,we,Se,be,le,ae=0,ke,Ne,de,$,ie,U,L,J,se,ve,Z,I=S*T*this.components.length;W(I);var q=new Uint8Array(I);switch(this.components.length){case 1:for(ee=this.components[0],le=0;le<T;le++)for(he=ee.lines[0|le*ee.scaleY*_],be=0;be<S;be++)ke=he[0|be*ee.scaleX*V],q[ae++]=ke;break;case 2:for(ee=this.components[0],re=this.components[1],le=0;le<T;le++)for(he=ee.lines[0|le*ee.scaleY*_],me=re.lines[0|le*re.scaleY*_],be=0;be<S;be++)ke=he[0|be*ee.scaleX*V],q[ae++]=ke,ke=me[0|be*re.scaleX*V],q[ae++]=ke;break;case 3:for(Z=!0,this.adobe&&this.adobe.transformCode?Z=!0:typeof this.opts.colorTransform<"u"&&(Z=!!this.opts.colorTransform),ee=this.components[0],re=this.components[1],te=this.components[2],le=0;le<T;le++)for(he=ee.lines[0|le*ee.scaleY*_],me=re.lines[0|le*re.scaleY*_],we=te.lines[0|le*te.scaleY*_],be=0;be<S;be++)Z?(ke=he[0|be*ee.scaleX*V],Ne=me[0|be*re.scaleX*V],de=we[0|be*te.scaleX*V],J=E(ke+1.402*(de-128)),se=E(ke-.3441363*(Ne-128)-.71413636*(de-128)),ve=E(ke+1.772*(Ne-128))):(J=he[0|be*ee.scaleX*V],se=me[0|be*re.scaleX*V],ve=we[0|be*te.scaleX*V]),q[ae++]=J,q[ae++]=se,q[ae++]=ve;break;case 4:if(!this.adobe)throw new Error("Unsupported color mode (4 components)");for(Z=!1,this.adobe&&this.adobe.transformCode?Z=!0:typeof this.opts.colorTransform<"u"&&(Z=!!this.opts.colorTransform),ee=this.components[0],re=this.components[1],te=this.components[2],oe=this.components[3],le=0;le<T;le++)for(he=ee.lines[0|le*ee.scaleY*_],me=re.lines[0|le*re.scaleY*_],we=te.lines[0|le*te.scaleY*_],Se=oe.lines[0|le*oe.scaleY*_],be=0;be<S;be++)Z?(ke=he[0|be*ee.scaleX*V],Ne=me[0|be*re.scaleX*V],de=we[0|be*te.scaleX*V],$=Se[0|be*oe.scaleX*V],ie=255-E(ke+1.402*(de-128)),U=255-E(ke-.3441363*(Ne-128)-.71413636*(de-128)),L=255-E(ke+1.772*(Ne-128))):(ie=he[0|be*ee.scaleX*V],U=me[0|be*re.scaleX*V],L=we[0|be*te.scaleX*V],$=Se[0|be*oe.scaleX*V]),q[ae++]=255-ie,q[ae++]=255-U,q[ae++]=255-L,q[ae++]=255-$;break;default:throw new Error("Unsupported color mode")}return q},copyToImageData:function(S,T){var V=S.width,_=S.height,ee=S.data,re=this.getData(V,_),te=0,oe=0,he,me,we,Se,be,le,ae,ke,Ne;switch(this.components.length){case 1:for(me=0;me<_;me++)for(he=0;he<V;he++)we=re[te++],ee[oe++]=we,ee[oe++]=we,ee[oe++]=we,T&&(ee[oe++]=255);break;case 3:for(me=0;me<_;me++)for(he=0;he<V;he++)ae=re[te++],ke=re[te++],Ne=re[te++],ee[oe++]=ae,ee[oe++]=ke,ee[oe++]=Ne,T&&(ee[oe++]=255);break;case 4:for(me=0;me<_;me++)for(he=0;he<V;he++)be=re[te++],le=re[te++],we=re[te++],Se=re[te++],ae=255-E(be*(1-Se/255)+Se),ke=255-E(le*(1-Se/255)+Se),Ne=255-E(we*(1-Se/255)+Se),ee[oe++]=ae,ee[oe++]=ke,ee[oe++]=Ne,T&&(ee[oe++]=255);break;default:throw new Error("Unsupported color mode")}}};var k=0,j=0;function W(M=0){var S=k+M;if(S>j){var T=Math.ceil((S-j)/1024/1024);throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${T}MB`)}k=S}return P.resetMaxMemoryUsage=function(M){k=0,j=M},P.getBytesAllocated=function(){return k},P.requestMemoryAllocation=W,P}();e.exports=r;function r(n,a={}){var s={colorTransform:void 0,useTArray:!1,formatAsRGBA:!0,tolerantDecoding:!0,maxResolutionInMP:100,maxMemoryUsageInMB:512},o={...s,...a},l=new Uint8Array(n),f=new t;f.opts=o,t.resetMaxMemoryUsage(o.maxMemoryUsageInMB*1024*1024),f.parse(l);var u=o.formatAsRGBA?4:3,m=f.width*f.height*u;try{t.requestMemoryAllocation(m);var v={width:f.width,height:f.height,exifBuffer:f.exifBuffer,data:o.useTArray?new Uint8Array(m):Buffer$1.alloc(m)};f.comments.length>0&&(v.comments=f.comments)}catch(b){throw b instanceof RangeError?new Error("Could not allocate enough memory for the image. Required: "+m):b instanceof ReferenceError&&b.message==="Buffer is not defined"?new Error("Buffer is not globally defined in this environment. Consider setting useTArray to true"):b}return f.copyToImageData(v,o.formatAsRGBA),v}})(decoder$1);var decoderExports=decoder$1.exports,encode$2=encoderExports,decode$2=decoderExports,jpegJs={encode:encode$2,decode:decode$2};const JPEG=getDefaultExportFromCjs$1(jpegJs),MIME_TYPE$4="image/jpeg",jpeg=()=>({mime:{[MIME_TYPE$4]:["jpeg","jpg","jpe"]},constants:{MIME_JPEG:MIME_TYPE$4},decoders:{[MIME_TYPE$4]:JPEG.decode},encoders:{[MIME_TYPE$4]:e=>JPEG.encode(e.bitmap,e._quality).data},class:{_quality:100,quality(e,t){return typeof e!="number"?throwError.call(this,"n must be a number",t):e<0||e>100?throwError.call(this,"n must be a number 0 - 100",t):(this._quality=Math.round(e),isNodePattern(t)&&t.call(this,null,this),this)}}});var util$5={},types$1={},shams$1=function e(){if(typeof Symbol!="function"||typeof Object.getOwnPropertySymbols!="function")return!1;if(typeof Symbol.iterator=="symbol")return!0;var t={},r=Symbol("test"),n=Object(r);if(typeof r=="string"||Object.prototype.toString.call(r)!=="[object Symbol]"||Object.prototype.toString.call(n)!=="[object Symbol]")return!1;var a=42;t[r]=a;for(r in t)return!1;if(typeof Object.keys=="function"&&Object.keys(t).length!==0||typeof Object.getOwnPropertyNames=="function"&&Object.getOwnPropertyNames(t).length!==0)return!1;var s=Object.getOwnPropertySymbols(t);if(s.length!==1||s[0]!==r||!Object.prototype.propertyIsEnumerable.call(t,r))return!1;if(typeof Object.getOwnPropertyDescriptor=="function"){var o=Object.getOwnPropertyDescriptor(t,r);if(o.value!==a||o.enumerable!==!0)return!1}return!0},hasSymbols$3=shams$1,shams=function e(){return hasSymbols$3()&&!!Symbol.toStringTag},origSymbol=typeof Symbol<"u"&&Symbol,hasSymbolSham=shams$1,hasSymbols$2=function e(){return typeof origSymbol!="function"||typeof Symbol!="function"||typeof origSymbol("foo")!="symbol"||typeof Symbol("bar")!="symbol"?!1:hasSymbolSham()},test={foo:{}},$Object=Object,hasProto$1=function e(){return{__proto__:test}.foo===test.foo&&!({__proto__:null}instanceof $Object)},ERROR_MESSAGE="Function.prototype.bind called on incompatible ",toStr$4=Object.prototype.toString,max=Math.max,funcType="[object Function]",concatty=function e(t,r){for(var n=[],a=0;a<t.length;a+=1)n[a]=t[a];for(var s=0;s<r.length;s+=1)n[s+t.length]=r[s];return n},slicy=function e(t,r){for(var n=[],a=r||0,s=0;a<t.length;a+=1,s+=1)n[s]=t[a];return n},joiny=function(e,t){for(var r="",n=0;n<e.length;n+=1)r+=e[n],n+1<e.length&&(r+=t);return r},implementation$7=function e(t){var r=this;if(typeof r!="function"||toStr$4.apply(r)!==funcType)throw new TypeError(ERROR_MESSAGE+r);for(var n=slicy(arguments,1),a,s=function(){if(this instanceof a){var m=r.apply(this,concatty(n,arguments));return Object(m)===m?m:this}return r.apply(t,concatty(n,arguments))},o=max(0,r.length-n.length),l=[],f=0;f<o;f++)l[f]="$"+f;if(a=Function("binder","return function ("+joiny(l,",")+"){ return binder.apply(this,arguments); }")(s),r.prototype){var u=function(){};u.prototype=r.prototype,a.prototype=new u,u.prototype=null}return a},implementation$6=implementation$7,functionBind=Function.prototype.bind||implementation$6,call=Function.prototype.call,$hasOwn=Object.prototype.hasOwnProperty,bind$1=functionBind,hasown=bind$1.call(call,$hasOwn),undefined$1,$SyntaxError$1=SyntaxError,$Function=Function,$TypeError$2=TypeError,getEvalledConstructor=function(e){try{return $Function('"use strict"; return ('+e+").constructor;")()}catch{}},$gOPD$1=Object.getOwnPropertyDescriptor;if($gOPD$1)try{$gOPD$1({},"")}catch{$gOPD$1=null}var throwTypeError=function(){throw new $TypeError$2},ThrowTypeError=$gOPD$1?function(){try{return arguments.callee,throwTypeError}catch{try{return $gOPD$1(arguments,"callee").get}catch{return throwTypeError}}}():throwTypeError,hasSymbols$1=hasSymbols$2(),hasProto=hasProto$1(),getProto$1=Object.getPrototypeOf||(hasProto?function(e){return e.__proto__}:null),needsEval={},TypedArray=typeof Uint8Array>"u"||!getProto$1?undefined$1:getProto$1(Uint8Array),INTRINSICS={"%AggregateError%":typeof AggregateError>"u"?undefined$1:AggregateError,"%Array%":Array,"%ArrayBuffer%":typeof ArrayBuffer>"u"?undefined$1:ArrayBuffer,"%ArrayIteratorPrototype%":hasSymbols$1&&getProto$1?getProto$1([][Symbol.iterator]()):undefined$1,"%AsyncFromSyncIteratorPrototype%":undefined$1,"%AsyncFunction%":needsEval,"%AsyncGenerator%":needsEval,"%AsyncGeneratorFunction%":needsEval,"%AsyncIteratorPrototype%":needsEval,"%Atomics%":typeof Atomics>"u"?undefined$1:Atomics,"%BigInt%":typeof BigInt>"u"?undefined$1:BigInt,"%BigInt64Array%":typeof BigInt64Array>"u"?undefined$1:BigInt64Array,"%BigUint64Array%":typeof BigUint64Array>"u"?undefined$1:BigUint64Array,"%Boolean%":Boolean,"%DataView%":typeof DataView>"u"?undefined$1:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":typeof Float32Array>"u"?undefined$1:Float32Array,"%Float64Array%":typeof Float64Array>"u"?undefined$1:Float64Array,"%FinalizationRegistry%":typeof FinalizationRegistry>"u"?undefined$1:FinalizationRegistry,"%Function%":$Function,"%GeneratorFunction%":needsEval,"%Int8Array%":typeof Int8Array>"u"?undefined$1:Int8Array,"%Int16Array%":typeof Int16Array>"u"?undefined$1:Int16Array,"%Int32Array%":typeof Int32Array>"u"?undefined$1:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":hasSymbols$1&&getProto$1?getProto$1(getProto$1([][Symbol.iterator]())):undefined$1,"%JSON%":typeof JSON=="object"?JSON:undefined$1,"%Map%":typeof Map>"u"?undefined$1:Map,"%MapIteratorPrototype%":typeof Map>"u"||!hasSymbols$1||!getProto$1?undefined$1:getProto$1(new Map()[Symbol.iterator]()),"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":typeof Promise>"u"?undefined$1:Promise,"%Proxy%":typeof Proxy>"u"?undefined$1:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":typeof Reflect>"u"?undefined$1:Reflect,"%RegExp%":RegExp,"%Set%":typeof Set>"u"?undefined$1:Set,"%SetIteratorPrototype%":typeof Set>"u"||!hasSymbols$1||!getProto$1?undefined$1:getProto$1(new Set()[Symbol.iterator]()),"%SharedArrayBuffer%":typeof SharedArrayBuffer>"u"?undefined$1:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":hasSymbols$1&&getProto$1?getProto$1(""[Symbol.iterator]()):undefined$1,"%Symbol%":hasSymbols$1?Symbol:undefined$1,"%SyntaxError%":$SyntaxError$1,"%ThrowTypeError%":ThrowTypeError,"%TypedArray%":TypedArray,"%TypeError%":$TypeError$2,"%Uint8Array%":typeof Uint8Array>"u"?undefined$1:Uint8Array,"%Uint8ClampedArray%":typeof Uint8ClampedArray>"u"?undefined$1:Uint8ClampedArray,"%Uint16Array%":typeof Uint16Array>"u"?undefined$1:Uint16Array,"%Uint32Array%":typeof Uint32Array>"u"?undefined$1:Uint32Array,"%URIError%":URIError,"%WeakMap%":typeof WeakMap>"u"?undefined$1:WeakMap,"%WeakRef%":typeof WeakRef>"u"?undefined$1:WeakRef,"%WeakSet%":typeof WeakSet>"u"?undefined$1:WeakSet};if(getProto$1)try{null.error}catch(e){var errorProto=getProto$1(getProto$1(e));INTRINSICS["%Error.prototype%"]=errorProto}var doEval=function e(t){var r;if(t==="%AsyncFunction%")r=getEvalledConstructor("async function () {}");else if(t==="%GeneratorFunction%")r=getEvalledConstructor("function* () {}");else if(t==="%AsyncGeneratorFunction%")r=getEvalledConstructor("async function* () {}");else if(t==="%AsyncGenerator%"){var n=e("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if(t==="%AsyncIteratorPrototype%"){var a=e("%AsyncGenerator%");a&&getProto$1&&(r=getProto$1(a.prototype))}return INTRINSICS[t]=r,r},LEGACY_ALIASES={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},bind=functionBind,hasOwn=hasown,$concat=bind.call(Function.call,Array.prototype.concat),$spliceApply=bind.call(Function.apply,Array.prototype.splice),$replace=bind.call(Function.call,String.prototype.replace),$strSlice=bind.call(Function.call,String.prototype.slice),$exec=bind.call(Function.call,RegExp.prototype.exec),rePropName=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,reEscapeChar=/\\(\\)?/g,stringToPath=function e(t){var r=$strSlice(t,0,1),n=$strSlice(t,-1);if(r==="%"&&n!=="%")throw new $SyntaxError$1("invalid intrinsic syntax, expected closing `%`");if(n==="%"&&r!=="%")throw new $SyntaxError$1("invalid intrinsic syntax, expected opening `%`");var a=[];return $replace(t,rePropName,function(s,o,l,f){a[a.length]=l?$replace(f,reEscapeChar,"$1"):o||s}),a},getBaseIntrinsic=function e(t,r){var n=t,a;if(hasOwn(LEGACY_ALIASES,n)&&(a=LEGACY_ALIASES[n],n="%"+a[0]+"%"),hasOwn(INTRINSICS,n)){var s=INTRINSICS[n];if(s===needsEval&&(s=doEval(n)),typeof s>"u"&&!r)throw new $TypeError$2("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:a,name:n,value:s}}throw new $SyntaxError$1("intrinsic "+t+" does not exist!")},getIntrinsic=function e(t,r){if(typeof t!="string"||t.length===0)throw new $TypeError$2("intrinsic name must be a non-empty string");if(arguments.length>1&&typeof r!="boolean")throw new $TypeError$2('"allowMissing" argument must be a boolean');if($exec(/^%?[^%]*%?$/,t)===null)throw new $SyntaxError$1("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=stringToPath(t),a=n.length>0?n[0]:"",s=getBaseIntrinsic("%"+a+"%",r),o=s.name,l=s.value,f=!1,u=s.alias;u&&(a=u[0],$spliceApply(n,$concat([0,1],u)));for(var m=1,v=!0;m<n.length;m+=1){var b=n[m],P=$strSlice(b,0,1),F=$strSlice(b,-1);if((P==='"'||P==="'"||P==="`"||F==='"'||F==="'"||F==="`")&&P!==F)throw new $SyntaxError$1("property names with quotes must have matching quotes");if((b==="constructor"||!v)&&(f=!0),a+="."+b,o="%"+a+"%",hasOwn(INTRINSICS,o))l=INTRINSICS[o];else if(l!=null){if(!(b in l)){if(!r)throw new $TypeError$2("base intrinsic for "+t+" exists, but the property is not available.");return}if($gOPD$1&&m+1>=n.length){var C=$gOPD$1(l,b);v=!!C,v&&"get"in C&&!("originalValue"in C.get)?l=C.get:l=l[b]}else v=hasOwn(l,b),l=l[b];v&&!f&&(INTRINSICS[o]=l)}}return l},callBind$2={exports:{}},GetIntrinsic$4=getIntrinsic,$defineProperty$1=GetIntrinsic$4("%Object.defineProperty%",!0),hasPropertyDescriptors$1=function e(){if($defineProperty$1)try{return $defineProperty$1({},"a",{value:1}),!0}catch{return!1}return!1};hasPropertyDescriptors$1.hasArrayLengthDefineBug=function e(){if(!hasPropertyDescriptors$1())return null;try{return $defineProperty$1([],"length",{value:1}).length!==1}catch{return!0}};var hasPropertyDescriptors_1=hasPropertyDescriptors$1,GetIntrinsic$3=getIntrinsic,$gOPD=GetIntrinsic$3("%Object.getOwnPropertyDescriptor%",!0);if($gOPD)try{$gOPD([],"length")}catch{$gOPD=null}var gopd$1=$gOPD,hasPropertyDescriptors=hasPropertyDescriptors_1(),GetIntrinsic$2=getIntrinsic,$defineProperty=hasPropertyDescriptors&&GetIntrinsic$2("%Object.defineProperty%",!0);if($defineProperty)try{$defineProperty({},"a",{value:1})}catch{$defineProperty=!1}var $SyntaxError=GetIntrinsic$2("%SyntaxError%"),$TypeError$1=GetIntrinsic$2("%TypeError%"),gopd=gopd$1,defineDataProperty=function e(t,r,n){if(!t||typeof t!="object"&&typeof t!="function")throw new $TypeError$1("`obj` must be an object or a function`");if(typeof r!="string"&&typeof r!="symbol")throw new $TypeError$1("`property` must be a string or a symbol`");if(arguments.length>3&&typeof arguments[3]!="boolean"&&arguments[3]!==null)throw new $TypeError$1("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&typeof arguments[4]!="boolean"&&arguments[4]!==null)throw new $TypeError$1("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&typeof arguments[5]!="boolean"&&arguments[5]!==null)throw new $TypeError$1("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&typeof arguments[6]!="boolean")throw new $TypeError$1("`loose`, if provided, must be a boolean");var a=arguments.length>3?arguments[3]:null,s=arguments.length>4?arguments[4]:null,o=arguments.length>5?arguments[5]:null,l=arguments.length>6?arguments[6]:!1,f=!!gopd&&gopd(t,r);if($defineProperty)$defineProperty(t,r,{configurable:o===null&&f?f.configurable:!o,enumerable:a===null&&f?f.enumerable:!a,value:n,writable:s===null&&f?f.writable:!s});else if(l||!a&&!s&&!o)t[r]=n;else throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.")},GetIntrinsic$1=getIntrinsic,define=defineDataProperty,hasDescriptors=hasPropertyDescriptors_1(),gOPD$1=gopd$1,$TypeError=GetIntrinsic$1("%TypeError%"),$floor=GetIntrinsic$1("%Math.floor%"),setFunctionLength=function e(t,r){if(typeof t!="function")throw new $TypeError("`fn` is not a function");if(typeof r!="number"||r<0||r>4294967295||$floor(r)!==r)throw new $TypeError("`length` must be a positive 32-bit integer");var n=arguments.length>2&&!!arguments[2],a=!0,s=!0;if("length"in t&&gOPD$1){var o=gOPD$1(t,"length");o&&!o.configurable&&(a=!1),o&&!o.writable&&(s=!1)}return(a||s||!n)&&(hasDescriptors?define(t,"length",r,!0,!0):define(t,"length",r)),t};(function(e){var t=functionBind,r=getIntrinsic,n=setFunctionLength,a=r("%TypeError%"),s=r("%Function.prototype.apply%"),o=r("%Function.prototype.call%"),l=r("%Reflect.apply%",!0)||t.call(o,s),f=r("%Object.defineProperty%",!0),u=r("%Math.max%");if(f)try{f({},"a",{value:1})}catch{f=null}e.exports=function(b){if(typeof b!="function")throw new a("a function is required");var P=l(t,o,arguments);return n(P,1+u(0,b.length-(arguments.length-1)),!0)};var m=function(){return l(t,s,arguments)};f?f(e.exports,"apply",{value:m}):e.exports.apply=m})(callBind$2);var callBindExports=callBind$2.exports,GetIntrinsic=getIntrinsic,callBind$1=callBindExports,$indexOf$1=callBind$1(GetIntrinsic("String.prototype.indexOf")),callBound$3=function e(t,r){var n=GetIntrinsic(t,!!r);return typeof n=="function"&&$indexOf$1(t,".prototype.")>-1?callBind$1(n):n},hasToStringTag$3=shams(),callBound$2=callBound$3,$toString$1=callBound$2("Object.prototype.toString"),isStandardArguments=function e(t){return hasToStringTag$3&&t&&typeof t=="object"&&Symbol.toStringTag in t?!1:$toString$1(t)==="[object Arguments]"},isLegacyArguments=function e(t){return isStandardArguments(t)?!0:t!==null&&typeof t=="object"&&typeof t.length=="number"&&t.length>=0&&$toString$1(t)!=="[object Array]"&&$toString$1(t.callee)==="[object Function]"},supportsStandardArguments=function(){return isStandardArguments(arguments)}();isStandardArguments.isLegacyArguments=isLegacyArguments;var isArguments$1=supportsStandardArguments?isStandardArguments:isLegacyArguments,toStr$3=Object.prototype.toString,fnToStr$1=Function.prototype.toString,isFnRegex=/^\s*(?:function)?\*/,hasToStringTag$2=shams(),getProto=Object.getPrototypeOf,getGeneratorFunc=function(){if(!hasToStringTag$2)return!1;try{return Function("return function*() {}")()}catch{}},GeneratorFunction,isGeneratorFunction=function e(t){if(typeof t!="function")return!1;if(isFnRegex.test(fnToStr$1.call(t)))return!0;if(!hasToStringTag$2){var r=toStr$3.call(t);return r==="[object GeneratorFunction]"}if(!getProto)return!1;if(typeof GeneratorFunction>"u"){var n=getGeneratorFunc();GeneratorFunction=n?getProto(n):!1}return getProto(t)===GeneratorFunction},fnToStr=Function.prototype.toString,reflectApply=typeof Reflect=="object"&&Reflect!==null&&Reflect.apply,badArrayLike,isCallableMarker;if(typeof reflectApply=="function"&&typeof Object.defineProperty=="function")try{badArrayLike=Object.defineProperty({},"length",{get:function(){throw isCallableMarker}}),isCallableMarker={},reflectApply(function(){throw 42},null,badArrayLike)}catch(e){e!==isCallableMarker&&(reflectApply=null)}else reflectApply=null;var constructorRegex=/^\s*class\b/,isES6ClassFn=function e(t){try{var r=fnToStr.call(t);return constructorRegex.test(r)}catch{return!1}},tryFunctionObject=function e(t){try{return isES6ClassFn(t)?!1:(fnToStr.call(t),!0)}catch{return!1}},toStr$2=Object.prototype.toString,objectClass="[object Object]",fnClass="[object Function]",genClass="[object GeneratorFunction]",ddaClass="[object HTMLAllCollection]",ddaClass2="[object HTML document.all class]",ddaClass3="[object HTMLCollection]",hasToStringTag$1=typeof Symbol=="function"&&!!Symbol.toStringTag,isIE68=!(0 in[,]),isDDA=function e(){return!1};if(typeof document=="object"){var all=document.all;toStr$2.call(all)===toStr$2.call(document.all)&&(isDDA=function(t){if((isIE68||!t)&&(typeof t>"u"||typeof t=="object"))try{var r=toStr$2.call(t);return(r===ddaClass||r===ddaClass2||r===ddaClass3||r===objectClass)&&t("")==null}catch{}return!1})}var isCallable$1=reflectApply?function e(t){if(isDDA(t))return!0;if(!t||typeof t!="function"&&typeof t!="object")return!1;try{reflectApply(t,null,badArrayLike)}catch(r){if(r!==isCallableMarker)return!1}return!isES6ClassFn(t)&&tryFunctionObject(t)}:function e(t){if(isDDA(t))return!0;if(!t||typeof t!="function"&&typeof t!="object")return!1;if(hasToStringTag$1)return tryFunctionObject(t);if(isES6ClassFn(t))return!1;var r=toStr$2.call(t);return r!==fnClass&&r!==genClass&&!/^\[object HTML/.test(r)?!1:tryFunctionObject(t)},isCallable=isCallable$1,toStr$1=Object.prototype.toString,hasOwnProperty$1=Object.prototype.hasOwnProperty,forEachArray$1=function e(t,r,n){for(var a=0,s=t.length;a<s;a++)hasOwnProperty$1.call(t,a)&&(n==null?r(t[a],a,t):r.call(n,t[a],a,t))},forEachString=function e(t,r,n){for(var a=0,s=t.length;a<s;a++)n==null?r(t.charAt(a),a,t):r.call(n,t.charAt(a),a,t)},forEachObject=function e(t,r,n){for(var a in t)hasOwnProperty$1.call(t,a)&&(n==null?r(t[a],a,t):r.call(n,t[a],a,t))},forEach$1=function e(t,r,n){if(!isCallable(r))throw new TypeError("iterator must be a function");var a;arguments.length>=3&&(a=n),toStr$1.call(t)==="[object Array]"?forEachArray$1(t,r,a):typeof t=="string"?forEachString(t,r,a):forEachObject(t,r,a)},forEach_1=forEach$1,possibleNames=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],g$1=typeof globalThis>"u"?commonjsGlobal:globalThis,availableTypedArrays$1=function e(){for(var t=[],r=0;r<possibleNames.length;r++)typeof g$1[possibleNames[r]]=="function"&&(t[t.length]=possibleNames[r]);return t},forEach=forEach_1,availableTypedArrays=availableTypedArrays$1,callBind=callBindExports,callBound$1=callBound$3,gOPD=gopd$1,$toString=callBound$1("Object.prototype.toString"),hasToStringTag=shams(),g=typeof globalThis>"u"?commonjsGlobal:globalThis,typedArrays=availableTypedArrays(),$slice=callBound$1("String.prototype.slice"),getPrototypeOf=Object.getPrototypeOf,$indexOf=callBound$1("Array.prototype.indexOf",!0)||function e(t,r){for(var n=0;n<t.length;n+=1)if(t[n]===r)return n;return-1},cache={__proto__:null};hasToStringTag&&gOPD&&getPrototypeOf?forEach(typedArrays,function(e){var t=new g[e];if(Symbol.toStringTag in t){var r=getPrototypeOf(t),n=gOPD(r,Symbol.toStringTag);if(!n){var a=getPrototypeOf(r);n=gOPD(a,Symbol.toStringTag)}cache["$"+e]=callBind(n.get)}}):forEach(typedArrays,function(e){var t=new g[e],r=t.slice||t.set;r&&(cache["$"+e]=callBind(r))});var tryTypedArrays=function e(t){var r=!1;return forEach(cache,function(n,a){if(!r)try{"$"+n(t)===a&&(r=$slice(a,1))}catch{}}),r},trySlices=function e(t){var r=!1;return forEach(cache,function(n,a){if(!r)try{n(t),r=$slice(a,1)}catch{}}),r},whichTypedArray$1=function e(t){if(!t||typeof t!="object")return!1;if(!hasToStringTag){var r=$slice($toString(t),8,-1);return $indexOf(typedArrays,r)>-1?r:r!=="Object"?!1:trySlices(t)}return gOPD?tryTypedArrays(t):null},whichTypedArray=whichTypedArray$1,isTypedArray=function e(t){return!!whichTypedArray(t)};(function(e){var t=isArguments$1,r=isGeneratorFunction,n=whichTypedArray$1,a=isTypedArray;function s(H){return H.call.bind(H)}var o=typeof BigInt<"u",l=typeof Symbol<"u",f=s(Object.prototype.toString),u=s(Number.prototype.valueOf),m=s(String.prototype.valueOf),v=s(Boolean.prototype.valueOf);if(o)var b=s(BigInt.prototype.valueOf);if(l)var P=s(Symbol.prototype.valueOf);function F(H,ce){if(typeof H!="object")return!1;try{return ce(H),!0}catch{return!1}}e.isArgumentsObject=t,e.isGeneratorFunction=r,e.isTypedArray=a;function C(H){return typeof Promise<"u"&&H instanceof Promise||H!==null&&typeof H=="object"&&typeof H.then=="function"&&typeof H.catch=="function"}e.isPromise=C;function D(H){return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?ArrayBuffer.isView(H):a(H)||de(H)}e.isArrayBufferView=D;function E(H){return n(H)==="Uint8Array"}e.isUint8Array=E;function k(H){return n(H)==="Uint8ClampedArray"}e.isUint8ClampedArray=k;function j(H){return n(H)==="Uint16Array"}e.isUint16Array=j;function W(H){return n(H)==="Uint32Array"}e.isUint32Array=W;function M(H){return n(H)==="Int8Array"}e.isInt8Array=M;function S(H){return n(H)==="Int16Array"}e.isInt16Array=S;function T(H){return n(H)==="Int32Array"}e.isInt32Array=T;function V(H){return n(H)==="Float32Array"}e.isFloat32Array=V;function _(H){return n(H)==="Float64Array"}e.isFloat64Array=_;function ee(H){return n(H)==="BigInt64Array"}e.isBigInt64Array=ee;function re(H){return n(H)==="BigUint64Array"}e.isBigUint64Array=re;function te(H){return f(H)==="[object Map]"}te.working=typeof Map<"u"&&te(new Map);function oe(H){return typeof Map>"u"?!1:te.working?te(H):H instanceof Map}e.isMap=oe;function he(H){return f(H)==="[object Set]"}he.working=typeof Set<"u"&&he(new Set);function me(H){return typeof Set>"u"?!1:he.working?he(H):H instanceof Set}e.isSet=me;function we(H){return f(H)==="[object WeakMap]"}we.working=typeof WeakMap<"u"&&we(new WeakMap);function Se(H){return typeof WeakMap>"u"?!1:we.working?we(H):H instanceof WeakMap}e.isWeakMap=Se;function be(H){return f(H)==="[object WeakSet]"}be.working=typeof WeakSet<"u"&&be(new WeakSet);function le(H){return be(H)}e.isWeakSet=le;function ae(H){return f(H)==="[object ArrayBuffer]"}ae.working=typeof ArrayBuffer<"u"&&ae(new ArrayBuffer);function ke(H){return typeof ArrayBuffer>"u"?!1:ae.working?ae(H):H instanceof ArrayBuffer}e.isArrayBuffer=ke;function Ne(H){return f(H)==="[object DataView]"}Ne.working=typeof ArrayBuffer<"u"&&typeof DataView<"u"&&Ne(new DataView(new ArrayBuffer(1),0,1));function de(H){return typeof DataView>"u"?!1:Ne.working?Ne(H):H instanceof DataView}e.isDataView=de;var $=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:void 0;function ie(H){return f(H)==="[object SharedArrayBuffer]"}function U(H){return typeof $>"u"?!1:(typeof ie.working>"u"&&(ie.working=ie(new $)),ie.working?ie(H):H instanceof $)}e.isSharedArrayBuffer=U;function L(H){return f(H)==="[object AsyncFunction]"}e.isAsyncFunction=L;function J(H){return f(H)==="[object Map Iterator]"}e.isMapIterator=J;function se(H){return f(H)==="[object Set Iterator]"}e.isSetIterator=se;function ve(H){return f(H)==="[object Generator]"}e.isGeneratorObject=ve;function Z(H){return f(H)==="[object WebAssembly.Module]"}e.isWebAssemblyCompiledModule=Z;function I(H){return F(H,u)}e.isNumberObject=I;function q(H){return F(H,m)}e.isStringObject=q;function fe(H){return F(H,v)}e.isBooleanObject=fe;function Ae(H){return o&&F(H,b)}e.isBigIntObject=Ae;function G(H){return l&&F(H,P)}e.isSymbolObject=G;function N(H){return I(H)||q(H)||fe(H)||Ae(H)||G(H)}e.isBoxedPrimitive=N;function B(H){return typeof Uint8Array<"u"&&(ke(H)||U(H))}e.isAnyArrayBuffer=B,["isProxy","isExternal","isModuleNamespaceObject"].forEach(function(H){Object.defineProperty(e,H,{enumerable:!1,value:function(){throw new Error(H+" is not supported in userland")}})})})(types$1);var isBufferBrowser=function e(t){return t&&typeof t=="object"&&typeof t.copy=="function"&&typeof t.fill=="function"&&typeof t.readUInt8=="function"},inherits_browser={exports:{}};typeof Object.create=="function"?inherits_browser.exports=function(t,r){r&&(t.super_=r,t.prototype=Object.create(r.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:inherits_browser.exports=function(t,r){if(r){t.super_=r;var n=function(){};n.prototype=r.prototype,t.prototype=new n,t.prototype.constructor=t}};var inherits_browserExports=inherits_browser.exports;(function(e){var t={},r=Object.getOwnPropertyDescriptors||function($){for(var ie=Object.keys($),U={},L=0;L<ie.length;L++)U[ie[L]]=Object.getOwnPropertyDescriptor($,ie[L]);return U},n=/%[sdj%]/g;e.format=function(de){if(!S(de)){for(var $=[],ie=0;ie<arguments.length;ie++)$.push(l(arguments[ie]));return $.join(" ")}for(var ie=1,U=arguments,L=U.length,J=String(de).replace(n,function(ve){if(ve==="%%")return"%";if(ie>=L)return ve;switch(ve){case"%s":return String(U[ie++]);case"%d":return Number(U[ie++]);case"%j":try{return JSON.stringify(U[ie++])}catch{return"[Circular]"}default:return ve}}),se=U[ie];ie<L;se=U[++ie])j(se)||!ee(se)?J+=" "+se:J+=" "+l(se);return J},e.deprecate=function(de,$){if(typeof process$1<"u"&&process$1.noDeprecation===!0)return de;if(typeof process$1>"u")return function(){return e.deprecate(de,$).apply(this,arguments)};var ie=!1;function U(){if(!ie){if(process$1.throwDeprecation)throw new Error($);process$1.traceDeprecation?console.trace($):console.error($),ie=!0}return de.apply(this,arguments)}return U};var a={},s=/^$/;if(t.NODE_DEBUG){var o=t.NODE_DEBUG;o=o.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),s=new RegExp("^"+o+"$","i")}e.debuglog=function(de){if(de=de.toUpperCase(),!a[de])if(s.test(de)){var $=process$1.pid;a[de]=function(){var ie=e.format.apply(e,arguments);console.error("%s %d: %s",de,$,ie)}}else a[de]=function(){};return a[de]};function l(de,$){var ie={seen:[],stylize:u};return arguments.length>=3&&(ie.depth=arguments[2]),arguments.length>=4&&(ie.colors=arguments[3]),k($)?ie.showHidden=$:$&&e._extend(ie,$),V(ie.showHidden)&&(ie.showHidden=!1),V(ie.depth)&&(ie.depth=2),V(ie.colors)&&(ie.colors=!1),V(ie.customInspect)&&(ie.customInspect=!0),ie.colors&&(ie.stylize=f),v(ie,de,ie.depth)}e.inspect=l,l.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},l.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};function f(de,$){var ie=l.styles[$];return ie?"\x1B["+l.colors[ie][0]+"m"+de+"\x1B["+l.colors[ie][1]+"m":de}function u(de,$){return de}function m(de){var $={};return de.forEach(function(ie,U){$[ie]=!0}),$}function v(de,$,ie){if(de.customInspect&&$&&oe($.inspect)&&$.inspect!==e.inspect&&!($.constructor&&$.constructor.prototype===$)){var U=$.inspect(ie,de);return S(U)||(U=v(de,U,ie)),U}var L=b(de,$);if(L)return L;var J=Object.keys($),se=m(J);if(de.showHidden&&(J=Object.getOwnPropertyNames($)),te($)&&(J.indexOf("message")>=0||J.indexOf("description")>=0))return P($);if(J.length===0){if(oe($)){var ve=$.name?": "+$.name:"";return de.stylize("[Function"+ve+"]","special")}if(_($))return de.stylize(RegExp.prototype.toString.call($),"regexp");if(re($))return de.stylize(Date.prototype.toString.call($),"date");if(te($))return P($)}var Z="",I=!1,q=["{","}"];if(E($)&&(I=!0,q=["[","]"]),oe($)){var fe=$.name?": "+$.name:"";Z=" [Function"+fe+"]"}if(_($)&&(Z=" "+RegExp.prototype.toString.call($)),re($)&&(Z=" "+Date.prototype.toUTCString.call($)),te($)&&(Z=" "+P($)),J.length===0&&(!I||$.length==0))return q[0]+Z+q[1];if(ie<0)return _($)?de.stylize(RegExp.prototype.toString.call($),"regexp"):de.stylize("[Object]","special");de.seen.push($);var Ae;return I?Ae=F(de,$,ie,se,J):Ae=J.map(function(G){return C(de,$,ie,se,G,I)}),de.seen.pop(),D(Ae,Z,q)}function b(de,$){if(V($))return de.stylize("undefined","undefined");if(S($)){var ie="'"+JSON.stringify($).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return de.stylize(ie,"string")}if(M($))return de.stylize(""+$,"number");if(k($))return de.stylize(""+$,"boolean");if(j($))return de.stylize("null","null")}function P(de){return"["+Error.prototype.toString.call(de)+"]"}function F(de,$,ie,U,L){for(var J=[],se=0,ve=$.length;se<ve;++se)le($,String(se))?J.push(C(de,$,ie,U,String(se),!0)):J.push("");return L.forEach(function(Z){Z.match(/^\d+$/)||J.push(C(de,$,ie,U,Z,!0))}),J}function C(de,$,ie,U,L,J){var se,ve,Z;if(Z=Object.getOwnPropertyDescriptor($,L)||{value:$[L]},Z.get?Z.set?ve=de.stylize("[Getter/Setter]","special"):ve=de.stylize("[Getter]","special"):Z.set&&(ve=de.stylize("[Setter]","special")),le(U,L)||(se="["+L+"]"),ve||(de.seen.indexOf(Z.value)<0?(j(ie)?ve=v(de,Z.value,null):ve=v(de,Z.value,ie-1),ve.indexOf(`
`)>-1&&(J?ve=ve.split(`
`).map(function(I){return"  "+I}).join(`
`).slice(2):ve=`
`+ve.split(`
`).map(function(I){return"   "+I}).join(`
`))):ve=de.stylize("[Circular]","special")),V(se)){if(J&&L.match(/^\d+$/))return ve;se=JSON.stringify(""+L),se.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(se=se.slice(1,-1),se=de.stylize(se,"name")):(se=se.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),se=de.stylize(se,"string"))}return se+": "+ve}function D(de,$,ie){var U=de.reduce(function(L,J){return J.indexOf(`
`)>=0,L+J.replace(/\u001b\[\d\d?m/g,"").length+1},0);return U>60?ie[0]+($===""?"":$+`
 `)+" "+de.join(`,
  `)+" "+ie[1]:ie[0]+$+" "+de.join(", ")+" "+ie[1]}e.types=types$1;function E(de){return Array.isArray(de)}e.isArray=E;function k(de){return typeof de=="boolean"}e.isBoolean=k;function j(de){return de===null}e.isNull=j;function W(de){return de==null}e.isNullOrUndefined=W;function M(de){return typeof de=="number"}e.isNumber=M;function S(de){return typeof de=="string"}e.isString=S;function T(de){return typeof de=="symbol"}e.isSymbol=T;function V(de){return de===void 0}e.isUndefined=V;function _(de){return ee(de)&&me(de)==="[object RegExp]"}e.isRegExp=_,e.types.isRegExp=_;function ee(de){return typeof de=="object"&&de!==null}e.isObject=ee;function re(de){return ee(de)&&me(de)==="[object Date]"}e.isDate=re,e.types.isDate=re;function te(de){return ee(de)&&(me(de)==="[object Error]"||de instanceof Error)}e.isError=te,e.types.isNativeError=te;function oe(de){return typeof de=="function"}e.isFunction=oe;function he(de){return de===null||typeof de=="boolean"||typeof de=="number"||typeof de=="string"||typeof de=="symbol"||typeof de>"u"}e.isPrimitive=he,e.isBuffer=isBufferBrowser;function me(de){return Object.prototype.toString.call(de)}function we(de){return de<10?"0"+de.toString(10):de.toString(10)}var Se=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function be(){var de=new Date,$=[we(de.getHours()),we(de.getMinutes()),we(de.getSeconds())].join(":");return[de.getDate(),Se[de.getMonth()],$].join(" ")}e.log=function(){console.log("%s - %s",be(),e.format.apply(e,arguments))},e.inherits=inherits_browserExports,e._extend=function(de,$){if(!$||!ee($))return de;for(var ie=Object.keys($),U=ie.length;U--;)de[ie[U]]=$[ie[U]];return de};function le(de,$){return Object.prototype.hasOwnProperty.call(de,$)}var ae=typeof Symbol<"u"?Symbol("util.promisify.custom"):void 0;e.promisify=function($){if(typeof $!="function")throw new TypeError('The "original" argument must be of type Function');if(ae&&$[ae]){var ie=$[ae];if(typeof ie!="function")throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(ie,ae,{value:ie,enumerable:!1,writable:!1,configurable:!0}),ie}function ie(){for(var U,L,J=new Promise(function(Z,I){U=Z,L=I}),se=[],ve=0;ve<arguments.length;ve++)se.push(arguments[ve]);se.push(function(Z,I){Z?L(Z):U(I)});try{$.apply(this,se)}catch(Z){L(Z)}return J}return Object.setPrototypeOf(ie,Object.getPrototypeOf($)),ae&&Object.defineProperty(ie,ae,{value:ie,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(ie,r($))},e.promisify.custom=ae;function ke(de,$){if(!de){var ie=new Error("Promise was rejected with a falsy value");ie.reason=de,de=ie}return $(de)}function Ne(de){if(typeof de!="function")throw new TypeError('The "original" argument must be of type Function');function $(){for(var ie=[],U=0;U<arguments.length;U++)ie.push(arguments[U]);var L=ie.pop();if(typeof L!="function")throw new TypeError("The last argument must be of type Function");var J=this,se=function(){return L.apply(J,arguments)};de.apply(this,ie).then(function(ve){process$1.nextTick(se.bind(null,null,ve))},function(ve){process$1.nextTick(ke.bind(null,ve,se))})}return Object.setPrototypeOf($,Object.getPrototypeOf(de)),Object.defineProperties($,r(de)),$}e.callbackify=Ne})(util$5);var streamBrowser,hasRequiredStreamBrowser;function requireStreamBrowser(){return hasRequiredStreamBrowser||(hasRequiredStreamBrowser=1,streamBrowser=eventsExports.EventEmitter),streamBrowser}var buffer={},base64Js={};base64Js.byteLength=byteLength;base64Js.toByteArray=toByteArray;base64Js.fromByteArray=fromByteArray;var lookup=[],revLookup=[],Arr=typeof Uint8Array<"u"?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var i=0,len=code.length;i<len;++i)lookup[i]=code[i],revLookup[code.charCodeAt(i)]=i;revLookup[45]=62;revLookup[95]=63;function getLens(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");r===-1&&(r=t);var n=r===t?0:4-r%4;return[r,n]}function byteLength(e){var t=getLens(e),r=t[0],n=t[1];return(r+n)*3/4-n}function _byteLength(e,t,r){return(t+r)*3/4-r}function toByteArray(e){var t,r=getLens(e),n=r[0],a=r[1],s=new Arr(_byteLength(e,n,a)),o=0,l=a>0?n-4:n,f;for(f=0;f<l;f+=4)t=revLookup[e.charCodeAt(f)]<<18|revLookup[e.charCodeAt(f+1)]<<12|revLookup[e.charCodeAt(f+2)]<<6|revLookup[e.charCodeAt(f+3)],s[o++]=t>>16&255,s[o++]=t>>8&255,s[o++]=t&255;return a===2&&(t=revLookup[e.charCodeAt(f)]<<2|revLookup[e.charCodeAt(f+1)]>>4,s[o++]=t&255),a===1&&(t=revLookup[e.charCodeAt(f)]<<10|revLookup[e.charCodeAt(f+1)]<<4|revLookup[e.charCodeAt(f+2)]>>2,s[o++]=t>>8&255,s[o++]=t&255),s}function tripletToBase64(e){return lookup[e>>18&63]+lookup[e>>12&63]+lookup[e>>6&63]+lookup[e&63]}function encodeChunk(e,t,r){for(var n,a=[],s=t;s<r;s+=3)n=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(e[s+2]&255),a.push(tripletToBase64(n));return a.join("")}function fromByteArray(e){for(var t,r=e.length,n=r%3,a=[],s=16383,o=0,l=r-n;o<l;o+=s)a.push(encodeChunk(e,o,o+s>l?l:o+s));return n===1?(t=e[r-1],a.push(lookup[t>>2]+lookup[t<<4&63]+"==")):n===2&&(t=(e[r-2]<<8)+e[r-1],a.push(lookup[t>>10]+lookup[t>>4&63]+lookup[t<<2&63]+"=")),a.join("")}/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */(function(e){var t=base64Js,r=ieee754,n=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=l,e.SlowBuffer=k,e.INSPECT_MAX_BYTES=50;var a=2147483647;e.kMaxLength=a,l.TYPED_ARRAY_SUPPORT=s(),!l.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function s(){try{var G=new Uint8Array(1),N={foo:function(){return 42}};return Object.setPrototypeOf(N,Uint8Array.prototype),Object.setPrototypeOf(G,N),G.foo()===42}catch{return!1}}Object.defineProperty(l.prototype,"parent",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.buffer}}),Object.defineProperty(l.prototype,"offset",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.byteOffset}});function o(G){if(G>a)throw new RangeError('The value "'+G+'" is invalid for option "size"');var N=new Uint8Array(G);return Object.setPrototypeOf(N,l.prototype),N}function l(G,N,B){if(typeof G=="number"){if(typeof N=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return v(G)}return f(G,N,B)}l.poolSize=8192;function f(G,N,B){if(typeof G=="string")return b(G,N);if(ArrayBuffer.isView(G))return F(G);if(G==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof G);if(q(G,ArrayBuffer)||G&&q(G.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(q(G,SharedArrayBuffer)||G&&q(G.buffer,SharedArrayBuffer)))return C(G,N,B);if(typeof G=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');var H=G.valueOf&&G.valueOf();if(H!=null&&H!==G)return l.from(H,N,B);var ce=D(G);if(ce)return ce;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof G[Symbol.toPrimitive]=="function")return l.from(G[Symbol.toPrimitive]("string"),N,B);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof G)}l.from=function(G,N,B){return f(G,N,B)},Object.setPrototypeOf(l.prototype,Uint8Array.prototype),Object.setPrototypeOf(l,Uint8Array);function u(G){if(typeof G!="number")throw new TypeError('"size" argument must be of type number');if(G<0)throw new RangeError('The value "'+G+'" is invalid for option "size"')}function m(G,N,B){return u(G),G<=0?o(G):N!==void 0?typeof B=="string"?o(G).fill(N,B):o(G).fill(N):o(G)}l.alloc=function(G,N,B){return m(G,N,B)};function v(G){return u(G),o(G<0?0:E(G)|0)}l.allocUnsafe=function(G){return v(G)},l.allocUnsafeSlow=function(G){return v(G)};function b(G,N){if((typeof N!="string"||N==="")&&(N="utf8"),!l.isEncoding(N))throw new TypeError("Unknown encoding: "+N);var B=j(G,N)|0,H=o(B),ce=H.write(G,N);return ce!==B&&(H=H.slice(0,ce)),H}function P(G){for(var N=G.length<0?0:E(G.length)|0,B=o(N),H=0;H<N;H+=1)B[H]=G[H]&255;return B}function F(G){if(q(G,Uint8Array)){var N=new Uint8Array(G);return C(N.buffer,N.byteOffset,N.byteLength)}return P(G)}function C(G,N,B){if(N<0||G.byteLength<N)throw new RangeError('"offset" is outside of buffer bounds');if(G.byteLength<N+(B||0))throw new RangeError('"length" is outside of buffer bounds');var H;return N===void 0&&B===void 0?H=new Uint8Array(G):B===void 0?H=new Uint8Array(G,N):H=new Uint8Array(G,N,B),Object.setPrototypeOf(H,l.prototype),H}function D(G){if(l.isBuffer(G)){var N=E(G.length)|0,B=o(N);return B.length===0||G.copy(B,0,0,N),B}if(G.length!==void 0)return typeof G.length!="number"||fe(G.length)?o(0):P(G);if(G.type==="Buffer"&&Array.isArray(G.data))return P(G.data)}function E(G){if(G>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return G|0}function k(G){return+G!=G&&(G=0),l.alloc(+G)}l.isBuffer=function(N){return N!=null&&N._isBuffer===!0&&N!==l.prototype},l.compare=function(N,B){if(q(N,Uint8Array)&&(N=l.from(N,N.offset,N.byteLength)),q(B,Uint8Array)&&(B=l.from(B,B.offset,B.byteLength)),!l.isBuffer(N)||!l.isBuffer(B))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(N===B)return 0;for(var H=N.length,ce=B.length,ye=0,Ee=Math.min(H,ce);ye<Ee;++ye)if(N[ye]!==B[ye]){H=N[ye],ce=B[ye];break}return H<ce?-1:ce<H?1:0},l.isEncoding=function(N){switch(String(N).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(N,B){if(!Array.isArray(N))throw new TypeError('"list" argument must be an Array of Buffers');if(N.length===0)return l.alloc(0);var H;if(B===void 0)for(B=0,H=0;H<N.length;++H)B+=N[H].length;var ce=l.allocUnsafe(B),ye=0;for(H=0;H<N.length;++H){var Ee=N[H];if(q(Ee,Uint8Array))ye+Ee.length>ce.length?l.from(Ee).copy(ce,ye):Uint8Array.prototype.set.call(ce,Ee,ye);else if(l.isBuffer(Ee))Ee.copy(ce,ye);else throw new TypeError('"list" argument must be an Array of Buffers');ye+=Ee.length}return ce};function j(G,N){if(l.isBuffer(G))return G.length;if(ArrayBuffer.isView(G)||q(G,ArrayBuffer))return G.byteLength;if(typeof G!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof G);var B=G.length,H=arguments.length>2&&arguments[2]===!0;if(!H&&B===0)return 0;for(var ce=!1;;)switch(N){case"ascii":case"latin1":case"binary":return B;case"utf8":case"utf-8":return J(G).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B*2;case"hex":return B>>>1;case"base64":return Z(G).length;default:if(ce)return H?-1:J(G).length;N=(""+N).toLowerCase(),ce=!0}}l.byteLength=j;function W(G,N,B){var H=!1;if((N===void 0||N<0)&&(N=0),N>this.length||((B===void 0||B>this.length)&&(B=this.length),B<=0)||(B>>>=0,N>>>=0,B<=N))return"";for(G||(G="utf8");;)switch(G){case"hex":return le(this,N,B);case"utf8":case"utf-8":return he(this,N,B);case"ascii":return Se(this,N,B);case"latin1":case"binary":return be(this,N,B);case"base64":return oe(this,N,B);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ae(this,N,B);default:if(H)throw new TypeError("Unknown encoding: "+G);G=(G+"").toLowerCase(),H=!0}}l.prototype._isBuffer=!0;function M(G,N,B){var H=G[N];G[N]=G[B],G[B]=H}l.prototype.swap16=function(){var N=this.length;if(N%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var B=0;B<N;B+=2)M(this,B,B+1);return this},l.prototype.swap32=function(){var N=this.length;if(N%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var B=0;B<N;B+=4)M(this,B,B+3),M(this,B+1,B+2);return this},l.prototype.swap64=function(){var N=this.length;if(N%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var B=0;B<N;B+=8)M(this,B,B+7),M(this,B+1,B+6),M(this,B+2,B+5),M(this,B+3,B+4);return this},l.prototype.toString=function(){var N=this.length;return N===0?"":arguments.length===0?he(this,0,N):W.apply(this,arguments)},l.prototype.toLocaleString=l.prototype.toString,l.prototype.equals=function(N){if(!l.isBuffer(N))throw new TypeError("Argument must be a Buffer");return this===N?!0:l.compare(this,N)===0},l.prototype.inspect=function(){var N="",B=e.INSPECT_MAX_BYTES;return N=this.toString("hex",0,B).replace(/(.{2})/g,"$1 ").trim(),this.length>B&&(N+=" ... "),"<Buffer "+N+">"},n&&(l.prototype[n]=l.prototype.inspect),l.prototype.compare=function(N,B,H,ce,ye){if(q(N,Uint8Array)&&(N=l.from(N,N.offset,N.byteLength)),!l.isBuffer(N))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof N);if(B===void 0&&(B=0),H===void 0&&(H=N?N.length:0),ce===void 0&&(ce=0),ye===void 0&&(ye=this.length),B<0||H>N.length||ce<0||ye>this.length)throw new RangeError("out of range index");if(ce>=ye&&B>=H)return 0;if(ce>=ye)return-1;if(B>=H)return 1;if(B>>>=0,H>>>=0,ce>>>=0,ye>>>=0,this===N)return 0;for(var Ee=ye-ce,Ce=H-B,ge=Math.min(Ee,Ce),xe=this.slice(ce,ye),Fe=N.slice(B,H),Re=0;Re<ge;++Re)if(xe[Re]!==Fe[Re]){Ee=xe[Re],Ce=Fe[Re];break}return Ee<Ce?-1:Ce<Ee?1:0};function S(G,N,B,H,ce){if(G.length===0)return-1;if(typeof B=="string"?(H=B,B=0):B>2147483647?B=2147483647:B<-2147483648&&(B=-2147483648),B=+B,fe(B)&&(B=ce?0:G.length-1),B<0&&(B=G.length+B),B>=G.length){if(ce)return-1;B=G.length-1}else if(B<0)if(ce)B=0;else return-1;if(typeof N=="string"&&(N=l.from(N,H)),l.isBuffer(N))return N.length===0?-1:T(G,N,B,H,ce);if(typeof N=="number")return N=N&255,typeof Uint8Array.prototype.indexOf=="function"?ce?Uint8Array.prototype.indexOf.call(G,N,B):Uint8Array.prototype.lastIndexOf.call(G,N,B):T(G,[N],B,H,ce);throw new TypeError("val must be string, number or Buffer")}function T(G,N,B,H,ce){var ye=1,Ee=G.length,Ce=N.length;if(H!==void 0&&(H=String(H).toLowerCase(),H==="ucs2"||H==="ucs-2"||H==="utf16le"||H==="utf-16le")){if(G.length<2||N.length<2)return-1;ye=2,Ee/=2,Ce/=2,B/=2}function ge(Me,Q){return ye===1?Me[Q]:Me.readUInt16BE(Q*ye)}var xe;if(ce){var Fe=-1;for(xe=B;xe<Ee;xe++)if(ge(G,xe)===ge(N,Fe===-1?0:xe-Fe)){if(Fe===-1&&(Fe=xe),xe-Fe+1===Ce)return Fe*ye}else Fe!==-1&&(xe-=xe-Fe),Fe=-1}else for(B+Ce>Ee&&(B=Ee-Ce),xe=B;xe>=0;xe--){for(var Re=!0,Oe=0;Oe<Ce;Oe++)if(ge(G,xe+Oe)!==ge(N,Oe)){Re=!1;break}if(Re)return xe}return-1}l.prototype.includes=function(N,B,H){return this.indexOf(N,B,H)!==-1},l.prototype.indexOf=function(N,B,H){return S(this,N,B,H,!0)},l.prototype.lastIndexOf=function(N,B,H){return S(this,N,B,H,!1)};function V(G,N,B,H){B=Number(B)||0;var ce=G.length-B;H?(H=Number(H),H>ce&&(H=ce)):H=ce;var ye=N.length;H>ye/2&&(H=ye/2);for(var Ee=0;Ee<H;++Ee){var Ce=parseInt(N.substr(Ee*2,2),16);if(fe(Ce))return Ee;G[B+Ee]=Ce}return Ee}function _(G,N,B,H){return I(J(N,G.length-B),G,B,H)}function ee(G,N,B,H){return I(se(N),G,B,H)}function re(G,N,B,H){return I(Z(N),G,B,H)}function te(G,N,B,H){return I(ve(N,G.length-B),G,B,H)}l.prototype.write=function(N,B,H,ce){if(B===void 0)ce="utf8",H=this.length,B=0;else if(H===void 0&&typeof B=="string")ce=B,H=this.length,B=0;else if(isFinite(B))B=B>>>0,isFinite(H)?(H=H>>>0,ce===void 0&&(ce="utf8")):(ce=H,H=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");var ye=this.length-B;if((H===void 0||H>ye)&&(H=ye),N.length>0&&(H<0||B<0)||B>this.length)throw new RangeError("Attempt to write outside buffer bounds");ce||(ce="utf8");for(var Ee=!1;;)switch(ce){case"hex":return V(this,N,B,H);case"utf8":case"utf-8":return _(this,N,B,H);case"ascii":case"latin1":case"binary":return ee(this,N,B,H);case"base64":return re(this,N,B,H);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return te(this,N,B,H);default:if(Ee)throw new TypeError("Unknown encoding: "+ce);ce=(""+ce).toLowerCase(),Ee=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function oe(G,N,B){return N===0&&B===G.length?t.fromByteArray(G):t.fromByteArray(G.slice(N,B))}function he(G,N,B){B=Math.min(G.length,B);for(var H=[],ce=N;ce<B;){var ye=G[ce],Ee=null,Ce=ye>239?4:ye>223?3:ye>191?2:1;if(ce+Ce<=B){var ge,xe,Fe,Re;switch(Ce){case 1:ye<128&&(Ee=ye);break;case 2:ge=G[ce+1],(ge&192)===128&&(Re=(ye&31)<<6|ge&63,Re>127&&(Ee=Re));break;case 3:ge=G[ce+1],xe=G[ce+2],(ge&192)===128&&(xe&192)===128&&(Re=(ye&15)<<12|(ge&63)<<6|xe&63,Re>2047&&(Re<55296||Re>57343)&&(Ee=Re));break;case 4:ge=G[ce+1],xe=G[ce+2],Fe=G[ce+3],(ge&192)===128&&(xe&192)===128&&(Fe&192)===128&&(Re=(ye&15)<<18|(ge&63)<<12|(xe&63)<<6|Fe&63,Re>65535&&Re<1114112&&(Ee=Re))}}Ee===null?(Ee=65533,Ce=1):Ee>65535&&(Ee-=65536,H.push(Ee>>>10&1023|55296),Ee=56320|Ee&1023),H.push(Ee),ce+=Ce}return we(H)}var me=4096;function we(G){var N=G.length;if(N<=me)return String.fromCharCode.apply(String,G);for(var B="",H=0;H<N;)B+=String.fromCharCode.apply(String,G.slice(H,H+=me));return B}function Se(G,N,B){var H="";B=Math.min(G.length,B);for(var ce=N;ce<B;++ce)H+=String.fromCharCode(G[ce]&127);return H}function be(G,N,B){var H="";B=Math.min(G.length,B);for(var ce=N;ce<B;++ce)H+=String.fromCharCode(G[ce]);return H}function le(G,N,B){var H=G.length;(!N||N<0)&&(N=0),(!B||B<0||B>H)&&(B=H);for(var ce="",ye=N;ye<B;++ye)ce+=Ae[G[ye]];return ce}function ae(G,N,B){for(var H=G.slice(N,B),ce="",ye=0;ye<H.length-1;ye+=2)ce+=String.fromCharCode(H[ye]+H[ye+1]*256);return ce}l.prototype.slice=function(N,B){var H=this.length;N=~~N,B=B===void 0?H:~~B,N<0?(N+=H,N<0&&(N=0)):N>H&&(N=H),B<0?(B+=H,B<0&&(B=0)):B>H&&(B=H),B<N&&(B=N);var ce=this.subarray(N,B);return Object.setPrototypeOf(ce,l.prototype),ce};function ke(G,N,B){if(G%1!==0||G<0)throw new RangeError("offset is not uint");if(G+N>B)throw new RangeError("Trying to access beyond buffer length")}l.prototype.readUintLE=l.prototype.readUIntLE=function(N,B,H){N=N>>>0,B=B>>>0,H||ke(N,B,this.length);for(var ce=this[N],ye=1,Ee=0;++Ee<B&&(ye*=256);)ce+=this[N+Ee]*ye;return ce},l.prototype.readUintBE=l.prototype.readUIntBE=function(N,B,H){N=N>>>0,B=B>>>0,H||ke(N,B,this.length);for(var ce=this[N+--B],ye=1;B>0&&(ye*=256);)ce+=this[N+--B]*ye;return ce},l.prototype.readUint8=l.prototype.readUInt8=function(N,B){return N=N>>>0,B||ke(N,1,this.length),this[N]},l.prototype.readUint16LE=l.prototype.readUInt16LE=function(N,B){return N=N>>>0,B||ke(N,2,this.length),this[N]|this[N+1]<<8},l.prototype.readUint16BE=l.prototype.readUInt16BE=function(N,B){return N=N>>>0,B||ke(N,2,this.length),this[N]<<8|this[N+1]},l.prototype.readUint32LE=l.prototype.readUInt32LE=function(N,B){return N=N>>>0,B||ke(N,4,this.length),(this[N]|this[N+1]<<8|this[N+2]<<16)+this[N+3]*16777216},l.prototype.readUint32BE=l.prototype.readUInt32BE=function(N,B){return N=N>>>0,B||ke(N,4,this.length),this[N]*16777216+(this[N+1]<<16|this[N+2]<<8|this[N+3])},l.prototype.readIntLE=function(N,B,H){N=N>>>0,B=B>>>0,H||ke(N,B,this.length);for(var ce=this[N],ye=1,Ee=0;++Ee<B&&(ye*=256);)ce+=this[N+Ee]*ye;return ye*=128,ce>=ye&&(ce-=Math.pow(2,8*B)),ce},l.prototype.readIntBE=function(N,B,H){N=N>>>0,B=B>>>0,H||ke(N,B,this.length);for(var ce=B,ye=1,Ee=this[N+--ce];ce>0&&(ye*=256);)Ee+=this[N+--ce]*ye;return ye*=128,Ee>=ye&&(Ee-=Math.pow(2,8*B)),Ee},l.prototype.readInt8=function(N,B){return N=N>>>0,B||ke(N,1,this.length),this[N]&128?(255-this[N]+1)*-1:this[N]},l.prototype.readInt16LE=function(N,B){N=N>>>0,B||ke(N,2,this.length);var H=this[N]|this[N+1]<<8;return H&32768?H|4294901760:H},l.prototype.readInt16BE=function(N,B){N=N>>>0,B||ke(N,2,this.length);var H=this[N+1]|this[N]<<8;return H&32768?H|4294901760:H},l.prototype.readInt32LE=function(N,B){return N=N>>>0,B||ke(N,4,this.length),this[N]|this[N+1]<<8|this[N+2]<<16|this[N+3]<<24},l.prototype.readInt32BE=function(N,B){return N=N>>>0,B||ke(N,4,this.length),this[N]<<24|this[N+1]<<16|this[N+2]<<8|this[N+3]},l.prototype.readFloatLE=function(N,B){return N=N>>>0,B||ke(N,4,this.length),r.read(this,N,!0,23,4)},l.prototype.readFloatBE=function(N,B){return N=N>>>0,B||ke(N,4,this.length),r.read(this,N,!1,23,4)},l.prototype.readDoubleLE=function(N,B){return N=N>>>0,B||ke(N,8,this.length),r.read(this,N,!0,52,8)},l.prototype.readDoubleBE=function(N,B){return N=N>>>0,B||ke(N,8,this.length),r.read(this,N,!1,52,8)};function Ne(G,N,B,H,ce,ye){if(!l.isBuffer(G))throw new TypeError('"buffer" argument must be a Buffer instance');if(N>ce||N<ye)throw new RangeError('"value" argument is out of bounds');if(B+H>G.length)throw new RangeError("Index out of range")}l.prototype.writeUintLE=l.prototype.writeUIntLE=function(N,B,H,ce){if(N=+N,B=B>>>0,H=H>>>0,!ce){var ye=Math.pow(2,8*H)-1;Ne(this,N,B,H,ye,0)}var Ee=1,Ce=0;for(this[B]=N&255;++Ce<H&&(Ee*=256);)this[B+Ce]=N/Ee&255;return B+H},l.prototype.writeUintBE=l.prototype.writeUIntBE=function(N,B,H,ce){if(N=+N,B=B>>>0,H=H>>>0,!ce){var ye=Math.pow(2,8*H)-1;Ne(this,N,B,H,ye,0)}var Ee=H-1,Ce=1;for(this[B+Ee]=N&255;--Ee>=0&&(Ce*=256);)this[B+Ee]=N/Ce&255;return B+H},l.prototype.writeUint8=l.prototype.writeUInt8=function(N,B,H){return N=+N,B=B>>>0,H||Ne(this,N,B,1,255,0),this[B]=N&255,B+1},l.prototype.writeUint16LE=l.prototype.writeUInt16LE=function(N,B,H){return N=+N,B=B>>>0,H||Ne(this,N,B,2,65535,0),this[B]=N&255,this[B+1]=N>>>8,B+2},l.prototype.writeUint16BE=l.prototype.writeUInt16BE=function(N,B,H){return N=+N,B=B>>>0,H||Ne(this,N,B,2,65535,0),this[B]=N>>>8,this[B+1]=N&255,B+2},l.prototype.writeUint32LE=l.prototype.writeUInt32LE=function(N,B,H){return N=+N,B=B>>>0,H||Ne(this,N,B,4,4294967295,0),this[B+3]=N>>>24,this[B+2]=N>>>16,this[B+1]=N>>>8,this[B]=N&255,B+4},l.prototype.writeUint32BE=l.prototype.writeUInt32BE=function(N,B,H){return N=+N,B=B>>>0,H||Ne(this,N,B,4,4294967295,0),this[B]=N>>>24,this[B+1]=N>>>16,this[B+2]=N>>>8,this[B+3]=N&255,B+4},l.prototype.writeIntLE=function(N,B,H,ce){if(N=+N,B=B>>>0,!ce){var ye=Math.pow(2,8*H-1);Ne(this,N,B,H,ye-1,-ye)}var Ee=0,Ce=1,ge=0;for(this[B]=N&255;++Ee<H&&(Ce*=256);)N<0&&ge===0&&this[B+Ee-1]!==0&&(ge=1),this[B+Ee]=(N/Ce>>0)-ge&255;return B+H},l.prototype.writeIntBE=function(N,B,H,ce){if(N=+N,B=B>>>0,!ce){var ye=Math.pow(2,8*H-1);Ne(this,N,B,H,ye-1,-ye)}var Ee=H-1,Ce=1,ge=0;for(this[B+Ee]=N&255;--Ee>=0&&(Ce*=256);)N<0&&ge===0&&this[B+Ee+1]!==0&&(ge=1),this[B+Ee]=(N/Ce>>0)-ge&255;return B+H},l.prototype.writeInt8=function(N,B,H){return N=+N,B=B>>>0,H||Ne(this,N,B,1,127,-128),N<0&&(N=255+N+1),this[B]=N&255,B+1},l.prototype.writeInt16LE=function(N,B,H){return N=+N,B=B>>>0,H||Ne(this,N,B,2,32767,-32768),this[B]=N&255,this[B+1]=N>>>8,B+2},l.prototype.writeInt16BE=function(N,B,H){return N=+N,B=B>>>0,H||Ne(this,N,B,2,32767,-32768),this[B]=N>>>8,this[B+1]=N&255,B+2},l.prototype.writeInt32LE=function(N,B,H){return N=+N,B=B>>>0,H||Ne(this,N,B,4,2147483647,-2147483648),this[B]=N&255,this[B+1]=N>>>8,this[B+2]=N>>>16,this[B+3]=N>>>24,B+4},l.prototype.writeInt32BE=function(N,B,H){return N=+N,B=B>>>0,H||Ne(this,N,B,4,2147483647,-2147483648),N<0&&(N=4294967295+N+1),this[B]=N>>>24,this[B+1]=N>>>16,this[B+2]=N>>>8,this[B+3]=N&255,B+4};function de(G,N,B,H,ce,ye){if(B+H>G.length)throw new RangeError("Index out of range");if(B<0)throw new RangeError("Index out of range")}function $(G,N,B,H,ce){return N=+N,B=B>>>0,ce||de(G,N,B,4),r.write(G,N,B,H,23,4),B+4}l.prototype.writeFloatLE=function(N,B,H){return $(this,N,B,!0,H)},l.prototype.writeFloatBE=function(N,B,H){return $(this,N,B,!1,H)};function ie(G,N,B,H,ce){return N=+N,B=B>>>0,ce||de(G,N,B,8),r.write(G,N,B,H,52,8),B+8}l.prototype.writeDoubleLE=function(N,B,H){return ie(this,N,B,!0,H)},l.prototype.writeDoubleBE=function(N,B,H){return ie(this,N,B,!1,H)},l.prototype.copy=function(N,B,H,ce){if(!l.isBuffer(N))throw new TypeError("argument should be a Buffer");if(H||(H=0),!ce&&ce!==0&&(ce=this.length),B>=N.length&&(B=N.length),B||(B=0),ce>0&&ce<H&&(ce=H),ce===H||N.length===0||this.length===0)return 0;if(B<0)throw new RangeError("targetStart out of bounds");if(H<0||H>=this.length)throw new RangeError("Index out of range");if(ce<0)throw new RangeError("sourceEnd out of bounds");ce>this.length&&(ce=this.length),N.length-B<ce-H&&(ce=N.length-B+H);var ye=ce-H;return this===N&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(B,H,ce):Uint8Array.prototype.set.call(N,this.subarray(H,ce),B),ye},l.prototype.fill=function(N,B,H,ce){if(typeof N=="string"){if(typeof B=="string"?(ce=B,B=0,H=this.length):typeof H=="string"&&(ce=H,H=this.length),ce!==void 0&&typeof ce!="string")throw new TypeError("encoding must be a string");if(typeof ce=="string"&&!l.isEncoding(ce))throw new TypeError("Unknown encoding: "+ce);if(N.length===1){var ye=N.charCodeAt(0);(ce==="utf8"&&ye<128||ce==="latin1")&&(N=ye)}}else typeof N=="number"?N=N&255:typeof N=="boolean"&&(N=Number(N));if(B<0||this.length<B||this.length<H)throw new RangeError("Out of range index");if(H<=B)return this;B=B>>>0,H=H===void 0?this.length:H>>>0,N||(N=0);var Ee;if(typeof N=="number")for(Ee=B;Ee<H;++Ee)this[Ee]=N;else{var Ce=l.isBuffer(N)?N:l.from(N,ce),ge=Ce.length;if(ge===0)throw new TypeError('The value "'+N+'" is invalid for argument "value"');for(Ee=0;Ee<H-B;++Ee)this[Ee+B]=Ce[Ee%ge]}return this};var U=/[^+/0-9A-Za-z-_]/g;function L(G){if(G=G.split("=")[0],G=G.trim().replace(U,""),G.length<2)return"";for(;G.length%4!==0;)G=G+"=";return G}function J(G,N){N=N||1/0;for(var B,H=G.length,ce=null,ye=[],Ee=0;Ee<H;++Ee){if(B=G.charCodeAt(Ee),B>55295&&B<57344){if(!ce){if(B>56319){(N-=3)>-1&&ye.push(239,191,189);continue}else if(Ee+1===H){(N-=3)>-1&&ye.push(239,191,189);continue}ce=B;continue}if(B<56320){(N-=3)>-1&&ye.push(239,191,189),ce=B;continue}B=(ce-55296<<10|B-56320)+65536}else ce&&(N-=3)>-1&&ye.push(239,191,189);if(ce=null,B<128){if((N-=1)<0)break;ye.push(B)}else if(B<2048){if((N-=2)<0)break;ye.push(B>>6|192,B&63|128)}else if(B<65536){if((N-=3)<0)break;ye.push(B>>12|224,B>>6&63|128,B&63|128)}else if(B<1114112){if((N-=4)<0)break;ye.push(B>>18|240,B>>12&63|128,B>>6&63|128,B&63|128)}else throw new Error("Invalid code point")}return ye}function se(G){for(var N=[],B=0;B<G.length;++B)N.push(G.charCodeAt(B)&255);return N}function ve(G,N){for(var B,H,ce,ye=[],Ee=0;Ee<G.length&&!((N-=2)<0);++Ee)B=G.charCodeAt(Ee),H=B>>8,ce=B%256,ye.push(ce),ye.push(H);return ye}function Z(G){return t.toByteArray(L(G))}function I(G,N,B,H){for(var ce=0;ce<H&&!(ce+B>=N.length||ce>=G.length);++ce)N[ce+B]=G[ce];return ce}function q(G,N){return G instanceof N||G!=null&&G.constructor!=null&&G.constructor.name!=null&&G.constructor.name===N.name}function fe(G){return G!==G}var Ae=function(){for(var G="0123456789abcdef",N=new Array(256),B=0;B<16;++B)for(var H=B*16,ce=0;ce<16;++ce)N[H+ce]=G[B]+G[ce];return N}()})(buffer);var buffer_list,hasRequiredBuffer_list;function requireBuffer_list(){if(hasRequiredBuffer_list)return buffer_list;hasRequiredBuffer_list=1;function e(F,C){var D=Object.keys(F);if(Object.getOwnPropertySymbols){var E=Object.getOwnPropertySymbols(F);C&&(E=E.filter(function(k){return Object.getOwnPropertyDescriptor(F,k).enumerable})),D.push.apply(D,E)}return D}function t(F){for(var C=1;C<arguments.length;C++){var D=arguments[C]!=null?arguments[C]:{};C%2?e(Object(D),!0).forEach(function(E){r(F,E,D[E])}):Object.getOwnPropertyDescriptors?Object.defineProperties(F,Object.getOwnPropertyDescriptors(D)):e(Object(D)).forEach(function(E){Object.defineProperty(F,E,Object.getOwnPropertyDescriptor(D,E))})}return F}function r(F,C,D){return C=o(C),C in F?Object.defineProperty(F,C,{value:D,enumerable:!0,configurable:!0,writable:!0}):F[C]=D,F}function n(F,C){if(!(F instanceof C))throw new TypeError("Cannot call a class as a function")}function a(F,C){for(var D=0;D<C.length;D++){var E=C[D];E.enumerable=E.enumerable||!1,E.configurable=!0,"value"in E&&(E.writable=!0),Object.defineProperty(F,o(E.key),E)}}function s(F,C,D){return C&&a(F.prototype,C),D&&a(F,D),Object.defineProperty(F,"prototype",{writable:!1}),F}function o(F){var C=l(F,"string");return typeof C=="symbol"?C:String(C)}function l(F,C){if(typeof F!="object"||F===null)return F;var D=F[Symbol.toPrimitive];if(D!==void 0){var E=D.call(F,C||"default");if(typeof E!="object")return E;throw new TypeError("@@toPrimitive must return a primitive value.")}return(C==="string"?String:Number)(F)}var f=buffer,u=f.Buffer,m=util$5,v=m.inspect,b=v&&v.custom||"inspect";function P(F,C,D){u.prototype.copy.call(F,C,D)}return buffer_list=function(){function F(){n(this,F),this.head=null,this.tail=null,this.length=0}return s(F,[{key:"push",value:function(D){var E={data:D,next:null};this.length>0?this.tail.next=E:this.head=E,this.tail=E,++this.length}},{key:"unshift",value:function(D){var E={data:D,next:this.head};this.length===0&&(this.tail=E),this.head=E,++this.length}},{key:"shift",value:function(){if(this.length!==0){var D=this.head.data;return this.length===1?this.head=this.tail=null:this.head=this.head.next,--this.length,D}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(D){if(this.length===0)return"";for(var E=this.head,k=""+E.data;E=E.next;)k+=D+E.data;return k}},{key:"concat",value:function(D){if(this.length===0)return u.alloc(0);for(var E=u.allocUnsafe(D>>>0),k=this.head,j=0;k;)P(k.data,E,j),j+=k.data.length,k=k.next;return E}},{key:"consume",value:function(D,E){var k;return D<this.head.data.length?(k=this.head.data.slice(0,D),this.head.data=this.head.data.slice(D)):D===this.head.data.length?k=this.shift():k=E?this._getString(D):this._getBuffer(D),k}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(D){var E=this.head,k=1,j=E.data;for(D-=j.length;E=E.next;){var W=E.data,M=D>W.length?W.length:D;if(M===W.length?j+=W:j+=W.slice(0,D),D-=M,D===0){M===W.length?(++k,E.next?this.head=E.next:this.head=this.tail=null):(this.head=E,E.data=W.slice(M));break}++k}return this.length-=k,j}},{key:"_getBuffer",value:function(D){var E=u.allocUnsafe(D),k=this.head,j=1;for(k.data.copy(E),D-=k.data.length;k=k.next;){var W=k.data,M=D>W.length?W.length:D;if(W.copy(E,E.length-D,0,M),D-=M,D===0){M===W.length?(++j,k.next?this.head=k.next:this.head=this.tail=null):(this.head=k,k.data=W.slice(M));break}++j}return this.length-=j,E}},{key:b,value:function(D,E){return v(this,t(t({},E),{},{depth:0,customInspect:!1}))}}]),F}(),buffer_list}var destroy_1,hasRequiredDestroy;function requireDestroy(){if(hasRequiredDestroy)return destroy_1;hasRequiredDestroy=1;function e(o,l){var f=this,u=this._readableState&&this._readableState.destroyed,m=this._writableState&&this._writableState.destroyed;return u||m?(l?l(o):o&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process$1.nextTick(a,this,o)):process$1.nextTick(a,this,o)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(o||null,function(v){!l&&v?f._writableState?f._writableState.errorEmitted?process$1.nextTick(r,f):(f._writableState.errorEmitted=!0,process$1.nextTick(t,f,v)):process$1.nextTick(t,f,v):l?(process$1.nextTick(r,f),l(v)):process$1.nextTick(r,f)}),this)}function t(o,l){a(o,l),r(o)}function r(o){o._writableState&&!o._writableState.emitClose||o._readableState&&!o._readableState.emitClose||o.emit("close")}function n(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}function a(o,l){o.emit("error",l)}function s(o,l){var f=o._readableState,u=o._writableState;f&&f.autoDestroy||u&&u.autoDestroy?o.destroy(l):o.emit("error",l)}return destroy_1={destroy:e,undestroy:n,errorOrDestroy:s},destroy_1}var errorsBrowser={},hasRequiredErrorsBrowser;function requireErrorsBrowser(){if(hasRequiredErrorsBrowser)return errorsBrowser;hasRequiredErrorsBrowser=1;function e(l,f){l.prototype=Object.create(f.prototype),l.prototype.constructor=l,l.__proto__=f}var t={};function r(l,f,u){u||(u=Error);function m(b,P,F){return typeof f=="string"?f:f(b,P,F)}var v=function(b){e(P,b);function P(F,C,D){return b.call(this,m(F,C,D))||this}return P}(u);v.prototype.name=u.name,v.prototype.code=l,t[l]=v}function n(l,f){if(Array.isArray(l)){var u=l.length;return l=l.map(function(m){return String(m)}),u>2?"one of ".concat(f," ").concat(l.slice(0,u-1).join(", "),", or ")+l[u-1]:u===2?"one of ".concat(f," ").concat(l[0]," or ").concat(l[1]):"of ".concat(f," ").concat(l[0])}else return"of ".concat(f," ").concat(String(l))}function a(l,f,u){return l.substr(!u||u<0?0:+u,f.length)===f}function s(l,f,u){return(u===void 0||u>l.length)&&(u=l.length),l.substring(u-f.length,u)===f}function o(l,f,u){return typeof u!="number"&&(u=0),u+f.length>l.length?!1:l.indexOf(f,u)!==-1}return r("ERR_INVALID_OPT_VALUE",function(l,f){return'The value "'+f+'" is invalid for option "'+l+'"'},TypeError),r("ERR_INVALID_ARG_TYPE",function(l,f,u){var m;typeof f=="string"&&a(f,"not ")?(m="must not be",f=f.replace(/^not /,"")):m="must be";var v;if(s(l," argument"))v="The ".concat(l," ").concat(m," ").concat(n(f,"type"));else{var b=o(l,".")?"property":"argument";v='The "'.concat(l,'" ').concat(b," ").concat(m," ").concat(n(f,"type"))}return v+=". Received type ".concat(typeof u),v},TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",function(l){return"The "+l+" method is not implemented"}),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",function(l){return"Cannot call "+l+" after a stream was destroyed"}),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",function(l){return"Unknown encoding: "+l},TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),errorsBrowser.codes=t,errorsBrowser}var state,hasRequiredState;function requireState(){if(hasRequiredState)return state;hasRequiredState=1;var e=requireErrorsBrowser().codes.ERR_INVALID_OPT_VALUE;function t(n,a,s){return n.highWaterMark!=null?n.highWaterMark:a?n[s]:null}function r(n,a,s,o){var l=t(a,o,s);if(l!=null){if(!(isFinite(l)&&Math.floor(l)===l)||l<0){var f=o?s:"highWaterMark";throw new e(f,l)}return Math.floor(l)}return n.objectMode?16:16*1024}return state={getHighWaterMark:r},state}var browser$2,hasRequiredBrowser;function requireBrowser(){if(hasRequiredBrowser)return browser$2;hasRequiredBrowser=1,browser$2=e;function e(r,n){if(t("noDeprecation"))return r;var a=!1;function s(){if(!a){if(t("throwDeprecation"))throw new Error(n);t("traceDeprecation")?console.trace(n):console.warn(n),a=!0}return r.apply(this,arguments)}return s}function t(r){try{if(!commonjsGlobal.localStorage)return!1}catch{return!1}var n=commonjsGlobal.localStorage[r];return n==null?!1:String(n).toLowerCase()==="true"}return browser$2}var _stream_writable,hasRequired_stream_writable;function require_stream_writable(){if(hasRequired_stream_writable)return _stream_writable;hasRequired_stream_writable=1,_stream_writable=V;function e(U){var L=this;this.next=null,this.entry=null,this.finish=function(){ie(L,U)}}var t;V.WritableState=S;var r={deprecate:requireBrowser()},n=requireStreamBrowser(),a=buffer.Buffer,s=(typeof commonjsGlobal<"u"?commonjsGlobal:typeof window<"u"?window:typeof self<"u"?self:{}).Uint8Array||function(){};function o(U){return a.from(U)}function l(U){return a.isBuffer(U)||U instanceof s}var f=requireDestroy(),u=requireState(),m=u.getHighWaterMark,v=requireErrorsBrowser().codes,b=v.ERR_INVALID_ARG_TYPE,P=v.ERR_METHOD_NOT_IMPLEMENTED,F=v.ERR_MULTIPLE_CALLBACK,C=v.ERR_STREAM_CANNOT_PIPE,D=v.ERR_STREAM_DESTROYED,E=v.ERR_STREAM_NULL_VALUES,k=v.ERR_STREAM_WRITE_AFTER_END,j=v.ERR_UNKNOWN_ENCODING,W=f.errorOrDestroy;inherits_browserExports(V,n);function M(){}function S(U,L,J){t=t||require_stream_duplex(),U=U||{},typeof J!="boolean"&&(J=L instanceof t),this.objectMode=!!U.objectMode,J&&(this.objectMode=this.objectMode||!!U.writableObjectMode),this.highWaterMark=m(this,U,"writableHighWaterMark",J),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var se=U.decodeStrings===!1;this.decodeStrings=!se,this.defaultEncoding=U.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(ve){we(L,ve)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=U.emitClose!==!1,this.autoDestroy=!!U.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new e(this)}S.prototype.getBuffer=function(){for(var L=this.bufferedRequest,J=[];L;)J.push(L),L=L.next;return J},function(){try{Object.defineProperty(S.prototype,"buffer",{get:r.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch{}}();var T;typeof Symbol=="function"&&Symbol.hasInstance&&typeof Function.prototype[Symbol.hasInstance]=="function"?(T=Function.prototype[Symbol.hasInstance],Object.defineProperty(V,Symbol.hasInstance,{value:function(L){return T.call(this,L)?!0:this!==V?!1:L&&L._writableState instanceof S}})):T=function(L){return L instanceof this};function V(U){t=t||require_stream_duplex();var L=this instanceof t;if(!L&&!T.call(V,this))return new V(U);this._writableState=new S(U,this,L),this.writable=!0,U&&(typeof U.write=="function"&&(this._write=U.write),typeof U.writev=="function"&&(this._writev=U.writev),typeof U.destroy=="function"&&(this._destroy=U.destroy),typeof U.final=="function"&&(this._final=U.final)),n.call(this)}V.prototype.pipe=function(){W(this,new C)};function _(U,L){var J=new k;W(U,J),process$1.nextTick(L,J)}function ee(U,L,J,se){var ve;return J===null?ve=new E:typeof J!="string"&&!L.objectMode&&(ve=new b("chunk",["string","Buffer"],J)),ve?(W(U,ve),process$1.nextTick(se,ve),!1):!0}V.prototype.write=function(U,L,J){var se=this._writableState,ve=!1,Z=!se.objectMode&&l(U);return Z&&!a.isBuffer(U)&&(U=o(U)),typeof L=="function"&&(J=L,L=null),Z?L="buffer":L||(L=se.defaultEncoding),typeof J!="function"&&(J=M),se.ending?_(this,J):(Z||ee(this,se,U,J))&&(se.pendingcb++,ve=te(this,se,Z,U,L,J)),ve},V.prototype.cork=function(){this._writableState.corked++},V.prototype.uncork=function(){var U=this._writableState;U.corked&&(U.corked--,!U.writing&&!U.corked&&!U.bufferProcessing&&U.bufferedRequest&&le(this,U))},V.prototype.setDefaultEncoding=function(L){if(typeof L=="string"&&(L=L.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((L+"").toLowerCase())>-1))throw new j(L);return this._writableState.defaultEncoding=L,this},Object.defineProperty(V.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}});function re(U,L,J){return!U.objectMode&&U.decodeStrings!==!1&&typeof L=="string"&&(L=a.from(L,J)),L}Object.defineProperty(V.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}});function te(U,L,J,se,ve,Z){if(!J){var I=re(L,se,ve);se!==I&&(J=!0,ve="buffer",se=I)}var q=L.objectMode?1:se.length;L.length+=q;var fe=L.length<L.highWaterMark;if(fe||(L.needDrain=!0),L.writing||L.corked){var Ae=L.lastBufferedRequest;L.lastBufferedRequest={chunk:se,encoding:ve,isBuf:J,callback:Z,next:null},Ae?Ae.next=L.lastBufferedRequest:L.bufferedRequest=L.lastBufferedRequest,L.bufferedRequestCount+=1}else oe(U,L,!1,q,se,ve,Z);return fe}function oe(U,L,J,se,ve,Z,I){L.writelen=se,L.writecb=I,L.writing=!0,L.sync=!0,L.destroyed?L.onwrite(new D("write")):J?U._writev(ve,L.onwrite):U._write(ve,Z,L.onwrite),L.sync=!1}function he(U,L,J,se,ve){--L.pendingcb,J?(process$1.nextTick(ve,se),process$1.nextTick(de,U,L),U._writableState.errorEmitted=!0,W(U,se)):(ve(se),U._writableState.errorEmitted=!0,W(U,se),de(U,L))}function me(U){U.writing=!1,U.writecb=null,U.length-=U.writelen,U.writelen=0}function we(U,L){var J=U._writableState,se=J.sync,ve=J.writecb;if(typeof ve!="function")throw new F;if(me(J),L)he(U,J,se,L,ve);else{var Z=ae(J)||U.destroyed;!Z&&!J.corked&&!J.bufferProcessing&&J.bufferedRequest&&le(U,J),se?process$1.nextTick(Se,U,J,Z,ve):Se(U,J,Z,ve)}}function Se(U,L,J,se){J||be(U,L),L.pendingcb--,se(),de(U,L)}function be(U,L){L.length===0&&L.needDrain&&(L.needDrain=!1,U.emit("drain"))}function le(U,L){L.bufferProcessing=!0;var J=L.bufferedRequest;if(U._writev&&J&&J.next){var se=L.bufferedRequestCount,ve=new Array(se),Z=L.corkedRequestsFree;Z.entry=J;for(var I=0,q=!0;J;)ve[I]=J,J.isBuf||(q=!1),J=J.next,I+=1;ve.allBuffers=q,oe(U,L,!0,L.length,ve,"",Z.finish),L.pendingcb++,L.lastBufferedRequest=null,Z.next?(L.corkedRequestsFree=Z.next,Z.next=null):L.corkedRequestsFree=new e(L),L.bufferedRequestCount=0}else{for(;J;){var fe=J.chunk,Ae=J.encoding,G=J.callback,N=L.objectMode?1:fe.length;if(oe(U,L,!1,N,fe,Ae,G),J=J.next,L.bufferedRequestCount--,L.writing)break}J===null&&(L.lastBufferedRequest=null)}L.bufferedRequest=J,L.bufferProcessing=!1}V.prototype._write=function(U,L,J){J(new P("_write()"))},V.prototype._writev=null,V.prototype.end=function(U,L,J){var se=this._writableState;return typeof U=="function"?(J=U,U=null,L=null):typeof L=="function"&&(J=L,L=null),U!=null&&this.write(U,L),se.corked&&(se.corked=1,this.uncork()),se.ending||$(this,se,J),this},Object.defineProperty(V.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}});function ae(U){return U.ending&&U.length===0&&U.bufferedRequest===null&&!U.finished&&!U.writing}function ke(U,L){U._final(function(J){L.pendingcb--,J&&W(U,J),L.prefinished=!0,U.emit("prefinish"),de(U,L)})}function Ne(U,L){!L.prefinished&&!L.finalCalled&&(typeof U._final=="function"&&!L.destroyed?(L.pendingcb++,L.finalCalled=!0,process$1.nextTick(ke,U,L)):(L.prefinished=!0,U.emit("prefinish")))}function de(U,L){var J=ae(L);if(J&&(Ne(U,L),L.pendingcb===0&&(L.finished=!0,U.emit("finish"),L.autoDestroy))){var se=U._readableState;(!se||se.autoDestroy&&se.endEmitted)&&U.destroy()}return J}function $(U,L,J){L.ending=!0,de(U,L),J&&(L.finished?process$1.nextTick(J):U.once("finish",J)),L.ended=!0,U.writable=!1}function ie(U,L,J){var se=U.entry;for(U.entry=null;se;){var ve=se.callback;L.pendingcb--,ve(J),se=se.next}L.corkedRequestsFree.next=U}return Object.defineProperty(V.prototype,"destroyed",{enumerable:!1,get:function(){return this._writableState===void 0?!1:this._writableState.destroyed},set:function(L){this._writableState&&(this._writableState.destroyed=L)}}),V.prototype.destroy=f.destroy,V.prototype._undestroy=f.undestroy,V.prototype._destroy=function(U,L){L(U)},_stream_writable}var _stream_duplex,hasRequired_stream_duplex;function require_stream_duplex(){if(hasRequired_stream_duplex)return _stream_duplex;hasRequired_stream_duplex=1;var e=Object.keys||function(u){var m=[];for(var v in u)m.push(v);return m};_stream_duplex=o;var t=require_stream_readable(),r=require_stream_writable();inherits_browserExports(o,t);for(var n=e(r.prototype),a=0;a<n.length;a++){var s=n[a];o.prototype[s]||(o.prototype[s]=r.prototype[s])}function o(u){if(!(this instanceof o))return new o(u);t.call(this,u),r.call(this,u),this.allowHalfOpen=!0,u&&(u.readable===!1&&(this.readable=!1),u.writable===!1&&(this.writable=!1),u.allowHalfOpen===!1&&(this.allowHalfOpen=!1,this.once("end",l)))}Object.defineProperty(o.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(o.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(o.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}});function l(){this._writableState.ended||process$1.nextTick(f,this)}function f(u){u.end()}return Object.defineProperty(o.prototype,"destroyed",{enumerable:!1,get:function(){return this._readableState===void 0||this._writableState===void 0?!1:this._readableState.destroyed&&this._writableState.destroyed},set:function(m){this._readableState===void 0||this._writableState===void 0||(this._readableState.destroyed=m,this._writableState.destroyed=m)}}),_stream_duplex}var string_decoder={},safeBuffer={exports:{}},hasRequiredSafeBuffer;function requireSafeBuffer(){return hasRequiredSafeBuffer||(hasRequiredSafeBuffer=1,function(e,t){var r=buffer,n=r.Buffer;function a(o,l){for(var f in o)l[f]=o[f]}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?e.exports=r:(a(r,t),t.Buffer=s);function s(o,l,f){return n(o,l,f)}a(n,s),s.from=function(o,l,f){if(typeof o=="number")throw new TypeError("Argument must not be a number");return n(o,l,f)},s.alloc=function(o,l,f){if(typeof o!="number")throw new TypeError("Argument must be a number");var u=n(o);return l!==void 0?typeof f=="string"?u.fill(l,f):u.fill(l):u.fill(0),u},s.allocUnsafe=function(o){if(typeof o!="number")throw new TypeError("Argument must be a number");return n(o)},s.allocUnsafeSlow=function(o){if(typeof o!="number")throw new TypeError("Argument must be a number");return r.SlowBuffer(o)}}(safeBuffer,safeBuffer.exports)),safeBuffer.exports}var hasRequiredString_decoder;function requireString_decoder(){if(hasRequiredString_decoder)return string_decoder;hasRequiredString_decoder=1;var e=requireSafeBuffer().Buffer,t=e.isEncoding||function(E){switch(E=""+E,E&&E.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function r(E){if(!E)return"utf8";for(var k;;)switch(E){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return E;default:if(k)return;E=(""+E).toLowerCase(),k=!0}}function n(E){var k=r(E);if(typeof k!="string"&&(e.isEncoding===t||!t(E)))throw new Error("Unknown encoding: "+E);return k||E}string_decoder.StringDecoder=a;function a(E){this.encoding=n(E);var k;switch(this.encoding){case"utf16le":this.text=v,this.end=b,k=4;break;case"utf8":this.fillLast=f,k=4;break;case"base64":this.text=P,this.end=F,k=3;break;default:this.write=C,this.end=D;return}this.lastNeed=0,this.lastTotal=0,this.lastChar=e.allocUnsafe(k)}a.prototype.write=function(E){if(E.length===0)return"";var k,j;if(this.lastNeed){if(k=this.fillLast(E),k===void 0)return"";j=this.lastNeed,this.lastNeed=0}else j=0;return j<E.length?k?k+this.text(E,j):this.text(E,j):k||""},a.prototype.end=m,a.prototype.text=u,a.prototype.fillLast=function(E){if(this.lastNeed<=E.length)return E.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);E.copy(this.lastChar,this.lastTotal-this.lastNeed,0,E.length),this.lastNeed-=E.length};function s(E){return E<=127?0:E>>5===6?2:E>>4===14?3:E>>3===30?4:E>>6===2?-1:-2}function o(E,k,j){var W=k.length-1;if(W<j)return 0;var M=s(k[W]);return M>=0?(M>0&&(E.lastNeed=M-1),M):--W<j||M===-2?0:(M=s(k[W]),M>=0?(M>0&&(E.lastNeed=M-2),M):--W<j||M===-2?0:(M=s(k[W]),M>=0?(M>0&&(M===2?M=0:E.lastNeed=M-3),M):0))}function l(E,k,j){if((k[0]&192)!==128)return E.lastNeed=0,"�";if(E.lastNeed>1&&k.length>1){if((k[1]&192)!==128)return E.lastNeed=1,"�";if(E.lastNeed>2&&k.length>2&&(k[2]&192)!==128)return E.lastNeed=2,"�"}}function f(E){var k=this.lastTotal-this.lastNeed,j=l(this,E);if(j!==void 0)return j;if(this.lastNeed<=E.length)return E.copy(this.lastChar,k,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);E.copy(this.lastChar,k,0,E.length),this.lastNeed-=E.length}function u(E,k){var j=o(this,E,k);if(!this.lastNeed)return E.toString("utf8",k);this.lastTotal=j;var W=E.length-(j-this.lastNeed);return E.copy(this.lastChar,0,W),E.toString("utf8",k,W)}function m(E){var k=E&&E.length?this.write(E):"";return this.lastNeed?k+"�":k}function v(E,k){if((E.length-k)%2===0){var j=E.toString("utf16le",k);if(j){var W=j.charCodeAt(j.length-1);if(W>=55296&&W<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=E[E.length-2],this.lastChar[1]=E[E.length-1],j.slice(0,-1)}return j}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=E[E.length-1],E.toString("utf16le",k,E.length-1)}function b(E){var k=E&&E.length?this.write(E):"";if(this.lastNeed){var j=this.lastTotal-this.lastNeed;return k+this.lastChar.toString("utf16le",0,j)}return k}function P(E,k){var j=(E.length-k)%3;return j===0?E.toString("base64",k):(this.lastNeed=3-j,this.lastTotal=3,j===1?this.lastChar[0]=E[E.length-1]:(this.lastChar[0]=E[E.length-2],this.lastChar[1]=E[E.length-1]),E.toString("base64",k,E.length-j))}function F(E){var k=E&&E.length?this.write(E):"";return this.lastNeed?k+this.lastChar.toString("base64",0,3-this.lastNeed):k}function C(E){return E.toString(this.encoding)}function D(E){return E&&E.length?this.write(E):""}return string_decoder}var endOfStream,hasRequiredEndOfStream;function requireEndOfStream(){if(hasRequiredEndOfStream)return endOfStream;hasRequiredEndOfStream=1;var e=requireErrorsBrowser().codes.ERR_STREAM_PREMATURE_CLOSE;function t(s){var o=!1;return function(){if(!o){o=!0;for(var l=arguments.length,f=new Array(l),u=0;u<l;u++)f[u]=arguments[u];s.apply(this,f)}}}function r(){}function n(s){return s.setHeader&&typeof s.abort=="function"}function a(s,o,l){if(typeof o=="function")return a(s,null,o);o||(o={}),l=t(l||r);var f=o.readable||o.readable!==!1&&s.readable,u=o.writable||o.writable!==!1&&s.writable,m=function(){s.writable||b()},v=s._writableState&&s._writableState.finished,b=function(){u=!1,v=!0,f||l.call(s)},P=s._readableState&&s._readableState.endEmitted,F=function(){f=!1,P=!0,u||l.call(s)},C=function(j){l.call(s,j)},D=function(){var j;if(f&&!P)return(!s._readableState||!s._readableState.ended)&&(j=new e),l.call(s,j);if(u&&!v)return(!s._writableState||!s._writableState.ended)&&(j=new e),l.call(s,j)},E=function(){s.req.on("finish",b)};return n(s)?(s.on("complete",b),s.on("abort",D),s.req?E():s.on("request",E)):u&&!s._writableState&&(s.on("end",m),s.on("close",m)),s.on("end",F),s.on("finish",b),o.error!==!1&&s.on("error",C),s.on("close",D),function(){s.removeListener("complete",b),s.removeListener("abort",D),s.removeListener("request",E),s.req&&s.req.removeListener("finish",b),s.removeListener("end",m),s.removeListener("close",m),s.removeListener("finish",b),s.removeListener("end",F),s.removeListener("error",C),s.removeListener("close",D)}}return endOfStream=a,endOfStream}var async_iterator,hasRequiredAsync_iterator;function requireAsync_iterator(){if(hasRequiredAsync_iterator)return async_iterator;hasRequiredAsync_iterator=1;var e;function t(j,W,M){return W=r(W),W in j?Object.defineProperty(j,W,{value:M,enumerable:!0,configurable:!0,writable:!0}):j[W]=M,j}function r(j){var W=n(j,"string");return typeof W=="symbol"?W:String(W)}function n(j,W){if(typeof j!="object"||j===null)return j;var M=j[Symbol.toPrimitive];if(M!==void 0){var S=M.call(j,W||"default");if(typeof S!="object")return S;throw new TypeError("@@toPrimitive must return a primitive value.")}return(W==="string"?String:Number)(j)}var a=requireEndOfStream(),s=Symbol("lastResolve"),o=Symbol("lastReject"),l=Symbol("error"),f=Symbol("ended"),u=Symbol("lastPromise"),m=Symbol("handlePromise"),v=Symbol("stream");function b(j,W){return{value:j,done:W}}function P(j){var W=j[s];if(W!==null){var M=j[v].read();M!==null&&(j[u]=null,j[s]=null,j[o]=null,W(b(M,!1)))}}function F(j){process$1.nextTick(P,j)}function C(j,W){return function(M,S){j.then(function(){if(W[f]){M(b(void 0,!0));return}W[m](M,S)},S)}}var D=Object.getPrototypeOf(function(){}),E=Object.setPrototypeOf((e={get stream(){return this[v]},next:function(){var W=this,M=this[l];if(M!==null)return Promise.reject(M);if(this[f])return Promise.resolve(b(void 0,!0));if(this[v].destroyed)return new Promise(function(_,ee){process$1.nextTick(function(){W[l]?ee(W[l]):_(b(void 0,!0))})});var S=this[u],T;if(S)T=new Promise(C(S,this));else{var V=this[v].read();if(V!==null)return Promise.resolve(b(V,!1));T=new Promise(this[m])}return this[u]=T,T}},t(e,Symbol.asyncIterator,function(){return this}),t(e,"return",function(){var W=this;return new Promise(function(M,S){W[v].destroy(null,function(T){if(T){S(T);return}M(b(void 0,!0))})})}),e),D),k=function(W){var M,S=Object.create(E,(M={},t(M,v,{value:W,writable:!0}),t(M,s,{value:null,writable:!0}),t(M,o,{value:null,writable:!0}),t(M,l,{value:null,writable:!0}),t(M,f,{value:W._readableState.endEmitted,writable:!0}),t(M,m,{value:function(V,_){var ee=S[v].read();ee?(S[u]=null,S[s]=null,S[o]=null,V(b(ee,!1))):(S[s]=V,S[o]=_)},writable:!0}),M));return S[u]=null,a(W,function(T){if(T&&T.code!=="ERR_STREAM_PREMATURE_CLOSE"){var V=S[o];V!==null&&(S[u]=null,S[s]=null,S[o]=null,V(T)),S[l]=T;return}var _=S[s];_!==null&&(S[u]=null,S[s]=null,S[o]=null,_(b(void 0,!0))),S[f]=!0}),W.on("readable",F.bind(null,S)),S};return async_iterator=k,async_iterator}var fromBrowser,hasRequiredFromBrowser;function requireFromBrowser(){return hasRequiredFromBrowser||(hasRequiredFromBrowser=1,fromBrowser=function(){throw new Error("Readable.from is not available in the browser")}),fromBrowser}var _stream_readable,hasRequired_stream_readable;function require_stream_readable(){if(hasRequired_stream_readable)return _stream_readable;hasRequired_stream_readable=1,_stream_readable=_;var e;_.ReadableState=V,eventsExports.EventEmitter;var t=function(I,q){return I.listeners(q).length},r=requireStreamBrowser(),n=buffer.Buffer,a=(typeof commonjsGlobal<"u"?commonjsGlobal:typeof window<"u"?window:typeof self<"u"?self:{}).Uint8Array||function(){};function s(Z){return n.from(Z)}function o(Z){return n.isBuffer(Z)||Z instanceof a}var l=util$5,f;l&&l.debuglog?f=l.debuglog("stream"):f=function(){};var u=requireBuffer_list(),m=requireDestroy(),v=requireState(),b=v.getHighWaterMark,P=requireErrorsBrowser().codes,F=P.ERR_INVALID_ARG_TYPE,C=P.ERR_STREAM_PUSH_AFTER_EOF,D=P.ERR_METHOD_NOT_IMPLEMENTED,E=P.ERR_STREAM_UNSHIFT_AFTER_END_EVENT,k,j,W;inherits_browserExports(_,r);var M=m.errorOrDestroy,S=["error","close","destroy","pause","resume"];function T(Z,I,q){if(typeof Z.prependListener=="function")return Z.prependListener(I,q);!Z._events||!Z._events[I]?Z.on(I,q):Array.isArray(Z._events[I])?Z._events[I].unshift(q):Z._events[I]=[q,Z._events[I]]}function V(Z,I,q){e=e||require_stream_duplex(),Z=Z||{},typeof q!="boolean"&&(q=I instanceof e),this.objectMode=!!Z.objectMode,q&&(this.objectMode=this.objectMode||!!Z.readableObjectMode),this.highWaterMark=b(this,Z,"readableHighWaterMark",q),this.buffer=new u,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=Z.emitClose!==!1,this.autoDestroy=!!Z.autoDestroy,this.destroyed=!1,this.defaultEncoding=Z.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,Z.encoding&&(k||(k=requireString_decoder().StringDecoder),this.decoder=new k(Z.encoding),this.encoding=Z.encoding)}function _(Z){if(e=e||require_stream_duplex(),!(this instanceof _))return new _(Z);var I=this instanceof e;this._readableState=new V(Z,this,I),this.readable=!0,Z&&(typeof Z.read=="function"&&(this._read=Z.read),typeof Z.destroy=="function"&&(this._destroy=Z.destroy)),r.call(this)}Object.defineProperty(_.prototype,"destroyed",{enumerable:!1,get:function(){return this._readableState===void 0?!1:this._readableState.destroyed},set:function(I){this._readableState&&(this._readableState.destroyed=I)}}),_.prototype.destroy=m.destroy,_.prototype._undestroy=m.undestroy,_.prototype._destroy=function(Z,I){I(Z)},_.prototype.push=function(Z,I){var q=this._readableState,fe;return q.objectMode?fe=!0:typeof Z=="string"&&(I=I||q.defaultEncoding,I!==q.encoding&&(Z=n.from(Z,I),I=""),fe=!0),ee(this,Z,I,!1,fe)},_.prototype.unshift=function(Z){return ee(this,Z,null,!0,!1)};function ee(Z,I,q,fe,Ae){f("readableAddChunk",I);var G=Z._readableState;if(I===null)G.reading=!1,we(Z,G);else{var N;if(Ae||(N=te(G,I)),N)M(Z,N);else if(G.objectMode||I&&I.length>0)if(typeof I!="string"&&!G.objectMode&&Object.getPrototypeOf(I)!==n.prototype&&(I=s(I)),fe)G.endEmitted?M(Z,new E):re(Z,G,I,!0);else if(G.ended)M(Z,new C);else{if(G.destroyed)return!1;G.reading=!1,G.decoder&&!q?(I=G.decoder.write(I),G.objectMode||I.length!==0?re(Z,G,I,!1):le(Z,G)):re(Z,G,I,!1)}else fe||(G.reading=!1,le(Z,G))}return!G.ended&&(G.length<G.highWaterMark||G.length===0)}function re(Z,I,q,fe){I.flowing&&I.length===0&&!I.sync?(I.awaitDrain=0,Z.emit("data",q)):(I.length+=I.objectMode?1:q.length,fe?I.buffer.unshift(q):I.buffer.push(q),I.needReadable&&Se(Z)),le(Z,I)}function te(Z,I){var q;return!o(I)&&typeof I!="string"&&I!==void 0&&!Z.objectMode&&(q=new F("chunk",["string","Buffer","Uint8Array"],I)),q}_.prototype.isPaused=function(){return this._readableState.flowing===!1},_.prototype.setEncoding=function(Z){k||(k=requireString_decoder().StringDecoder);var I=new k(Z);this._readableState.decoder=I,this._readableState.encoding=this._readableState.decoder.encoding;for(var q=this._readableState.buffer.head,fe="";q!==null;)fe+=I.write(q.data),q=q.next;return this._readableState.buffer.clear(),fe!==""&&this._readableState.buffer.push(fe),this._readableState.length=fe.length,this};var oe=1073741824;function he(Z){return Z>=oe?Z=oe:(Z--,Z|=Z>>>1,Z|=Z>>>2,Z|=Z>>>4,Z|=Z>>>8,Z|=Z>>>16,Z++),Z}function me(Z,I){return Z<=0||I.length===0&&I.ended?0:I.objectMode?1:Z!==Z?I.flowing&&I.length?I.buffer.head.data.length:I.length:(Z>I.highWaterMark&&(I.highWaterMark=he(Z)),Z<=I.length?Z:I.ended?I.length:(I.needReadable=!0,0))}_.prototype.read=function(Z){f("read",Z),Z=parseInt(Z,10);var I=this._readableState,q=Z;if(Z!==0&&(I.emittedReadable=!1),Z===0&&I.needReadable&&((I.highWaterMark!==0?I.length>=I.highWaterMark:I.length>0)||I.ended))return f("read: emitReadable",I.length,I.ended),I.length===0&&I.ended?J(this):Se(this),null;if(Z=me(Z,I),Z===0&&I.ended)return I.length===0&&J(this),null;var fe=I.needReadable;f("need readable",fe),(I.length===0||I.length-Z<I.highWaterMark)&&(fe=!0,f("length less than watermark",fe)),I.ended||I.reading?(fe=!1,f("reading or ended",fe)):fe&&(f("do read"),I.reading=!0,I.sync=!0,I.length===0&&(I.needReadable=!0),this._read(I.highWaterMark),I.sync=!1,I.reading||(Z=me(q,I)));var Ae;return Z>0?Ae=L(Z,I):Ae=null,Ae===null?(I.needReadable=I.length<=I.highWaterMark,Z=0):(I.length-=Z,I.awaitDrain=0),I.length===0&&(I.ended||(I.needReadable=!0),q!==Z&&I.ended&&J(this)),Ae!==null&&this.emit("data",Ae),Ae};function we(Z,I){if(f("onEofChunk"),!I.ended){if(I.decoder){var q=I.decoder.end();q&&q.length&&(I.buffer.push(q),I.length+=I.objectMode?1:q.length)}I.ended=!0,I.sync?Se(Z):(I.needReadable=!1,I.emittedReadable||(I.emittedReadable=!0,be(Z)))}}function Se(Z){var I=Z._readableState;f("emitReadable",I.needReadable,I.emittedReadable),I.needReadable=!1,I.emittedReadable||(f("emitReadable",I.flowing),I.emittedReadable=!0,process$1.nextTick(be,Z))}function be(Z){var I=Z._readableState;f("emitReadable_",I.destroyed,I.length,I.ended),!I.destroyed&&(I.length||I.ended)&&(Z.emit("readable"),I.emittedReadable=!1),I.needReadable=!I.flowing&&!I.ended&&I.length<=I.highWaterMark,U(Z)}function le(Z,I){I.readingMore||(I.readingMore=!0,process$1.nextTick(ae,Z,I))}function ae(Z,I){for(;!I.reading&&!I.ended&&(I.length<I.highWaterMark||I.flowing&&I.length===0);){var q=I.length;if(f("maybeReadMore read 0"),Z.read(0),q===I.length)break}I.readingMore=!1}_.prototype._read=function(Z){M(this,new D("_read()"))},_.prototype.pipe=function(Z,I){var q=this,fe=this._readableState;switch(fe.pipesCount){case 0:fe.pipes=Z;break;case 1:fe.pipes=[fe.pipes,Z];break;default:fe.pipes.push(Z);break}fe.pipesCount+=1,f("pipe count=%d opts=%j",fe.pipesCount,I);var Ae=(!I||I.end!==!1)&&Z!==process$1.stdout&&Z!==process$1.stderr,G=Ae?B:Fe;fe.endEmitted?process$1.nextTick(G):q.once("end",G),Z.on("unpipe",N);function N(Re,Oe){f("onunpipe"),Re===q&&Oe&&Oe.hasUnpiped===!1&&(Oe.hasUnpiped=!0,ye())}function B(){f("onend"),Z.end()}var H=ke(q);Z.on("drain",H);var ce=!1;function ye(){f("cleanup"),Z.removeListener("close",ge),Z.removeListener("finish",xe),Z.removeListener("drain",H),Z.removeListener("error",Ce),Z.removeListener("unpipe",N),q.removeListener("end",B),q.removeListener("end",Fe),q.removeListener("data",Ee),ce=!0,fe.awaitDrain&&(!Z._writableState||Z._writableState.needDrain)&&H()}q.on("data",Ee);function Ee(Re){f("ondata");var Oe=Z.write(Re);f("dest.write",Oe),Oe===!1&&((fe.pipesCount===1&&fe.pipes===Z||fe.pipesCount>1&&ve(fe.pipes,Z)!==-1)&&!ce&&(f("false write response, pause",fe.awaitDrain),fe.awaitDrain++),q.pause())}function Ce(Re){f("onerror",Re),Fe(),Z.removeListener("error",Ce),t(Z,"error")===0&&M(Z,Re)}T(Z,"error",Ce);function ge(){Z.removeListener("finish",xe),Fe()}Z.once("close",ge);function xe(){f("onfinish"),Z.removeListener("close",ge),Fe()}Z.once("finish",xe);function Fe(){f("unpipe"),q.unpipe(Z)}return Z.emit("pipe",q),fe.flowing||(f("pipe resume"),q.resume()),Z};function ke(Z){return function(){var q=Z._readableState;f("pipeOnDrain",q.awaitDrain),q.awaitDrain&&q.awaitDrain--,q.awaitDrain===0&&t(Z,"data")&&(q.flowing=!0,U(Z))}}_.prototype.unpipe=function(Z){var I=this._readableState,q={hasUnpiped:!1};if(I.pipesCount===0)return this;if(I.pipesCount===1)return Z&&Z!==I.pipes?this:(Z||(Z=I.pipes),I.pipes=null,I.pipesCount=0,I.flowing=!1,Z&&Z.emit("unpipe",this,q),this);if(!Z){var fe=I.pipes,Ae=I.pipesCount;I.pipes=null,I.pipesCount=0,I.flowing=!1;for(var G=0;G<Ae;G++)fe[G].emit("unpipe",this,{hasUnpiped:!1});return this}var N=ve(I.pipes,Z);return N===-1?this:(I.pipes.splice(N,1),I.pipesCount-=1,I.pipesCount===1&&(I.pipes=I.pipes[0]),Z.emit("unpipe",this,q),this)},_.prototype.on=function(Z,I){var q=r.prototype.on.call(this,Z,I),fe=this._readableState;return Z==="data"?(fe.readableListening=this.listenerCount("readable")>0,fe.flowing!==!1&&this.resume()):Z==="readable"&&!fe.endEmitted&&!fe.readableListening&&(fe.readableListening=fe.needReadable=!0,fe.flowing=!1,fe.emittedReadable=!1,f("on readable",fe.length,fe.reading),fe.length?Se(this):fe.reading||process$1.nextTick(de,this)),q},_.prototype.addListener=_.prototype.on,_.prototype.removeListener=function(Z,I){var q=r.prototype.removeListener.call(this,Z,I);return Z==="readable"&&process$1.nextTick(Ne,this),q},_.prototype.removeAllListeners=function(Z){var I=r.prototype.removeAllListeners.apply(this,arguments);return(Z==="readable"||Z===void 0)&&process$1.nextTick(Ne,this),I};function Ne(Z){var I=Z._readableState;I.readableListening=Z.listenerCount("readable")>0,I.resumeScheduled&&!I.paused?I.flowing=!0:Z.listenerCount("data")>0&&Z.resume()}function de(Z){f("readable nexttick read 0"),Z.read(0)}_.prototype.resume=function(){var Z=this._readableState;return Z.flowing||(f("resume"),Z.flowing=!Z.readableListening,$(this,Z)),Z.paused=!1,this};function $(Z,I){I.resumeScheduled||(I.resumeScheduled=!0,process$1.nextTick(ie,Z,I))}function ie(Z,I){f("resume",I.reading),I.reading||Z.read(0),I.resumeScheduled=!1,Z.emit("resume"),U(Z),I.flowing&&!I.reading&&Z.read(0)}_.prototype.pause=function(){return f("call pause flowing=%j",this._readableState.flowing),this._readableState.flowing!==!1&&(f("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this};function U(Z){var I=Z._readableState;for(f("flow",I.flowing);I.flowing&&Z.read()!==null;);}_.prototype.wrap=function(Z){var I=this,q=this._readableState,fe=!1;Z.on("end",function(){if(f("wrapped end"),q.decoder&&!q.ended){var N=q.decoder.end();N&&N.length&&I.push(N)}I.push(null)}),Z.on("data",function(N){if(f("wrapped data"),q.decoder&&(N=q.decoder.write(N)),!(q.objectMode&&N==null)&&!(!q.objectMode&&(!N||!N.length))){var B=I.push(N);B||(fe=!0,Z.pause())}});for(var Ae in Z)this[Ae]===void 0&&typeof Z[Ae]=="function"&&(this[Ae]=function(B){return function(){return Z[B].apply(Z,arguments)}}(Ae));for(var G=0;G<S.length;G++)Z.on(S[G],this.emit.bind(this,S[G]));return this._read=function(N){f("wrapped _read",N),fe&&(fe=!1,Z.resume())},this},typeof Symbol=="function"&&(_.prototype[Symbol.asyncIterator]=function(){return j===void 0&&(j=requireAsync_iterator()),j(this)}),Object.defineProperty(_.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(_.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(_.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(I){this._readableState&&(this._readableState.flowing=I)}}),_._fromList=L,Object.defineProperty(_.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}});function L(Z,I){if(I.length===0)return null;var q;return I.objectMode?q=I.buffer.shift():!Z||Z>=I.length?(I.decoder?q=I.buffer.join(""):I.buffer.length===1?q=I.buffer.first():q=I.buffer.concat(I.length),I.buffer.clear()):q=I.buffer.consume(Z,I.decoder),q}function J(Z){var I=Z._readableState;f("endReadable",I.endEmitted),I.endEmitted||(I.ended=!0,process$1.nextTick(se,I,Z))}function se(Z,I){if(f("endReadableNT",Z.endEmitted,Z.length),!Z.endEmitted&&Z.length===0&&(Z.endEmitted=!0,I.readable=!1,I.emit("end"),Z.autoDestroy)){var q=I._writableState;(!q||q.autoDestroy&&q.finished)&&I.destroy()}}typeof Symbol=="function"&&(_.from=function(Z,I){return W===void 0&&(W=requireFromBrowser()),W(_,Z,I)});function ve(Z,I){for(var q=0,fe=Z.length;q<fe;q++)if(Z[q]===I)return q;return-1}return _stream_readable}var _stream_transform,hasRequired_stream_transform;function require_stream_transform(){if(hasRequired_stream_transform)return _stream_transform;hasRequired_stream_transform=1,_stream_transform=l;var e=requireErrorsBrowser().codes,t=e.ERR_METHOD_NOT_IMPLEMENTED,r=e.ERR_MULTIPLE_CALLBACK,n=e.ERR_TRANSFORM_ALREADY_TRANSFORMING,a=e.ERR_TRANSFORM_WITH_LENGTH_0,s=require_stream_duplex();inherits_browserExports(l,s);function o(m,v){var b=this._transformState;b.transforming=!1;var P=b.writecb;if(P===null)return this.emit("error",new r);b.writechunk=null,b.writecb=null,v!=null&&this.push(v),P(m);var F=this._readableState;F.reading=!1,(F.needReadable||F.length<F.highWaterMark)&&this._read(F.highWaterMark)}function l(m){if(!(this instanceof l))return new l(m);s.call(this,m),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,m&&(typeof m.transform=="function"&&(this._transform=m.transform),typeof m.flush=="function"&&(this._flush=m.flush)),this.on("prefinish",f)}function f(){var m=this;typeof this._flush=="function"&&!this._readableState.destroyed?this._flush(function(v,b){u(m,v,b)}):u(this,null,null)}l.prototype.push=function(m,v){return this._transformState.needTransform=!1,s.prototype.push.call(this,m,v)},l.prototype._transform=function(m,v,b){b(new t("_transform()"))},l.prototype._write=function(m,v,b){var P=this._transformState;if(P.writecb=b,P.writechunk=m,P.writeencoding=v,!P.transforming){var F=this._readableState;(P.needTransform||F.needReadable||F.length<F.highWaterMark)&&this._read(F.highWaterMark)}},l.prototype._read=function(m){var v=this._transformState;v.writechunk!==null&&!v.transforming?(v.transforming=!0,this._transform(v.writechunk,v.writeencoding,v.afterTransform)):v.needTransform=!0},l.prototype._destroy=function(m,v){s.prototype._destroy.call(this,m,function(b){v(b)})};function u(m,v,b){if(v)return m.emit("error",v);if(b!=null&&m.push(b),m._writableState.length)throw new a;if(m._transformState.transforming)throw new n;return m.push(null)}return _stream_transform}var _stream_passthrough,hasRequired_stream_passthrough;function require_stream_passthrough(){if(hasRequired_stream_passthrough)return _stream_passthrough;hasRequired_stream_passthrough=1,_stream_passthrough=t;var e=require_stream_transform();inherits_browserExports(t,e);function t(r){if(!(this instanceof t))return new t(r);e.call(this,r)}return t.prototype._transform=function(r,n,a){a(null,r)},_stream_passthrough}var pipeline_1,hasRequiredPipeline;function requirePipeline(){if(hasRequiredPipeline)return pipeline_1;hasRequiredPipeline=1;var e;function t(b){var P=!1;return function(){P||(P=!0,b.apply(void 0,arguments))}}var r=requireErrorsBrowser().codes,n=r.ERR_MISSING_ARGS,a=r.ERR_STREAM_DESTROYED;function s(b){if(b)throw b}function o(b){return b.setHeader&&typeof b.abort=="function"}function l(b,P,F,C){C=t(C);var D=!1;b.on("close",function(){D=!0}),e===void 0&&(e=requireEndOfStream()),e(b,{readable:P,writable:F},function(k){if(k)return C(k);D=!0,C()});var E=!1;return function(k){if(!D&&!E){if(E=!0,o(b))return b.abort();if(typeof b.destroy=="function")return b.destroy();C(k||new a("pipe"))}}}function f(b){b()}function u(b,P){return b.pipe(P)}function m(b){return!b.length||typeof b[b.length-1]!="function"?s:b.pop()}function v(){for(var b=arguments.length,P=new Array(b),F=0;F<b;F++)P[F]=arguments[F];var C=m(P);if(Array.isArray(P[0])&&(P=P[0]),P.length<2)throw new n("streams");var D,E=P.map(function(k,j){var W=j<P.length-1,M=j>0;return l(k,W,M,function(S){D||(D=S),S&&E.forEach(f),!W&&(E.forEach(f),C(D))})});return P.reduce(u)}return pipeline_1=v,pipeline_1}var streamBrowserify=Stream$3,EE=eventsExports.EventEmitter,inherits=inherits_browserExports;inherits(Stream$3,EE);Stream$3.Readable=require_stream_readable();Stream$3.Writable=require_stream_writable();Stream$3.Duplex=require_stream_duplex();Stream$3.Transform=require_stream_transform();Stream$3.PassThrough=require_stream_passthrough();Stream$3.finished=requireEndOfStream();Stream$3.pipeline=requirePipeline();Stream$3.Stream=Stream$3;function Stream$3(){EE.call(this)}Stream$3.prototype.pipe=function(e,t){var r=this;function n(m){e.writable&&e.write(m)===!1&&r.pause&&r.pause()}r.on("data",n);function a(){r.readable&&r.resume&&r.resume()}e.on("drain",a),!e._isStdio&&(!t||t.end!==!1)&&(r.on("end",o),r.on("close",l));var s=!1;function o(){s||(s=!0,e.end())}function l(){s||(s=!0,typeof e.destroy=="function"&&e.destroy())}function f(m){if(u(),EE.listenerCount(this,"error")===0)throw m}r.on("error",f),e.on("error",f);function u(){r.removeListener("data",n),e.removeListener("drain",a),r.removeListener("end",o),r.removeListener("close",l),r.removeListener("error",f),e.removeListener("error",f),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e};var parserAsync={exports:{}},chunkstream={exports:{}};let util$4=util$5,Stream$2=streamBrowserify,ChunkStream$2=chunkstream.exports=function(){Stream$2.call(this),this._buffers=[],this._buffered=0,this._reads=[],this._paused=!1,this._encoding="utf8",this.writable=!0};util$4.inherits(ChunkStream$2,Stream$2);ChunkStream$2.prototype.read=function(e,t){this._reads.push({length:Math.abs(e),allowLess:e<0,func:t}),process$1.nextTick((function(){this._process(),this._paused&&this._reads&&this._reads.length>0&&(this._paused=!1,this.emit("drain"))}).bind(this))};ChunkStream$2.prototype.write=function(e,t){if(!this.writable)return this.emit("error",new Error("Stream not writable")),!1;let r;return Buffer$1.isBuffer(e)?r=e:r=Buffer$1.from(e,t||this._encoding),this._buffers.push(r),this._buffered+=r.length,this._process(),this._reads&&this._reads.length===0&&(this._paused=!0),this.writable&&!this._paused};ChunkStream$2.prototype.end=function(e,t){e&&this.write(e,t),this.writable=!1,this._buffers&&(this._buffers.length===0?this._end():(this._buffers.push(null),this._process()))};ChunkStream$2.prototype.destroySoon=ChunkStream$2.prototype.end;ChunkStream$2.prototype._end=function(){this._reads.length>0&&this.emit("error",new Error("Unexpected end of input")),this.destroy()};ChunkStream$2.prototype.destroy=function(){this._buffers&&(this.writable=!1,this._reads=null,this._buffers=null,this.emit("close"))};ChunkStream$2.prototype._processReadAllowingLess=function(e){this._reads.shift();let t=this._buffers[0];t.length>e.length?(this._buffered-=e.length,this._buffers[0]=t.slice(e.length),e.func.call(this,t.slice(0,e.length))):(this._buffered-=t.length,this._buffers.shift(),e.func.call(this,t))};ChunkStream$2.prototype._processRead=function(e){this._reads.shift();let t=0,r=0,n=Buffer$1.alloc(e.length);for(;t<e.length;){let a=this._buffers[r++],s=Math.min(a.length,e.length-t);a.copy(n,t,0,s),t+=s,s!==a.length&&(this._buffers[--r]=a.slice(s))}r>0&&this._buffers.splice(0,r),this._buffered-=e.length,e.func.call(this,n)};ChunkStream$2.prototype._process=function(){try{for(;this._buffered>0&&this._reads&&this._reads.length>0;){let e=this._reads[0];if(e.allowLess)this._processReadAllowingLess(e);else if(this._buffered>=e.length)this._processRead(e);else break}this._buffers&&!this.writable&&this._end()}catch(e){this.emit("error",e)}};var chunkstreamExports=chunkstream.exports,filterParseAsync={exports:{}},filterParse={exports:{}},interlace={};let imagePasses=[{x:[0],y:[0]},{x:[4],y:[0]},{x:[0,4],y:[4]},{x:[2,6],y:[0,4]},{x:[0,2,4,6],y:[2,6]},{x:[1,3,5,7],y:[0,2,4,6]},{x:[0,1,2,3,4,5,6,7],y:[1,3,5,7]}];interlace.getImagePasses=function(e,t){let r=[],n=e%8,a=t%8,s=(e-n)/8,o=(t-a)/8;for(let l=0;l<imagePasses.length;l++){let f=imagePasses[l],u=s*f.x.length,m=o*f.y.length;for(let v=0;v<f.x.length&&f.x[v]<n;v++)u++;for(let v=0;v<f.y.length&&f.y[v]<a;v++)m++;u>0&&m>0&&r.push({width:u,height:m,index:l})}return r};interlace.getInterlaceIterator=function(e){return function(t,r,n){let a=t%imagePasses[n].x.length,s=(t-a)/imagePasses[n].x.length*8+imagePasses[n].x[a],o=r%imagePasses[n].y.length,l=(r-o)/imagePasses[n].y.length*8+imagePasses[n].y[o];return s*4+l*e*4}};var paethPredictor$2=function e(t,r,n){let a=t+r-n,s=Math.abs(a-t),o=Math.abs(a-r),l=Math.abs(a-n);return s<=o&&s<=l?t:o<=l?r:n};let interlaceUtils$1=interlace,paethPredictor$1=paethPredictor$2;function getByteWidth(e,t,r){let n=e*t;return r!==8&&(n=Math.ceil(n/(8/r))),n}let Filter$2=filterParse.exports=function(e,t){let r=e.width,n=e.height,a=e.interlace,s=e.bpp,o=e.depth;if(this.read=t.read,this.write=t.write,this.complete=t.complete,this._imageIndex=0,this._images=[],a){let l=interlaceUtils$1.getImagePasses(r,n);for(let f=0;f<l.length;f++)this._images.push({byteWidth:getByteWidth(l[f].width,s,o),height:l[f].height,lineIndex:0})}else this._images.push({byteWidth:getByteWidth(r,s,o),height:n,lineIndex:0});o===8?this._xComparison=s:o===16?this._xComparison=s*2:this._xComparison=1};Filter$2.prototype.start=function(){this.read(this._images[this._imageIndex].byteWidth+1,this._reverseFilterLine.bind(this))};Filter$2.prototype._unFilterType1=function(e,t,r){let n=this._xComparison,a=n-1;for(let s=0;s<r;s++){let o=e[1+s],l=s>a?t[s-n]:0;t[s]=o+l}};Filter$2.prototype._unFilterType2=function(e,t,r){let n=this._lastLine;for(let a=0;a<r;a++){let s=e[1+a],o=n?n[a]:0;t[a]=s+o}};Filter$2.prototype._unFilterType3=function(e,t,r){let n=this._xComparison,a=n-1,s=this._lastLine;for(let o=0;o<r;o++){let l=e[1+o],f=s?s[o]:0,u=o>a?t[o-n]:0,m=Math.floor((u+f)/2);t[o]=l+m}};Filter$2.prototype._unFilterType4=function(e,t,r){let n=this._xComparison,a=n-1,s=this._lastLine;for(let o=0;o<r;o++){let l=e[1+o],f=s?s[o]:0,u=o>a?t[o-n]:0,m=o>a&&s?s[o-n]:0,v=paethPredictor$1(u,f,m);t[o]=l+v}};Filter$2.prototype._reverseFilterLine=function(e){let t=e[0],r,n=this._images[this._imageIndex],a=n.byteWidth;if(t===0)r=e.slice(1,a+1);else switch(r=Buffer$1.alloc(a),t){case 1:this._unFilterType1(e,r,a);break;case 2:this._unFilterType2(e,r,a);break;case 3:this._unFilterType3(e,r,a);break;case 4:this._unFilterType4(e,r,a);break;default:throw new Error("Unrecognised filter type - "+t)}this.write(r),n.lineIndex++,n.lineIndex>=n.height?(this._lastLine=null,this._imageIndex++,n=this._images[this._imageIndex]):this._lastLine=r,n?this.read(n.byteWidth+1,this._reverseFilterLine.bind(this)):(this._lastLine=null,this.complete())};var filterParseExports=filterParse.exports;let util$3=util$5,ChunkStream$1=chunkstreamExports,Filter$1=filterParseExports,FilterAsync$1=filterParseAsync.exports=function(e){ChunkStream$1.call(this);let t=[],r=this;this._filter=new Filter$1(e,{read:this.read.bind(this),write:function(n){t.push(n)},complete:function(){r.emit("complete",Buffer$1.concat(t))}}),this._filter.start()};util$3.inherits(FilterAsync$1,ChunkStream$1);var filterParseAsyncExports=filterParseAsync.exports,parser={exports:{}},constants$6={PNG_SIGNATURE:[137,80,78,71,13,10,26,10],TYPE_IHDR:1229472850,TYPE_IEND:1229278788,TYPE_IDAT:1229209940,TYPE_PLTE:1347179589,TYPE_tRNS:1951551059,TYPE_gAMA:1732332865,COLORTYPE_GRAYSCALE:0,COLORTYPE_PALETTE:1,COLORTYPE_COLOR:2,COLORTYPE_ALPHA:4,COLORTYPE_PALETTE_COLOR:3,COLORTYPE_COLOR_ALPHA:6,COLORTYPE_TO_BPP_MAP:{0:1,2:3,3:1,4:2,6:4},GAMMA_DIVISION:1e5},crc={exports:{}};let crcTable=[];(function(){for(let e=0;e<256;e++){let t=e;for(let r=0;r<8;r++)t&1?t=3988292384^t>>>1:t=t>>>1;crcTable[e]=t}})();let CrcCalculator$1=crc.exports=function(){this._crc=-1};CrcCalculator$1.prototype.write=function(e){for(let t=0;t<e.length;t++)this._crc=crcTable[(this._crc^e[t])&255]^this._crc>>>8;return!0};CrcCalculator$1.prototype.crc32=function(){return this._crc^-1};CrcCalculator$1.crc32=function(e){let t=-1;for(let r=0;r<e.length;r++)t=crcTable[(t^e[r])&255]^t>>>8;return t^-1};var crcExports=crc.exports;let constants$5=constants$6,CrcCalculator=crcExports,Parser$3=parser.exports=function(e,t){this._options=e,e.checkCRC=e.checkCRC!==!1,this._hasIHDR=!1,this._hasIEND=!1,this._emittedHeadersFinished=!1,this._palette=[],this._colorType=0,this._chunks={},this._chunks[constants$5.TYPE_IHDR]=this._handleIHDR.bind(this),this._chunks[constants$5.TYPE_IEND]=this._handleIEND.bind(this),this._chunks[constants$5.TYPE_IDAT]=this._handleIDAT.bind(this),this._chunks[constants$5.TYPE_PLTE]=this._handlePLTE.bind(this),this._chunks[constants$5.TYPE_tRNS]=this._handleTRNS.bind(this),this._chunks[constants$5.TYPE_gAMA]=this._handleGAMA.bind(this),this.read=t.read,this.error=t.error,this.metadata=t.metadata,this.gamma=t.gamma,this.transColor=t.transColor,this.palette=t.palette,this.parsed=t.parsed,this.inflateData=t.inflateData,this.finished=t.finished,this.simpleTransparency=t.simpleTransparency,this.headersFinished=t.headersFinished||function(){}};Parser$3.prototype.start=function(){this.read(constants$5.PNG_SIGNATURE.length,this._parseSignature.bind(this))};Parser$3.prototype._parseSignature=function(e){let t=constants$5.PNG_SIGNATURE;for(let r=0;r<t.length;r++)if(e[r]!==t[r]){this.error(new Error("Invalid file signature"));return}this.read(8,this._parseChunkBegin.bind(this))};Parser$3.prototype._parseChunkBegin=function(e){let t=e.readUInt32BE(0),r=e.readUInt32BE(4),n="";for(let s=4;s<8;s++)n+=String.fromCharCode(e[s]);let a=!!(e[4]&32);if(!this._hasIHDR&&r!==constants$5.TYPE_IHDR){this.error(new Error("Expected IHDR on beggining"));return}if(this._crc=new CrcCalculator,this._crc.write(Buffer$1.from(n)),this._chunks[r])return this._chunks[r](t);if(!a){this.error(new Error("Unsupported critical chunk type "+n));return}this.read(t+4,this._skipChunk.bind(this))};Parser$3.prototype._skipChunk=function(){this.read(8,this._parseChunkBegin.bind(this))};Parser$3.prototype._handleChunkEnd=function(){this.read(4,this._parseChunkEnd.bind(this))};Parser$3.prototype._parseChunkEnd=function(e){let t=e.readInt32BE(0),r=this._crc.crc32();if(this._options.checkCRC&&r!==t){this.error(new Error("Crc error - "+t+" - "+r));return}this._hasIEND||this.read(8,this._parseChunkBegin.bind(this))};Parser$3.prototype._handleIHDR=function(e){this.read(e,this._parseIHDR.bind(this))};Parser$3.prototype._parseIHDR=function(e){this._crc.write(e);let t=e.readUInt32BE(0),r=e.readUInt32BE(4),n=e[8],a=e[9],s=e[10],o=e[11],l=e[12];if(n!==8&&n!==4&&n!==2&&n!==1&&n!==16){this.error(new Error("Unsupported bit depth "+n));return}if(!(a in constants$5.COLORTYPE_TO_BPP_MAP)){this.error(new Error("Unsupported color type"));return}if(s!==0){this.error(new Error("Unsupported compression method"));return}if(o!==0){this.error(new Error("Unsupported filter method"));return}if(l!==0&&l!==1){this.error(new Error("Unsupported interlace method"));return}this._colorType=a;let f=constants$5.COLORTYPE_TO_BPP_MAP[this._colorType];this._hasIHDR=!0,this.metadata({width:t,height:r,depth:n,interlace:!!l,palette:!!(a&constants$5.COLORTYPE_PALETTE),color:!!(a&constants$5.COLORTYPE_COLOR),alpha:!!(a&constants$5.COLORTYPE_ALPHA),bpp:f,colorType:a}),this._handleChunkEnd()};Parser$3.prototype._handlePLTE=function(e){this.read(e,this._parsePLTE.bind(this))};Parser$3.prototype._parsePLTE=function(e){this._crc.write(e);let t=Math.floor(e.length/3);for(let r=0;r<t;r++)this._palette.push([e[r*3],e[r*3+1],e[r*3+2],255]);this.palette(this._palette),this._handleChunkEnd()};Parser$3.prototype._handleTRNS=function(e){this.simpleTransparency(),this.read(e,this._parseTRNS.bind(this))};Parser$3.prototype._parseTRNS=function(e){if(this._crc.write(e),this._colorType===constants$5.COLORTYPE_PALETTE_COLOR){if(this._palette.length===0){this.error(new Error("Transparency chunk must be after palette"));return}if(e.length>this._palette.length){this.error(new Error("More transparent colors than palette size"));return}for(let t=0;t<e.length;t++)this._palette[t][3]=e[t];this.palette(this._palette)}this._colorType===constants$5.COLORTYPE_GRAYSCALE&&this.transColor([e.readUInt16BE(0)]),this._colorType===constants$5.COLORTYPE_COLOR&&this.transColor([e.readUInt16BE(0),e.readUInt16BE(2),e.readUInt16BE(4)]),this._handleChunkEnd()};Parser$3.prototype._handleGAMA=function(e){this.read(e,this._parseGAMA.bind(this))};Parser$3.prototype._parseGAMA=function(e){this._crc.write(e),this.gamma(e.readUInt32BE(0)/constants$5.GAMMA_DIVISION),this._handleChunkEnd()};Parser$3.prototype._handleIDAT=function(e){this._emittedHeadersFinished||(this._emittedHeadersFinished=!0,this.headersFinished()),this.read(-e,this._parseIDAT.bind(this,e))};Parser$3.prototype._parseIDAT=function(e,t){if(this._crc.write(t),this._colorType===constants$5.COLORTYPE_PALETTE_COLOR&&this._palette.length===0)throw new Error("Expected palette not found");this.inflateData(t);let r=e-t.length;r>0?this._handleIDAT(r):this._handleChunkEnd()};Parser$3.prototype._handleIEND=function(e){this.read(e,this._parseIEND.bind(this))};Parser$3.prototype._parseIEND=function(e){this._crc.write(e),this._hasIEND=!0,this._handleChunkEnd(),this.finished&&this.finished()};var parserExports=parser.exports,bitmapper$2={};let interlaceUtils=interlace,pixelBppMapper=[function(){},function(e,t,r,n){if(n===t.length)throw new Error("Ran out of data");let a=t[n];e[r]=a,e[r+1]=a,e[r+2]=a,e[r+3]=255},function(e,t,r,n){if(n+1>=t.length)throw new Error("Ran out of data");let a=t[n];e[r]=a,e[r+1]=a,e[r+2]=a,e[r+3]=t[n+1]},function(e,t,r,n){if(n+2>=t.length)throw new Error("Ran out of data");e[r]=t[n],e[r+1]=t[n+1],e[r+2]=t[n+2],e[r+3]=255},function(e,t,r,n){if(n+3>=t.length)throw new Error("Ran out of data");e[r]=t[n],e[r+1]=t[n+1],e[r+2]=t[n+2],e[r+3]=t[n+3]}],pixelBppCustomMapper=[function(){},function(e,t,r,n){let a=t[0];e[r]=a,e[r+1]=a,e[r+2]=a,e[r+3]=n},function(e,t,r){let n=t[0];e[r]=n,e[r+1]=n,e[r+2]=n,e[r+3]=t[1]},function(e,t,r,n){e[r]=t[0],e[r+1]=t[1],e[r+2]=t[2],e[r+3]=n},function(e,t,r){e[r]=t[0],e[r+1]=t[1],e[r+2]=t[2],e[r+3]=t[3]}];function bitRetriever(e,t){let r=[],n=0;function a(){if(n===e.length)throw new Error("Ran out of data");let s=e[n];n++;let o,l,f,u,m,v,b,P;switch(t){default:throw new Error("unrecognised depth");case 16:b=e[n],n++,r.push((s<<8)+b);break;case 4:b=s&15,P=s>>4,r.push(P,b);break;case 2:m=s&3,v=s>>2&3,b=s>>4&3,P=s>>6&3,r.push(P,b,v,m);break;case 1:o=s&1,l=s>>1&1,f=s>>2&1,u=s>>3&1,m=s>>4&1,v=s>>5&1,b=s>>6&1,P=s>>7&1,r.push(P,b,v,m,u,f,l,o);break}}return{get:function(s){for(;r.length<s;)a();let o=r.slice(0,s);return r=r.slice(s),o},resetAfterLine:function(){r.length=0},end:function(){if(n!==e.length)throw new Error("extra data found")}}}function mapImage8Bit(e,t,r,n,a,s){let o=e.width,l=e.height,f=e.index;for(let u=0;u<l;u++)for(let m=0;m<o;m++){let v=r(m,u,f);pixelBppMapper[n](t,a,v,s),s+=n}return s}function mapImageCustomBit(e,t,r,n,a,s){let o=e.width,l=e.height,f=e.index;for(let u=0;u<l;u++){for(let m=0;m<o;m++){let v=a.get(n),b=r(m,u,f);pixelBppCustomMapper[n](t,v,b,s)}a.resetAfterLine()}}bitmapper$2.dataToBitMap=function(e,t){let r=t.width,n=t.height,a=t.depth,s=t.bpp,o=t.interlace,l;a!==8&&(l=bitRetriever(e,a));let f;a<=8?f=Buffer$1.alloc(r*n*4):f=new Uint16Array(r*n*4);let u=Math.pow(2,a)-1,m=0,v,b;if(o)v=interlaceUtils.getImagePasses(r,n),b=interlaceUtils.getInterlaceIterator(r,n);else{let P=0;b=function(){let F=P;return P+=4,F},v=[{width:r,height:n}]}for(let P=0;P<v.length;P++)a===8?m=mapImage8Bit(v[P],f,b,s,e,m):mapImageCustomBit(v[P],f,b,s,l,u);if(a===8){if(m!==e.length)throw new Error("extra data found")}else l.end();return f};function dePalette(e,t,r,n,a){let s=0;for(let o=0;o<n;o++)for(let l=0;l<r;l++){let f=a[e[s]];if(!f)throw new Error("index "+e[s]+" not in palette");for(let u=0;u<4;u++)t[s+u]=f[u];s+=4}}function replaceTransparentColor(e,t,r,n,a){let s=0;for(let o=0;o<n;o++)for(let l=0;l<r;l++){let f=!1;if(a.length===1?a[0]===e[s]&&(f=!0):a[0]===e[s]&&a[1]===e[s+1]&&a[2]===e[s+2]&&(f=!0),f)for(let u=0;u<4;u++)t[s+u]=0;s+=4}}function scaleDepth(e,t,r,n,a){let s=255,o=Math.pow(2,a)-1,l=0;for(let f=0;f<n;f++)for(let u=0;u<r;u++){for(let m=0;m<4;m++)t[l+m]=Math.floor(e[l+m]*s/o+.5);l+=4}}var formatNormaliser$2=function(e,t,r=!1){let n=t.depth,a=t.width,s=t.height,o=t.colorType,l=t.transColor,f=t.palette,u=e;return o===3?dePalette(e,u,a,s,f):(l&&replaceTransparentColor(e,u,a,s,l),n!==8&&!r&&(n===16&&(u=Buffer$1.alloc(a*s*4)),scaleDepth(e,u,a,s,n))),u};let util$2=util$5,zlib$3=require$$0,ChunkStream=chunkstreamExports,FilterAsync=filterParseAsyncExports,Parser$2=parserExports,bitmapper$1=bitmapper$2,formatNormaliser$1=formatNormaliser$2,ParserAsync=parserAsync.exports=function(e){ChunkStream.call(this),this._parser=new Parser$2(e,{read:this.read.bind(this),error:this._handleError.bind(this),metadata:this._handleMetaData.bind(this),gamma:this.emit.bind(this,"gamma"),palette:this._handlePalette.bind(this),transColor:this._handleTransColor.bind(this),finished:this._finished.bind(this),inflateData:this._inflateData.bind(this),simpleTransparency:this._simpleTransparency.bind(this),headersFinished:this._headersFinished.bind(this)}),this._options=e,this.writable=!0,this._parser.start()};util$2.inherits(ParserAsync,ChunkStream);ParserAsync.prototype._handleError=function(e){this.emit("error",e),this.writable=!1,this.destroy(),this._inflate&&this._inflate.destroy&&this._inflate.destroy(),this._filter&&(this._filter.destroy(),this._filter.on("error",function(){})),this.errord=!0};ParserAsync.prototype._inflateData=function(e){if(!this._inflate)if(this._bitmapInfo.interlace)this._inflate=zlib$3.createInflate(),this._inflate.on("error",this.emit.bind(this,"error")),this._filter.on("complete",this._complete.bind(this)),this._inflate.pipe(this._filter);else{let r=((this._bitmapInfo.width*this._bitmapInfo.bpp*this._bitmapInfo.depth+7>>3)+1)*this._bitmapInfo.height,n=Math.max(r,zlib$3.Z_MIN_CHUNK);this._inflate=zlib$3.createInflate({chunkSize:n});let a=r,s=this.emit.bind(this,"error");this._inflate.on("error",function(l){a&&s(l)}),this._filter.on("complete",this._complete.bind(this));let o=this._filter.write.bind(this._filter);this._inflate.on("data",function(l){a&&(l.length>a&&(l=l.slice(0,a)),a-=l.length,o(l))}),this._inflate.on("end",this._filter.end.bind(this._filter))}this._inflate.write(e)};ParserAsync.prototype._handleMetaData=function(e){this._metaData=e,this._bitmapInfo=Object.create(e),this._filter=new FilterAsync(this._bitmapInfo)};ParserAsync.prototype._handleTransColor=function(e){this._bitmapInfo.transColor=e};ParserAsync.prototype._handlePalette=function(e){this._bitmapInfo.palette=e};ParserAsync.prototype._simpleTransparency=function(){this._metaData.alpha=!0};ParserAsync.prototype._headersFinished=function(){this.emit("metadata",this._metaData)};ParserAsync.prototype._finished=function(){this.errord||(this._inflate?this._inflate.end():this.emit("error","No Inflate block"))};ParserAsync.prototype._complete=function(e){if(this.errord)return;let t;try{let r=bitmapper$1.dataToBitMap(e,this._bitmapInfo);t=formatNormaliser$1(r,this._bitmapInfo,this._options.skipRescale),r=null}catch(r){this._handleError(r);return}this.emit("parsed",t)};var parserAsyncExports=parserAsync.exports,packerAsync={exports:{}},packer={exports:{}};let constants$4=constants$6;var bitpacker=function(e,t,r,n){let a=[constants$4.COLORTYPE_COLOR_ALPHA,constants$4.COLORTYPE_ALPHA].indexOf(n.colorType)!==-1;if(n.colorType===n.inputColorType){let F=function(){let C=new ArrayBuffer(2);return new DataView(C).setInt16(0,256,!0),new Int16Array(C)[0]!==256}();if(n.bitDepth===8||n.bitDepth===16&&F)return e}let s=n.bitDepth!==16?e:new Uint16Array(e.buffer),o=255,l=constants$4.COLORTYPE_TO_BPP_MAP[n.inputColorType];l===4&&!n.inputHasAlpha&&(l=3);let f=constants$4.COLORTYPE_TO_BPP_MAP[n.colorType];n.bitDepth===16&&(o=65535,f*=2);let u=Buffer$1.alloc(t*r*f),m=0,v=0,b=n.bgColor||{};b.red===void 0&&(b.red=o),b.green===void 0&&(b.green=o),b.blue===void 0&&(b.blue=o);function P(){let F,C,D,E=o;switch(n.inputColorType){case constants$4.COLORTYPE_COLOR_ALPHA:E=s[m+3],F=s[m],C=s[m+1],D=s[m+2];break;case constants$4.COLORTYPE_COLOR:F=s[m],C=s[m+1],D=s[m+2];break;case constants$4.COLORTYPE_ALPHA:E=s[m+1],F=s[m],C=F,D=F;break;case constants$4.COLORTYPE_GRAYSCALE:F=s[m],C=F,D=F;break;default:throw new Error("input color type:"+n.inputColorType+" is not supported at present")}return n.inputHasAlpha&&(a||(E/=o,F=Math.min(Math.max(Math.round((1-E)*b.red+E*F),0),o),C=Math.min(Math.max(Math.round((1-E)*b.green+E*C),0),o),D=Math.min(Math.max(Math.round((1-E)*b.blue+E*D),0),o))),{red:F,green:C,blue:D,alpha:E}}for(let F=0;F<r;F++)for(let C=0;C<t;C++){let D=P();switch(n.colorType){case constants$4.COLORTYPE_COLOR_ALPHA:case constants$4.COLORTYPE_COLOR:n.bitDepth===8?(u[v]=D.red,u[v+1]=D.green,u[v+2]=D.blue,a&&(u[v+3]=D.alpha)):(u.writeUInt16BE(D.red,v),u.writeUInt16BE(D.green,v+2),u.writeUInt16BE(D.blue,v+4),a&&u.writeUInt16BE(D.alpha,v+6));break;case constants$4.COLORTYPE_ALPHA:case constants$4.COLORTYPE_GRAYSCALE:{let E=(D.red+D.green+D.blue)/3;n.bitDepth===8?(u[v]=E,a&&(u[v+1]=D.alpha)):(u.writeUInt16BE(E,v),a&&u.writeUInt16BE(D.alpha,v+2));break}default:throw new Error("unrecognised color Type "+n.colorType)}m+=l,v+=f}return u};let paethPredictor=paethPredictor$2;function filterNone(e,t,r,n,a){for(let s=0;s<r;s++)n[a+s]=e[t+s]}function filterSumNone(e,t,r){let n=0,a=t+r;for(let s=t;s<a;s++)n+=Math.abs(e[s]);return n}function filterSub(e,t,r,n,a,s){for(let o=0;o<r;o++){let l=o>=s?e[t+o-s]:0,f=e[t+o]-l;n[a+o]=f}}function filterSumSub(e,t,r,n){let a=0;for(let s=0;s<r;s++){let o=s>=n?e[t+s-n]:0,l=e[t+s]-o;a+=Math.abs(l)}return a}function filterUp(e,t,r,n,a){for(let s=0;s<r;s++){let o=t>0?e[t+s-r]:0,l=e[t+s]-o;n[a+s]=l}}function filterSumUp(e,t,r){let n=0,a=t+r;for(let s=t;s<a;s++){let o=t>0?e[s-r]:0,l=e[s]-o;n+=Math.abs(l)}return n}function filterAvg(e,t,r,n,a,s){for(let o=0;o<r;o++){let l=o>=s?e[t+o-s]:0,f=t>0?e[t+o-r]:0,u=e[t+o]-(l+f>>1);n[a+o]=u}}function filterSumAvg(e,t,r,n){let a=0;for(let s=0;s<r;s++){let o=s>=n?e[t+s-n]:0,l=t>0?e[t+s-r]:0,f=e[t+s]-(o+l>>1);a+=Math.abs(f)}return a}function filterPaeth(e,t,r,n,a,s){for(let o=0;o<r;o++){let l=o>=s?e[t+o-s]:0,f=t>0?e[t+o-r]:0,u=t>0&&o>=s?e[t+o-(r+s)]:0,m=e[t+o]-paethPredictor(l,f,u);n[a+o]=m}}function filterSumPaeth(e,t,r,n){let a=0;for(let s=0;s<r;s++){let o=s>=n?e[t+s-n]:0,l=t>0?e[t+s-r]:0,f=t>0&&s>=n?e[t+s-(r+n)]:0,u=e[t+s]-paethPredictor(o,l,f);a+=Math.abs(u)}return a}let filters={0:filterNone,1:filterSub,2:filterUp,3:filterAvg,4:filterPaeth},filterSums={0:filterSumNone,1:filterSumSub,2:filterSumUp,3:filterSumAvg,4:filterSumPaeth};var filterPack=function(e,t,r,n,a){let s;if(!("filterType"in n)||n.filterType===-1)s=[0,1,2,3,4];else if(typeof n.filterType=="number")s=[n.filterType];else throw new Error("unrecognised filter types");n.bitDepth===16&&(a*=2);let o=t*a,l=0,f=0,u=Buffer$1.alloc((o+1)*r),m=s[0];for(let v=0;v<r;v++){if(s.length>1){let b=1/0;for(let P=0;P<s.length;P++){let F=filterSums[s[P]](e,f,o,a);F<b&&(m=s[P],b=F)}}u[l]=m,l++,filters[m](e,f,o,u,l,a),l+=o,f+=o}return u};let constants$3=constants$6,CrcStream=crcExports,bitPacker=bitpacker,filter=filterPack,zlib$2=require$$0,Packer$3=packer.exports=function(e){if(this._options=e,e.deflateChunkSize=e.deflateChunkSize||32*1024,e.deflateLevel=e.deflateLevel!=null?e.deflateLevel:9,e.deflateStrategy=e.deflateStrategy!=null?e.deflateStrategy:3,e.inputHasAlpha=e.inputHasAlpha!=null?e.inputHasAlpha:!0,e.deflateFactory=e.deflateFactory||zlib$2.createDeflate,e.bitDepth=e.bitDepth||8,e.colorType=typeof e.colorType=="number"?e.colorType:constants$3.COLORTYPE_COLOR_ALPHA,e.inputColorType=typeof e.inputColorType=="number"?e.inputColorType:constants$3.COLORTYPE_COLOR_ALPHA,[constants$3.COLORTYPE_GRAYSCALE,constants$3.COLORTYPE_COLOR,constants$3.COLORTYPE_COLOR_ALPHA,constants$3.COLORTYPE_ALPHA].indexOf(e.colorType)===-1)throw new Error("option color type:"+e.colorType+" is not supported at present");if([constants$3.COLORTYPE_GRAYSCALE,constants$3.COLORTYPE_COLOR,constants$3.COLORTYPE_COLOR_ALPHA,constants$3.COLORTYPE_ALPHA].indexOf(e.inputColorType)===-1)throw new Error("option input color type:"+e.inputColorType+" is not supported at present");if(e.bitDepth!==8&&e.bitDepth!==16)throw new Error("option bit depth:"+e.bitDepth+" is not supported at present")};Packer$3.prototype.getDeflateOptions=function(){return{chunkSize:this._options.deflateChunkSize,level:this._options.deflateLevel,strategy:this._options.deflateStrategy}};Packer$3.prototype.createDeflate=function(){return this._options.deflateFactory(this.getDeflateOptions())};Packer$3.prototype.filterData=function(e,t,r){let n=bitPacker(e,t,r,this._options),a=constants$3.COLORTYPE_TO_BPP_MAP[this._options.colorType];return filter(n,t,r,this._options,a)};Packer$3.prototype._packChunk=function(e,t){let r=t?t.length:0,n=Buffer$1.alloc(r+12);return n.writeUInt32BE(r,0),n.writeUInt32BE(e,4),t&&t.copy(n,8),n.writeInt32BE(CrcStream.crc32(n.slice(4,n.length-4)),n.length-4),n};Packer$3.prototype.packGAMA=function(e){let t=Buffer$1.alloc(4);return t.writeUInt32BE(Math.floor(e*constants$3.GAMMA_DIVISION),0),this._packChunk(constants$3.TYPE_gAMA,t)};Packer$3.prototype.packIHDR=function(e,t){let r=Buffer$1.alloc(13);return r.writeUInt32BE(e,0),r.writeUInt32BE(t,4),r[8]=this._options.bitDepth,r[9]=this._options.colorType,r[10]=0,r[11]=0,r[12]=0,this._packChunk(constants$3.TYPE_IHDR,r)};Packer$3.prototype.packIDAT=function(e){return this._packChunk(constants$3.TYPE_IDAT,e)};Packer$3.prototype.packIEND=function(){return this._packChunk(constants$3.TYPE_IEND,null)};var packerExports=packer.exports;let util$1=util$5,Stream$1=streamBrowserify,constants$2=constants$6,Packer$2=packerExports,PackerAsync=packerAsync.exports=function(e){Stream$1.call(this);let t=e||{};this._packer=new Packer$2(t),this._deflate=this._packer.createDeflate(),this.readable=!0};util$1.inherits(PackerAsync,Stream$1);PackerAsync.prototype.pack=function(e,t,r,n){this.emit("data",Buffer$1.from(constants$2.PNG_SIGNATURE)),this.emit("data",this._packer.packIHDR(t,r)),n&&this.emit("data",this._packer.packGAMA(n));let a=this._packer.filterData(e,t,r);this._deflate.on("error",this.emit.bind(this,"error")),this._deflate.on("data",(function(s){this.emit("data",this._packer.packIDAT(s))}).bind(this)),this._deflate.on("end",(function(){this.emit("data",this._packer.packIEND()),this.emit("end")}).bind(this)),this._deflate.end(a)};var packerAsyncExports=packerAsync.exports,pngSync={},syncInflate={exports:{}},assert={exports:{}},errors={},hasRequiredErrors;function requireErrors(){if(hasRequiredErrors)return errors;hasRequiredErrors=1;function e(M){"@babel/helpers - typeof";return e=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(S){return typeof S}:function(S){return S&&typeof Symbol=="function"&&S.constructor===Symbol&&S!==Symbol.prototype?"symbol":typeof S},e(M)}function t(M,S){for(var T=0;T<S.length;T++){var V=S[T];V.enumerable=V.enumerable||!1,V.configurable=!0,"value"in V&&(V.writable=!0),Object.defineProperty(M,n(V.key),V)}}function r(M,S,T){return S&&t(M.prototype,S),T&&t(M,T),Object.defineProperty(M,"prototype",{writable:!1}),M}function n(M){var S=a(M,"string");return e(S)==="symbol"?S:String(S)}function a(M,S){if(e(M)!=="object"||M===null)return M;var T=M[Symbol.toPrimitive];if(T!==void 0){var V=T.call(M,S||"default");if(e(V)!=="object")return V;throw new TypeError("@@toPrimitive must return a primitive value.")}return(S==="string"?String:Number)(M)}function s(M,S){if(!(M instanceof S))throw new TypeError("Cannot call a class as a function")}function o(M,S){if(typeof S!="function"&&S!==null)throw new TypeError("Super expression must either be null or a function");M.prototype=Object.create(S&&S.prototype,{constructor:{value:M,writable:!0,configurable:!0}}),Object.defineProperty(M,"prototype",{writable:!1}),S&&l(M,S)}function l(M,S){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(V,_){return V.__proto__=_,V},l(M,S)}function f(M){var S=v();return function(){var V=b(M),_;if(S){var ee=b(this).constructor;_=Reflect.construct(V,arguments,ee)}else _=V.apply(this,arguments);return u(this,_)}}function u(M,S){if(S&&(e(S)==="object"||typeof S=="function"))return S;if(S!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return m(M)}function m(M){if(M===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return M}function v(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}function b(M){return b=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(T){return T.__proto__||Object.getPrototypeOf(T)},b(M)}var P={},F,C;function D(M,S,T){T||(T=Error);function V(ee,re,te){return typeof S=="string"?S:S(ee,re,te)}var _=function(ee){o(te,ee);var re=f(te);function te(oe,he,me){var we;return s(this,te),we=re.call(this,V(oe,he,me)),we.code=M,we}return r(te)}(T);P[M]=_}function E(M,S){if(Array.isArray(M)){var T=M.length;return M=M.map(function(V){return String(V)}),T>2?"one of ".concat(S," ").concat(M.slice(0,T-1).join(", "),", or ")+M[T-1]:T===2?"one of ".concat(S," ").concat(M[0]," or ").concat(M[1]):"of ".concat(S," ").concat(M[0])}else return"of ".concat(S," ").concat(String(M))}function k(M,S,T){return M.substr(!T||T<0?0:+T,S.length)===S}function j(M,S,T){return(T===void 0||T>M.length)&&(T=M.length),M.substring(T-S.length,T)===S}function W(M,S,T){return typeof T!="number"&&(T=0),T+S.length>M.length?!1:M.indexOf(S,T)!==-1}return D("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),D("ERR_INVALID_ARG_TYPE",function(M,S,T){F===void 0&&(F=requireAssert()),F(typeof M=="string","'name' must be a string");var V;typeof S=="string"&&k(S,"not ")?(V="must not be",S=S.replace(/^not /,"")):V="must be";var _;if(j(M," argument"))_="The ".concat(M," ").concat(V," ").concat(E(S,"type"));else{var ee=W(M,".")?"property":"argument";_='The "'.concat(M,'" ').concat(ee," ").concat(V," ").concat(E(S,"type"))}return _+=". Received type ".concat(e(T)),_},TypeError),D("ERR_INVALID_ARG_VALUE",function(M,S){var T=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"is invalid";C===void 0&&(C=util$5);var V=C.inspect(S);return V.length>128&&(V="".concat(V.slice(0,128),"...")),"The argument '".concat(M,"' ").concat(T,". Received ").concat(V)},TypeError),D("ERR_INVALID_RETURN_VALUE",function(M,S,T){var V;return T&&T.constructor&&T.constructor.name?V="instance of ".concat(T.constructor.name):V="type ".concat(e(T)),"Expected ".concat(M,' to be returned from the "').concat(S,'"')+" function but got ".concat(V,".")},TypeError),D("ERR_MISSING_ARGS",function(){for(var M=arguments.length,S=new Array(M),T=0;T<M;T++)S[T]=arguments[T];F===void 0&&(F=requireAssert()),F(S.length>0,"At least one arg needs to be specified");var V="The ",_=S.length;switch(S=S.map(function(ee){return'"'.concat(ee,'"')}),_){case 1:V+="".concat(S[0]," argument");break;case 2:V+="".concat(S[0]," and ").concat(S[1]," arguments");break;default:V+=S.slice(0,_-1).join(", "),V+=", and ".concat(S[_-1]," arguments");break}return"".concat(V," must be specified")},TypeError),errors.codes=P,errors}var assertion_error,hasRequiredAssertion_error;function requireAssertion_error(){if(hasRequiredAssertion_error)return assertion_error;hasRequiredAssertion_error=1;function e(le,ae){var ke=Object.keys(le);if(Object.getOwnPropertySymbols){var Ne=Object.getOwnPropertySymbols(le);ae&&(Ne=Ne.filter(function(de){return Object.getOwnPropertyDescriptor(le,de).enumerable})),ke.push.apply(ke,Ne)}return ke}function t(le){for(var ae=1;ae<arguments.length;ae++){var ke=arguments[ae]!=null?arguments[ae]:{};ae%2?e(Object(ke),!0).forEach(function(Ne){r(le,Ne,ke[Ne])}):Object.getOwnPropertyDescriptors?Object.defineProperties(le,Object.getOwnPropertyDescriptors(ke)):e(Object(ke)).forEach(function(Ne){Object.defineProperty(le,Ne,Object.getOwnPropertyDescriptor(ke,Ne))})}return le}function r(le,ae,ke){return ae=o(ae),ae in le?Object.defineProperty(le,ae,{value:ke,enumerable:!0,configurable:!0,writable:!0}):le[ae]=ke,le}function n(le,ae){if(!(le instanceof ae))throw new TypeError("Cannot call a class as a function")}function a(le,ae){for(var ke=0;ke<ae.length;ke++){var Ne=ae[ke];Ne.enumerable=Ne.enumerable||!1,Ne.configurable=!0,"value"in Ne&&(Ne.writable=!0),Object.defineProperty(le,o(Ne.key),Ne)}}function s(le,ae,ke){return ae&&a(le.prototype,ae),ke&&a(le,ke),Object.defineProperty(le,"prototype",{writable:!1}),le}function o(le){var ae=l(le,"string");return k(ae)==="symbol"?ae:String(ae)}function l(le,ae){if(k(le)!=="object"||le===null)return le;var ke=le[Symbol.toPrimitive];if(ke!==void 0){var Ne=ke.call(le,ae||"default");if(k(Ne)!=="object")return Ne;throw new TypeError("@@toPrimitive must return a primitive value.")}return(ae==="string"?String:Number)(le)}function f(le,ae){if(typeof ae!="function"&&ae!==null)throw new TypeError("Super expression must either be null or a function");le.prototype=Object.create(ae&&ae.prototype,{constructor:{value:le,writable:!0,configurable:!0}}),Object.defineProperty(le,"prototype",{writable:!1}),ae&&D(le,ae)}function u(le){var ae=F();return function(){var Ne=E(le),de;if(ae){var $=E(this).constructor;de=Reflect.construct(Ne,arguments,$)}else de=Ne.apply(this,arguments);return m(this,de)}}function m(le,ae){if(ae&&(k(ae)==="object"||typeof ae=="function"))return ae;if(ae!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return v(le)}function v(le){if(le===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return le}function b(le){var ae=typeof Map=="function"?new Map:void 0;return b=function(Ne){if(Ne===null||!C(Ne))return Ne;if(typeof Ne!="function")throw new TypeError("Super expression must either be null or a function");if(typeof ae<"u"){if(ae.has(Ne))return ae.get(Ne);ae.set(Ne,de)}function de(){return P(Ne,arguments,E(this).constructor)}return de.prototype=Object.create(Ne.prototype,{constructor:{value:de,enumerable:!1,writable:!0,configurable:!0}}),D(de,Ne)},b(le)}function P(le,ae,ke){return F()?P=Reflect.construct.bind():P=function(de,$,ie){var U=[null];U.push.apply(U,$);var L=Function.bind.apply(de,U),J=new L;return ie&&D(J,ie.prototype),J},P.apply(null,arguments)}function F(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}function C(le){return Function.toString.call(le).indexOf("[native code]")!==-1}function D(le,ae){return D=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(Ne,de){return Ne.__proto__=de,Ne},D(le,ae)}function E(le){return E=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(ke){return ke.__proto__||Object.getPrototypeOf(ke)},E(le)}function k(le){"@babel/helpers - typeof";return k=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(ae){return typeof ae}:function(ae){return ae&&typeof Symbol=="function"&&ae.constructor===Symbol&&ae!==Symbol.prototype?"symbol":typeof ae},k(le)}var j=util$5,W=j.inspect,M=requireErrors(),S=M.codes.ERR_INVALID_ARG_TYPE;function T(le,ae,ke){return(ke===void 0||ke>le.length)&&(ke=le.length),le.substring(ke-ae.length,ke)===ae}function V(le,ae){if(ae=Math.floor(ae),le.length==0||ae==0)return"";var ke=le.length*ae;for(ae=Math.floor(Math.log(ae)/Math.log(2));ae;)le+=le,ae--;return le+=le.substring(0,ke-le.length),le}var _="",ee="",re="",te="",oe={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"},he=10;function me(le){var ae=Object.keys(le),ke=Object.create(Object.getPrototypeOf(le));return ae.forEach(function(Ne){ke[Ne]=le[Ne]}),Object.defineProperty(ke,"message",{value:le.message}),ke}function we(le){return W(le,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}function Se(le,ae,ke){var Ne="",de="",$=0,ie="",U=!1,L=we(le),J=L.split(`
`),se=we(ae).split(`
`),ve=0,Z="";if(ke==="strictEqual"&&k(le)==="object"&&k(ae)==="object"&&le!==null&&ae!==null&&(ke="strictEqualObject"),J.length===1&&se.length===1&&J[0]!==se[0]){var I=J[0].length+se[0].length;if(I<=he){if((k(le)!=="object"||le===null)&&(k(ae)!=="object"||ae===null)&&(le!==0||ae!==0))return"".concat(oe[ke],`

`)+"".concat(J[0]," !== ").concat(se[0],`
`)}else if(ke!=="strictEqualObject"){var q=process$1.stderr&&process$1.stderr.isTTY?process$1.stderr.columns:80;if(I<q){for(;J[0][ve]===se[0][ve];)ve++;ve>2&&(Z=`
  `.concat(V(" ",ve),"^"),ve=0)}}}for(var fe=J[J.length-1],Ae=se[se.length-1];fe===Ae&&(ve++<2?ie=`
  `.concat(fe).concat(ie):Ne=fe,J.pop(),se.pop(),!(J.length===0||se.length===0));)fe=J[J.length-1],Ae=se[se.length-1];var G=Math.max(J.length,se.length);if(G===0){var N=L.split(`
`);if(N.length>30)for(N[26]="".concat(_,"...").concat(te);N.length>27;)N.pop();return"".concat(oe.notIdentical,`

`).concat(N.join(`
`),`
`)}ve>3&&(ie=`
`.concat(_,"...").concat(te).concat(ie),U=!0),Ne!==""&&(ie=`
  `.concat(Ne).concat(ie),Ne="");var B=0,H=oe[ke]+`
`.concat(ee,"+ actual").concat(te," ").concat(re,"- expected").concat(te),ce=" ".concat(_,"...").concat(te," Lines skipped");for(ve=0;ve<G;ve++){var ye=ve-$;if(J.length<ve+1)ye>1&&ve>2&&(ye>4?(de+=`
`.concat(_,"...").concat(te),U=!0):ye>3&&(de+=`
  `.concat(se[ve-2]),B++),de+=`
  `.concat(se[ve-1]),B++),$=ve,Ne+=`
`.concat(re,"-").concat(te," ").concat(se[ve]),B++;else if(se.length<ve+1)ye>1&&ve>2&&(ye>4?(de+=`
`.concat(_,"...").concat(te),U=!0):ye>3&&(de+=`
  `.concat(J[ve-2]),B++),de+=`
  `.concat(J[ve-1]),B++),$=ve,de+=`
`.concat(ee,"+").concat(te," ").concat(J[ve]),B++;else{var Ee=se[ve],Ce=J[ve],ge=Ce!==Ee&&(!T(Ce,",")||Ce.slice(0,-1)!==Ee);ge&&T(Ee,",")&&Ee.slice(0,-1)===Ce&&(ge=!1,Ce+=","),ge?(ye>1&&ve>2&&(ye>4?(de+=`
`.concat(_,"...").concat(te),U=!0):ye>3&&(de+=`
  `.concat(J[ve-2]),B++),de+=`
  `.concat(J[ve-1]),B++),$=ve,de+=`
`.concat(ee,"+").concat(te," ").concat(Ce),Ne+=`
`.concat(re,"-").concat(te," ").concat(Ee),B+=2):(de+=Ne,Ne="",(ye===1||ve===0)&&(de+=`
  `.concat(Ce),B++))}if(B>20&&ve<G-2)return"".concat(H).concat(ce,`
`).concat(de,`
`).concat(_,"...").concat(te).concat(Ne,`
`)+"".concat(_,"...").concat(te)}return"".concat(H).concat(U?ce:"",`
`).concat(de).concat(Ne).concat(ie).concat(Z)}var be=function(le,ae){f(Ne,le);var ke=u(Ne);function Ne(de){var $;if(n(this,Ne),k(de)!=="object"||de===null)throw new S("options","Object",de);var ie=de.message,U=de.operator,L=de.stackStartFn,J=de.actual,se=de.expected,ve=Error.stackTraceLimit;if(Error.stackTraceLimit=0,ie!=null)$=ke.call(this,String(ie));else if(process$1.stderr&&process$1.stderr.isTTY&&(process$1.stderr&&process$1.stderr.getColorDepth&&process$1.stderr.getColorDepth()!==1?(_="\x1B[34m",ee="\x1B[32m",te="\x1B[39m",re="\x1B[31m"):(_="",ee="",te="",re="")),k(J)==="object"&&J!==null&&k(se)==="object"&&se!==null&&"stack"in J&&J instanceof Error&&"stack"in se&&se instanceof Error&&(J=me(J),se=me(se)),U==="deepStrictEqual"||U==="strictEqual")$=ke.call(this,Se(J,se,U));else if(U==="notDeepStrictEqual"||U==="notStrictEqual"){var Z=oe[U],I=we(J).split(`
`);if(U==="notStrictEqual"&&k(J)==="object"&&J!==null&&(Z=oe.notStrictEqualObject),I.length>30)for(I[26]="".concat(_,"...").concat(te);I.length>27;)I.pop();I.length===1?$=ke.call(this,"".concat(Z," ").concat(I[0])):$=ke.call(this,"".concat(Z,`

`).concat(I.join(`
`),`
`))}else{var q=we(J),fe="",Ae=oe[U];U==="notDeepEqual"||U==="notEqual"?(q="".concat(oe[U],`

`).concat(q),q.length>1024&&(q="".concat(q.slice(0,1021),"..."))):(fe="".concat(we(se)),q.length>512&&(q="".concat(q.slice(0,509),"...")),fe.length>512&&(fe="".concat(fe.slice(0,509),"...")),U==="deepEqual"||U==="equal"?q="".concat(Ae,`

`).concat(q,`

should equal

`):fe=" ".concat(U," ").concat(fe)),$=ke.call(this,"".concat(q).concat(fe))}return Error.stackTraceLimit=ve,$.generatedMessage=!ie,Object.defineProperty(v($),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),$.code="ERR_ASSERTION",$.actual=J,$.expected=se,$.operator=U,Error.captureStackTrace&&Error.captureStackTrace(v($),L),$.stack,$.name="AssertionError",m($)}return s(Ne,[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:ae,value:function($,ie){return W(this,t(t({},ie),{},{customInspect:!1,depth:0}))}}]),Ne}(b(Error),W.custom);return assertion_error=be,assertion_error}var toStr=Object.prototype.toString,isArguments=function e(t){var r=toStr.call(t),n=r==="[object Arguments]";return n||(n=r!=="[object Array]"&&t!==null&&typeof t=="object"&&typeof t.length=="number"&&t.length>=0&&toStr.call(t.callee)==="[object Function]"),n},implementation$5,hasRequiredImplementation$1;function requireImplementation$1(){if(hasRequiredImplementation$1)return implementation$5;hasRequiredImplementation$1=1;var e;if(!Object.keys){var t=Object.prototype.hasOwnProperty,r=Object.prototype.toString,n=isArguments,a=Object.prototype.propertyIsEnumerable,s=!a.call({toString:null},"toString"),o=a.call(function(){},"prototype"),l=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(b){var P=b.constructor;return P&&P.prototype===b},u={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},m=function(){if(typeof window>"u")return!1;for(var b in window)try{if(!u["$"+b]&&t.call(window,b)&&window[b]!==null&&typeof window[b]=="object")try{f(window[b])}catch{return!0}}catch{return!0}return!1}(),v=function(b){if(typeof window>"u"||!m)return f(b);try{return f(b)}catch{return!1}};e=function(P){var F=P!==null&&typeof P=="object",C=r.call(P)==="[object Function]",D=n(P),E=F&&r.call(P)==="[object String]",k=[];if(!F&&!C&&!D)throw new TypeError("Object.keys called on a non-object");var j=o&&C;if(E&&P.length>0&&!t.call(P,0))for(var W=0;W<P.length;++W)k.push(String(W));if(D&&P.length>0)for(var M=0;M<P.length;++M)k.push(String(M));else for(var S in P)!(j&&S==="prototype")&&t.call(P,S)&&k.push(String(S));if(s)for(var T=v(P),V=0;V<l.length;++V)!(T&&l[V]==="constructor")&&t.call(P,l[V])&&k.push(l[V]);return k}}return implementation$5=e,implementation$5}var slice=Array.prototype.slice,isArgs=isArguments,origKeys=Object.keys,keysShim=origKeys?function e(t){return origKeys(t)}:requireImplementation$1(),originalKeys=Object.keys;keysShim.shim=function e(){if(Object.keys){var t=function(){var r=Object.keys(arguments);return r&&r.length===arguments.length}(1,2);t||(Object.keys=function(n){return isArgs(n)?originalKeys(slice.call(n)):originalKeys(n)})}else Object.keys=keysShim;return Object.keys||keysShim};var objectKeys$1=keysShim,objectKeys=objectKeys$1,hasSymbols=shams$1(),callBound=callBound$3,toObject=Object,$push=callBound("Array.prototype.push"),$propIsEnumerable=callBound("Object.prototype.propertyIsEnumerable"),originalGetSymbols=hasSymbols?Object.getOwnPropertySymbols:null,implementation$4=function e(t,r){if(t==null)throw new TypeError("target must be an object");var n=toObject(t);if(arguments.length===1)return n;for(var a=1;a<arguments.length;++a){var s=toObject(arguments[a]),o=objectKeys(s),l=hasSymbols&&(Object.getOwnPropertySymbols||originalGetSymbols);if(l)for(var f=l(s),u=0;u<f.length;++u){var m=f[u];$propIsEnumerable(s,m)&&$push(o,m)}for(var v=0;v<o.length;++v){var b=o[v];if($propIsEnumerable(s,b)){var P=s[b];n[b]=P}}}return n},implementation$3=implementation$4,lacksProperEnumerationOrder=function(){if(!Object.assign)return!1;for(var e="abcdefghijklmnopqrst",t=e.split(""),r={},n=0;n<t.length;++n)r[t[n]]=t[n];var a=Object.assign({},r),s="";for(var o in a)s+=o;return e!==s},assignHasPendingExceptions=function(){if(!Object.assign||!Object.preventExtensions)return!1;var e=Object.preventExtensions({1:2});try{Object.assign(e,"xy")}catch{return e[1]==="y"}return!1},polyfill$2=function e(){return!Object.assign||lacksProperEnumerationOrder()||assignHasPendingExceptions()?implementation$3:Object.assign},numberIsNaN=function(e){return e!==e},implementation$2=function e(t,r){return t===0&&r===0?1/t===1/r:!!(t===r||numberIsNaN(t)&&numberIsNaN(r))},implementation$1=implementation$2,polyfill$1=function e(){return typeof Object.is=="function"?Object.is:implementation$1},defineProperties_1,hasRequiredDefineProperties;function requireDefineProperties(){if(hasRequiredDefineProperties)return defineProperties_1;hasRequiredDefineProperties=1;var e=objectKeys$1,t=typeof Symbol=="function"&&typeof Symbol("foo")=="symbol",r=Object.prototype.toString,n=Array.prototype.concat,a=defineDataProperty,s=function(u){return typeof u=="function"&&r.call(u)==="[object Function]"},o=hasPropertyDescriptors_1(),l=function(u,m,v,b){if(m in u){if(b===!0){if(u[m]===v)return}else if(!s(b)||!b())return}o?a(u,m,v,!0):a(u,m,v)},f=function(u,m){var v=arguments.length>2?arguments[2]:{},b=e(m);t&&(b=n.call(b,Object.getOwnPropertySymbols(m)));for(var P=0;P<b.length;P+=1)l(u,b[P],m[b[P]],v[b[P]])};return f.supportsDescriptors=!!o,defineProperties_1=f,defineProperties_1}var shim$1,hasRequiredShim$1;function requireShim$1(){if(hasRequiredShim$1)return shim$1;hasRequiredShim$1=1;var e=polyfill$1,t=requireDefineProperties();return shim$1=function(){var n=e();return t(Object,{is:n},{is:function(){return Object.is!==n}}),n},shim$1}var objectIs,hasRequiredObjectIs;function requireObjectIs(){if(hasRequiredObjectIs)return objectIs;hasRequiredObjectIs=1;var e=requireDefineProperties(),t=callBindExports,r=implementation$2,n=polyfill$1,a=requireShim$1(),s=t(n(),Object);return e(s,{getPolyfill:n,implementation:r,shim:a}),objectIs=s,objectIs}var implementation,hasRequiredImplementation;function requireImplementation(){return hasRequiredImplementation||(hasRequiredImplementation=1,implementation=function(t){return t!==t}),implementation}var polyfill,hasRequiredPolyfill;function requirePolyfill(){if(hasRequiredPolyfill)return polyfill;hasRequiredPolyfill=1;var e=requireImplementation();return polyfill=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:e},polyfill}var shim,hasRequiredShim;function requireShim(){if(hasRequiredShim)return shim;hasRequiredShim=1;var e=requireDefineProperties(),t=requirePolyfill();return shim=function(){var n=t();return e(Number,{isNaN:n},{isNaN:function(){return Number.isNaN!==n}}),n},shim}var isNan,hasRequiredIsNan;function requireIsNan(){if(hasRequiredIsNan)return isNan;hasRequiredIsNan=1;var e=callBindExports,t=requireDefineProperties(),r=requireImplementation(),n=requirePolyfill(),a=requireShim(),s=e(n(),Number);return t(s,{getPolyfill:n,implementation:r,shim:a}),isNan=s,isNan}var comparisons,hasRequiredComparisons;function requireComparisons(){if(hasRequiredComparisons)return comparisons;hasRequiredComparisons=1;function e(ge,xe){return s(ge)||a(ge,xe)||r(ge,xe)||t()}function t(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function r(ge,xe){if(ge){if(typeof ge=="string")return n(ge,xe);var Fe=Object.prototype.toString.call(ge).slice(8,-1);if(Fe==="Object"&&ge.constructor&&(Fe=ge.constructor.name),Fe==="Map"||Fe==="Set")return Array.from(ge);if(Fe==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(Fe))return n(ge,xe)}}function n(ge,xe){(xe==null||xe>ge.length)&&(xe=ge.length);for(var Fe=0,Re=new Array(xe);Fe<xe;Fe++)Re[Fe]=ge[Fe];return Re}function a(ge,xe){var Fe=ge==null?null:typeof Symbol<"u"&&ge[Symbol.iterator]||ge["@@iterator"];if(Fe!=null){var Re,Oe,Me,Q,A=[],O=!0,X=!1;try{if(Me=(Fe=Fe.call(ge)).next,xe===0){if(Object(Fe)!==Fe)return;O=!1}else for(;!(O=(Re=Me.call(Fe)).done)&&(A.push(Re.value),A.length!==xe);O=!0);}catch(pe){X=!0,Oe=pe}finally{try{if(!O&&Fe.return!=null&&(Q=Fe.return(),Object(Q)!==Q))return}finally{if(X)throw Oe}}return A}}function s(ge){if(Array.isArray(ge))return ge}function o(ge){"@babel/helpers - typeof";return o=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(xe){return typeof xe}:function(xe){return xe&&typeof Symbol=="function"&&xe.constructor===Symbol&&xe!==Symbol.prototype?"symbol":typeof xe},o(ge)}var l=/a/g.flags!==void 0,f=function(xe){var Fe=[];return xe.forEach(function(Re){return Fe.push(Re)}),Fe},u=function(xe){var Fe=[];return xe.forEach(function(Re,Oe){return Fe.push([Oe,Re])}),Fe},m=Object.is?Object.is:requireObjectIs(),v=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},b=Number.isNaN?Number.isNaN:requireIsNan();function P(ge){return ge.call.bind(ge)}var F=P(Object.prototype.hasOwnProperty),C=P(Object.prototype.propertyIsEnumerable),D=P(Object.prototype.toString),E=util$5.types,k=E.isAnyArrayBuffer,j=E.isArrayBufferView,W=E.isDate,M=E.isMap,S=E.isRegExp,T=E.isSet,V=E.isNativeError,_=E.isBoxedPrimitive,ee=E.isNumberObject,re=E.isStringObject,te=E.isBooleanObject,oe=E.isBigIntObject,he=E.isSymbolObject,me=E.isFloat32Array,we=E.isFloat64Array;function Se(ge){if(ge.length===0||ge.length>10)return!0;for(var xe=0;xe<ge.length;xe++){var Fe=ge.charCodeAt(xe);if(Fe<48||Fe>57)return!0}return ge.length===10&&ge>=Math.pow(2,32)}function be(ge){return Object.keys(ge).filter(Se).concat(v(ge).filter(Object.prototype.propertyIsEnumerable.bind(ge)))}/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function le(ge,xe){if(ge===xe)return 0;for(var Fe=ge.length,Re=xe.length,Oe=0,Me=Math.min(Fe,Re);Oe<Me;++Oe)if(ge[Oe]!==xe[Oe]){Fe=ge[Oe],Re=xe[Oe];break}return Fe<Re?-1:Re<Fe?1:0}var ae=!0,ke=!1,Ne=0,de=1,$=2,ie=3;function U(ge,xe){return l?ge.source===xe.source&&ge.flags===xe.flags:RegExp.prototype.toString.call(ge)===RegExp.prototype.toString.call(xe)}function L(ge,xe){if(ge.byteLength!==xe.byteLength)return!1;for(var Fe=0;Fe<ge.byteLength;Fe++)if(ge[Fe]!==xe[Fe])return!1;return!0}function J(ge,xe){return ge.byteLength!==xe.byteLength?!1:le(new Uint8Array(ge.buffer,ge.byteOffset,ge.byteLength),new Uint8Array(xe.buffer,xe.byteOffset,xe.byteLength))===0}function se(ge,xe){return ge.byteLength===xe.byteLength&&le(new Uint8Array(ge),new Uint8Array(xe))===0}function ve(ge,xe){return ee(ge)?ee(xe)&&m(Number.prototype.valueOf.call(ge),Number.prototype.valueOf.call(xe)):re(ge)?re(xe)&&String.prototype.valueOf.call(ge)===String.prototype.valueOf.call(xe):te(ge)?te(xe)&&Boolean.prototype.valueOf.call(ge)===Boolean.prototype.valueOf.call(xe):oe(ge)?oe(xe)&&BigInt.prototype.valueOf.call(ge)===BigInt.prototype.valueOf.call(xe):he(xe)&&Symbol.prototype.valueOf.call(ge)===Symbol.prototype.valueOf.call(xe)}function Z(ge,xe,Fe,Re){if(ge===xe)return ge!==0?!0:Fe?m(ge,xe):!0;if(Fe){if(o(ge)!=="object")return typeof ge=="number"&&b(ge)&&b(xe);if(o(xe)!=="object"||ge===null||xe===null||Object.getPrototypeOf(ge)!==Object.getPrototypeOf(xe))return!1}else{if(ge===null||o(ge)!=="object")return xe===null||o(xe)!=="object"?ge==xe:!1;if(xe===null||o(xe)!=="object")return!1}var Oe=D(ge),Me=D(xe);if(Oe!==Me)return!1;if(Array.isArray(ge)){if(ge.length!==xe.length)return!1;var Q=be(ge),A=be(xe);return Q.length!==A.length?!1:q(ge,xe,Fe,Re,de,Q)}if(Oe==="[object Object]"&&(!M(ge)&&M(xe)||!T(ge)&&T(xe)))return!1;if(W(ge)){if(!W(xe)||Date.prototype.getTime.call(ge)!==Date.prototype.getTime.call(xe))return!1}else if(S(ge)){if(!S(xe)||!U(ge,xe))return!1}else if(V(ge)||ge instanceof Error){if(ge.message!==xe.message||ge.name!==xe.name)return!1}else if(j(ge)){if(!Fe&&(me(ge)||we(ge))){if(!L(ge,xe))return!1}else if(!J(ge,xe))return!1;var O=be(ge),X=be(xe);return O.length!==X.length?!1:q(ge,xe,Fe,Re,Ne,O)}else{if(T(ge))return!T(xe)||ge.size!==xe.size?!1:q(ge,xe,Fe,Re,$);if(M(ge))return!M(xe)||ge.size!==xe.size?!1:q(ge,xe,Fe,Re,ie);if(k(ge)){if(!se(ge,xe))return!1}else if(_(ge)&&!ve(ge,xe))return!1}return q(ge,xe,Fe,Re,Ne)}function I(ge,xe){return xe.filter(function(Fe){return C(ge,Fe)})}function q(ge,xe,Fe,Re,Oe,Me){if(arguments.length===5){Me=Object.keys(ge);var Q=Object.keys(xe);if(Me.length!==Q.length)return!1}for(var A=0;A<Me.length;A++)if(!F(xe,Me[A]))return!1;if(Fe&&arguments.length===5){var O=v(ge);if(O.length!==0){var X=0;for(A=0;A<O.length;A++){var pe=O[A];if(C(ge,pe)){if(!C(xe,pe))return!1;Me.push(pe),X++}else if(C(xe,pe))return!1}var ne=v(xe);if(O.length!==ne.length&&I(xe,ne).length!==X)return!1}else{var Pe=v(xe);if(Pe.length!==0&&I(xe,Pe).length!==0)return!1}}if(Me.length===0&&(Oe===Ne||Oe===de&&ge.length===0||ge.size===0))return!0;if(Re===void 0)Re={val1:new Map,val2:new Map,position:0};else{var K=Re.val1.get(ge);if(K!==void 0){var Be=Re.val2.get(xe);if(Be!==void 0)return K===Be}Re.position++}Re.val1.set(ge,Re.position),Re.val2.set(xe,Re.position);var De=ye(ge,xe,Fe,Me,Re,Oe);return Re.val1.delete(ge),Re.val2.delete(xe),De}function fe(ge,xe,Fe,Re){for(var Oe=f(ge),Me=0;Me<Oe.length;Me++){var Q=Oe[Me];if(Z(xe,Q,Fe,Re))return ge.delete(Q),!0}return!1}function Ae(ge){switch(o(ge)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":ge=+ge;case"number":if(b(ge))return!1}return!0}function G(ge,xe,Fe){var Re=Ae(Fe);return Re??(xe.has(Re)&&!ge.has(Re))}function N(ge,xe,Fe,Re,Oe){var Me=Ae(Fe);if(Me!=null)return Me;var Q=xe.get(Me);return Q===void 0&&!xe.has(Me)||!Z(Re,Q,!1,Oe)?!1:!ge.has(Me)&&Z(Re,Q,!1,Oe)}function B(ge,xe,Fe,Re){for(var Oe=null,Me=f(ge),Q=0;Q<Me.length;Q++){var A=Me[Q];if(o(A)==="object"&&A!==null)Oe===null&&(Oe=new Set),Oe.add(A);else if(!xe.has(A)){if(Fe||!G(ge,xe,A))return!1;Oe===null&&(Oe=new Set),Oe.add(A)}}if(Oe!==null){for(var O=f(xe),X=0;X<O.length;X++){var pe=O[X];if(o(pe)==="object"&&pe!==null){if(!fe(Oe,pe,Fe,Re))return!1}else if(!Fe&&!ge.has(pe)&&!fe(Oe,pe,Fe,Re))return!1}return Oe.size===0}return!0}function H(ge,xe,Fe,Re,Oe,Me){for(var Q=f(ge),A=0;A<Q.length;A++){var O=Q[A];if(Z(Fe,O,Oe,Me)&&Z(Re,xe.get(O),Oe,Me))return ge.delete(O),!0}return!1}function ce(ge,xe,Fe,Re){for(var Oe=null,Me=u(ge),Q=0;Q<Me.length;Q++){var A=e(Me[Q],2),O=A[0],X=A[1];if(o(O)==="object"&&O!==null)Oe===null&&(Oe=new Set),Oe.add(O);else{var pe=xe.get(O);if(pe===void 0&&!xe.has(O)||!Z(X,pe,Fe,Re)){if(Fe||!N(ge,xe,O,X,Re))return!1;Oe===null&&(Oe=new Set),Oe.add(O)}}}if(Oe!==null){for(var ne=u(xe),Pe=0;Pe<ne.length;Pe++){var K=e(ne[Pe],2),Be=K[0],De=K[1];if(o(Be)==="object"&&Be!==null){if(!H(Oe,ge,Be,De,Fe,Re))return!1}else if(!Fe&&(!ge.has(Be)||!Z(ge.get(Be),De,!1,Re))&&!H(Oe,ge,Be,De,!1,Re))return!1}return Oe.size===0}return!0}function ye(ge,xe,Fe,Re,Oe,Me){var Q=0;if(Me===$){if(!B(ge,xe,Fe,Oe))return!1}else if(Me===ie){if(!ce(ge,xe,Fe,Oe))return!1}else if(Me===de)for(;Q<ge.length;Q++)if(F(ge,Q)){if(!F(xe,Q)||!Z(ge[Q],xe[Q],Fe,Oe))return!1}else{if(F(xe,Q))return!1;for(var A=Object.keys(ge);Q<A.length;Q++){var O=A[Q];if(!F(xe,O)||!Z(ge[O],xe[O],Fe,Oe))return!1}return A.length===Object.keys(xe).length}for(Q=0;Q<Re.length;Q++){var X=Re[Q];if(!Z(ge[X],xe[X],Fe,Oe))return!1}return!0}function Ee(ge,xe){return Z(ge,xe,ke)}function Ce(ge,xe){return Z(ge,xe,ae)}return comparisons={isDeepEqual:Ee,isDeepStrictEqual:Ce},comparisons}var hasRequiredAssert;function requireAssert(){if(hasRequiredAssert)return assert.exports;hasRequiredAssert=1;function e(L){"@babel/helpers - typeof";return e=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(J){return typeof J}:function(J){return J&&typeof Symbol=="function"&&J.constructor===Symbol&&J!==Symbol.prototype?"symbol":typeof J},e(L)}function t(L,J){for(var se=0;se<J.length;se++){var ve=J[se];ve.enumerable=ve.enumerable||!1,ve.configurable=!0,"value"in ve&&(ve.writable=!0),Object.defineProperty(L,n(ve.key),ve)}}function r(L,J,se){return J&&t(L.prototype,J),se&&t(L,se),Object.defineProperty(L,"prototype",{writable:!1}),L}function n(L){var J=a(L,"string");return e(J)==="symbol"?J:String(J)}function a(L,J){if(e(L)!=="object"||L===null)return L;var se=L[Symbol.toPrimitive];if(se!==void 0){var ve=se.call(L,J||"default");if(e(ve)!=="object")return ve;throw new TypeError("@@toPrimitive must return a primitive value.")}return(J==="string"?String:Number)(L)}function s(L,J){if(!(L instanceof J))throw new TypeError("Cannot call a class as a function")}var o=requireErrors(),l=o.codes,f=l.ERR_AMBIGUOUS_ARGUMENT,u=l.ERR_INVALID_ARG_TYPE,m=l.ERR_INVALID_ARG_VALUE,v=l.ERR_INVALID_RETURN_VALUE,b=l.ERR_MISSING_ARGS,P=requireAssertion_error(),F=util$5,C=F.inspect,D=util$5.types,E=D.isPromise,k=D.isRegExp,j=polyfill$2(),W=polyfill$1(),M=callBound$3("RegExp.prototype.test"),S,T;function V(){var L=requireComparisons();S=L.isDeepEqual,T=L.isDeepStrictEqual}var _=!1,ee=assert.exports=me,re={};function te(L){throw L.message instanceof Error?L.message:new P(L)}function oe(L,J,se,ve,Z){var I=arguments.length,q;if(I===0)q="Failed";else if(I===1)se=L,L=void 0;else{if(_===!1){_=!0;var fe=process$1.emitWarning?process$1.emitWarning:console.warn.bind(console);fe("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")}I===2&&(ve="!=")}if(se instanceof Error)throw se;var Ae={actual:L,expected:J,operator:ve===void 0?"fail":ve,stackStartFn:Z||oe};se!==void 0&&(Ae.message=se);var G=new P(Ae);throw q&&(G.message=q,G.generatedMessage=!0),G}ee.fail=oe,ee.AssertionError=P;function he(L,J,se,ve){if(!se){var Z=!1;if(J===0)Z=!0,ve="No value argument passed to `assert.ok()`";else if(ve instanceof Error)throw ve;var I=new P({actual:se,expected:!0,message:ve,operator:"==",stackStartFn:L});throw I.generatedMessage=Z,I}}function me(){for(var L=arguments.length,J=new Array(L),se=0;se<L;se++)J[se]=arguments[se];he.apply(void 0,[me,J.length].concat(J))}ee.ok=me,ee.equal=function L(J,se,ve){if(arguments.length<2)throw new b("actual","expected");J!=se&&te({actual:J,expected:se,message:ve,operator:"==",stackStartFn:L})},ee.notEqual=function L(J,se,ve){if(arguments.length<2)throw new b("actual","expected");J==se&&te({actual:J,expected:se,message:ve,operator:"!=",stackStartFn:L})},ee.deepEqual=function L(J,se,ve){if(arguments.length<2)throw new b("actual","expected");S===void 0&&V(),S(J,se)||te({actual:J,expected:se,message:ve,operator:"deepEqual",stackStartFn:L})},ee.notDeepEqual=function L(J,se,ve){if(arguments.length<2)throw new b("actual","expected");S===void 0&&V(),S(J,se)&&te({actual:J,expected:se,message:ve,operator:"notDeepEqual",stackStartFn:L})},ee.deepStrictEqual=function L(J,se,ve){if(arguments.length<2)throw new b("actual","expected");S===void 0&&V(),T(J,se)||te({actual:J,expected:se,message:ve,operator:"deepStrictEqual",stackStartFn:L})},ee.notDeepStrictEqual=we;function we(L,J,se){if(arguments.length<2)throw new b("actual","expected");S===void 0&&V(),T(L,J)&&te({actual:L,expected:J,message:se,operator:"notDeepStrictEqual",stackStartFn:we})}ee.strictEqual=function L(J,se,ve){if(arguments.length<2)throw new b("actual","expected");W(J,se)||te({actual:J,expected:se,message:ve,operator:"strictEqual",stackStartFn:L})},ee.notStrictEqual=function L(J,se,ve){if(arguments.length<2)throw new b("actual","expected");W(J,se)&&te({actual:J,expected:se,message:ve,operator:"notStrictEqual",stackStartFn:L})};var Se=r(function L(J,se,ve){var Z=this;s(this,L),se.forEach(function(I){I in J&&(ve!==void 0&&typeof ve[I]=="string"&&k(J[I])&&M(J[I],ve[I])?Z[I]=ve[I]:Z[I]=J[I])})});function be(L,J,se,ve,Z,I){if(!(se in L)||!T(L[se],J[se])){if(!ve){var q=new Se(L,Z),fe=new Se(J,Z,L),Ae=new P({actual:q,expected:fe,operator:"deepStrictEqual",stackStartFn:I});throw Ae.actual=L,Ae.expected=J,Ae.operator=I.name,Ae}te({actual:L,expected:J,message:ve,operator:I.name,stackStartFn:I})}}function le(L,J,se,ve){if(typeof J!="function"){if(k(J))return M(J,L);if(arguments.length===2)throw new u("expected",["Function","RegExp"],J);if(e(L)!=="object"||L===null){var Z=new P({actual:L,expected:J,message:se,operator:"deepStrictEqual",stackStartFn:ve});throw Z.operator=ve.name,Z}var I=Object.keys(J);if(J instanceof Error)I.push("name","message");else if(I.length===0)throw new m("error",J,"may not be an empty object");return S===void 0&&V(),I.forEach(function(q){typeof L[q]=="string"&&k(J[q])&&M(J[q],L[q])||be(L,J,q,se,I,ve)}),!0}return J.prototype!==void 0&&L instanceof J?!0:Error.isPrototypeOf(J)?!1:J.call({},L)===!0}function ae(L){if(typeof L!="function")throw new u("fn","Function",L);try{L()}catch(J){return J}return re}function ke(L){return E(L)||L!==null&&e(L)==="object"&&typeof L.then=="function"&&typeof L.catch=="function"}function Ne(L){return Promise.resolve().then(function(){var J;if(typeof L=="function"){if(J=L(),!ke(J))throw new v("instance of Promise","promiseFn",J)}else if(ke(L))J=L;else throw new u("promiseFn",["Function","Promise"],L);return Promise.resolve().then(function(){return J}).then(function(){return re}).catch(function(se){return se})})}function de(L,J,se,ve){if(typeof se=="string"){if(arguments.length===4)throw new u("error",["Object","Error","Function","RegExp"],se);if(e(J)==="object"&&J!==null){if(J.message===se)throw new f("error/message",'The error message "'.concat(J.message,'" is identical to the message.'))}else if(J===se)throw new f("error/message",'The error "'.concat(J,'" is identical to the message.'));ve=se,se=void 0}else if(se!=null&&e(se)!=="object"&&typeof se!="function")throw new u("error",["Object","Error","Function","RegExp"],se);if(J===re){var Z="";se&&se.name&&(Z+=" (".concat(se.name,")")),Z+=ve?": ".concat(ve):".";var I=L.name==="rejects"?"rejection":"exception";te({actual:void 0,expected:se,operator:L.name,message:"Missing expected ".concat(I).concat(Z),stackStartFn:L})}if(se&&!le(J,se,ve,L))throw J}function $(L,J,se,ve){if(J!==re){if(typeof se=="string"&&(ve=se,se=void 0),!se||le(J,se)){var Z=ve?": ".concat(ve):".",I=L.name==="doesNotReject"?"rejection":"exception";te({actual:J,expected:se,operator:L.name,message:"Got unwanted ".concat(I).concat(Z,`
`)+'Actual message: "'.concat(J&&J.message,'"'),stackStartFn:L})}throw J}}ee.throws=function L(J){for(var se=arguments.length,ve=new Array(se>1?se-1:0),Z=1;Z<se;Z++)ve[Z-1]=arguments[Z];de.apply(void 0,[L,ae(J)].concat(ve))},ee.rejects=function L(J){for(var se=arguments.length,ve=new Array(se>1?se-1:0),Z=1;Z<se;Z++)ve[Z-1]=arguments[Z];return Ne(J).then(function(I){return de.apply(void 0,[L,I].concat(ve))})},ee.doesNotThrow=function L(J){for(var se=arguments.length,ve=new Array(se>1?se-1:0),Z=1;Z<se;Z++)ve[Z-1]=arguments[Z];$.apply(void 0,[L,ae(J)].concat(ve))},ee.doesNotReject=function L(J){for(var se=arguments.length,ve=new Array(se>1?se-1:0),Z=1;Z<se;Z++)ve[Z-1]=arguments[Z];return Ne(J).then(function(I){return $.apply(void 0,[L,I].concat(ve))})},ee.ifError=function L(J){if(J!=null){var se="ifError got unwanted exception: ";e(J)==="object"&&typeof J.message=="string"?J.message.length===0&&J.constructor?se+=J.constructor.name:se+=J.message:se+=C(J);var ve=new P({actual:J,expected:null,operator:"ifError",message:se,stackStartFn:L}),Z=J.stack;if(typeof Z=="string"){var I=Z.split(`
`);I.shift();for(var q=ve.stack.split(`
`),fe=0;fe<I.length;fe++){var Ae=q.indexOf(I[fe]);if(Ae!==-1){q=q.slice(0,Ae);break}}ve.stack="".concat(q.join(`
`),`
`).concat(I.join(`
`))}throw ve}};function ie(L,J,se,ve,Z){if(!k(J))throw new u("regexp","RegExp",J);var I=Z==="match";if(typeof L!="string"||M(J,L)!==I){if(se instanceof Error)throw se;var q=!se;se=se||(typeof L!="string"?'The "string" argument must be of type string. Received type '+"".concat(e(L)," (").concat(C(L),")"):(I?"The input did not match the regular expression ":"The input was expected to not match the regular expression ")+"".concat(C(J),`. Input:

`).concat(C(L),`
`));var fe=new P({actual:L,expected:J,message:se,operator:Z,stackStartFn:ve});throw fe.generatedMessage=q,fe}}ee.match=function L(J,se,ve){ie(J,se,ve,L,"match")},ee.doesNotMatch=function L(J,se,ve){ie(J,se,ve,L,"doesNotMatch")};function U(){for(var L=arguments.length,J=new Array(L),se=0;se<L;se++)J[se]=arguments[se];he.apply(void 0,[U,J.length].concat(J))}return ee.strict=j(U,ee,{equal:ee.strictEqual,deepEqual:ee.deepStrictEqual,notEqual:ee.notStrictEqual,notDeepEqual:ee.notDeepStrictEqual}),ee.strict.strict=ee.strict,assert.exports}(function(e,t){let r=requireAssert().ok,n=require$$0,a=util$5,s=buffer.kMaxLength;function o(v){if(!(this instanceof o))return new o(v);v&&v.chunkSize<n.Z_MIN_CHUNK&&(v.chunkSize=n.Z_MIN_CHUNK),n.Inflate.call(this,v),this._offset=this._offset===void 0?this._outOffset:this._offset,this._buffer=this._buffer||this._outBuffer,v&&v.maxLength!=null&&(this._maxLength=v.maxLength)}function l(v){return new o(v)}function f(v,b){b&&process$1.nextTick(b),v._handle&&(v._handle.close(),v._handle=null)}o.prototype._processChunk=function(v,b,P){if(typeof P=="function")return n.Inflate._processChunk.call(this,v,b,P);let F=this,C=v&&v.length,D=this._chunkSize-this._offset,E=this._maxLength,k=0,j=[],W=0,M;this.on("error",function(_){M=_});function S(_,ee){if(F._hadError)return;let re=D-ee;if(r(re>=0,"have should not go down"),re>0){let te=F._buffer.slice(F._offset,F._offset+re);if(F._offset+=re,te.length>E&&(te=te.slice(0,E)),j.push(te),W+=te.length,E-=te.length,E===0)return!1}return(ee===0||F._offset>=F._chunkSize)&&(D=F._chunkSize,F._offset=0,F._buffer=Buffer$1.allocUnsafe(F._chunkSize)),ee===0?(k+=C-_,C=_,!0):!1}r(this._handle,"zlib binding closed");let T;do T=this._handle.writeSync(b,v,k,C,this._buffer,this._offset,D),T=T||this._writeState;while(!this._hadError&&S(T[0],T[1]));if(this._hadError)throw M;if(W>=s)throw f(this),new RangeError("Cannot create final Buffer. It would be larger than 0x"+s.toString(16)+" bytes");let V=Buffer$1.concat(j,W);return f(this),V},a.inherits(o,n.Inflate);function u(v,b){if(typeof b=="string"&&(b=Buffer$1.from(b)),!(b instanceof Buffer$1))throw new TypeError("Not a string or buffer");let P=v._finishFlushFlag;return P==null&&(P=n.Z_FINISH),v._processChunk(b,P)}function m(v,b){return u(new o(b),v)}e.exports=t=m,t.Inflate=o,t.createInflate=l,t.inflateSync=m})(syncInflate,syncInflate.exports);var syncInflateExports=syncInflate.exports,syncReader={exports:{}};let SyncReader$2=syncReader.exports=function(e){this._buffer=e,this._reads=[]};SyncReader$2.prototype.read=function(e,t){this._reads.push({length:Math.abs(e),allowLess:e<0,func:t})};SyncReader$2.prototype.process=function(){for(;this._reads.length>0&&this._buffer.length;){let e=this._reads[0];if(this._buffer.length&&(this._buffer.length>=e.length||e.allowLess)){this._reads.shift();let t=this._buffer;this._buffer=t.slice(e.length),e.func.call(this,t.slice(0,e.length))}else break}if(this._reads.length>0)throw new Error("There are some read requests waitng on finished stream");if(this._buffer.length>0)throw new Error("unrecognised content at end of stream")};var syncReaderExports=syncReader.exports,filterParseSync={};let SyncReader$1=syncReaderExports,Filter=filterParseExports;filterParseSync.process=function(e,t){let r=[],n=new SyncReader$1(e);return new Filter(t,{read:n.read.bind(n),write:function(s){r.push(s)},complete:function(){}}).start(),n.process(),Buffer$1.concat(r)};let hasSyncZlib$1=!0,zlib$1=require$$0,inflateSync=syncInflateExports;zlib$1.deflateSync||(hasSyncZlib$1=!1);let SyncReader=syncReaderExports,FilterSync=filterParseSync,Parser$1=parserExports,bitmapper=bitmapper$2,formatNormaliser=formatNormaliser$2;var parserSync=function(e,t){if(!hasSyncZlib$1)throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");let r;function n(W){r=W}let a;function s(W){a=W}function o(W){a.transColor=W}function l(W){a.palette=W}function f(){a.alpha=!0}let u;function m(W){u=W}let v=[];function b(W){v.push(W)}let P=new SyncReader(e);if(new Parser$1(t,{read:P.read.bind(P),error:n,metadata:s,gamma:m,palette:l,transColor:o,inflateData:b,simpleTransparency:f}).start(),P.process(),r)throw r;let C=Buffer$1.concat(v);v.length=0;let D;if(a.interlace)D=zlib$1.inflateSync(C);else{let M=((a.width*a.bpp*a.depth+7>>3)+1)*a.height;D=inflateSync(C,{chunkSize:M,maxLength:M})}if(C=null,!D||!D.length)throw new Error("bad png - invalid inflate data response");let E=FilterSync.process(D,a);C=null;let k=bitmapper.dataToBitMap(E,a);E=null;let j=formatNormaliser(k,a,t.skipRescale);return a.data=j,a.gamma=u||0,a};let hasSyncZlib=!0,zlib=require$$0;zlib.deflateSync||(hasSyncZlib=!1);let constants$1=constants$6,Packer$1=packerExports;var packerSync=function(e,t){if(!hasSyncZlib)throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");let r=t||{},n=new Packer$1(r),a=[];a.push(Buffer$1.from(constants$1.PNG_SIGNATURE)),a.push(n.packIHDR(e.width,e.height)),e.gamma&&a.push(n.packGAMA(e.gamma));let s=n.filterData(e.data,e.width,e.height),o=zlib.deflateSync(s,n.getDeflateOptions());if(s=null,!o||!o.length)throw new Error("bad png - invalid compressed data response");return a.push(n.packIDAT(o)),a.push(n.packIEND()),Buffer$1.concat(a)};let parse=parserSync,pack=packerSync;pngSync.read=function(e,t){return parse(e,t||{})};pngSync.write=function(e,t){return pack(e,t)};var PNG_1;let util=util$5,Stream=streamBrowserify,Parser=parserAsyncExports,Packer=packerAsyncExports,PNGSync=pngSync,PNG=PNG_1=function(e){Stream.call(this),e=e||{},this.width=e.width|0,this.height=e.height|0,this.data=this.width>0&&this.height>0?Buffer$1.alloc(4*this.width*this.height):null,e.fill&&this.data&&this.data.fill(0),this.gamma=0,this.readable=this.writable=!0,this._parser=new Parser(e),this._parser.on("error",this.emit.bind(this,"error")),this._parser.on("close",this._handleClose.bind(this)),this._parser.on("metadata",this._metadata.bind(this)),this._parser.on("gamma",this._gamma.bind(this)),this._parser.on("parsed",(function(t){this.data=t,this.emit("parsed",t)}).bind(this)),this._packer=new Packer(e),this._packer.on("data",this.emit.bind(this,"data")),this._packer.on("end",this.emit.bind(this,"end")),this._parser.on("close",this._handleClose.bind(this)),this._packer.on("error",this.emit.bind(this,"error"))};util.inherits(PNG,Stream);PNG.sync=PNGSync;PNG.prototype.pack=function(){return!this.data||!this.data.length?(this.emit("error","No data provided"),this):(process$1.nextTick((function(){this._packer.pack(this.data,this.width,this.height,this.gamma)}).bind(this)),this)};PNG.prototype.parse=function(e,t){if(t){let r,n;r=(function(a){this.removeListener("error",n),this.data=a,t(null,this)}).bind(this),n=(function(a){this.removeListener("parsed",r),t(a,null)}).bind(this),this.once("parsed",r),this.once("error",n)}return this.end(e),this};PNG.prototype.write=function(e){return this._parser.write(e),!0};PNG.prototype.end=function(e){this._parser.end(e)};PNG.prototype._metadata=function(e){this.width=e.width,this.height=e.height,this.emit("metadata",e)};PNG.prototype._gamma=function(e){this.gamma=e};PNG.prototype._handleClose=function(){!this._parser.writable&&!this._packer.readable&&this.emit("close")};PNG.bitblt=function(e,t,r,n,a,s,o,l){if(r|=0,n|=0,a|=0,s|=0,o|=0,l|=0,r>e.width||n>e.height||r+a>e.width||n+s>e.height)throw new Error("bitblt reading outside image");if(o>t.width||l>t.height||o+a>t.width||l+s>t.height)throw new Error("bitblt writing outside image");for(let f=0;f<s;f++)e.data.copy(t.data,(l+f)*t.width+o<<2,(n+f)*e.width+r<<2,(n+f)*e.width+r+a<<2)};PNG.prototype.bitblt=function(e,t,r,n,a,s,o){return PNG.bitblt(this,e,t,r,n,a,s,o),this};PNG.adjustGamma=function(e){if(e.gamma){for(let t=0;t<e.height;t++)for(let r=0;r<e.width;r++){let n=e.width*t+r<<2;for(let a=0;a<3;a++){let s=e.data[n+a]/255;s=Math.pow(s,1/2.2/e.gamma),e.data[n+a]=Math.round(s*255)}}e.gamma=0}};PNG.prototype.adjustGamma=function(){PNG.adjustGamma(this)};const MIME_TYPE$3="image/png",PNG_FILTER_AUTO=-1,PNG_FILTER_NONE=0,PNG_FILTER_SUB=1,PNG_FILTER_UP=2,PNG_FILTER_AVERAGE=3,PNG_FILTER_PATH=4,png=()=>({mime:{[MIME_TYPE$3]:["png"]},constants:{MIME_PNG:MIME_TYPE$3,PNG_FILTER_AUTO,PNG_FILTER_NONE,PNG_FILTER_SUB,PNG_FILTER_UP,PNG_FILTER_AVERAGE,PNG_FILTER_PATH},hasAlpha:{[MIME_TYPE$3]:!0},decoders:{[MIME_TYPE$3]:PNG_1.sync.read},encoders:{[MIME_TYPE$3](e){const t=new PNG_1({width:e.bitmap.width,height:e.bitmap.height});return t.data=e.bitmap.data,PNG_1.sync.write(t,{deflateLevel:e._deflateLevel,deflateStrategy:e._deflateStrategy,filterType:e._filterType,colorType:typeof e._colorType=="number"?e._colorType:e._rgba?6:2,inputHasAlpha:e._rgba})}},class:{_deflateLevel:9,_deflateStrategy:3,_filterType:PNG_FILTER_AUTO,_colorType:null,deflateLevel(e,t){return typeof e!="number"?throwError.call(this,"l must be a number",t):e<0||e>9?throwError.call(this,"l must be a number 0 - 9",t):(this._deflateLevel=Math.round(e),isNodePattern(t)&&t.call(this,null,this),this)},deflateStrategy(e,t){return typeof e!="number"?throwError.call(this,"s must be a number",t):e<0||e>3?throwError.call(this,"s must be a number 0 - 3",t):(this._deflateStrategy=Math.round(e),isNodePattern(t)&&t.call(this,null,this),this)},filterType(e,t){return typeof e!="number"?throwError.call(this,"n must be a number",t):e<-1||e>4?throwError.call(this,"n must be -1 (auto) or a number 0 - 4",t):(this._filterType=Math.round(e),isNodePattern(t)&&t.call(this,null,this),this)},colorType(e,t){return typeof e!="number"?throwError.call(this,"s must be a number",t):e!==0&&e!==2&&e!==4&&e!==6?throwError.call(this,"s must be a number 0, 2, 4, 6.",t):(this._colorType=Math.round(e),isNodePattern(t)&&t.call(this,null,this),this)}}});function BmpEncoder(e){this.buffer=e.data,this.width=e.width,this.height=e.height,this.extraBytes=this.width%4,this.rgbSize=this.height*(3*this.width+this.extraBytes),this.headerInfoSize=40,this.data=[],this.flag="BM",this.reserved=0,this.offset=54,this.fileSize=this.rgbSize+this.offset,this.planes=1,this.bitPP=24,this.compress=0,this.hr=0,this.vr=0,this.colors=0,this.importantColors=0}BmpEncoder.prototype.encode=function(){var e=new Buffer$1(this.offset+this.rgbSize);this.pos=0,e.write(this.flag,this.pos,2),this.pos+=2,e.writeUInt32LE(this.fileSize,this.pos),this.pos+=4,e.writeUInt32LE(this.reserved,this.pos),this.pos+=4,e.writeUInt32LE(this.offset,this.pos),this.pos+=4,e.writeUInt32LE(this.headerInfoSize,this.pos),this.pos+=4,e.writeUInt32LE(this.width,this.pos),this.pos+=4,e.writeInt32LE(-this.height,this.pos),this.pos+=4,e.writeUInt16LE(this.planes,this.pos),this.pos+=2,e.writeUInt16LE(this.bitPP,this.pos),this.pos+=2,e.writeUInt32LE(this.compress,this.pos),this.pos+=4,e.writeUInt32LE(this.rgbSize,this.pos),this.pos+=4,e.writeUInt32LE(this.hr,this.pos),this.pos+=4,e.writeUInt32LE(this.vr,this.pos),this.pos+=4,e.writeUInt32LE(this.colors,this.pos),this.pos+=4,e.writeUInt32LE(this.importantColors,this.pos),this.pos+=4;for(var t=0,r=3*this.width+this.extraBytes,n=0;n<this.height;n++){for(var a=0;a<this.width;a++){var s=this.pos+n*r+a*3;t++,e[s]=this.buffer[t++],e[s+1]=this.buffer[t++],e[s+2]=this.buffer[t++]}if(this.extraBytes>0){var o=this.pos+n*r+this.width*3;e.fill(0,o,o+this.extraBytes)}}return e};var encoder=function(e,t){var r=new BmpEncoder(e),n=r.encode();return{data:n,width:e.width,height:e.height}};function BmpDecoder(e,t){if(this.pos=0,this.buffer=e,this.is_with_alpha=!!t,this.bottom_up=!0,this.flag=this.buffer.toString("utf-8",0,this.pos+=2),this.flag!="BM")throw new Error("Invalid BMP File");this.parseHeader(),this.parseRGBA()}BmpDecoder.prototype.parseHeader=function(){if(this.fileSize=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.reserved=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.offset=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.headerSize=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.width=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.height=this.buffer.readInt32LE(this.pos),this.pos+=4,this.planes=this.buffer.readUInt16LE(this.pos),this.pos+=2,this.bitPP=this.buffer.readUInt16LE(this.pos),this.pos+=2,this.compress=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.rawSize=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.hr=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.vr=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.colors=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.importantColors=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.bitPP===16&&this.is_with_alpha&&(this.bitPP=15),this.bitPP<15){var e=this.colors===0?1<<this.bitPP:this.colors;this.palette=new Array(e);for(var t=0;t<e;t++){var r=this.buffer.readUInt8(this.pos++),n=this.buffer.readUInt8(this.pos++),a=this.buffer.readUInt8(this.pos++),s=this.buffer.readUInt8(this.pos++);this.palette[t]={red:a,green:n,blue:r,quad:s}}}this.height<0&&(this.height*=-1,this.bottom_up=!1)};BmpDecoder.prototype.parseRGBA=function(){var e="bit"+this.bitPP,t=this.width*this.height*4;this.data=new Buffer$1(t),this[e]()};BmpDecoder.prototype.bit1=function(){for(var e=Math.ceil(this.width/8),t=e%4,r=this.height>=0?this.height-1:-this.height,r=this.height-1;r>=0;r--){for(var n=this.bottom_up?r:this.height-1-r,a=0;a<e;a++)for(var s=this.buffer.readUInt8(this.pos++),o=n*this.width*4+a*8*4,l=0;l<8&&a*8+l<this.width;l++){var f=this.palette[s>>7-l&1];this.data[o+l*4]=0,this.data[o+l*4+1]=f.blue,this.data[o+l*4+2]=f.green,this.data[o+l*4+3]=f.red}t!=0&&(this.pos+=4-t)}};BmpDecoder.prototype.bit4=function(){if(this.compress==2){let D=function(E){var k=this.palette[E];this.data[e]=0,this.data[e+1]=k.blue,this.data[e+2]=k.green,this.data[e+3]=k.red,e+=4};var C=D;this.data.fill(255);for(var e=0,t=this.bottom_up?this.height-1:0,r=!1;e<this.data.length;){var n=this.buffer.readUInt8(this.pos++),a=this.buffer.readUInt8(this.pos++);if(n==0)if(a==0){this.bottom_up?t--:t++,e=t*this.width*4,r=!1;continue}else{if(a==1)break;if(a==2){var s=this.buffer.readUInt8(this.pos++),o=this.buffer.readUInt8(this.pos++);this.bottom_up?t-=o:t+=o,e+=o*this.width*4+s*4}else{for(var l=this.buffer.readUInt8(this.pos++),f=0;f<a;f++)r?D.call(this,l&15):D.call(this,(l&240)>>4),f&1&&f+1<a&&(l=this.buffer.readUInt8(this.pos++)),r=!r;(a+1>>1&1)==1&&this.pos++}}else for(var f=0;f<n;f++)r?D.call(this,a&15):D.call(this,(a&240)>>4),r=!r}}else for(var u=Math.ceil(this.width/2),m=u%4,o=this.height-1;o>=0;o--){for(var v=this.bottom_up?o:this.height-1-o,s=0;s<u;s++){var a=this.buffer.readUInt8(this.pos++),e=v*this.width*4+s*2*4,b=a>>4,P=a&15,F=this.palette[b];if(this.data[e]=0,this.data[e+1]=F.blue,this.data[e+2]=F.green,this.data[e+3]=F.red,s*2+1>=this.width)break;F=this.palette[P],this.data[e+4]=0,this.data[e+4+1]=F.blue,this.data[e+4+2]=F.green,this.data[e+4+3]=F.red}m!=0&&(this.pos+=4-m)}};BmpDecoder.prototype.bit8=function(){if(this.compress==1){let b=function(P){var F=this.palette[P];this.data[e]=0,this.data[e+1]=F.blue,this.data[e+2]=F.green,this.data[e+3]=F.red,e+=4};var v=b;this.data.fill(255);for(var e=0,t=this.bottom_up?this.height-1:0;e<this.data.length;){var r=this.buffer.readUInt8(this.pos++),n=this.buffer.readUInt8(this.pos++);if(r==0)if(n==0){this.bottom_up?t--:t++,e=t*this.width*4;continue}else{if(n==1)break;if(n==2){var a=this.buffer.readUInt8(this.pos++),s=this.buffer.readUInt8(this.pos++);this.bottom_up?t-=s:t+=s,e+=s*this.width*4+a*4}else{for(var o=0;o<n;o++){var l=this.buffer.readUInt8(this.pos++);b.call(this,l)}n&!0&&this.pos++}}else for(var o=0;o<r;o++)b.call(this,n)}}else for(var f=this.width%4,s=this.height-1;s>=0;s--){for(var u=this.bottom_up?s:this.height-1-s,a=0;a<this.width;a++){var n=this.buffer.readUInt8(this.pos++),e=u*this.width*4+a*4;if(n<this.palette.length){var m=this.palette[n];this.data[e]=0,this.data[e+1]=m.blue,this.data[e+2]=m.green,this.data[e+3]=m.red}else this.data[e]=0,this.data[e+1]=255,this.data[e+2]=255,this.data[e+3]=255}f!=0&&(this.pos+=4-f)}};BmpDecoder.prototype.bit15=function(){for(var e=this.width%3,t=parseInt("11111",2),r=t,n=this.height-1;n>=0;n--){for(var a=this.bottom_up?n:this.height-1-n,s=0;s<this.width;s++){var o=this.buffer.readUInt16LE(this.pos);this.pos+=2;var l=(o&r)/r*255|0,f=(o>>5&r)/r*255|0,u=(o>>10&r)/r*255|0,m=o>>15?255:0,v=a*this.width*4+s*4;this.data[v]=m,this.data[v+1]=l,this.data[v+2]=f,this.data[v+3]=u}this.pos+=e}};BmpDecoder.prototype.bit16=function(){var e=this.width%2*2;this.maskRed=31744,this.maskGreen=992,this.maskBlue=31,this.mask0=0,this.compress==3&&(this.maskRed=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.maskGreen=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.maskBlue=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.mask0=this.buffer.readUInt32LE(this.pos),this.pos+=4);for(var t=[0,0,0],r=0;r<16;r++)this.maskRed>>r&1&&t[0]++,this.maskGreen>>r&1&&t[1]++,this.maskBlue>>r&1&&t[2]++;t[1]+=t[0],t[2]+=t[1],t[0]=8-t[0],t[1]-=8,t[2]-=8;for(var n=this.height-1;n>=0;n--){for(var a=this.bottom_up?n:this.height-1-n,s=0;s<this.width;s++){var o=this.buffer.readUInt16LE(this.pos);this.pos+=2;var l=(o&this.maskBlue)<<t[0],f=(o&this.maskGreen)>>t[1],u=(o&this.maskRed)>>t[2],m=a*this.width*4+s*4;this.data[m]=0,this.data[m+1]=l,this.data[m+2]=f,this.data[m+3]=u}this.pos+=e}};BmpDecoder.prototype.bit24=function(){for(var e=this.height-1;e>=0;e--){for(var t=this.bottom_up?e:this.height-1-e,r=0;r<this.width;r++){var n=this.buffer.readUInt8(this.pos++),a=this.buffer.readUInt8(this.pos++),s=this.buffer.readUInt8(this.pos++),o=t*this.width*4+r*4;this.data[o]=0,this.data[o+1]=n,this.data[o+2]=a,this.data[o+3]=s}this.pos+=this.width%4}};BmpDecoder.prototype.bit32=function(){if(this.compress==3){this.maskRed=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.maskGreen=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.maskBlue=this.buffer.readUInt32LE(this.pos),this.pos+=4,this.mask0=this.buffer.readUInt32LE(this.pos),this.pos+=4;for(var e=this.height-1;e>=0;e--)for(var t=this.bottom_up?e:this.height-1-e,r=0;r<this.width;r++){var n=this.buffer.readUInt8(this.pos++),a=this.buffer.readUInt8(this.pos++),s=this.buffer.readUInt8(this.pos++),o=this.buffer.readUInt8(this.pos++),l=t*this.width*4+r*4;this.data[l]=n,this.data[l+1]=a,this.data[l+2]=s,this.data[l+3]=o}}else for(var e=this.height-1;e>=0;e--)for(var t=this.bottom_up?e:this.height-1-e,r=0;r<this.width;r++){var a=this.buffer.readUInt8(this.pos++),s=this.buffer.readUInt8(this.pos++),o=this.buffer.readUInt8(this.pos++),n=this.buffer.readUInt8(this.pos++),l=t*this.width*4+r*4;this.data[l]=n,this.data[l+1]=a,this.data[l+2]=s,this.data[l+3]=o}};BmpDecoder.prototype.getData=function(){return this.data};var decoder=function(e){var t=new BmpDecoder(e);return t},encode$1=encoder,decode$1=decoder,bmpJs={encode:encode$1,decode:decode$1};const BMP=getDefaultExportFromCjs$1(bmpJs),MIME_TYPE$2="image/bmp",MIME_TYPE_SECOND="image/x-ms-bmp";function toAGBR(e){return scan(e,0,0,e.bitmap.width,e.bitmap.height,function(t,r,n){const a=this.bitmap.data[n+0],s=this.bitmap.data[n+1],o=this.bitmap.data[n+2],l=this.bitmap.data[n+3];this.bitmap.data[n+0]=l,this.bitmap.data[n+1]=o,this.bitmap.data[n+2]=s,this.bitmap.data[n+3]=a}).bitmap}function fromAGBR(e){return scan({bitmap:e},0,0,e.width,e.height,function(t,r,n){const a=this.bitmap.data[n+0],s=this.bitmap.data[n+1],o=this.bitmap.data[n+2],l=this.bitmap.data[n+3];this.bitmap.data[n+0]=l,this.bitmap.data[n+1]=o,this.bitmap.data[n+2]=s,this.bitmap.data[n+3]=e.is_with_alpha?a:255}).bitmap}const decode=e=>fromAGBR(BMP.decode(e)),encode=e=>BMP.encode(toAGBR(e)).data,bmp=()=>({mime:{[MIME_TYPE$2]:["bmp"]},constants:{MIME_BMP:MIME_TYPE$2,MIME_X_MS_BMP:MIME_TYPE_SECOND},decoders:{[MIME_TYPE$2]:decode,[MIME_TYPE_SECOND]:decode},encoders:{[MIME_TYPE$2]:encode,[MIME_TYPE_SECOND]:encode}});function commonjsRequire(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var UTIF={exports:{}},common={},hasRequiredCommon;function requireCommon(){return hasRequiredCommon||(hasRequiredCommon=1,function(e){var t=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";function r(s,o){return Object.prototype.hasOwnProperty.call(s,o)}e.assign=function(s){for(var o=Array.prototype.slice.call(arguments,1);o.length;){var l=o.shift();if(l){if(typeof l!="object")throw new TypeError(l+"must be non-object");for(var f in l)r(l,f)&&(s[f]=l[f])}}return s},e.shrinkBuf=function(s,o){return s.length===o?s:s.subarray?s.subarray(0,o):(s.length=o,s)};var n={arraySet:function(s,o,l,f,u){if(o.subarray&&s.subarray){s.set(o.subarray(l,l+f),u);return}for(var m=0;m<f;m++)s[u+m]=o[l+m]},flattenChunks:function(s){var o,l,f,u,m,v;for(f=0,o=0,l=s.length;o<l;o++)f+=s[o].length;for(v=new Uint8Array(f),u=0,o=0,l=s.length;o<l;o++)m=s[o],v.set(m,u),u+=m.length;return v}},a={arraySet:function(s,o,l,f,u){for(var m=0;m<f;m++)s[u+m]=o[l+m]},flattenChunks:function(s){return[].concat.apply([],s)}};e.setTyped=function(s){s?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,n)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,a))},e.setTyped(t)}(common)),common}var deflate$1={},deflate={},trees={},hasRequiredTrees;function requireTrees(){if(hasRequiredTrees)return trees;hasRequiredTrees=1;var e=requireCommon(),t=4,r=0,n=1,a=2;function s(A){for(var O=A.length;--O>=0;)A[O]=0}var o=0,l=1,f=2,u=3,m=258,v=29,b=256,P=b+1+v,F=30,C=19,D=2*P+1,E=15,k=16,j=7,W=256,M=16,S=17,T=18,V=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],_=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],ee=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],re=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],te=512,oe=new Array((P+2)*2);s(oe);var he=new Array(F*2);s(he);var me=new Array(te);s(me);var we=new Array(m-u+1);s(we);var Se=new Array(v);s(Se);var be=new Array(F);s(be);function le(A,O,X,pe,ne){this.static_tree=A,this.extra_bits=O,this.extra_base=X,this.elems=pe,this.max_length=ne,this.has_stree=A&&A.length}var ae,ke,Ne;function de(A,O){this.dyn_tree=A,this.max_code=0,this.stat_desc=O}function $(A){return A<256?me[A]:me[256+(A>>>7)]}function ie(A,O){A.pending_buf[A.pending++]=O&255,A.pending_buf[A.pending++]=O>>>8&255}function U(A,O,X){A.bi_valid>k-X?(A.bi_buf|=O<<A.bi_valid&65535,ie(A,A.bi_buf),A.bi_buf=O>>k-A.bi_valid,A.bi_valid+=X-k):(A.bi_buf|=O<<A.bi_valid&65535,A.bi_valid+=X)}function L(A,O,X){U(A,X[O*2],X[O*2+1])}function J(A,O){var X=0;do X|=A&1,A>>>=1,X<<=1;while(--O>0);return X>>>1}function se(A){A.bi_valid===16?(ie(A,A.bi_buf),A.bi_buf=0,A.bi_valid=0):A.bi_valid>=8&&(A.pending_buf[A.pending++]=A.bi_buf&255,A.bi_buf>>=8,A.bi_valid-=8)}function ve(A,O){var X=O.dyn_tree,pe=O.max_code,ne=O.stat_desc.static_tree,Pe=O.stat_desc.has_stree,K=O.stat_desc.extra_bits,Be=O.stat_desc.extra_base,De=O.stat_desc.max_length,z,Te,He,ue,Ie,ze,Ge=0;for(ue=0;ue<=E;ue++)A.bl_count[ue]=0;for(X[A.heap[A.heap_max]*2+1]=0,z=A.heap_max+1;z<D;z++)Te=A.heap[z],ue=X[X[Te*2+1]*2+1]+1,ue>De&&(ue=De,Ge++),X[Te*2+1]=ue,!(Te>pe)&&(A.bl_count[ue]++,Ie=0,Te>=Be&&(Ie=K[Te-Be]),ze=X[Te*2],A.opt_len+=ze*(ue+Ie),Pe&&(A.static_len+=ze*(ne[Te*2+1]+Ie)));if(Ge!==0){do{for(ue=De-1;A.bl_count[ue]===0;)ue--;A.bl_count[ue]--,A.bl_count[ue+1]+=2,A.bl_count[De]--,Ge-=2}while(Ge>0);for(ue=De;ue!==0;ue--)for(Te=A.bl_count[ue];Te!==0;)He=A.heap[--z],!(He>pe)&&(X[He*2+1]!==ue&&(A.opt_len+=(ue-X[He*2+1])*X[He*2],X[He*2+1]=ue),Te--)}}function Z(A,O,X){var pe=new Array(E+1),ne=0,Pe,K;for(Pe=1;Pe<=E;Pe++)pe[Pe]=ne=ne+X[Pe-1]<<1;for(K=0;K<=O;K++){var Be=A[K*2+1];Be!==0&&(A[K*2]=J(pe[Be]++,Be))}}function I(){var A,O,X,pe,ne,Pe=new Array(E+1);for(X=0,pe=0;pe<v-1;pe++)for(Se[pe]=X,A=0;A<1<<V[pe];A++)we[X++]=pe;for(we[X-1]=pe,ne=0,pe=0;pe<16;pe++)for(be[pe]=ne,A=0;A<1<<_[pe];A++)me[ne++]=pe;for(ne>>=7;pe<F;pe++)for(be[pe]=ne<<7,A=0;A<1<<_[pe]-7;A++)me[256+ne++]=pe;for(O=0;O<=E;O++)Pe[O]=0;for(A=0;A<=143;)oe[A*2+1]=8,A++,Pe[8]++;for(;A<=255;)oe[A*2+1]=9,A++,Pe[9]++;for(;A<=279;)oe[A*2+1]=7,A++,Pe[7]++;for(;A<=287;)oe[A*2+1]=8,A++,Pe[8]++;for(Z(oe,P+1,Pe),A=0;A<F;A++)he[A*2+1]=5,he[A*2]=J(A,5);ae=new le(oe,V,b+1,P,E),ke=new le(he,_,0,F,E),Ne=new le(new Array(0),ee,0,C,j)}function q(A){var O;for(O=0;O<P;O++)A.dyn_ltree[O*2]=0;for(O=0;O<F;O++)A.dyn_dtree[O*2]=0;for(O=0;O<C;O++)A.bl_tree[O*2]=0;A.dyn_ltree[W*2]=1,A.opt_len=A.static_len=0,A.last_lit=A.matches=0}function fe(A){A.bi_valid>8?ie(A,A.bi_buf):A.bi_valid>0&&(A.pending_buf[A.pending++]=A.bi_buf),A.bi_buf=0,A.bi_valid=0}function Ae(A,O,X,pe){fe(A),pe&&(ie(A,X),ie(A,~X)),e.arraySet(A.pending_buf,A.window,O,X,A.pending),A.pending+=X}function G(A,O,X,pe){var ne=O*2,Pe=X*2;return A[ne]<A[Pe]||A[ne]===A[Pe]&&pe[O]<=pe[X]}function N(A,O,X){for(var pe=A.heap[X],ne=X<<1;ne<=A.heap_len&&(ne<A.heap_len&&G(O,A.heap[ne+1],A.heap[ne],A.depth)&&ne++,!G(O,pe,A.heap[ne],A.depth));)A.heap[X]=A.heap[ne],X=ne,ne<<=1;A.heap[X]=pe}function B(A,O,X){var pe,ne,Pe=0,K,Be;if(A.last_lit!==0)do pe=A.pending_buf[A.d_buf+Pe*2]<<8|A.pending_buf[A.d_buf+Pe*2+1],ne=A.pending_buf[A.l_buf+Pe],Pe++,pe===0?L(A,ne,O):(K=we[ne],L(A,K+b+1,O),Be=V[K],Be!==0&&(ne-=Se[K],U(A,ne,Be)),pe--,K=$(pe),L(A,K,X),Be=_[K],Be!==0&&(pe-=be[K],U(A,pe,Be)));while(Pe<A.last_lit);L(A,W,O)}function H(A,O){var X=O.dyn_tree,pe=O.stat_desc.static_tree,ne=O.stat_desc.has_stree,Pe=O.stat_desc.elems,K,Be,De=-1,z;for(A.heap_len=0,A.heap_max=D,K=0;K<Pe;K++)X[K*2]!==0?(A.heap[++A.heap_len]=De=K,A.depth[K]=0):X[K*2+1]=0;for(;A.heap_len<2;)z=A.heap[++A.heap_len]=De<2?++De:0,X[z*2]=1,A.depth[z]=0,A.opt_len--,ne&&(A.static_len-=pe[z*2+1]);for(O.max_code=De,K=A.heap_len>>1;K>=1;K--)N(A,X,K);z=Pe;do K=A.heap[1],A.heap[1]=A.heap[A.heap_len--],N(A,X,1),Be=A.heap[1],A.heap[--A.heap_max]=K,A.heap[--A.heap_max]=Be,X[z*2]=X[K*2]+X[Be*2],A.depth[z]=(A.depth[K]>=A.depth[Be]?A.depth[K]:A.depth[Be])+1,X[K*2+1]=X[Be*2+1]=z,A.heap[1]=z++,N(A,X,1);while(A.heap_len>=2);A.heap[--A.heap_max]=A.heap[1],ve(A,O),Z(X,De,A.bl_count)}function ce(A,O,X){var pe,ne=-1,Pe,K=O[0*2+1],Be=0,De=7,z=4;for(K===0&&(De=138,z=3),O[(X+1)*2+1]=65535,pe=0;pe<=X;pe++)Pe=K,K=O[(pe+1)*2+1],!(++Be<De&&Pe===K)&&(Be<z?A.bl_tree[Pe*2]+=Be:Pe!==0?(Pe!==ne&&A.bl_tree[Pe*2]++,A.bl_tree[M*2]++):Be<=10?A.bl_tree[S*2]++:A.bl_tree[T*2]++,Be=0,ne=Pe,K===0?(De=138,z=3):Pe===K?(De=6,z=3):(De=7,z=4))}function ye(A,O,X){var pe,ne=-1,Pe,K=O[0*2+1],Be=0,De=7,z=4;for(K===0&&(De=138,z=3),pe=0;pe<=X;pe++)if(Pe=K,K=O[(pe+1)*2+1],!(++Be<De&&Pe===K)){if(Be<z)do L(A,Pe,A.bl_tree);while(--Be!==0);else Pe!==0?(Pe!==ne&&(L(A,Pe,A.bl_tree),Be--),L(A,M,A.bl_tree),U(A,Be-3,2)):Be<=10?(L(A,S,A.bl_tree),U(A,Be-3,3)):(L(A,T,A.bl_tree),U(A,Be-11,7));Be=0,ne=Pe,K===0?(De=138,z=3):Pe===K?(De=6,z=3):(De=7,z=4)}}function Ee(A){var O;for(ce(A,A.dyn_ltree,A.l_desc.max_code),ce(A,A.dyn_dtree,A.d_desc.max_code),H(A,A.bl_desc),O=C-1;O>=3&&A.bl_tree[re[O]*2+1]===0;O--);return A.opt_len+=3*(O+1)+5+5+4,O}function Ce(A,O,X,pe){var ne;for(U(A,O-257,5),U(A,X-1,5),U(A,pe-4,4),ne=0;ne<pe;ne++)U(A,A.bl_tree[re[ne]*2+1],3);ye(A,A.dyn_ltree,O-1),ye(A,A.dyn_dtree,X-1)}function ge(A){var O=4093624447,X;for(X=0;X<=31;X++,O>>>=1)if(O&1&&A.dyn_ltree[X*2]!==0)return r;if(A.dyn_ltree[9*2]!==0||A.dyn_ltree[10*2]!==0||A.dyn_ltree[13*2]!==0)return n;for(X=32;X<b;X++)if(A.dyn_ltree[X*2]!==0)return n;return r}var xe=!1;function Fe(A){xe||(I(),xe=!0),A.l_desc=new de(A.dyn_ltree,ae),A.d_desc=new de(A.dyn_dtree,ke),A.bl_desc=new de(A.bl_tree,Ne),A.bi_buf=0,A.bi_valid=0,q(A)}function Re(A,O,X,pe){U(A,(o<<1)+(pe?1:0),3),Ae(A,O,X,!0)}function Oe(A){U(A,l<<1,3),L(A,W,oe),se(A)}function Me(A,O,X,pe){var ne,Pe,K=0;A.level>0?(A.strm.data_type===a&&(A.strm.data_type=ge(A)),H(A,A.l_desc),H(A,A.d_desc),K=Ee(A),ne=A.opt_len+3+7>>>3,Pe=A.static_len+3+7>>>3,Pe<=ne&&(ne=Pe)):ne=Pe=X+5,X+4<=ne&&O!==-1?Re(A,O,X,pe):A.strategy===t||Pe===ne?(U(A,(l<<1)+(pe?1:0),3),B(A,oe,he)):(U(A,(f<<1)+(pe?1:0),3),Ce(A,A.l_desc.max_code+1,A.d_desc.max_code+1,K+1),B(A,A.dyn_ltree,A.dyn_dtree)),q(A),pe&&fe(A)}function Q(A,O,X){return A.pending_buf[A.d_buf+A.last_lit*2]=O>>>8&255,A.pending_buf[A.d_buf+A.last_lit*2+1]=O&255,A.pending_buf[A.l_buf+A.last_lit]=X&255,A.last_lit++,O===0?A.dyn_ltree[X*2]++:(A.matches++,O--,A.dyn_ltree[(we[X]+b+1)*2]++,A.dyn_dtree[$(O)*2]++),A.last_lit===A.lit_bufsize-1}return trees._tr_init=Fe,trees._tr_stored_block=Re,trees._tr_flush_block=Me,trees._tr_tally=Q,trees._tr_align=Oe,trees}var adler32_1,hasRequiredAdler32;function requireAdler32(){if(hasRequiredAdler32)return adler32_1;hasRequiredAdler32=1;function e(t,r,n,a){for(var s=t&65535|0,o=t>>>16&65535|0,l=0;n!==0;){l=n>2e3?2e3:n,n-=l;do s=s+r[a++]|0,o=o+s|0;while(--l);s%=65521,o%=65521}return s|o<<16|0}return adler32_1=e,adler32_1}var crc32_1,hasRequiredCrc32;function requireCrc32(){if(hasRequiredCrc32)return crc32_1;hasRequiredCrc32=1;function e(){for(var n,a=[],s=0;s<256;s++){n=s;for(var o=0;o<8;o++)n=n&1?3988292384^n>>>1:n>>>1;a[s]=n}return a}var t=e();function r(n,a,s,o){var l=t,f=o+s;n^=-1;for(var u=o;u<f;u++)n=n>>>8^l[(n^a[u])&255];return n^-1}return crc32_1=r,crc32_1}var messages,hasRequiredMessages;function requireMessages(){return hasRequiredMessages||(hasRequiredMessages=1,messages={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}),messages}var hasRequiredDeflate$1;function requireDeflate$1(){if(hasRequiredDeflate$1)return deflate;hasRequiredDeflate$1=1;var e=requireCommon(),t=requireTrees(),r=requireAdler32(),n=requireCrc32(),a=requireMessages(),s=0,o=1,l=3,f=4,u=5,m=0,v=1,b=-2,P=-3,F=-5,C=-1,D=1,E=2,k=3,j=4,W=0,M=2,S=8,T=9,V=15,_=8,ee=29,re=256,te=re+1+ee,oe=30,he=19,me=2*te+1,we=15,Se=3,be=258,le=be+Se+1,ae=32,ke=42,Ne=69,de=73,$=91,ie=103,U=113,L=666,J=1,se=2,ve=3,Z=4,I=3;function q(z,Te){return z.msg=a[Te],Te}function fe(z){return(z<<1)-(z>4?9:0)}function Ae(z){for(var Te=z.length;--Te>=0;)z[Te]=0}function G(z){var Te=z.state,He=Te.pending;He>z.avail_out&&(He=z.avail_out),He!==0&&(e.arraySet(z.output,Te.pending_buf,Te.pending_out,He,z.next_out),z.next_out+=He,Te.pending_out+=He,z.total_out+=He,z.avail_out-=He,Te.pending-=He,Te.pending===0&&(Te.pending_out=0))}function N(z,Te){t._tr_flush_block(z,z.block_start>=0?z.block_start:-1,z.strstart-z.block_start,Te),z.block_start=z.strstart,G(z.strm)}function B(z,Te){z.pending_buf[z.pending++]=Te}function H(z,Te){z.pending_buf[z.pending++]=Te>>>8&255,z.pending_buf[z.pending++]=Te&255}function ce(z,Te,He,ue){var Ie=z.avail_in;return Ie>ue&&(Ie=ue),Ie===0?0:(z.avail_in-=Ie,e.arraySet(Te,z.input,z.next_in,Ie,He),z.state.wrap===1?z.adler=r(z.adler,Te,Ie,He):z.state.wrap===2&&(z.adler=n(z.adler,Te,Ie,He)),z.next_in+=Ie,z.total_in+=Ie,Ie)}function ye(z,Te){var He=z.max_chain_length,ue=z.strstart,Ie,ze,Ge=z.prev_length,Ve=z.nice_match,je=z.strstart>z.w_size-le?z.strstart-(z.w_size-le):0,Le=z.window,Ke=z.w_mask,Ze=z.prev,qe=z.strstart+be,Ye=Le[ue+Ge-1],We=Le[ue+Ge];z.prev_length>=z.good_match&&(He>>=2),Ve>z.lookahead&&(Ve=z.lookahead);do if(Ie=Te,!(Le[Ie+Ge]!==We||Le[Ie+Ge-1]!==Ye||Le[Ie]!==Le[ue]||Le[++Ie]!==Le[ue+1])){ue+=2,Ie++;do;while(Le[++ue]===Le[++Ie]&&Le[++ue]===Le[++Ie]&&Le[++ue]===Le[++Ie]&&Le[++ue]===Le[++Ie]&&Le[++ue]===Le[++Ie]&&Le[++ue]===Le[++Ie]&&Le[++ue]===Le[++Ie]&&Le[++ue]===Le[++Ie]&&ue<qe);if(ze=be-(qe-ue),ue=qe-be,ze>Ge){if(z.match_start=Te,Ge=ze,ze>=Ve)break;Ye=Le[ue+Ge-1],We=Le[ue+Ge]}}while((Te=Ze[Te&Ke])>je&&--He!==0);return Ge<=z.lookahead?Ge:z.lookahead}function Ee(z){var Te=z.w_size,He,ue,Ie,ze,Ge;do{if(ze=z.window_size-z.lookahead-z.strstart,z.strstart>=Te+(Te-le)){e.arraySet(z.window,z.window,Te,Te,0),z.match_start-=Te,z.strstart-=Te,z.block_start-=Te,ue=z.hash_size,He=ue;do Ie=z.head[--He],z.head[He]=Ie>=Te?Ie-Te:0;while(--ue);ue=Te,He=ue;do Ie=z.prev[--He],z.prev[He]=Ie>=Te?Ie-Te:0;while(--ue);ze+=Te}if(z.strm.avail_in===0)break;if(ue=ce(z.strm,z.window,z.strstart+z.lookahead,ze),z.lookahead+=ue,z.lookahead+z.insert>=Se)for(Ge=z.strstart-z.insert,z.ins_h=z.window[Ge],z.ins_h=(z.ins_h<<z.hash_shift^z.window[Ge+1])&z.hash_mask;z.insert&&(z.ins_h=(z.ins_h<<z.hash_shift^z.window[Ge+Se-1])&z.hash_mask,z.prev[Ge&z.w_mask]=z.head[z.ins_h],z.head[z.ins_h]=Ge,Ge++,z.insert--,!(z.lookahead+z.insert<Se)););}while(z.lookahead<le&&z.strm.avail_in!==0)}function Ce(z,Te){var He=65535;for(He>z.pending_buf_size-5&&(He=z.pending_buf_size-5);;){if(z.lookahead<=1){if(Ee(z),z.lookahead===0&&Te===s)return J;if(z.lookahead===0)break}z.strstart+=z.lookahead,z.lookahead=0;var ue=z.block_start+He;if((z.strstart===0||z.strstart>=ue)&&(z.lookahead=z.strstart-ue,z.strstart=ue,N(z,!1),z.strm.avail_out===0)||z.strstart-z.block_start>=z.w_size-le&&(N(z,!1),z.strm.avail_out===0))return J}return z.insert=0,Te===f?(N(z,!0),z.strm.avail_out===0?ve:Z):(z.strstart>z.block_start&&(N(z,!1),z.strm.avail_out===0),J)}function ge(z,Te){for(var He,ue;;){if(z.lookahead<le){if(Ee(z),z.lookahead<le&&Te===s)return J;if(z.lookahead===0)break}if(He=0,z.lookahead>=Se&&(z.ins_h=(z.ins_h<<z.hash_shift^z.window[z.strstart+Se-1])&z.hash_mask,He=z.prev[z.strstart&z.w_mask]=z.head[z.ins_h],z.head[z.ins_h]=z.strstart),He!==0&&z.strstart-He<=z.w_size-le&&(z.match_length=ye(z,He)),z.match_length>=Se)if(ue=t._tr_tally(z,z.strstart-z.match_start,z.match_length-Se),z.lookahead-=z.match_length,z.match_length<=z.max_lazy_match&&z.lookahead>=Se){z.match_length--;do z.strstart++,z.ins_h=(z.ins_h<<z.hash_shift^z.window[z.strstart+Se-1])&z.hash_mask,He=z.prev[z.strstart&z.w_mask]=z.head[z.ins_h],z.head[z.ins_h]=z.strstart;while(--z.match_length!==0);z.strstart++}else z.strstart+=z.match_length,z.match_length=0,z.ins_h=z.window[z.strstart],z.ins_h=(z.ins_h<<z.hash_shift^z.window[z.strstart+1])&z.hash_mask;else ue=t._tr_tally(z,0,z.window[z.strstart]),z.lookahead--,z.strstart++;if(ue&&(N(z,!1),z.strm.avail_out===0))return J}return z.insert=z.strstart<Se-1?z.strstart:Se-1,Te===f?(N(z,!0),z.strm.avail_out===0?ve:Z):z.last_lit&&(N(z,!1),z.strm.avail_out===0)?J:se}function xe(z,Te){for(var He,ue,Ie;;){if(z.lookahead<le){if(Ee(z),z.lookahead<le&&Te===s)return J;if(z.lookahead===0)break}if(He=0,z.lookahead>=Se&&(z.ins_h=(z.ins_h<<z.hash_shift^z.window[z.strstart+Se-1])&z.hash_mask,He=z.prev[z.strstart&z.w_mask]=z.head[z.ins_h],z.head[z.ins_h]=z.strstart),z.prev_length=z.match_length,z.prev_match=z.match_start,z.match_length=Se-1,He!==0&&z.prev_length<z.max_lazy_match&&z.strstart-He<=z.w_size-le&&(z.match_length=ye(z,He),z.match_length<=5&&(z.strategy===D||z.match_length===Se&&z.strstart-z.match_start>4096)&&(z.match_length=Se-1)),z.prev_length>=Se&&z.match_length<=z.prev_length){Ie=z.strstart+z.lookahead-Se,ue=t._tr_tally(z,z.strstart-1-z.prev_match,z.prev_length-Se),z.lookahead-=z.prev_length-1,z.prev_length-=2;do++z.strstart<=Ie&&(z.ins_h=(z.ins_h<<z.hash_shift^z.window[z.strstart+Se-1])&z.hash_mask,He=z.prev[z.strstart&z.w_mask]=z.head[z.ins_h],z.head[z.ins_h]=z.strstart);while(--z.prev_length!==0);if(z.match_available=0,z.match_length=Se-1,z.strstart++,ue&&(N(z,!1),z.strm.avail_out===0))return J}else if(z.match_available){if(ue=t._tr_tally(z,0,z.window[z.strstart-1]),ue&&N(z,!1),z.strstart++,z.lookahead--,z.strm.avail_out===0)return J}else z.match_available=1,z.strstart++,z.lookahead--}return z.match_available&&(ue=t._tr_tally(z,0,z.window[z.strstart-1]),z.match_available=0),z.insert=z.strstart<Se-1?z.strstart:Se-1,Te===f?(N(z,!0),z.strm.avail_out===0?ve:Z):z.last_lit&&(N(z,!1),z.strm.avail_out===0)?J:se}function Fe(z,Te){for(var He,ue,Ie,ze,Ge=z.window;;){if(z.lookahead<=be){if(Ee(z),z.lookahead<=be&&Te===s)return J;if(z.lookahead===0)break}if(z.match_length=0,z.lookahead>=Se&&z.strstart>0&&(Ie=z.strstart-1,ue=Ge[Ie],ue===Ge[++Ie]&&ue===Ge[++Ie]&&ue===Ge[++Ie])){ze=z.strstart+be;do;while(ue===Ge[++Ie]&&ue===Ge[++Ie]&&ue===Ge[++Ie]&&ue===Ge[++Ie]&&ue===Ge[++Ie]&&ue===Ge[++Ie]&&ue===Ge[++Ie]&&ue===Ge[++Ie]&&Ie<ze);z.match_length=be-(ze-Ie),z.match_length>z.lookahead&&(z.match_length=z.lookahead)}if(z.match_length>=Se?(He=t._tr_tally(z,1,z.match_length-Se),z.lookahead-=z.match_length,z.strstart+=z.match_length,z.match_length=0):(He=t._tr_tally(z,0,z.window[z.strstart]),z.lookahead--,z.strstart++),He&&(N(z,!1),z.strm.avail_out===0))return J}return z.insert=0,Te===f?(N(z,!0),z.strm.avail_out===0?ve:Z):z.last_lit&&(N(z,!1),z.strm.avail_out===0)?J:se}function Re(z,Te){for(var He;;){if(z.lookahead===0&&(Ee(z),z.lookahead===0)){if(Te===s)return J;break}if(z.match_length=0,He=t._tr_tally(z,0,z.window[z.strstart]),z.lookahead--,z.strstart++,He&&(N(z,!1),z.strm.avail_out===0))return J}return z.insert=0,Te===f?(N(z,!0),z.strm.avail_out===0?ve:Z):z.last_lit&&(N(z,!1),z.strm.avail_out===0)?J:se}function Oe(z,Te,He,ue,Ie){this.good_length=z,this.max_lazy=Te,this.nice_length=He,this.max_chain=ue,this.func=Ie}var Me;Me=[new Oe(0,0,0,0,Ce),new Oe(4,4,8,4,ge),new Oe(4,5,16,8,ge),new Oe(4,6,32,32,ge),new Oe(4,4,16,16,xe),new Oe(8,16,32,32,xe),new Oe(8,16,128,128,xe),new Oe(8,32,128,256,xe),new Oe(32,128,258,1024,xe),new Oe(32,258,258,4096,xe)];function Q(z){z.window_size=2*z.w_size,Ae(z.head),z.max_lazy_match=Me[z.level].max_lazy,z.good_match=Me[z.level].good_length,z.nice_match=Me[z.level].nice_length,z.max_chain_length=Me[z.level].max_chain,z.strstart=0,z.block_start=0,z.lookahead=0,z.insert=0,z.match_length=z.prev_length=Se-1,z.match_available=0,z.ins_h=0}function A(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=S,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new e.Buf16(me*2),this.dyn_dtree=new e.Buf16((2*oe+1)*2),this.bl_tree=new e.Buf16((2*he+1)*2),Ae(this.dyn_ltree),Ae(this.dyn_dtree),Ae(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new e.Buf16(we+1),this.heap=new e.Buf16(2*te+1),Ae(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new e.Buf16(2*te+1),Ae(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function O(z){var Te;return!z||!z.state?q(z,b):(z.total_in=z.total_out=0,z.data_type=M,Te=z.state,Te.pending=0,Te.pending_out=0,Te.wrap<0&&(Te.wrap=-Te.wrap),Te.status=Te.wrap?ke:U,z.adler=Te.wrap===2?0:1,Te.last_flush=s,t._tr_init(Te),m)}function X(z){var Te=O(z);return Te===m&&Q(z.state),Te}function pe(z,Te){return!z||!z.state||z.state.wrap!==2?b:(z.state.gzhead=Te,m)}function ne(z,Te,He,ue,Ie,ze){if(!z)return b;var Ge=1;if(Te===C&&(Te=6),ue<0?(Ge=0,ue=-ue):ue>15&&(Ge=2,ue-=16),Ie<1||Ie>T||He!==S||ue<8||ue>15||Te<0||Te>9||ze<0||ze>j)return q(z,b);ue===8&&(ue=9);var Ve=new A;return z.state=Ve,Ve.strm=z,Ve.wrap=Ge,Ve.gzhead=null,Ve.w_bits=ue,Ve.w_size=1<<Ve.w_bits,Ve.w_mask=Ve.w_size-1,Ve.hash_bits=Ie+7,Ve.hash_size=1<<Ve.hash_bits,Ve.hash_mask=Ve.hash_size-1,Ve.hash_shift=~~((Ve.hash_bits+Se-1)/Se),Ve.window=new e.Buf8(Ve.w_size*2),Ve.head=new e.Buf16(Ve.hash_size),Ve.prev=new e.Buf16(Ve.w_size),Ve.lit_bufsize=1<<Ie+6,Ve.pending_buf_size=Ve.lit_bufsize*4,Ve.pending_buf=new e.Buf8(Ve.pending_buf_size),Ve.d_buf=1*Ve.lit_bufsize,Ve.l_buf=3*Ve.lit_bufsize,Ve.level=Te,Ve.strategy=ze,Ve.method=He,X(z)}function Pe(z,Te){return ne(z,Te,S,V,_,W)}function K(z,Te){var He,ue,Ie,ze;if(!z||!z.state||Te>u||Te<0)return z?q(z,b):b;if(ue=z.state,!z.output||!z.input&&z.avail_in!==0||ue.status===L&&Te!==f)return q(z,z.avail_out===0?F:b);if(ue.strm=z,He=ue.last_flush,ue.last_flush=Te,ue.status===ke)if(ue.wrap===2)z.adler=0,B(ue,31),B(ue,139),B(ue,8),ue.gzhead?(B(ue,(ue.gzhead.text?1:0)+(ue.gzhead.hcrc?2:0)+(ue.gzhead.extra?4:0)+(ue.gzhead.name?8:0)+(ue.gzhead.comment?16:0)),B(ue,ue.gzhead.time&255),B(ue,ue.gzhead.time>>8&255),B(ue,ue.gzhead.time>>16&255),B(ue,ue.gzhead.time>>24&255),B(ue,ue.level===9?2:ue.strategy>=E||ue.level<2?4:0),B(ue,ue.gzhead.os&255),ue.gzhead.extra&&ue.gzhead.extra.length&&(B(ue,ue.gzhead.extra.length&255),B(ue,ue.gzhead.extra.length>>8&255)),ue.gzhead.hcrc&&(z.adler=n(z.adler,ue.pending_buf,ue.pending,0)),ue.gzindex=0,ue.status=Ne):(B(ue,0),B(ue,0),B(ue,0),B(ue,0),B(ue,0),B(ue,ue.level===9?2:ue.strategy>=E||ue.level<2?4:0),B(ue,I),ue.status=U);else{var Ge=S+(ue.w_bits-8<<4)<<8,Ve=-1;ue.strategy>=E||ue.level<2?Ve=0:ue.level<6?Ve=1:ue.level===6?Ve=2:Ve=3,Ge|=Ve<<6,ue.strstart!==0&&(Ge|=ae),Ge+=31-Ge%31,ue.status=U,H(ue,Ge),ue.strstart!==0&&(H(ue,z.adler>>>16),H(ue,z.adler&65535)),z.adler=1}if(ue.status===Ne)if(ue.gzhead.extra){for(Ie=ue.pending;ue.gzindex<(ue.gzhead.extra.length&65535)&&!(ue.pending===ue.pending_buf_size&&(ue.gzhead.hcrc&&ue.pending>Ie&&(z.adler=n(z.adler,ue.pending_buf,ue.pending-Ie,Ie)),G(z),Ie=ue.pending,ue.pending===ue.pending_buf_size));)B(ue,ue.gzhead.extra[ue.gzindex]&255),ue.gzindex++;ue.gzhead.hcrc&&ue.pending>Ie&&(z.adler=n(z.adler,ue.pending_buf,ue.pending-Ie,Ie)),ue.gzindex===ue.gzhead.extra.length&&(ue.gzindex=0,ue.status=de)}else ue.status=de;if(ue.status===de)if(ue.gzhead.name){Ie=ue.pending;do{if(ue.pending===ue.pending_buf_size&&(ue.gzhead.hcrc&&ue.pending>Ie&&(z.adler=n(z.adler,ue.pending_buf,ue.pending-Ie,Ie)),G(z),Ie=ue.pending,ue.pending===ue.pending_buf_size)){ze=1;break}ue.gzindex<ue.gzhead.name.length?ze=ue.gzhead.name.charCodeAt(ue.gzindex++)&255:ze=0,B(ue,ze)}while(ze!==0);ue.gzhead.hcrc&&ue.pending>Ie&&(z.adler=n(z.adler,ue.pending_buf,ue.pending-Ie,Ie)),ze===0&&(ue.gzindex=0,ue.status=$)}else ue.status=$;if(ue.status===$)if(ue.gzhead.comment){Ie=ue.pending;do{if(ue.pending===ue.pending_buf_size&&(ue.gzhead.hcrc&&ue.pending>Ie&&(z.adler=n(z.adler,ue.pending_buf,ue.pending-Ie,Ie)),G(z),Ie=ue.pending,ue.pending===ue.pending_buf_size)){ze=1;break}ue.gzindex<ue.gzhead.comment.length?ze=ue.gzhead.comment.charCodeAt(ue.gzindex++)&255:ze=0,B(ue,ze)}while(ze!==0);ue.gzhead.hcrc&&ue.pending>Ie&&(z.adler=n(z.adler,ue.pending_buf,ue.pending-Ie,Ie)),ze===0&&(ue.status=ie)}else ue.status=ie;if(ue.status===ie&&(ue.gzhead.hcrc?(ue.pending+2>ue.pending_buf_size&&G(z),ue.pending+2<=ue.pending_buf_size&&(B(ue,z.adler&255),B(ue,z.adler>>8&255),z.adler=0,ue.status=U)):ue.status=U),ue.pending!==0){if(G(z),z.avail_out===0)return ue.last_flush=-1,m}else if(z.avail_in===0&&fe(Te)<=fe(He)&&Te!==f)return q(z,F);if(ue.status===L&&z.avail_in!==0)return q(z,F);if(z.avail_in!==0||ue.lookahead!==0||Te!==s&&ue.status!==L){var je=ue.strategy===E?Re(ue,Te):ue.strategy===k?Fe(ue,Te):Me[ue.level].func(ue,Te);if((je===ve||je===Z)&&(ue.status=L),je===J||je===ve)return z.avail_out===0&&(ue.last_flush=-1),m;if(je===se&&(Te===o?t._tr_align(ue):Te!==u&&(t._tr_stored_block(ue,0,0,!1),Te===l&&(Ae(ue.head),ue.lookahead===0&&(ue.strstart=0,ue.block_start=0,ue.insert=0))),G(z),z.avail_out===0))return ue.last_flush=-1,m}return Te!==f?m:ue.wrap<=0?v:(ue.wrap===2?(B(ue,z.adler&255),B(ue,z.adler>>8&255),B(ue,z.adler>>16&255),B(ue,z.adler>>24&255),B(ue,z.total_in&255),B(ue,z.total_in>>8&255),B(ue,z.total_in>>16&255),B(ue,z.total_in>>24&255)):(H(ue,z.adler>>>16),H(ue,z.adler&65535)),G(z),ue.wrap>0&&(ue.wrap=-ue.wrap),ue.pending!==0?m:v)}function Be(z){var Te;return!z||!z.state?b:(Te=z.state.status,Te!==ke&&Te!==Ne&&Te!==de&&Te!==$&&Te!==ie&&Te!==U&&Te!==L?q(z,b):(z.state=null,Te===U?q(z,P):m))}function De(z,Te){var He=Te.length,ue,Ie,ze,Ge,Ve,je,Le,Ke;if(!z||!z.state||(ue=z.state,Ge=ue.wrap,Ge===2||Ge===1&&ue.status!==ke||ue.lookahead))return b;for(Ge===1&&(z.adler=r(z.adler,Te,He,0)),ue.wrap=0,He>=ue.w_size&&(Ge===0&&(Ae(ue.head),ue.strstart=0,ue.block_start=0,ue.insert=0),Ke=new e.Buf8(ue.w_size),e.arraySet(Ke,Te,He-ue.w_size,ue.w_size,0),Te=Ke,He=ue.w_size),Ve=z.avail_in,je=z.next_in,Le=z.input,z.avail_in=He,z.next_in=0,z.input=Te,Ee(ue);ue.lookahead>=Se;){Ie=ue.strstart,ze=ue.lookahead-(Se-1);do ue.ins_h=(ue.ins_h<<ue.hash_shift^ue.window[Ie+Se-1])&ue.hash_mask,ue.prev[Ie&ue.w_mask]=ue.head[ue.ins_h],ue.head[ue.ins_h]=Ie,Ie++;while(--ze);ue.strstart=Ie,ue.lookahead=Se-1,Ee(ue)}return ue.strstart+=ue.lookahead,ue.block_start=ue.strstart,ue.insert=ue.lookahead,ue.lookahead=0,ue.match_length=ue.prev_length=Se-1,ue.match_available=0,z.next_in=je,z.input=Le,z.avail_in=Ve,ue.wrap=Ge,m}return deflate.deflateInit=Pe,deflate.deflateInit2=ne,deflate.deflateReset=X,deflate.deflateResetKeep=O,deflate.deflateSetHeader=pe,deflate.deflate=K,deflate.deflateEnd=Be,deflate.deflateSetDictionary=De,deflate.deflateInfo="pako deflate (from Nodeca project)",deflate}var strings={},hasRequiredStrings;function requireStrings(){if(hasRequiredStrings)return strings;hasRequiredStrings=1;var e=requireCommon(),t=!0,r=!0;try{String.fromCharCode.apply(null,[0])}catch{t=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{r=!1}for(var n=new e.Buf8(256),a=0;a<256;a++)n[a]=a>=252?6:a>=248?5:a>=240?4:a>=224?3:a>=192?2:1;n[254]=n[254]=1,strings.string2buf=function(o){var l,f,u,m,v,b=o.length,P=0;for(m=0;m<b;m++)f=o.charCodeAt(m),(f&64512)===55296&&m+1<b&&(u=o.charCodeAt(m+1),(u&64512)===56320&&(f=65536+(f-55296<<10)+(u-56320),m++)),P+=f<128?1:f<2048?2:f<65536?3:4;for(l=new e.Buf8(P),v=0,m=0;v<P;m++)f=o.charCodeAt(m),(f&64512)===55296&&m+1<b&&(u=o.charCodeAt(m+1),(u&64512)===56320&&(f=65536+(f-55296<<10)+(u-56320),m++)),f<128?l[v++]=f:f<2048?(l[v++]=192|f>>>6,l[v++]=128|f&63):f<65536?(l[v++]=224|f>>>12,l[v++]=128|f>>>6&63,l[v++]=128|f&63):(l[v++]=240|f>>>18,l[v++]=128|f>>>12&63,l[v++]=128|f>>>6&63,l[v++]=128|f&63);return l};function s(o,l){if(l<65534&&(o.subarray&&r||!o.subarray&&t))return String.fromCharCode.apply(null,e.shrinkBuf(o,l));for(var f="",u=0;u<l;u++)f+=String.fromCharCode(o[u]);return f}return strings.buf2binstring=function(o){return s(o,o.length)},strings.binstring2buf=function(o){for(var l=new e.Buf8(o.length),f=0,u=l.length;f<u;f++)l[f]=o.charCodeAt(f);return l},strings.buf2string=function(o,l){var f,u,m,v,b=l||o.length,P=new Array(b*2);for(u=0,f=0;f<b;){if(m=o[f++],m<128){P[u++]=m;continue}if(v=n[m],v>4){P[u++]=65533,f+=v-1;continue}for(m&=v===2?31:v===3?15:7;v>1&&f<b;)m=m<<6|o[f++]&63,v--;if(v>1){P[u++]=65533;continue}m<65536?P[u++]=m:(m-=65536,P[u++]=55296|m>>10&1023,P[u++]=56320|m&1023)}return s(P,u)},strings.utf8border=function(o,l){var f;for(l=l||o.length,l>o.length&&(l=o.length),f=l-1;f>=0&&(o[f]&192)===128;)f--;return f<0||f===0?l:f+n[o[f]]>l?f:l},strings}var zstream,hasRequiredZstream;function requireZstream(){if(hasRequiredZstream)return zstream;hasRequiredZstream=1;function e(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}return zstream=e,zstream}var hasRequiredDeflate;function requireDeflate(){if(hasRequiredDeflate)return deflate$1;hasRequiredDeflate=1;var e=requireDeflate$1(),t=requireCommon(),r=requireStrings(),n=requireMessages(),a=requireZstream(),s=Object.prototype.toString,o=0,l=4,f=0,u=1,m=2,v=-1,b=0,P=8;function F(k){if(!(this instanceof F))return new F(k);this.options=t.assign({level:v,method:P,chunkSize:16384,windowBits:15,memLevel:8,strategy:b,to:""},k||{});var j=this.options;j.raw&&j.windowBits>0?j.windowBits=-j.windowBits:j.gzip&&j.windowBits>0&&j.windowBits<16&&(j.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var W=e.deflateInit2(this.strm,j.level,j.method,j.windowBits,j.memLevel,j.strategy);if(W!==f)throw new Error(n[W]);if(j.header&&e.deflateSetHeader(this.strm,j.header),j.dictionary){var M;if(typeof j.dictionary=="string"?M=r.string2buf(j.dictionary):s.call(j.dictionary)==="[object ArrayBuffer]"?M=new Uint8Array(j.dictionary):M=j.dictionary,W=e.deflateSetDictionary(this.strm,M),W!==f)throw new Error(n[W]);this._dict_set=!0}}F.prototype.push=function(k,j){var W=this.strm,M=this.options.chunkSize,S,T;if(this.ended)return!1;T=j===~~j?j:j===!0?l:o,typeof k=="string"?W.input=r.string2buf(k):s.call(k)==="[object ArrayBuffer]"?W.input=new Uint8Array(k):W.input=k,W.next_in=0,W.avail_in=W.input.length;do{if(W.avail_out===0&&(W.output=new t.Buf8(M),W.next_out=0,W.avail_out=M),S=e.deflate(W,T),S!==u&&S!==f)return this.onEnd(S),this.ended=!0,!1;(W.avail_out===0||W.avail_in===0&&(T===l||T===m))&&(this.options.to==="string"?this.onData(r.buf2binstring(t.shrinkBuf(W.output,W.next_out))):this.onData(t.shrinkBuf(W.output,W.next_out)))}while((W.avail_in>0||W.avail_out===0)&&S!==u);return T===l?(S=e.deflateEnd(this.strm),this.onEnd(S),this.ended=!0,S===f):(T===m&&(this.onEnd(f),W.avail_out=0),!0)},F.prototype.onData=function(k){this.chunks.push(k)},F.prototype.onEnd=function(k){k===f&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=t.flattenChunks(this.chunks)),this.chunks=[],this.err=k,this.msg=this.strm.msg};function C(k,j){var W=new F(j);if(W.push(k,!0),W.err)throw W.msg||n[W.err];return W.result}function D(k,j){return j=j||{},j.raw=!0,C(k,j)}function E(k,j){return j=j||{},j.gzip=!0,C(k,j)}return deflate$1.Deflate=F,deflate$1.deflate=C,deflate$1.deflateRaw=D,deflate$1.gzip=E,deflate$1}var inflate$1={},inflate={},inffast,hasRequiredInffast;function requireInffast(){if(hasRequiredInffast)return inffast;hasRequiredInffast=1;var e=30,t=12;return inffast=function(n,a){var s,o,l,f,u,m,v,b,P,F,C,D,E,k,j,W,M,S,T,V,_,ee,re,te,oe;s=n.state,o=n.next_in,te=n.input,l=o+(n.avail_in-5),f=n.next_out,oe=n.output,u=f-(a-n.avail_out),m=f+(n.avail_out-257),v=s.dmax,b=s.wsize,P=s.whave,F=s.wnext,C=s.window,D=s.hold,E=s.bits,k=s.lencode,j=s.distcode,W=(1<<s.lenbits)-1,M=(1<<s.distbits)-1;e:do{E<15&&(D+=te[o++]<<E,E+=8,D+=te[o++]<<E,E+=8),S=k[D&W];t:for(;;){if(T=S>>>24,D>>>=T,E-=T,T=S>>>16&255,T===0)oe[f++]=S&65535;else if(T&16){V=S&65535,T&=15,T&&(E<T&&(D+=te[o++]<<E,E+=8),V+=D&(1<<T)-1,D>>>=T,E-=T),E<15&&(D+=te[o++]<<E,E+=8,D+=te[o++]<<E,E+=8),S=j[D&M];r:for(;;){if(T=S>>>24,D>>>=T,E-=T,T=S>>>16&255,T&16){if(_=S&65535,T&=15,E<T&&(D+=te[o++]<<E,E+=8,E<T&&(D+=te[o++]<<E,E+=8)),_+=D&(1<<T)-1,_>v){n.msg="invalid distance too far back",s.mode=e;break e}if(D>>>=T,E-=T,T=f-u,_>T){if(T=_-T,T>P&&s.sane){n.msg="invalid distance too far back",s.mode=e;break e}if(ee=0,re=C,F===0){if(ee+=b-T,T<V){V-=T;do oe[f++]=C[ee++];while(--T);ee=f-_,re=oe}}else if(F<T){if(ee+=b+F-T,T-=F,T<V){V-=T;do oe[f++]=C[ee++];while(--T);if(ee=0,F<V){T=F,V-=T;do oe[f++]=C[ee++];while(--T);ee=f-_,re=oe}}}else if(ee+=F-T,T<V){V-=T;do oe[f++]=C[ee++];while(--T);ee=f-_,re=oe}for(;V>2;)oe[f++]=re[ee++],oe[f++]=re[ee++],oe[f++]=re[ee++],V-=3;V&&(oe[f++]=re[ee++],V>1&&(oe[f++]=re[ee++]))}else{ee=f-_;do oe[f++]=oe[ee++],oe[f++]=oe[ee++],oe[f++]=oe[ee++],V-=3;while(V>2);V&&(oe[f++]=oe[ee++],V>1&&(oe[f++]=oe[ee++]))}}else if(T&64){n.msg="invalid distance code",s.mode=e;break e}else{S=j[(S&65535)+(D&(1<<T)-1)];continue r}break}}else if(T&64)if(T&32){s.mode=t;break e}else{n.msg="invalid literal/length code",s.mode=e;break e}else{S=k[(S&65535)+(D&(1<<T)-1)];continue t}break}}while(o<l&&f<m);V=E>>3,o-=V,E-=V<<3,D&=(1<<E)-1,n.next_in=o,n.next_out=f,n.avail_in=o<l?5+(l-o):5-(o-l),n.avail_out=f<m?257+(m-f):257-(f-m),s.hold=D,s.bits=E},inffast}var inftrees,hasRequiredInftrees;function requireInftrees(){if(hasRequiredInftrees)return inftrees;hasRequiredInftrees=1;var e=requireCommon(),t=15,r=852,n=592,a=0,s=1,o=2,l=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],f=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],u=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],m=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];return inftrees=function(b,P,F,C,D,E,k,j){var W=j.bits,M=0,S=0,T=0,V=0,_=0,ee=0,re=0,te=0,oe=0,he=0,me,we,Se,be,le,ae=null,ke=0,Ne,de=new e.Buf16(t+1),$=new e.Buf16(t+1),ie=null,U=0,L,J,se;for(M=0;M<=t;M++)de[M]=0;for(S=0;S<C;S++)de[P[F+S]]++;for(_=W,V=t;V>=1&&de[V]===0;V--);if(_>V&&(_=V),V===0)return D[E++]=1<<24|64<<16|0,D[E++]=1<<24|64<<16|0,j.bits=1,0;for(T=1;T<V&&de[T]===0;T++);for(_<T&&(_=T),te=1,M=1;M<=t;M++)if(te<<=1,te-=de[M],te<0)return-1;if(te>0&&(b===a||V!==1))return-1;for($[1]=0,M=1;M<t;M++)$[M+1]=$[M]+de[M];for(S=0;S<C;S++)P[F+S]!==0&&(k[$[P[F+S]]++]=S);if(b===a?(ae=ie=k,Ne=19):b===s?(ae=l,ke-=257,ie=f,U-=257,Ne=256):(ae=u,ie=m,Ne=-1),he=0,S=0,M=T,le=E,ee=_,re=0,Se=-1,oe=1<<_,be=oe-1,b===s&&oe>r||b===o&&oe>n)return 1;for(;;){L=M-re,k[S]<Ne?(J=0,se=k[S]):k[S]>Ne?(J=ie[U+k[S]],se=ae[ke+k[S]]):(J=96,se=0),me=1<<M-re,we=1<<ee,T=we;do we-=me,D[le+(he>>re)+we]=L<<24|J<<16|se|0;while(we!==0);for(me=1<<M-1;he&me;)me>>=1;if(me!==0?(he&=me-1,he+=me):he=0,S++,--de[M]===0){if(M===V)break;M=P[F+k[S]]}if(M>_&&(he&be)!==Se){for(re===0&&(re=_),le+=T,ee=M-re,te=1<<ee;ee+re<V&&(te-=de[ee+re],!(te<=0));)ee++,te<<=1;if(oe+=1<<ee,b===s&&oe>r||b===o&&oe>n)return 1;Se=he&be,D[Se]=_<<24|ee<<16|le-E|0}}return he!==0&&(D[le+he]=M-re<<24|64<<16|0),j.bits=_,0},inftrees}var hasRequiredInflate$1;function requireInflate$1(){if(hasRequiredInflate$1)return inflate;hasRequiredInflate$1=1;var e=requireCommon(),t=requireAdler32(),r=requireCrc32(),n=requireInffast(),a=requireInftrees(),s=0,o=1,l=2,f=4,u=5,m=6,v=0,b=1,P=2,F=-2,C=-3,D=-4,E=-5,k=8,j=1,W=2,M=3,S=4,T=5,V=6,_=7,ee=8,re=9,te=10,oe=11,he=12,me=13,we=14,Se=15,be=16,le=17,ae=18,ke=19,Ne=20,de=21,$=22,ie=23,U=24,L=25,J=26,se=27,ve=28,Z=29,I=30,q=31,fe=32,Ae=852,G=592,N=15,B=N;function H(ne){return(ne>>>24&255)+(ne>>>8&65280)+((ne&65280)<<8)+((ne&255)<<24)}function ce(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new e.Buf16(320),this.work=new e.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function ye(ne){var Pe;return!ne||!ne.state?F:(Pe=ne.state,ne.total_in=ne.total_out=Pe.total=0,ne.msg="",Pe.wrap&&(ne.adler=Pe.wrap&1),Pe.mode=j,Pe.last=0,Pe.havedict=0,Pe.dmax=32768,Pe.head=null,Pe.hold=0,Pe.bits=0,Pe.lencode=Pe.lendyn=new e.Buf32(Ae),Pe.distcode=Pe.distdyn=new e.Buf32(G),Pe.sane=1,Pe.back=-1,v)}function Ee(ne){var Pe;return!ne||!ne.state?F:(Pe=ne.state,Pe.wsize=0,Pe.whave=0,Pe.wnext=0,ye(ne))}function Ce(ne,Pe){var K,Be;return!ne||!ne.state||(Be=ne.state,Pe<0?(K=0,Pe=-Pe):(K=(Pe>>4)+1,Pe<48&&(Pe&=15)),Pe&&(Pe<8||Pe>15))?F:(Be.window!==null&&Be.wbits!==Pe&&(Be.window=null),Be.wrap=K,Be.wbits=Pe,Ee(ne))}function ge(ne,Pe){var K,Be;return ne?(Be=new ce,ne.state=Be,Be.window=null,K=Ce(ne,Pe),K!==v&&(ne.state=null),K):F}function xe(ne){return ge(ne,B)}var Fe=!0,Re,Oe;function Me(ne){if(Fe){var Pe;for(Re=new e.Buf32(512),Oe=new e.Buf32(32),Pe=0;Pe<144;)ne.lens[Pe++]=8;for(;Pe<256;)ne.lens[Pe++]=9;for(;Pe<280;)ne.lens[Pe++]=7;for(;Pe<288;)ne.lens[Pe++]=8;for(a(o,ne.lens,0,288,Re,0,ne.work,{bits:9}),Pe=0;Pe<32;)ne.lens[Pe++]=5;a(l,ne.lens,0,32,Oe,0,ne.work,{bits:5}),Fe=!1}ne.lencode=Re,ne.lenbits=9,ne.distcode=Oe,ne.distbits=5}function Q(ne,Pe,K,Be){var De,z=ne.state;return z.window===null&&(z.wsize=1<<z.wbits,z.wnext=0,z.whave=0,z.window=new e.Buf8(z.wsize)),Be>=z.wsize?(e.arraySet(z.window,Pe,K-z.wsize,z.wsize,0),z.wnext=0,z.whave=z.wsize):(De=z.wsize-z.wnext,De>Be&&(De=Be),e.arraySet(z.window,Pe,K-Be,De,z.wnext),Be-=De,Be?(e.arraySet(z.window,Pe,K-Be,Be,0),z.wnext=Be,z.whave=z.wsize):(z.wnext+=De,z.wnext===z.wsize&&(z.wnext=0),z.whave<z.wsize&&(z.whave+=De))),0}function A(ne,Pe){var K,Be,De,z,Te,He,ue,Ie,ze,Ge,Ve,je,Le,Ke,Ze=0,qe,Ye,We,Xe,tt,rt,Je,$e,Ue=new e.Buf8(4),et,_e,it=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!ne||!ne.state||!ne.output||!ne.input&&ne.avail_in!==0)return F;K=ne.state,K.mode===he&&(K.mode=me),Te=ne.next_out,De=ne.output,ue=ne.avail_out,z=ne.next_in,Be=ne.input,He=ne.avail_in,Ie=K.hold,ze=K.bits,Ge=He,Ve=ue,$e=v;e:for(;;)switch(K.mode){case j:if(K.wrap===0){K.mode=me;break}for(;ze<16;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}if(K.wrap&2&&Ie===35615){K.check=0,Ue[0]=Ie&255,Ue[1]=Ie>>>8&255,K.check=r(K.check,Ue,2,0),Ie=0,ze=0,K.mode=W;break}if(K.flags=0,K.head&&(K.head.done=!1),!(K.wrap&1)||(((Ie&255)<<8)+(Ie>>8))%31){ne.msg="incorrect header check",K.mode=I;break}if((Ie&15)!==k){ne.msg="unknown compression method",K.mode=I;break}if(Ie>>>=4,ze-=4,Je=(Ie&15)+8,K.wbits===0)K.wbits=Je;else if(Je>K.wbits){ne.msg="invalid window size",K.mode=I;break}K.dmax=1<<Je,ne.adler=K.check=1,K.mode=Ie&512?te:he,Ie=0,ze=0;break;case W:for(;ze<16;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}if(K.flags=Ie,(K.flags&255)!==k){ne.msg="unknown compression method",K.mode=I;break}if(K.flags&57344){ne.msg="unknown header flags set",K.mode=I;break}K.head&&(K.head.text=Ie>>8&1),K.flags&512&&(Ue[0]=Ie&255,Ue[1]=Ie>>>8&255,K.check=r(K.check,Ue,2,0)),Ie=0,ze=0,K.mode=M;case M:for(;ze<32;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}K.head&&(K.head.time=Ie),K.flags&512&&(Ue[0]=Ie&255,Ue[1]=Ie>>>8&255,Ue[2]=Ie>>>16&255,Ue[3]=Ie>>>24&255,K.check=r(K.check,Ue,4,0)),Ie=0,ze=0,K.mode=S;case S:for(;ze<16;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}K.head&&(K.head.xflags=Ie&255,K.head.os=Ie>>8),K.flags&512&&(Ue[0]=Ie&255,Ue[1]=Ie>>>8&255,K.check=r(K.check,Ue,2,0)),Ie=0,ze=0,K.mode=T;case T:if(K.flags&1024){for(;ze<16;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}K.length=Ie,K.head&&(K.head.extra_len=Ie),K.flags&512&&(Ue[0]=Ie&255,Ue[1]=Ie>>>8&255,K.check=r(K.check,Ue,2,0)),Ie=0,ze=0}else K.head&&(K.head.extra=null);K.mode=V;case V:if(K.flags&1024&&(je=K.length,je>He&&(je=He),je&&(K.head&&(Je=K.head.extra_len-K.length,K.head.extra||(K.head.extra=new Array(K.head.extra_len)),e.arraySet(K.head.extra,Be,z,je,Je)),K.flags&512&&(K.check=r(K.check,Be,je,z)),He-=je,z+=je,K.length-=je),K.length))break e;K.length=0,K.mode=_;case _:if(K.flags&2048){if(He===0)break e;je=0;do Je=Be[z+je++],K.head&&Je&&K.length<65536&&(K.head.name+=String.fromCharCode(Je));while(Je&&je<He);if(K.flags&512&&(K.check=r(K.check,Be,je,z)),He-=je,z+=je,Je)break e}else K.head&&(K.head.name=null);K.length=0,K.mode=ee;case ee:if(K.flags&4096){if(He===0)break e;je=0;do Je=Be[z+je++],K.head&&Je&&K.length<65536&&(K.head.comment+=String.fromCharCode(Je));while(Je&&je<He);if(K.flags&512&&(K.check=r(K.check,Be,je,z)),He-=je,z+=je,Je)break e}else K.head&&(K.head.comment=null);K.mode=re;case re:if(K.flags&512){for(;ze<16;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}if(Ie!==(K.check&65535)){ne.msg="header crc mismatch",K.mode=I;break}Ie=0,ze=0}K.head&&(K.head.hcrc=K.flags>>9&1,K.head.done=!0),ne.adler=K.check=0,K.mode=he;break;case te:for(;ze<32;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}ne.adler=K.check=H(Ie),Ie=0,ze=0,K.mode=oe;case oe:if(K.havedict===0)return ne.next_out=Te,ne.avail_out=ue,ne.next_in=z,ne.avail_in=He,K.hold=Ie,K.bits=ze,P;ne.adler=K.check=1,K.mode=he;case he:if(Pe===u||Pe===m)break e;case me:if(K.last){Ie>>>=ze&7,ze-=ze&7,K.mode=se;break}for(;ze<3;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}switch(K.last=Ie&1,Ie>>>=1,ze-=1,Ie&3){case 0:K.mode=we;break;case 1:if(Me(K),K.mode=Ne,Pe===m){Ie>>>=2,ze-=2;break e}break;case 2:K.mode=le;break;case 3:ne.msg="invalid block type",K.mode=I}Ie>>>=2,ze-=2;break;case we:for(Ie>>>=ze&7,ze-=ze&7;ze<32;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}if((Ie&65535)!==(Ie>>>16^65535)){ne.msg="invalid stored block lengths",K.mode=I;break}if(K.length=Ie&65535,Ie=0,ze=0,K.mode=Se,Pe===m)break e;case Se:K.mode=be;case be:if(je=K.length,je){if(je>He&&(je=He),je>ue&&(je=ue),je===0)break e;e.arraySet(De,Be,z,je,Te),He-=je,z+=je,ue-=je,Te+=je,K.length-=je;break}K.mode=he;break;case le:for(;ze<14;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}if(K.nlen=(Ie&31)+257,Ie>>>=5,ze-=5,K.ndist=(Ie&31)+1,Ie>>>=5,ze-=5,K.ncode=(Ie&15)+4,Ie>>>=4,ze-=4,K.nlen>286||K.ndist>30){ne.msg="too many length or distance symbols",K.mode=I;break}K.have=0,K.mode=ae;case ae:for(;K.have<K.ncode;){for(;ze<3;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}K.lens[it[K.have++]]=Ie&7,Ie>>>=3,ze-=3}for(;K.have<19;)K.lens[it[K.have++]]=0;if(K.lencode=K.lendyn,K.lenbits=7,et={bits:K.lenbits},$e=a(s,K.lens,0,19,K.lencode,0,K.work,et),K.lenbits=et.bits,$e){ne.msg="invalid code lengths set",K.mode=I;break}K.have=0,K.mode=ke;case ke:for(;K.have<K.nlen+K.ndist;){for(;Ze=K.lencode[Ie&(1<<K.lenbits)-1],qe=Ze>>>24,Ye=Ze>>>16&255,We=Ze&65535,!(qe<=ze);){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}if(We<16)Ie>>>=qe,ze-=qe,K.lens[K.have++]=We;else{if(We===16){for(_e=qe+2;ze<_e;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}if(Ie>>>=qe,ze-=qe,K.have===0){ne.msg="invalid bit length repeat",K.mode=I;break}Je=K.lens[K.have-1],je=3+(Ie&3),Ie>>>=2,ze-=2}else if(We===17){for(_e=qe+3;ze<_e;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}Ie>>>=qe,ze-=qe,Je=0,je=3+(Ie&7),Ie>>>=3,ze-=3}else{for(_e=qe+7;ze<_e;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}Ie>>>=qe,ze-=qe,Je=0,je=11+(Ie&127),Ie>>>=7,ze-=7}if(K.have+je>K.nlen+K.ndist){ne.msg="invalid bit length repeat",K.mode=I;break}for(;je--;)K.lens[K.have++]=Je}}if(K.mode===I)break;if(K.lens[256]===0){ne.msg="invalid code -- missing end-of-block",K.mode=I;break}if(K.lenbits=9,et={bits:K.lenbits},$e=a(o,K.lens,0,K.nlen,K.lencode,0,K.work,et),K.lenbits=et.bits,$e){ne.msg="invalid literal/lengths set",K.mode=I;break}if(K.distbits=6,K.distcode=K.distdyn,et={bits:K.distbits},$e=a(l,K.lens,K.nlen,K.ndist,K.distcode,0,K.work,et),K.distbits=et.bits,$e){ne.msg="invalid distances set",K.mode=I;break}if(K.mode=Ne,Pe===m)break e;case Ne:K.mode=de;case de:if(He>=6&&ue>=258){ne.next_out=Te,ne.avail_out=ue,ne.next_in=z,ne.avail_in=He,K.hold=Ie,K.bits=ze,n(ne,Ve),Te=ne.next_out,De=ne.output,ue=ne.avail_out,z=ne.next_in,Be=ne.input,He=ne.avail_in,Ie=K.hold,ze=K.bits,K.mode===he&&(K.back=-1);break}for(K.back=0;Ze=K.lencode[Ie&(1<<K.lenbits)-1],qe=Ze>>>24,Ye=Ze>>>16&255,We=Ze&65535,!(qe<=ze);){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}if(Ye&&!(Ye&240)){for(Xe=qe,tt=Ye,rt=We;Ze=K.lencode[rt+((Ie&(1<<Xe+tt)-1)>>Xe)],qe=Ze>>>24,Ye=Ze>>>16&255,We=Ze&65535,!(Xe+qe<=ze);){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}Ie>>>=Xe,ze-=Xe,K.back+=Xe}if(Ie>>>=qe,ze-=qe,K.back+=qe,K.length=We,Ye===0){K.mode=J;break}if(Ye&32){K.back=-1,K.mode=he;break}if(Ye&64){ne.msg="invalid literal/length code",K.mode=I;break}K.extra=Ye&15,K.mode=$;case $:if(K.extra){for(_e=K.extra;ze<_e;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}K.length+=Ie&(1<<K.extra)-1,Ie>>>=K.extra,ze-=K.extra,K.back+=K.extra}K.was=K.length,K.mode=ie;case ie:for(;Ze=K.distcode[Ie&(1<<K.distbits)-1],qe=Ze>>>24,Ye=Ze>>>16&255,We=Ze&65535,!(qe<=ze);){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}if(!(Ye&240)){for(Xe=qe,tt=Ye,rt=We;Ze=K.distcode[rt+((Ie&(1<<Xe+tt)-1)>>Xe)],qe=Ze>>>24,Ye=Ze>>>16&255,We=Ze&65535,!(Xe+qe<=ze);){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}Ie>>>=Xe,ze-=Xe,K.back+=Xe}if(Ie>>>=qe,ze-=qe,K.back+=qe,Ye&64){ne.msg="invalid distance code",K.mode=I;break}K.offset=We,K.extra=Ye&15,K.mode=U;case U:if(K.extra){for(_e=K.extra;ze<_e;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}K.offset+=Ie&(1<<K.extra)-1,Ie>>>=K.extra,ze-=K.extra,K.back+=K.extra}if(K.offset>K.dmax){ne.msg="invalid distance too far back",K.mode=I;break}K.mode=L;case L:if(ue===0)break e;if(je=Ve-ue,K.offset>je){if(je=K.offset-je,je>K.whave&&K.sane){ne.msg="invalid distance too far back",K.mode=I;break}je>K.wnext?(je-=K.wnext,Le=K.wsize-je):Le=K.wnext-je,je>K.length&&(je=K.length),Ke=K.window}else Ke=De,Le=Te-K.offset,je=K.length;je>ue&&(je=ue),ue-=je,K.length-=je;do De[Te++]=Ke[Le++];while(--je);K.length===0&&(K.mode=de);break;case J:if(ue===0)break e;De[Te++]=K.length,ue--,K.mode=de;break;case se:if(K.wrap){for(;ze<32;){if(He===0)break e;He--,Ie|=Be[z++]<<ze,ze+=8}if(Ve-=ue,ne.total_out+=Ve,K.total+=Ve,Ve&&(ne.adler=K.check=K.flags?r(K.check,De,Ve,Te-Ve):t(K.check,De,Ve,Te-Ve)),Ve=ue,(K.flags?Ie:H(Ie))!==K.check){ne.msg="incorrect data check",K.mode=I;break}Ie=0,ze=0}K.mode=ve;case ve:if(K.wrap&&K.flags){for(;ze<32;){if(He===0)break e;He--,Ie+=Be[z++]<<ze,ze+=8}if(Ie!==(K.total&4294967295)){ne.msg="incorrect length check",K.mode=I;break}Ie=0,ze=0}K.mode=Z;case Z:$e=b;break e;case I:$e=C;break e;case q:return D;case fe:default:return F}return ne.next_out=Te,ne.avail_out=ue,ne.next_in=z,ne.avail_in=He,K.hold=Ie,K.bits=ze,(K.wsize||Ve!==ne.avail_out&&K.mode<I&&(K.mode<se||Pe!==f))&&Q(ne,ne.output,ne.next_out,Ve-ne.avail_out),Ge-=ne.avail_in,Ve-=ne.avail_out,ne.total_in+=Ge,ne.total_out+=Ve,K.total+=Ve,K.wrap&&Ve&&(ne.adler=K.check=K.flags?r(K.check,De,Ve,ne.next_out-Ve):t(K.check,De,Ve,ne.next_out-Ve)),ne.data_type=K.bits+(K.last?64:0)+(K.mode===he?128:0)+(K.mode===Ne||K.mode===Se?256:0),(Ge===0&&Ve===0||Pe===f)&&$e===v&&($e=E),$e}function O(ne){if(!ne||!ne.state)return F;var Pe=ne.state;return Pe.window&&(Pe.window=null),ne.state=null,v}function X(ne,Pe){var K;return!ne||!ne.state||(K=ne.state,!(K.wrap&2))?F:(K.head=Pe,Pe.done=!1,v)}function pe(ne,Pe){var K=Pe.length,Be,De,z;return!ne||!ne.state||(Be=ne.state,Be.wrap!==0&&Be.mode!==oe)?F:Be.mode===oe&&(De=1,De=t(De,Pe,K,0),De!==Be.check)?C:(z=Q(ne,Pe,K,K),z?(Be.mode=q,D):(Be.havedict=1,v))}return inflate.inflateReset=Ee,inflate.inflateReset2=Ce,inflate.inflateResetKeep=ye,inflate.inflateInit=xe,inflate.inflateInit2=ge,inflate.inflate=A,inflate.inflateEnd=O,inflate.inflateGetHeader=X,inflate.inflateSetDictionary=pe,inflate.inflateInfo="pako inflate (from Nodeca project)",inflate}var constants,hasRequiredConstants;function requireConstants(){return hasRequiredConstants||(hasRequiredConstants=1,constants={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}),constants}var gzheader,hasRequiredGzheader;function requireGzheader(){if(hasRequiredGzheader)return gzheader;hasRequiredGzheader=1;function e(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}return gzheader=e,gzheader}var hasRequiredInflate;function requireInflate(){if(hasRequiredInflate)return inflate$1;hasRequiredInflate=1;var e=requireInflate$1(),t=requireCommon(),r=requireStrings(),n=requireConstants(),a=requireMessages(),s=requireZstream(),o=requireGzheader(),l=Object.prototype.toString;function f(v){if(!(this instanceof f))return new f(v);this.options=t.assign({chunkSize:16384,windowBits:0,to:""},v||{});var b=this.options;b.raw&&b.windowBits>=0&&b.windowBits<16&&(b.windowBits=-b.windowBits,b.windowBits===0&&(b.windowBits=-15)),b.windowBits>=0&&b.windowBits<16&&!(v&&v.windowBits)&&(b.windowBits+=32),b.windowBits>15&&b.windowBits<48&&(b.windowBits&15||(b.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var P=e.inflateInit2(this.strm,b.windowBits);if(P!==n.Z_OK)throw new Error(a[P]);if(this.header=new o,e.inflateGetHeader(this.strm,this.header),b.dictionary&&(typeof b.dictionary=="string"?b.dictionary=r.string2buf(b.dictionary):l.call(b.dictionary)==="[object ArrayBuffer]"&&(b.dictionary=new Uint8Array(b.dictionary)),b.raw&&(P=e.inflateSetDictionary(this.strm,b.dictionary),P!==n.Z_OK)))throw new Error(a[P])}f.prototype.push=function(v,b){var P=this.strm,F=this.options.chunkSize,C=this.options.dictionary,D,E,k,j,W,M=!1;if(this.ended)return!1;E=b===~~b?b:b===!0?n.Z_FINISH:n.Z_NO_FLUSH,typeof v=="string"?P.input=r.binstring2buf(v):l.call(v)==="[object ArrayBuffer]"?P.input=new Uint8Array(v):P.input=v,P.next_in=0,P.avail_in=P.input.length;do{if(P.avail_out===0&&(P.output=new t.Buf8(F),P.next_out=0,P.avail_out=F),D=e.inflate(P,n.Z_NO_FLUSH),D===n.Z_NEED_DICT&&C&&(D=e.inflateSetDictionary(this.strm,C)),D===n.Z_BUF_ERROR&&M===!0&&(D=n.Z_OK,M=!1),D!==n.Z_STREAM_END&&D!==n.Z_OK)return this.onEnd(D),this.ended=!0,!1;P.next_out&&(P.avail_out===0||D===n.Z_STREAM_END||P.avail_in===0&&(E===n.Z_FINISH||E===n.Z_SYNC_FLUSH))&&(this.options.to==="string"?(k=r.utf8border(P.output,P.next_out),j=P.next_out-k,W=r.buf2string(P.output,k),P.next_out=j,P.avail_out=F-j,j&&t.arraySet(P.output,P.output,k,j,0),this.onData(W)):this.onData(t.shrinkBuf(P.output,P.next_out))),P.avail_in===0&&P.avail_out===0&&(M=!0)}while((P.avail_in>0||P.avail_out===0)&&D!==n.Z_STREAM_END);return D===n.Z_STREAM_END&&(E=n.Z_FINISH),E===n.Z_FINISH?(D=e.inflateEnd(this.strm),this.onEnd(D),this.ended=!0,D===n.Z_OK):(E===n.Z_SYNC_FLUSH&&(this.onEnd(n.Z_OK),P.avail_out=0),!0)},f.prototype.onData=function(v){this.chunks.push(v)},f.prototype.onEnd=function(v){v===n.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=t.flattenChunks(this.chunks)),this.chunks=[],this.err=v,this.msg=this.strm.msg};function u(v,b){var P=new f(b);if(P.push(v,!0),P.err)throw P.msg||a[P.err];return P.result}function m(v,b){return b=b||{},b.raw=!0,u(v,b)}return inflate$1.Inflate=f,inflate$1.inflate=u,inflate$1.inflateRaw=m,inflate$1.ungzip=u,inflate$1}var pako_1,hasRequiredPako;function requirePako(){if(hasRequiredPako)return pako_1;hasRequiredPako=1;var e=requireCommon().assign,t=requireDeflate(),r=requireInflate(),n=requireConstants(),a={};return e(a,t,r,n),pako_1=a,pako_1}(function(e){(function(){var t={};e.exports=t;var r=typeof commonjsRequire=="function"?requirePako():self.pako;function n(){typeof process$1>"u"&&console.log.apply(console,arguments)}(function(a,s){(function(){var o=function(){function m(v){this.message="JPEG error: "+v}return m.prototype=new Error,m.prototype.name="JpegError",m.constructor=m,m}(),l=function(){var m=new Uint8Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),v=4017,b=799,P=3406,F=2276,C=1567,D=3784,E=5793,k=2896;function j(ee){ee==null&&(ee={}),ee.w==null&&(ee.w=-1),this.V=ee.n,this.N=ee.w}function W(ee,re){for(var te=0,oe=[],he,me,we=16,Se;we>0&&!ee[we-1];)we--;oe.push({children:[],index:0});var be=oe[0];for(he=0;he<we;he++){for(me=0;me<ee[he];me++){for(be=oe.pop(),be.children[be.index]=re[te];be.index>0;)be=oe.pop();for(be.index++,oe.push(be);oe.length<=he;)oe.push(Se={children:[],index:0}),be.children[be.index]=Se.children,be=Se;te++}he+1<we&&(oe.push(Se={children:[],index:0}),be.children[be.index]=Se.children,be=Se)}return oe[0].children}function M(ee,re,te){return 64*((ee.P+1)*re+te)}function S(ee,re,te,oe,he,me,we,Se,be,le){le==null&&(le=!1);var ae=te.m,ke=te.Z,Ne=re,de=0,$=0,ie=0,U=0,L,J=0,se,ve,Z,I,q,fe,Ae=0,G,N,B,H;function ce(){if($>0)return $--,de>>$&1;if(de=ee[re++],de===255){var X=ee[re++];if(X){if(X===220&&le){re+=2;var pe=f(ee,re);if(re+=2,pe>0&&pe!==te.s)throw new DNLMarkerError("Found DNL marker (0xFFDC) while parsing scan data",pe)}else if(X===217){if(le){var ne=J*8;if(ne>0&&ne<te.s/10)throw new DNLMarkerError("Found EOI marker (0xFFD9) while parsing scan data, possibly caused by incorrect `scanLines` parameter",ne)}throw new EOIMarkerError("Found EOI marker (0xFFD9) while parsing scan data")}throw new o("unexpected marker")}}return $=7,de>>>7}function ye(X){for(var pe=X;;){switch(pe=pe[ce()],typeof pe){case"number":return pe;case"object":continue}throw new o("invalid huffman sequence")}}function Ee(X){for(var pe=0;X>0;)pe=pe<<1|ce(),X--;return pe}function Ce(X){if(X===1)return ce()===1?1:-1;var pe=Ee(X);return pe>=1<<X-1?pe:pe+(-1<<X)+1}function ge(X,pe){var ne=ye(X.J),Pe=ne===0?0:Ce(ne),K=1;for(X.D[pe]=X.Q+=Pe;K<64;){var Be=ye(X.i),De=Be&15,z=Be>>4;if(De===0){if(z<15)break;K+=16;continue}K+=z;var Te=m[K];X.D[pe+Te]=Ce(De),K++}}function xe(X,pe){var ne=ye(X.J),Pe=ne===0?0:Ce(ne)<<be;X.D[pe]=X.Q+=Pe}function Fe(X,pe){X.D[pe]|=ce()<<be}function Re(X,pe){if(ie>0){ie--;return}for(var ne=me,Pe=we;ne<=Pe;){var K=ye(X.i),Be=K&15,De=K>>4;if(Be===0){if(De<15){ie=Ee(De)+(1<<De)-1;break}ne+=16;continue}ne+=De;var z=m[ne];X.D[pe+z]=Ce(Be)*(1<<be),ne++}}function Oe(X,pe){for(var ne=me,Pe=we,K=0,Be,De;ne<=Pe;){var z=pe+m[ne],Te=X.D[z]<0?-1:1;switch(U){case 0:if(De=ye(X.i),Be=De&15,K=De>>4,Be===0)K<15?(ie=Ee(K)+(1<<K),U=4):(K=16,U=1);else{if(Be!==1)throw new o("invalid ACn encoding");L=Ce(Be),U=K?2:3}continue;case 1:case 2:X.D[z]?X.D[z]+=Te*(ce()<<be):(K--,K===0&&(U=U===2?3:0));break;case 3:X.D[z]?X.D[z]+=Te*(ce()<<be):(X.D[z]=L<<be,U=0);break;case 4:X.D[z]&&(X.D[z]+=Te*(ce()<<be));break}ne++}U===4&&(ie--,ie===0&&(U=0))}function Me(X,pe,ne,Pe,K){var Be=ne/ae|0,De=ne%ae;J=Be*X.A+Pe;var z=De*X.h+K,Te=M(X,J,z);pe(X,Te)}function Q(X,pe,ne){J=ne/X.P|0;var Pe=ne%X.P,K=M(X,J,Pe);pe(X,K)}var A=oe.length;for(ke?me===0?fe=Se===0?xe:Fe:fe=Se===0?Re:Oe:fe=ge,A===1?N=oe[0].P*oe[0].c:N=ae*te.R;Ae<=N;){var O=he?Math.min(N-Ae,he):N;if(O>0){for(ve=0;ve<A;ve++)oe[ve].Q=0;if(ie=0,A===1)for(se=oe[0],q=0;q<O;q++)Q(se,fe,Ae),Ae++;else for(q=0;q<O;q++){for(ve=0;ve<A;ve++)for(se=oe[ve],B=se.h,H=se.A,Z=0;Z<H;Z++)for(I=0;I<B;I++)Me(se,fe,Ae,Z,I);Ae++}}if($=0,G=_(ee,re),!G)break;if(G.u&&(re=G.offset),G.M>=65488&&G.M<=65495)re+=2;else break}return re-Ne}function T(ee,re,te){var oe=ee.$,he=ee.D,me,we,Se,be,le,ae,ke,Ne,de,$,ie,U,L,J,se,ve,Z;if(!oe)throw new o("missing required Quantization Table.");for(var I=0;I<64;I+=8){if(de=he[re+I],$=he[re+I+1],ie=he[re+I+2],U=he[re+I+3],L=he[re+I+4],J=he[re+I+5],se=he[re+I+6],ve=he[re+I+7],de*=oe[I],!($|ie|U|L|J|se|ve)){Z=E*de+512>>10,te[I]=Z,te[I+1]=Z,te[I+2]=Z,te[I+3]=Z,te[I+4]=Z,te[I+5]=Z,te[I+6]=Z,te[I+7]=Z;continue}$*=oe[I+1],ie*=oe[I+2],U*=oe[I+3],L*=oe[I+4],J*=oe[I+5],se*=oe[I+6],ve*=oe[I+7],me=E*de+128>>8,we=E*L+128>>8,Se=ie,be=se,le=k*($-ve)+128>>8,Ne=k*($+ve)+128>>8,ae=U<<4,ke=J<<4,me=me+we+1>>1,we=me-we,Z=Se*D+be*C+128>>8,Se=Se*C-be*D+128>>8,be=Z,le=le+ke+1>>1,ke=le-ke,Ne=Ne+ae+1>>1,ae=Ne-ae,me=me+be+1>>1,be=me-be,we=we+Se+1>>1,Se=we-Se,Z=le*F+Ne*P+2048>>12,le=le*P-Ne*F+2048>>12,Ne=Z,Z=ae*b+ke*v+2048>>12,ae=ae*v-ke*b+2048>>12,ke=Z,te[I]=me+Ne,te[I+7]=me-Ne,te[I+1]=we+ke,te[I+6]=we-ke,te[I+2]=Se+ae,te[I+5]=Se-ae,te[I+3]=be+le,te[I+4]=be-le}for(var q=0;q<8;++q){if(de=te[q],$=te[q+8],ie=te[q+16],U=te[q+24],L=te[q+32],J=te[q+40],se=te[q+48],ve=te[q+56],!($|ie|U|L|J|se|ve)){Z=E*de+8192>>14,Z<-2040?Z=0:Z>=2024?Z=255:Z=Z+2056>>4,he[re+q]=Z,he[re+q+8]=Z,he[re+q+16]=Z,he[re+q+24]=Z,he[re+q+32]=Z,he[re+q+40]=Z,he[re+q+48]=Z,he[re+q+56]=Z;continue}me=E*de+2048>>12,we=E*L+2048>>12,Se=ie,be=se,le=k*($-ve)+2048>>12,Ne=k*($+ve)+2048>>12,ae=U,ke=J,me=(me+we+1>>1)+4112,we=me-we,Z=Se*D+be*C+2048>>12,Se=Se*C-be*D+2048>>12,be=Z,le=le+ke+1>>1,ke=le-ke,Ne=Ne+ae+1>>1,ae=Ne-ae,me=me+be+1>>1,be=me-be,we=we+Se+1>>1,Se=we-Se,Z=le*F+Ne*P+2048>>12,le=le*P-Ne*F+2048>>12,Ne=Z,Z=ae*b+ke*v+2048>>12,ae=ae*v-ke*b+2048>>12,ke=Z,de=me+Ne,ve=me-Ne,$=we+ke,se=we-ke,ie=Se+ae,J=Se-ae,U=be+le,L=be-le,de<16?de=0:de>=4080?de=255:de>>=4,$<16?$=0:$>=4080?$=255:$>>=4,ie<16?ie=0:ie>=4080?ie=255:ie>>=4,U<16?U=0:U>=4080?U=255:U>>=4,L<16?L=0:L>=4080?L=255:L>>=4,J<16?J=0:J>=4080?J=255:J>>=4,se<16?se=0:se>=4080?se=255:se>>=4,ve<16?ve=0:ve>=4080?ve=255:ve>>=4,he[re+q]=de,he[re+q+8]=$,he[re+q+16]=ie,he[re+q+24]=U,he[re+q+32]=L,he[re+q+40]=J,he[re+q+48]=se,he[re+q+56]=ve}}function V(ee,re){for(var te=re.P,oe=re.c,he=new Int16Array(64),me=0;me<oe;me++)for(var we=0;we<te;we++){var Se=M(re,me,we);T(re,Se,he)}return re.D}function _(ee,re,te){te==null&&(te=re);var oe=ee.length-1,he=te<re?te:re;if(re>=oe)return null;var me=f(ee,re);if(me>=65472&&me<=65534)return{u:null,M:me,offset:re};for(var we=f(ee,he);!(we>=65472&&we<=65534);){if(++he>=oe)return null;we=f(ee,he)}return{u:me.toString(16),M:we,offset:he}}return j.prototype={parse(ee,re){re==null&&(re={});var te=re.F,oe=0,he=null,me=null,we,Se,be=0;function le(){var z=f(ee,oe);oe+=2;var Te=oe+z-2,He=_(ee,Te,oe);He&&He.u&&(Te=He.offset);var ue=ee.subarray(oe,Te);return oe+=ue.length,ue}function ae(z){for(var Te=Math.ceil(z.o/8/z.X),He=Math.ceil(z.s/8/z.B),ue=0;ue<z.W.length;ue++){Oe=z.W[ue];var Ie=Math.ceil(Math.ceil(z.o/8)*Oe.h/z.X),ze=Math.ceil(Math.ceil(z.s/8)*Oe.A/z.B),Ge=Te*Oe.h,Ve=He*Oe.A,je=64*Ve*(Ge+1);Oe.D=new Int16Array(je),Oe.P=Ie,Oe.c=ze}z.m=Te,z.R=He}var ke=[],Ne=[],de=[],$=f(ee,oe);if(oe+=2,$!==65496)throw new o("SOI not found");$=f(ee,oe),oe+=2;e:for(;$!==65497;){var ie,U,L;switch($){case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var J=le();$===65504&&J[0]===74&&J[1]===70&&J[2]===73&&J[3]===70&&J[4]===0&&(he={version:{d:J[5],T:J[6]},K:J[7],j:J[8]<<8|J[9],H:J[10]<<8|J[11],S:J[12],I:J[13],C:J.subarray(14,14+3*J[12]*J[13])}),$===65518&&J[0]===65&&J[1]===100&&J[2]===111&&J[3]===98&&J[4]===101&&(me={version:J[5]<<8|J[6],k:J[7]<<8|J[8],q:J[9]<<8|J[10],a:J[11]});break;case 65499:var se=f(ee,oe),ve;oe+=2;for(var Z=se+oe-2;oe<Z;){var I=ee[oe++],q=new Uint16Array(64);if(I>>4)if(I>>4===1)for(U=0;U<64;U++)ve=m[U],q[ve]=f(ee,oe),oe+=2;else throw new o("DQT - invalid table spec");else for(U=0;U<64;U++)ve=m[U],q[ve]=ee[oe++];ke[I&15]=q}break;case 65472:case 65473:case 65474:if(we)throw new o("Only single frame JPEGs supported");oe+=2,we={},we.G=$===65473,we.Z=$===65474,we.precision=ee[oe++];var fe=f(ee,oe),Ae,G=0,N=0;oe+=2,we.s=te||fe,we.o=f(ee,oe),oe+=2,we.W=[],we._={};var B=ee[oe++];for(ie=0;ie<B;ie++){Ae=ee[oe];var H=ee[oe+1]>>4,ce=ee[oe+1]&15;G<H&&(G=H),N<ce&&(N=ce);var ye=ee[oe+2];L=we.W.push({h:H,A:ce,L:ye,$:null}),we._[Ae]=L-1,oe+=3}we.X=G,we.B=N,ae(we);break;case 65476:var Ee=f(ee,oe);for(oe+=2,ie=2;ie<Ee;){var Ce=ee[oe++],ge=new Uint8Array(16),xe=0;for(U=0;U<16;U++,oe++)xe+=ge[U]=ee[oe];var Fe=new Uint8Array(xe);for(U=0;U<xe;U++,oe++)Fe[U]=ee[oe];ie+=17+xe,(Ce>>4?Ne:de)[Ce&15]=W(ge,Fe)}break;case 65501:oe+=2,Se=f(ee,oe),oe+=2;break;case 65498:var Re=++be===1&&!te,Oe;oe+=2;var Me=ee[oe++],Q=[];for(ie=0;ie<Me;ie++){var A=ee[oe++],O=we._[A];Oe=we.W[O],Oe.index=A;var X=ee[oe++];Oe.J=de[X>>4],Oe.i=Ne[X&15],Q.push(Oe)}var pe=ee[oe++],ne=ee[oe++],Pe=ee[oe++];try{var K=S(ee,oe,we,Q,Se,pe,ne,Pe>>4,Pe&15,Re);oe+=K}catch(z){if(z instanceof DNLMarkerError)return this.parse(ee,{F:z.s});if(z instanceof EOIMarkerError)break e;throw z}break;case 65500:oe+=4;break;case 65535:ee[oe]!==255&&oe--;break;default:var Be=_(ee,oe-2,oe-3);if(Be&&Be.u){oe=Be.offset;break}if(oe>=ee.length-1)break e;throw new o("JpegImage.parse - unknown marker: "+$.toString(16))}$=f(ee,oe),oe+=2}for(this.width=we.o,this.height=we.s,this.g=he,this.b=me,this.W=[],ie=0;ie<we.W.length;ie++){Oe=we.W[ie];var De=ke[Oe.L];De&&(Oe.$=De),this.W.push({index:Oe.index,e:V(we,Oe),l:Oe.h/we.X,t:Oe.A/we.B,P:Oe.P,c:Oe.c})}this.p=this.W.length},Y(ee,re,te){te==null&&(te=!1);var oe=this.width/ee,he=this.height/re,me,we,Se,be,le,ae,ke,Ne,de,$,ie=0,U,L=this.W.length,J=ee*re*L,se=new Uint8ClampedArray(J),ve=new Uint32Array(ee),Z=4294967288,I;for(ke=0;ke<L;ke++){if(me=this.W[ke],we=me.l*oe,Se=me.t*he,ie=ke,U=me.e,be=me.P+1<<3,we!==I){for(le=0;le<ee;le++)Ne=0|le*we,ve[le]=(Ne&Z)<<3|Ne&7;I=we}for(ae=0;ae<re;ae++)for(Ne=0|ae*Se,$=be*(Ne&Z)|(Ne&7)<<3,le=0;le<ee;le++)se[ie]=U[$+ve[le]],ie+=L}var q=this.V;if(!te&&L===4&&!q&&(q=new Int32Array([-256,255,-256,255,-256,255,-256,255])),q)for(ke=0;ke<J;)for(Ne=0,de=0;Ne<L;Ne++,ke++,de+=2)se[ke]=(se[ke]*q[de]>>8)+q[de+1];return se},get f(){return this.b?!!this.b.a:this.p===3?this.N===0?!1:!(this.W[0].index===82&&this.W[1].index===71&&this.W[2].index===66):this.N===1},z:function(re){for(var te,oe,he,me=0,we=re.length;me<we;me+=3)te=re[me],oe=re[me+1],he=re[me+2],re[me]=te-179.456+1.402*he,re[me+1]=te+135.459-.344*oe-.714*he,re[me+2]=te-226.816+1.772*oe;return re},O:function(re){for(var te,oe,he,me,we=0,Se=0,be=re.length;Se<be;Se+=4)te=re[Se],oe=re[Se+1],he=re[Se+2],me=re[Se+3],re[we++]=-122.67195406894+oe*(-660635669420364e-19*oe+.000437130475926232*he-54080610064599e-18*te+.00048449797120281*me-.154362151871126)+he*(-.000957964378445773*he+.000817076911346625*te-.00477271405408747*me+1.53380253221734)+te*(.000961250184130688*te-.00266257332283933*me+.48357088451265)+me*(-.000336197177618394*me+.484791561490776),re[we++]=107.268039397724+oe*(219927104525741e-19*oe-.000640992018297945*he+.000659397001245577*te+.000426105652938837*me-.176491792462875)+he*(-.000778269941513683*he+.00130872261408275*te+.000770482631801132*me-.151051492775562)+te*(.00126935368114843*te-.00265090189010898*me+.25802910206845)+me*(-.000318913117588328*me-.213742400323665),re[we++]=-20.810012546947+oe*(-.000570115196973677*oe-263409051004589e-19*he+.0020741088115012*te-.00288260236853442*me+.814272968359295)+he*(-153496057440975e-19*he-.000132689043961446*te+.000560833691242812*me-.195152027534049)+te*(.00174418132927582*te-.00255243321439347*me+.116935020465145)+me*(-.000343531996510555*me+.24165260232407);return re.subarray(0,we)},r:function(re){for(var te,oe,he,me=0,we=re.length;me<we;me+=4)te=re[me],oe=re[me+1],he=re[me+2],re[me]=434.456-te-1.402*he,re[me+1]=119.541-te+.344*oe+.714*he,re[me+2]=481.816-te-1.772*oe;return re},U:function(re){for(var te,oe,he,me,we=0,Se=0,be=re.length;Se<be;Se+=4)te=re[Se],oe=re[Se+1],he=re[Se+2],me=re[Se+3],re[we++]=255+te*(-6747147073602441e-20*te+.0008379262121013727*oe+.0002894718188643294*he+.003264231057537806*me-1.1185611867203937)+oe*(26374107616089405e-21*oe-8626949158638572e-20*he-.0002748769067499491*me-.02155688794978967)+he*(-3878099212869363e-20*he-.0003267808279485286*me+.0686742238595345)-me*(.0003361971776183937*me+.7430659151342254),re[we++]=255+te*(.00013596372813588848*te+.000924537132573585*oe+.00010567359618683593*he+.0004791864687436512*me-.3109689587515875)+oe*(-.00023545346108370344*oe+.0002702845253534714*he+.0020200308977307156*me-.7488052167015494)+he*(6834815998235662e-20*he+.00015168452363460973*me-.09751927774728933)-me*(.0003189131175883281*me+.7364883807733168),re[we++]=255+te*(13598650411385307e-21*te+.00012423956175490851*oe+.0004751985097583589*he-36729317476630422e-22*me-.05562186980264034)+oe*(.00016141380598724676*oe+.0009692239130725186*he+.0007782692450036253*me-.44015232367526463)+he*(5068882914068769e-22*he+.0017778369011375071*me-.7591454649749609)-me*(.0003435319965105553*me+.7063770186160144);return re.subarray(0,we)},getData:function(ee){var re=ee.width,te=ee.height,oe=ee.forceRGB,he=ee.isSourcePDF;if(this.p>4)throw new o("Unsupported color mode");var me=this.Y(re,te,he);if(this.p===1&&oe){for(var we=me.length,Se=new Uint8ClampedArray(we*3),be=0,le=0;le<we;le++){var ae=me[le];Se[be++]=ae,Se[be++]=ae,Se[be++]=ae}return Se}else{if(this.p===3&&this.f)return this.z(me);if(this.p===4){if(this.f)return oe?this.O(me):this.r(me);if(oe)return this.U(me)}}return me}},j}();function f(u,m){return u[m]<<8|u[m+1]}a.JpegDecoder=l})(),a.encodeImage=function(o,l,f,u){var m={t256:[l],t257:[f],t258:[8,8,8,8],t259:[1],t262:[2],t273:[1e3],t277:[4],t278:[f],t279:[l*f*4],t282:[[72,1]],t283:[[72,1]],t284:[1],t286:[[0,1]],t287:[[0,1]],t296:[1],t305:["Photopea (UTIF.js)"],t338:[1]};if(u)for(var v in u)m[v]=u[v];for(var b=new Uint8Array(a.encode([m])),P=new Uint8Array(o),F=new Uint8Array(1e3+l*f*4),v=0;v<b.length;v++)F[v]=b[v];for(var v=0;v<P.length;v++)F[1e3+v]=P[v];return F.buffer},a.encode=function(o){var l=new Uint8Array(2e4),f=4,u=a._binBE;l[0]=l[1]=77,u.writeUshort(l,2,42);var m=8;u.writeUint(l,f,m),f+=4;for(var v=0;v<o.length;v++){var b=a._writeIFD(u,a._types.basic,l,m,o[v]);m=b[1],v<o.length-1&&(m&3&&(m+=4-(m&3)),u.writeUint(l,b[0],m))}return l.slice(0,m).buffer},a.decode=function(o,l){l==null&&(l={parseMN:!0,debug:!1});var f=new Uint8Array(o),u=0,m=a._binBE.readASCII(f,u,2);u+=2;var v=m=="II"?a._binLE:a._binBE;v.readUshort(f,u),u+=2;var b=v.readUint(f,u);u+=4;for(var P=[];;){var F=v.readUshort(f,b),C=v.readUshort(f,b+4);if(F!=0&&(C<1||13<C)){n("error in TIFF");break}if(a._readIFD(v,f,b,P,0,l),b=v.readUint(f,b+2+F*12),b==0)break}return P},a.decodeImage=function(o,l,f){if(!l.data){var u=new Uint8Array(o),m=a._binBE.readASCII(u,0,2);if(l.t256!=null){l.isLE=m=="II",l.width=l.t256[0],l.height=l.t257[0];var v=l.t259?l.t259[0]:1,b=l.t266?l.t266[0]:1;l.t284&&l.t284[0]==2&&n("PlanarConfiguration 2 should not be used!"),v==7&&l.t258&&l.t258.length>3&&(l.t258=l.t258.slice(0,3));var P=l.t277?l.t277[0]:1,F=l.t258?l.t258[0]:1,C=F*P;v==1&&l.t279!=null&&l.t278&&l.t262[0]==32803&&(C=Math.round(l.t279[0]*8/(l.width*l.t278[0]))),l.t50885&&l.t50885[0]==4&&(C=l.t258[0]*3);var D=Math.ceil(l.width*C/8)*8,E=l.t273;(E==null||l.t322)&&(E=l.t324);var k=l.t279;v==1&&E.length==1&&(k=[l.height*(D>>>3)]),(k==null||l.t322)&&(k=l.t325);var j=new Uint8Array(l.height*(D>>>3)),W=0;if(l.t322!=null){var M=l.t322[0],S=l.t323[0],T=Math.floor((l.width+M-1)/M),V=Math.floor((l.height+S-1)/S),_=new Uint8Array(Math.ceil(M*S*C/8)|0);console.log("====",T,V);for(var ee=0;ee<V;ee++)for(var re=0;re<T;re++){var te=ee*T+re;_.fill(0),a.decode._decompress(l,f,u,E[te],k[te],v,_,0,b,M,S),v==6?j=_:a._copyTile(_,Math.ceil(M*C/8)|0,S,j,Math.ceil(l.width*C/8)|0,l.height,Math.ceil(re*M*C/8)|0,ee*S)}W=j.length*8}else{if(E==null)return;var oe=l.t278?l.t278[0]:l.height;oe=Math.min(oe,l.height);for(var te=0;te<E.length;te++)a.decode._decompress(l,f,u,E[te],k[te],v,j,Math.ceil(W/8)|0,b,l.width,oe),W+=D*oe;W=Math.min(W,j.length*8)}l.data=new Uint8Array(j.buffer,0,Math.ceil(W/8)|0)}}},a.decode._decompress=function(o,l,f,u,m,v,b,P,F,C,D){if(o.t271&&o.t271[0]=="Panasonic"&&o.t45&&o.t45[0]==6&&(v=34316),v==1)for(var E=0;E<m;E++)b[P+E]=f[u+E];else if(v==2)a.decode._decodeG2(f,u,m,b,P,C,F);else if(v==3)a.decode._decodeG3(f,u,m,b,P,C,F,o.t292?(o.t292[0]&1)==1:!1);else if(v==4)a.decode._decodeG4(f,u,m,b,P,C,F);else if(v==5)a.decode._decodeLZW(f,u,m,b,P,8);else if(v==6)a.decode._decodeOldJPEG(o,f,u,m,b,P);else if(v==7||v==34892)a.decode._decodeNewJPEG(o,f,u,m,b,P);else if(v==8||v==32946){var k=new Uint8Array(f.buffer,u+2,m-6),j=s.inflateRaw(k);P+j.length<=b.length&&b.set(j,P)}else v==9?a.decode._decodeVC5(f,u,m,b,P,o.t33422):v==32767?a.decode._decodeARW(o,f,u,m,b,P):v==32773?a.decode._decodePackBits(f,u,m,b,P):v==32809?a.decode._decodeThunder(f,u,m,b,P):v==34316?a.decode._decodePanasonic(o,f,u,m,b,P):v==34713?a.decode._decodeNikon(o,l,f,u,m,b,P):v==34676?a.decode._decodeLogLuv32(o,f,u,m,b,P):n("Unknown compression",v);var W=o.t258?Math.min(32,o.t258[0]):1,M=o.t277?o.t277[0]:1,S=W*M>>>3,T=Math.ceil(W*M*C/8);if(W==16&&!o.isLE&&o.t33422==null)for(var V=0;V<D;V++)for(var _=P+V*T,ee=1;ee<T;ee+=2){var re=b[_+ee];b[_+ee]=b[_+ee-1],b[_+ee-1]=re}if(o.t317&&o.t317[0]==2)for(var V=0;V<D;V++){var te=P+V*T;if(W==16)for(var E=S;E<T;E+=2){var oe=(b[te+E+1]<<8|b[te+E])+(b[te+E-S+1]<<8|b[te+E-S]);b[te+E]=oe&255,b[te+E+1]=oe>>>8&255}else if(M==3)for(var E=3;E<T;E+=3)b[te+E]=b[te+E]+b[te+E-3]&255,b[te+E+1]=b[te+E+1]+b[te+E-2]&255,b[te+E+2]=b[te+E+2]+b[te+E-1]&255;else for(var E=S;E<T;E++)b[te+E]=b[te+E]+b[te+E-S]&255}},a.decode._decodePanasonic=function(o,l,f,u,m,v){var b=l.buffer,P=o.t2[0],F=o.t3[0],C=o.t10[0],D=o.t45[0],E=0,k=0,j=0,W=0,M=D==6?new Uint32Array(18):new Uint8Array(16),S,T,V,_=[0,0],ee=[0,0],re,te=0,oe,he,me,we,Se=new Uint8Array(16384),be=new Uint16Array(m.buffer);function le(ce){if(j==0){var ye=new Uint8Array(b,f+k+8184,8200),Ee=new Uint8Array(b,f+k,8184);Se.set(ye),Se.set(Ee,ye.length),k+=16384}if(D==5)for(S=0;S<16;S++)M[S]=Se[j++],j&=16383;else return j=j-ce&131071,W=j>>3^16368,(Se[W]|Se[W+1]<<8)>>(j&7)&~(-1<<ce)}function ae(ce){return Se[j+15-ce]}function ke(){M[0]=ae(0)<<6|ae(1)>>2,M[1]=((ae(1)&3)<<12|ae(2)<<4|ae(3)>>4)&16383,M[2]=ae(3)>>2&3,M[3]=(ae(3)&3)<<8|ae(4),M[4]=ae(5)<<2|ae(6)>>6,M[5]=(ae(6)&63)<<4|ae(7)>>4,M[6]=ae(7)>>2&3,M[7]=(ae(7)&3)<<8|ae(8),M[8]=ae(9)<<2&1020|ae(10)>>6,M[9]=(ae(10)<<4|ae(11)>>4)&1023,M[10]=ae(11)>>2&3,M[11]=(ae(11)&3)<<8|ae(12),M[12]=(ae(13)<<2&1020|ae(14)>>6)&1023,M[13]=(ae(14)<<4|ae(15)>>4)&1023,j+=16,W=0}function Ne(){M[0]=ae(0)<<4|ae(1)>>4,M[1]=((ae(1)&15)<<8|ae(2))&4095,M[2]=ae(3)>>6&3,M[3]=(ae(3)&63)<<2|ae(4)>>6,M[4]=(ae(4)&63)<<2|ae(5)>>6,M[5]=(ae(5)&63)<<2|ae(6)>>6,M[6]=ae(6)>>4&3,M[7]=(ae(6)&15)<<4|ae(7)>>4,M[8]=(ae(7)&15)<<4|ae(8)>>4,M[9]=(ae(8)&15)<<4|ae(9)>>4,M[10]=ae(9)>>2&3,M[11]=(ae(9)&3)<<6|ae(10)>>2,M[12]=(ae(10)&3)<<6|ae(11)>>2,M[13]=(ae(11)&3)<<6|ae(12)>>2,M[14]=ae(12)&3,M[15]=ae(13),M[16]=ae(14),M[17]=ae(15),j+=16,W=0}function de(){_[0]=0,_[1]=0,ee[0]=0,ee[1]=0}if(D==7)throw D;if(D==6){var $=C==12,ie=$?Ne:ke,U=$?14:11,L=$?128:512,J=$?2048:8192,se=$?16383:65535,ve=$?4095:16383,Z=P/U,I=Z*16,q=$?18:14;for(he=0;he<F-15;he+=16){var fe=Math.min(16,F-he),Ae=I*fe;for(Se=new Uint8Array(b,f+E,Ae),j=0,E+=Ae,we=0,me=0;we<fe;we++,me=0){te=(he+we)*P;for(var G=0;G<Z;G++)for(ie(),de(),V=0,oe=0,S=0;S<U;S++){if(re=S&1,S%3==2){var N=W<q?M[W++]:0;N==3&&(N=4),oe=L<<N,V=1<<N}var B=W<q?M[W++]:0;_[re]?(B*=V,oe<J&&ee[re]>oe&&(B+=ee[re]-oe),ee[re]=B):(_[re]=B,B?ee[re]=B:B=ee[re]),be[te+me++]=B-15<=se?B-15&se:B+2147483633>>31&ve}}}}else if(D==5){var H=C==12?10:9;for(he=0;he<F;he++)for(me=0;me<P;me+=H)le(0),C==12?(be[te++]=((M[1]&15)<<8)+M[0],be[te++]=16*M[2]+(M[1]>>4),be[te++]=((M[4]&15)<<8)+M[3],be[te++]=16*M[5]+(M[4]>>4),be[te++]=((M[7]&15)<<8)+M[6],be[te++]=16*M[8]+(M[7]>>4),be[te++]=((M[10]&15)<<8)+M[9],be[te++]=16*M[11]+(M[10]>>4),be[te++]=((M[13]&15)<<8)+M[12],be[te++]=16*M[14]+(M[13]>>4)):C==14&&(be[te++]=M[0]+((M[1]&63)<<8),be[te++]=(M[1]>>6)+4*M[2]+((M[3]&15)<<10),be[te++]=(M[3]>>4)+16*M[4]+((M[5]&3)<<12),be[te++]=((M[5]&252)>>2)+(M[6]<<6),be[te++]=M[7]+((M[8]&63)<<8),be[te++]=(M[8]>>6)+4*M[9]+((M[10]&15)<<10),be[te++]=(M[10]>>4)+16*M[11]+((M[12]&3)<<12),be[te++]=((M[12]&252)>>2)+(M[13]<<6),be[te++]=M[14]+((M[15]&63)<<8))}else if(D==4)for(he=0;he<F;he++)for(me=0;me<P;me++)S=me%14,re=S&1,S==0&&de(),S%3==2&&(V=4>>3-le(2)),ee[re]?(T=le(8),T!=0&&(_[re]-=128<<V,(_[re]<0||V==4)&&(_[re]&=~(-1<<V)),_[re]+=T<<V)):(ee[re]=le(8),(ee[re]||S>11)&&(_[re]=ee[re]<<4|le(4))),be[te++]=_[me&1];else throw D},a.decode._decodeVC5=function(){var o=[1,0,1,0,2,2,1,1,3,7,1,2,5,25,1,3,6,48,1,4,6,54,1,5,7,111,1,8,7,99,1,6,7,105,12,0,7,107,1,7,8,209,20,0,8,212,1,9,8,220,1,10,9,393,1,11,9,394,32,0,9,416,1,12,9,427,1,13,10,887,1,18,10,784,1,14,10,790,1,15,10,835,60,0,10,852,1,16,10,885,1,17,11,1571,1,19,11,1668,1,20,11,1669,100,0,11,1707,1,21,11,1772,1,22,12,3547,1,29,12,3164,1,24,12,3166,1,25,12,3140,1,23,12,3413,1,26,12,3537,1,27,12,3539,1,28,13,7093,1,35,13,6283,1,30,13,6331,1,31,13,6335,180,0,13,6824,1,32,13,7072,1,33,13,7077,320,0,13,7076,1,34,14,12565,1,36,14,12661,1,37,14,12669,1,38,14,13651,1,39,14,14184,1,40,15,28295,1,46,15,28371,1,47,15,25320,1,42,15,25336,1,43,15,25128,1,41,15,27300,1,44,15,28293,1,45,16,50259,1,48,16,50643,1,49,16,50675,1,50,16,56740,1,53,16,56584,1,51,16,56588,1,52,17,113483,1,61,17,113482,1,60,17,101285,1,55,17,101349,1,56,17,109205,1,57,17,109207,1,58,17,100516,1,54,17,113171,1,59,18,202568,1,62,18,202696,1,63,18,218408,1,64,18,218412,1,65,18,226340,1,66,18,226356,1,67,18,226358,1,68,19,402068,1,69,19,405138,1,70,19,405394,1,71,19,436818,1,72,19,436826,1,73,19,452714,1,75,19,452718,1,76,19,452682,1,74,20,804138,1,77,20,810279,1,78,20,810790,1,79,20,873638,1,80,20,873654,1,81,20,905366,1,82,20,905430,1,83,20,905438,1,84,21,1608278,1,85,21,1620557,1,86,21,1621582,1,87,21,1621583,1,88,21,1747310,1,89,21,1810734,1,90,21,1810735,1,91,21,1810863,1,92,21,1810879,1,93,22,3621725,1,99,22,3621757,1,100,22,3241112,1,94,22,3494556,1,95,22,3494557,1,96,22,3494622,1,97,22,3494623,1,98,23,6482227,1,102,23,6433117,1,101,23,6989117,1,103,23,6989119,1,105,23,6989118,1,104,23,7243449,1,106,23,7243512,1,107,24,13978233,1,111,24,12964453,1,109,24,12866232,1,108,24,14486897,1,113,24,13978232,1,110,24,14486896,1,112,24,14487026,1,114,24,14487027,1,115,25,25732598,1,225,25,25732597,1,189,25,25732596,1,188,25,25732595,1,203,25,25732594,1,202,25,25732593,1,197,25,25732592,1,207,25,25732591,1,169,25,25732590,1,223,25,25732589,1,159,25,25732522,1,235,25,25732579,1,152,25,25732575,1,192,25,25732489,1,179,25,25732573,1,201,25,25732472,1,172,25,25732576,1,149,25,25732488,1,178,25,25732566,1,120,25,25732571,1,219,25,25732577,1,150,25,25732487,1,127,25,25732506,1,211,25,25732548,1,125,25,25732588,1,158,25,25732486,1,247,25,25732467,1,238,25,25732508,1,163,25,25732552,1,228,25,25732603,1,183,25,25732513,1,217,25,25732587,1,168,25,25732520,1,122,25,25732484,1,128,25,25732562,1,249,25,25732505,1,187,25,25732504,1,186,25,25732483,1,136,25,25928905,1,181,25,25732560,1,255,25,25732500,1,230,25,25732482,1,135,25,25732555,1,233,25,25732568,1,222,25,25732583,1,145,25,25732481,1,134,25,25732586,1,167,25,25732521,1,248,25,25732518,1,209,25,25732480,1,243,25,25732512,1,216,25,25732509,1,164,25,25732547,1,140,25,25732479,1,157,25,25732544,1,239,25,25732574,1,191,25,25732564,1,251,25,25732478,1,156,25,25732546,1,139,25,25732498,1,242,25,25732557,1,133,25,25732477,1,162,25,25732515,1,213,25,25732584,1,165,25,25732514,1,212,25,25732476,1,227,25,25732494,1,198,25,25732531,1,236,25,25732530,1,234,25,25732529,1,117,25,25732528,1,215,25,25732527,1,124,25,25732526,1,123,25,25732525,1,254,25,25732524,1,253,25,25732523,1,148,25,25732570,1,218,25,25732580,1,146,25,25732581,1,147,25,25732569,1,224,25,25732533,1,143,25,25732540,1,184,25,25732541,1,185,25,25732585,1,166,25,25732556,1,132,25,25732485,1,129,25,25732563,1,250,25,25732578,1,151,25,25732501,1,119,25,25732502,1,193,25,25732536,1,176,25,25732496,1,245,25,25732553,1,229,25,25732516,1,206,25,25732582,1,144,25,25732517,1,208,25,25732558,1,137,25,25732543,1,241,25,25732466,1,237,25,25732507,1,190,25,25732542,1,240,25,25732551,1,131,25,25732554,1,232,25,25732565,1,252,25,25732475,1,171,25,25732493,1,205,25,25732492,1,204,25,25732491,1,118,25,25732490,1,214,25,25928904,1,180,25,25732549,1,126,25,25732602,1,182,25,25732539,1,175,25,25732545,1,141,25,25732559,1,138,25,25732537,1,177,25,25732534,1,153,25,25732503,1,194,25,25732606,1,160,25,25732567,1,121,25,25732538,1,174,25,25732497,1,246,25,25732550,1,130,25,25732572,1,200,25,25732474,1,170,25,25732511,1,221,25,25732601,1,196,25,25732532,1,142,25,25732519,1,210,25,25732495,1,199,25,25732605,1,155,25,25732535,1,154,25,25732499,1,244,25,25732510,1,220,25,25732600,1,195,25,25732607,1,161,25,25732604,1,231,25,25732473,1,173,25,25732599,1,226,26,51465122,1,116,26,51465123,0,1],l,f,u,m=[3,3,3,3,2,2,2,1,1,1],v=24576,b=16384,P=8192,F=b|P;function C(V){var _=V[1],ee=V[0][_>>>3]>>>7-(_&7)&1;return V[1]++,ee}function D(V,_){if(l==null){l={};for(var ee=0;ee<o.length;ee+=4)l[o[ee+1]]=o.slice(ee,ee+4)}for(var re=C(V),te=l[re];te==null;)re=re<<1|C(V),te=l[re];var oe=te[3];oe!=0&&(oe=C(V)==0?oe:-oe),_[0]=te[2],_[1]=oe}function E(V,_){for(var ee=0;ee<_;ee++)(V&1)==1&&V++,V=V>>>1;return V}function k(V,_){return V>>_}function j(V,_,ee,re,te,oe){_[ee]=k(k(11*V[te]-4*V[te+oe]+V[te+oe+oe]+4,3)+V[re],1),_[ee+oe]=k(k(5*V[te]+4*V[te+oe]-V[te+oe+oe]+4,3)-V[re],1)}function W(V,_,ee,re,te,oe){var he=V[te-oe]-V[te+oe],me=V[te],we=V[re];_[ee]=k(k(he+4,3)+me+we,1),_[ee+oe]=k(k(-he+4,3)+me-we,1)}function M(V,_,ee,re,te,oe){_[ee]=k(k(5*V[te]+4*V[te-oe]-V[te-oe-oe]+4,3)+V[re],1),_[ee+oe]=k(k(11*V[te]-4*V[te-oe]+V[te-oe-oe]+4,3)-V[re],1)}function S(V){return V=V<0?0:V>4095?4095:V,V=u[V]>>>2,V}function T(V,_,ee,re,te,oe){re=new Uint16Array(re.buffer);var he=Date.now(),me=a._binBE,we=_+ee,Se,be,le,ae,ke,Ne,de,$,ie,U;_+=4;for(var L=oe[0]==1;_<we;){var J=me.readShort(V,_),se=me.readUshort(V,_+2);if(_+=4,J==12)Se=se;else if(J==20)be=se;else if(J==21)le=se;else if(J==48)ae=se;else if(J==53)ke=se;else if(J!=35){if(J==62)Ne=se;else if(J!=101){if(J==109)de=se;else if(J!=84){if(J!=106){if(J!=107){if(J!=108){if(J!=102){if(J==104)$=se;else if(J!=105){var ve=J<0?-J:J,Z=ve&65280,I=0;if(ve&F&&(ve&P?(I=se&65535,I+=(ve&255)<<16):I=se&65535),(ve&v)==v){if(ie==null){ie=[];for(var q=0;q<4;q++)ie[q]=new Int16Array((be>>>1)*(le>>>1));U=new Int16Array((be>>>1)*(le>>>1)),f=new Int16Array(1024);for(var q=0;q<1024;q++){var fe=q-512,Ae=Math.abs(fe),Se=Math.floor(768*Ae*Ae*Ae/(255*255*255))+Ae;f[q]=Math.sign(fe)*Se}u=new Uint16Array(4096);for(var G=65535,q=0;q<4096;q++){var N=q,B=G*(Math.pow(113,N/4095)-1)/112;u[q]=Math.min(B,G)}}var H=ie[Ne],ce=E(be,1+m[ae]),ye=E(le,1+m[ae]);if(ae==0)for(var Ee=0;Ee<ye;Ee++)for(var Ce=0;Ce<ce;Ce++){var ge=_+(Ee*ce+Ce)*2;H[Ee*(be>>>1)+Ce]=V[ge]<<8|V[ge+1]}else{for(var xe=[V,_*8],Fe=[],Re=0,Oe=ce*ye,Me=[0,0],Q=0,se=0;Re<Oe;)for(D(xe,Me),Q=Me[0],se=Me[1];Q>0;)Fe[Re++]=se,Q--;for(var A=(ae-1)%3,O=A!=1?ce:0,X=A!=0?ye:0,Ee=0;Ee<ye;Ee++)for(var pe=(Ee+X)*(be>>>1)+O,ne=Ee*ce,Ce=0;Ce<ce;Ce++)H[pe+Ce]=f[Fe[ne+Ce]+512]*ke;if(A==2){for(var $=be>>>1,Pe=ce*2,K=ye*2,Ee=0;Ee<ye;Ee++)for(var Ce=0;Ce<Pe;Ce++){var q=Ee*2*$+Ce,Be=Ee*$+Ce,De=ye*$+Be;Ee==0?j(H,U,q,De,Be,$):Ee==ye-1?M(H,U,q,De,Be,$):W(H,U,q,De,Be,$)}var z=H;H=U,U=z;for(var Ee=0;Ee<K;Ee++)for(var Ce=0;Ce<ce;Ce++){var q=Ee*$+2*Ce,Be=Ee*$+Ce,De=ce+Be;Ce==0?j(H,U,q,De,Be,1):Ce==ce-1?M(H,U,q,De,Be,1):W(H,U,q,De,Be,1)}var z=H;H=U,U=z;for(var Te=[],He=2-~~((ae-1)/3),ue=0;ue<3;ue++)Te[ue]=de>>14-ue*2&3;var Ie=Te[He];if(Ie!=0)for(var Ee=0;Ee<K;Ee++)for(var Ce=0;Ce<Pe;Ce++){var q=Ee*$+Ce;H[q]=H[q]<<Ie}}}if(ae==9&&Ne==3)for(var ze=ie[0],Ge=ie[1],Ve=ie[2],je=ie[3],Ee=0;Ee<le;Ee+=2)for(var Ce=0;Ce<be;Ce+=2){var Le=Ee*be+Ce,ge=(Ee>>>1)*(be>>>1)+(Ce>>>1),Ke=ze[ge],Ze=Ge[ge]-2048,qe=Ve[ge]-2048,Ye=je[ge]-2048,We=(Ze<<1)+Ke,Xe=(qe<<1)+Ke,tt=Ke+Ye,rt=Ke-Ye;L?(re[Le]=S(tt),re[Le+1]=S(Xe),re[Le+be]=S(We),re[Le+be+1]=S(rt)):(re[Le]=S(We),re[Le+1]=S(tt),re[Le+be]=S(rt),re[Le+be+1]=S(Xe))}_+=I*4}else if(ve==16388)_+=I*4;else if(!(Z==8192||Z==8448||Z==9216))throw ve.toString(16)}}}}}}}}}console.log(Date.now()-he)}return T}(),a.decode._decodeLogLuv32=function(o,l,f,u,m,v){for(var b=o.width,P=b*4,F=0,C=new Uint8Array(P);F<u;){for(var D=0;D<P;){var E=l[f+F];if(F++,E<128){for(var k=0;k<E;k++)C[D+k]=l[f+F+k];D+=E,F+=E}else{E=E-126;for(var k=0;k<E;k++)C[D+k]=l[f+F];D+=E,F++}}for(var j=0;j<b;j++)m[v+0]=C[j],m[v+1]=C[j+b],m[v+2]=C[j+b*2],m[v+4]=C[j+b*3],v+=6}},a.decode._ljpeg_diff=function(o,l,f){var u=a.decode._getbithuff,m,v;return m=u(o,l,f[0],f),v=u(o,l,m,0),v&1<<m-1||(v-=(1<<m)-1),v},a.decode._decodeARW=function(o,l,f,u,m,v){var b=o.t256[0],P=o.t257[0],F=o.t258[0],C=o.isLE?a._binLE:a._binBE,D=b*P==u||b*P*1.5==u;if(!D){P+=8;var E=[f,0,0,0],k=new Uint16Array(32770),j=[3857,3856,3599,3342,3085,2828,2571,2314,2057,1800,1543,1286,1029,772,771,768,514,513],de,W,M,me,he,S=0,T=a.decode._ljpeg_diff;for(k[0]=15,M=de=0;de<18;de++)for(var V=32768>>>(j[de]>>>8),W=0;W<V;W++)k[++M]=j[de];for(me=b;me--;)for(he=0;he<P+1;he+=2)if(he==P&&(he=1),S+=T(l,E,k),he<P){var _=S&4095;a.decode._putsF(m,(he*b+me)*F,_<<16-F)}return}if(b*P*1.5==u){for(var de=0;de<u;de+=3){var ee=l[f+de+0],re=l[f+de+1],te=l[f+de+2];m[v+de]=re<<4|ee>>>4,m[v+de+1]=ee<<4|te>>>4,m[v+de+2]=te<<4|re>>>4}return}var oe=new Uint16Array(16),he,me,we,Se,be,le,ae,ke,Ne,de,$,ie=new Uint8Array(b+1);for(he=0;he<P;he++){for(var U=0;U<b;U++)ie[U]=l[f++];for($=0,me=0;me<b-30;$+=16){for(Se=2047&(we=C.readUint(ie,$)),be=2047&we>>>11,le=15&we>>>22,ae=15&we>>>26,ke=0;ke<4&&128<<ke<=Se-be;ke++);for(Ne=30,de=0;de<16;de++)de==le?oe[de]=Se:de==ae?oe[de]=be:(oe[de]=((C.readUshort(ie,$+(Ne>>3))>>>(Ne&7)&127)<<ke)+be,oe[de]>2047&&(oe[de]=2047),Ne+=7);for(de=0;de<16;de++,me+=2){var _=oe[de]<<1;a.decode._putsF(m,(he*b+me)*F,_<<16-F)}me-=me&1?1:31}}},a.decode._decodeNikon=function(o,l,f,u,m,v,b){var P=[[0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,5,4,3,6,2,7,1,0,8,9,11,10,12],[0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,57,90,56,39,22,5,4,3,2,1,0,11,12,12],[0,0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,5,4,6,3,7,2,8,1,9,0,10,11,12],[0,0,1,4,3,1,1,1,1,1,2,0,0,0,0,0,0,5,6,4,7,8,3,9,2,1,0,10,11,12,13,14],[0,0,1,5,1,1,1,1,1,1,1,2,0,0,0,0,0,8,92,75,58,41,7,6,5,4,3,2,1,0,13,14],[0,0,1,4,2,2,3,1,2,0,0,0,0,0,0,0,0,7,6,8,5,9,4,10,3,11,12,2,0,1,13,14]],F=o.t256[0],C=o.t257[0],D=o.t258[0],E=0,k=0,j=a.decode._make_decoder,W=a.decode._getbithuff,M=l[0].exifIFD.makerNote,S=M.t150?M.t150:M.t140,T=0,V=S[T++],_=S[T++];(V==73||_==88)&&(T+=2110),V==70&&(E=2),D==14&&(E+=3);for(var ee=[[0,0],[0,0]],re=o.isLE?a._binLE:a._binBE,we=0;we<2;we++)for(var te=0;te<2;te++)ee[we][te]=re.readShort(S,T),T+=2;var oe=1<<D&32767,he=0,me=re.readShort(S,T);T+=2,me>1&&(he=Math.floor(oe/(me-1))),V==68&&_==32&&he>0&&(k=re.readShort(S,562));var we,Se,be,le,ae,ke,Ne=[0,0],de=j(P[E]),$=[u,0,0,0];for(Se=0;Se<C;Se++)for(k&&Se==k&&(de=j(P[E+1])),be=0;be<F;be++){we=W(f,$,de[0],de),le=we&15,ae=we>>>4,ke=(W(f,$,le-ae,0)<<1)+1<<ae>>>1,ke&1<<le-1||(ke-=(1<<le)-(ae==0?1:0)),be<2?Ne[be]=ee[Se&1][be]+=ke:Ne[be&1]+=ke;var ie=Math.min(Math.max(Ne[be&1],0),(1<<D)-1),U=(Se*F+be)*D;a.decode._putsF(v,U,ie<<16-D)}},a.decode._putsF=function(o,l,f){f=f<<8-(l&7);var u=l>>>3;o[u]|=f>>>16,o[u+1]|=f>>>8,o[u+2]|=f},a.decode._getbithuff=function(o,l,f,u){var m=0;a.decode._get_byte;var v,b=l[0],P=l[1],F=l[2],C=l[3];if(f==0||F<0)return 0;for(;!C&&F<f&&(v=o[b++])!=-1&&!(C=m);)P=(P<<8)+v,F+=8;if(v=P<<32-F>>>32-f,u?(F-=u[v+1]>>>8,v=u[v+1]&255):F-=f,F<0)throw"e";return l[0]=b,l[1]=P,l[2]=F,l[3]=C,v},a.decode._make_decoder=function(o){var l,f,u,m,v,b=[];for(l=16;l!=0&&!o[l];l--);var P=17;for(b[0]=l,u=f=1;f<=l;f++)for(m=0;m<o[f];m++,++P)for(v=0;v<1<<l-f;v++)u<=1<<l&&(b[u++]=f<<8|o[P]);return b},a.decode._decodeNewJPEG=function(o,l,f,u,m,v){u=Math.min(u,l.length-f);var b=o.t347,P=b?b.length:0,F=new Uint8Array(P+u);if(b){for(var C=216,D=217,E=0,k=0;k<P-1&&!(b[k]==255&&b[k+1]==D);k++)F[E++]=b[k];var j=l[f],W=l[f+1];(j!=255||W!=C)&&(F[E++]=j,F[E++]=W);for(var k=2;k<u;k++)F[E++]=l[f+k]}else for(var k=0;k<u;k++)F[k]=l[f+k];if(o.t262[0]==32803||o.t259[0]==7&&o.t262[0]==34892){var M=o.t258[0],S=a.LosslessJpegDecode(F),T=S.length;if(M==16)if(o.isLE)for(var k=0;k<T;k++)m[v+(k<<1)]=S[k]&255,m[v+(k<<1)+1]=S[k]>>>8;else for(var k=0;k<T;k++)m[v+(k<<1)]=S[k]>>>8,m[v+(k<<1)+1]=S[k]&255;else if(M==14||M==12||M==10)for(var V=16-M,k=0;k<T;k++)a.decode._putsF(m,k*M,S[k]<<V);else if(M==8)for(var k=0;k<T;k++)m[v+k]=S[k];else throw new Error("unsupported bit depth "+M)}else{var _=new a.JpegDecoder;_.parse(F);for(var ee=_.getData({width:_.width,height:_.height,forceRGB:!0,isSourcePDF:!1}),k=0;k<ee.length;k++)m[v+k]=ee[k]}o.t262[0]==6&&(o.t262[0]=2)},a.decode._decodeOldJPEGInit=function(o,l,f,u){var m=216,v=219,b=196,P=221,F=192,C=218,D=0,E=0,k,j,W=!1,M,S,T,V=o.t513,_=V?V[0]:0,ee=o.t514,re=ee?ee[0]:0,te=o.t324||o.t273||V,oe=o.t530,he=0,me=0,we=o.t277?o.t277[0]:1,Se=o.t515;if(te&&(E=te[0],W=te.length>1),!W){if(l[f]==255&&l[f+1]==m)return{jpegOffset:f};if(V!=null&&(l[f+_]==255&&l[f+_+1]==m?D=f+_:n("JPEGInterchangeFormat does not point to SOI"),ee==null?n("JPEGInterchangeFormatLength field is missing"):(_>=E||_+re<=E)&&n("JPEGInterchangeFormatLength field value is invalid"),D!=null))return{jpegOffset:D}}if(oe!=null&&(he=oe[0],me=oe[1]),V!=null&&ee!=null)if(re>=2&&_+re<=E){for(l[f+_+re-2]==255&&l[f+_+re-1]==m?k=new Uint8Array(re-2):k=new Uint8Array(re),M=0;M<k.length;M++)k[M]=l[f+_+M];n("Incorrect JPEG interchange format: using JPEGInterchangeFormat offset to derive tables")}else n("JPEGInterchangeFormat+JPEGInterchangeFormatLength > offset to first strip or tile");if(k==null){var be=0,le=[];le[be++]=255,le[be++]=m;var ae=o.t519;if(ae==null)throw new Error("JPEGQTables tag is missing");for(M=0;M<ae.length;M++)for(le[be++]=255,le[be++]=v,le[be++]=0,le[be++]=67,le[be++]=M,S=0;S<64;S++)le[be++]=l[f+ae[M]+S];for(T=0;T<2;T++){var ke=o[T==0?"t520":"t521"];if(ke==null)throw new Error((T==0?"JPEGDCTables":"JPEGACTables")+" tag is missing");for(M=0;M<ke.length;M++){le[be++]=255,le[be++]=b;var Ne=19;for(S=0;S<16;S++)Ne+=l[f+ke[M]+S];for(le[be++]=Ne>>>8,le[be++]=Ne&255,le[be++]=M|T<<4,S=0;S<16;S++)le[be++]=l[f+ke[M]+S];for(S=0;S<Ne;S++)le[be++]=l[f+ke[M]+16+S]}}if(le[be++]=255,le[be++]=F,le[be++]=0,le[be++]=8+3*we,le[be++]=8,le[be++]=o.height>>>8&255,le[be++]=o.height&255,le[be++]=o.width>>>8&255,le[be++]=o.width&255,le[be++]=we,we==1)le[be++]=1,le[be++]=17,le[be++]=0;else for(M=0;M<3;M++)le[be++]=M+1,le[be++]=M!=0?17:(he&15)<<4|me&15,le[be++]=M;Se!=null&&Se[0]!=0&&(le[be++]=255,le[be++]=P,le[be++]=0,le[be++]=4,le[be++]=Se[0]>>>8&255,le[be++]=Se[0]&255),k=new Uint8Array(le)}var de=-1;for(M=0;M<k.length-1;){if(k[M]==255&&k[M+1]==F){de=M;break}M++}if(de==-1){var $=new Uint8Array(k.length+10+3*we);$.set(k);var ie=k.length;if(de=k.length,k=$,k[ie++]=255,k[ie++]=F,k[ie++]=0,k[ie++]=8+3*we,k[ie++]=8,k[ie++]=o.height>>>8&255,k[ie++]=o.height&255,k[ie++]=o.width>>>8&255,k[ie++]=o.width&255,k[ie++]=we,we==1)k[ie++]=1,k[ie++]=17,k[ie++]=0;else for(M=0;M<3;M++)k[ie++]=M+1,k[ie++]=M!=0?17:(he&15)<<4|me&15,k[ie++]=M}if(l[E]==255&&l[E+1]==C){var U=l[E+2]<<8|l[E+3];for(j=new Uint8Array(U+2),j[0]=l[E],j[1]=l[E+1],j[2]=l[E+2],j[3]=l[E+3],M=0;M<U-2;M++)j[M+4]=l[E+M+4]}else{j=new Uint8Array(8+2*we);var L=0;if(j[L++]=255,j[L++]=C,j[L++]=0,j[L++]=6+2*we,j[L++]=we,we==1)j[L++]=1,j[L++]=0;else for(M=0;M<3;M++)j[L++]=M+1,j[L++]=M<<4|M;j[L++]=0,j[L++]=63,j[L++]=0}return{jpegOffset:f,tables:k,sosMarker:j,sofPosition:de}},a.decode._decodeOldJPEG=function(o,l,f,u,m,v){var b,P,F,C,D,E=a.decode._decodeOldJPEGInit(o,l,f,u);if(E.jpegOffset!=null)for(P=f+u-E.jpegOffset,C=new Uint8Array(P),b=0;b<P;b++)C[b]=l[E.jpegOffset+b];else{for(F=E.tables.length,C=new Uint8Array(F+E.sosMarker.length+u+2),C.set(E.tables),D=F,C[E.sofPosition+5]=o.height>>>8&255,C[E.sofPosition+6]=o.height&255,C[E.sofPosition+7]=o.width>>>8&255,C[E.sofPosition+8]=o.width&255,(l[f]!=255||l[f+1]!=SOS)&&(C.set(E.sosMarker,D),D+=sosMarker.length),b=0;b<u;b++)C[D++]=l[f+b];C[D++]=255,C[D++]=EOI}var k=new a.JpegDecoder;k.parse(C);for(var j=k.getData({width:k.width,height:k.height,forceRGB:!0,isSourcePDF:!1}),b=0;b<j.length;b++)m[v+b]=j[b];o.t262&&o.t262[0]==6&&(o.t262[0]=2)},a.decode._decodePackBits=function(o,l,f,u,m){for(var v=new Int8Array(o.buffer),b=new Int8Array(u.buffer),P=l+f;l<P;){var F=v[l];if(l++,F>=0&&F<128)for(var C=0;C<F+1;C++)b[m]=v[l],m++,l++;if(F>=-127&&F<0){for(var C=0;C<-F+1;C++)b[m]=v[l],m++;l++}}return m},a.decode._decodeThunder=function(o,l,f,u,m){for(var v=[0,1,0,-1],b=[0,1,2,3,0,-3,-2,-1],P=l+f,F=m*2,C=0;l<P;){var D=o[l],E=D>>>6,k=D&63;if(l++,E==3&&(C=k&15,u[F>>>1]|=C<<4*(1-F&1),F++),E==0)for(var j=0;j<k;j++)u[F>>>1]|=C<<4*(1-F&1),F++;if(E==2)for(var j=0;j<2;j++){var W=k>>>3*(1-j)&7;W!=4&&(C+=b[W],u[F>>>1]|=C<<4*(1-F&1),F++)}if(E==1)for(var j=0;j<3;j++){var W=k>>>2*(2-j)&3;W!=2&&(C+=v[W],u[F>>>1]|=C<<4*(1-F&1),F++)}}},a.decode._dmap={1:0,"011":1,"000011":2,"0000011":3,"010":-1,"000010":-2,"0000010":-3},a.decode._lens=function(){var o=function(F,C,D,E){for(var k=0;k<C.length;k++)F[C[k]]=D+k*E},l="00110101,000111,0111,1000,1011,1100,1110,1111,10011,10100,00111,01000,001000,000011,110100,110101,101010,101011,0100111,0001100,0001000,0010111,0000011,0000100,0101000,0101011,0010011,0100100,0011000,00000010,00000011,00011010,00011011,00010010,00010011,00010100,00010101,00010110,00010111,00101000,00101001,00101010,00101011,00101100,00101101,00000100,00000101,00001010,00001011,01010010,01010011,01010100,01010101,00100100,00100101,01011000,01011001,01011010,01011011,01001010,01001011,00110010,00110011,00110100",f="0000110111,010,11,10,011,0011,0010,00011,000101,000100,0000100,0000101,0000111,00000100,00000111,000011000,0000010111,0000011000,0000001000,00001100111,00001101000,00001101100,00000110111,00000101000,00000010111,00000011000,000011001010,000011001011,000011001100,000011001101,000001101000,000001101001,000001101010,000001101011,000011010010,000011010011,000011010100,000011010101,000011010110,000011010111,000001101100,000001101101,000011011010,000011011011,000001010100,000001010101,000001010110,000001010111,000001100100,000001100101,000001010010,000001010011,000000100100,000000110111,000000111000,000000100111,000000101000,000001011000,000001011001,000000101011,000000101100,000001011010,000001100110,000001100111",u="11011,10010,010111,0110111,00110110,00110111,01100100,01100101,01101000,01100111,011001100,011001101,011010010,011010011,011010100,011010101,011010110,011010111,011011000,011011001,011011010,011011011,010011000,010011001,010011010,011000,010011011",m="0000001111,000011001000,000011001001,000001011011,000000110011,000000110100,000000110101,0000001101100,0000001101101,0000001001010,0000001001011,0000001001100,0000001001101,0000001110010,0000001110011,0000001110100,0000001110101,0000001110110,0000001110111,0000001010010,0000001010011,0000001010100,0000001010101,0000001011010,0000001011011,0000001100100,0000001100101",v="00000001000,00000001100,00000001101,000000010010,000000010011,000000010100,000000010101,000000010110,000000010111,000000011100,000000011101,000000011110,000000011111";l=l.split(","),f=f.split(","),u=u.split(","),m=m.split(","),v=v.split(",");var b={},P={};return o(b,l,0,1),o(b,u,64,64),o(b,v,1792,64),o(P,f,0,1),o(P,m,64,64),o(P,v,1792,64),[b,P]}(),a.decode._decodeG4=function(o,l,f,u,m,v,b){for(var P=a.decode,F=l<<3,C=0,D="",E=[],k=[],j=0;j<v;j++)k.push(0);k=P._makeDiff(k);for(var W=0,M=0,S=0,T=0,V=0,_=0,ee="",re=0,te=Math.ceil(v/8)*8;F>>>3<l+f;){S=P._findDiff(k,W+(W==0?0:1),1-V),T=P._findDiff(k,S,V);var oe=0;if(b==1&&(oe=o[F>>>3]>>>7-(F&7)&1),b==2&&(oe=o[F>>>3]>>>(F&7)&1),F++,D+=oe,ee=="H"){if(P._lens[V][D]!=null){var he=P._lens[V][D];D="",C+=he,he<64&&(P._addNtimes(E,C,V),W+=C,V=1-V,C=0,re--,re==0&&(ee=""))}}else D=="0001"&&(D="",P._addNtimes(E,T-W,V),W=T),D=="001"&&(D="",ee="H",re=2),P._dmap[D]!=null&&(M=S+P._dmap[D],P._addNtimes(E,M-W,V),W=M,D="",V=1-V);E.length==v&&ee==""&&(P._writeBits(E,u,m*8+_*te),V=0,_++,W=0,k=P._makeDiff(E),E=[])}},a.decode._findDiff=function(o,l,f){for(var u=0;u<o.length;u+=2)if(o[u]>=l&&o[u+1]==f)return o[u]},a.decode._makeDiff=function(o){var l=[];o[0]==1&&l.push(0,1);for(var f=1;f<o.length;f++)o[f-1]!=o[f]&&l.push(f,o[f]);return l.push(o.length,0,o.length,1),l},a.decode._decodeG2=function(o,l,f,u,m,v,b){for(var P=a.decode,F=l<<3,C=0,D="",E=[],k=0,j=0,W=Math.ceil(v/8)*8;F>>>3<l+f;){var M=0;b==1&&(M=o[F>>>3]>>>7-(F&7)&1),b==2&&(M=o[F>>>3]>>>(F&7)&1),F++,D+=M,C=P._lens[k][D],C!=null&&(P._addNtimes(E,C,k),D="",C<64&&(k=1-k),E.length==v&&(P._writeBits(E,u,m*8+j*W),E=[],j++,k=0,F&7&&(F+=8-(F&7)),C>=64&&(F+=8)))}},a.decode._decodeG3=function(o,l,f,u,m,v,b,P){for(var F=a.decode,C=l<<3,D=0,E="",k=[],j=[],W=0;W<v;W++)k.push(0);for(var M=0,S=0,T=0,V=0,_=0,ee=-1,re="",te=0,oe=!0,he=Math.ceil(v/8)*8;C>>>3<l+f;){T=F._findDiff(j,M+(M==0?0:1),1-_),V=F._findDiff(j,T,_);var me=0;if(b==1&&(me=o[C>>>3]>>>7-(C&7)&1),b==2&&(me=o[C>>>3]>>>(C&7)&1),C++,E+=me,oe){if(F._lens[_][E]!=null){var we=F._lens[_][E];E="",D+=we,we<64&&(F._addNtimes(k,D,_),_=1-_,D=0)}}else if(re=="H"){if(F._lens[_][E]!=null){var we=F._lens[_][E];E="",D+=we,we<64&&(F._addNtimes(k,D,_),M+=D,_=1-_,D=0,te--,te==0&&(re=""))}}else E=="0001"&&(E="",F._addNtimes(k,V-M,_),M=V),E=="001"&&(E="",re="H",te=2),F._dmap[E]!=null&&(S=T+F._dmap[E],F._addNtimes(k,S-M,_),M=S,E="",_=1-_);E.endsWith("000000000001")&&(ee>=0&&F._writeBits(k,u,m*8+ee*he),P&&(b==1&&(oe=(o[C>>>3]>>>7-(C&7)&1)==1),b==2&&(oe=(o[C>>>3]>>>(C&7)&1)==1),C++),E="",_=0,ee++,M=0,j=F._makeDiff(k),k=[])}k.length==v&&F._writeBits(k,u,m*8+ee*he)},a.decode._addNtimes=function(o,l,f){for(var u=0;u<l;u++)o.push(f)},a.decode._writeBits=function(o,l,f){for(var u=0;u<o.length;u++)l[f+u>>>3]|=o[u]<<7-(f+u&7)},a.decode._decodeLZW=a.decode._decodeLZW=function(){var o,l,f,u,m=0,v=0,b=0,P=0,F=function(){var S=o>>>3,T=l[S]<<16|l[S+1]<<8|l[S+2],V=T>>>24-(o&7)-v&(1<<v)-1;return o+=v,V},C=new Uint32Array(4096*4),D=0,E=function(S){if(S!=D){D=S,b=1<<S,P=b+1;for(var T=0;T<P+1;T++)C[4*T]=C[4*T+3]=T,C[4*T+1]=65535,C[4*T+2]=1}},k=function(S){v=S+1,m=P+1},j=function(S){for(var T=S<<2,V=C[T+2],_=u+V-1;T!=65535;)f[_--]=C[T],T=C[T+1];u+=V},W=function(S,T){var V=m<<2,_=S<<2;C[V]=C[(T<<2)+3],C[V+1]=_,C[V+2]=C[_+2]+1,C[V+3]=C[_+3],m++,m+1==1<<v&&v!=12&&v++},M=function(S,T,V,_,ee,re){o=T<<3,l=S,f=_,u=ee;var te=T+V<<3,oe=0,he=0;for(E(re),k(re);o<te&&(oe=F())!=P;){if(oe==b){if(k(re),oe=F(),oe==P)break;j(oe)}else oe<m?(j(oe),W(he,oe)):(W(he,he),j(m-1));he=oe}return u};return M}(),a.tags={},a._types=function(){var o=new Array(250);o.fill(0),o=o.concat([0,0,0,0,4,3,3,3,3,3,0,0,3,0,0,0,3,0,0,2,2,2,2,4,3,0,0,3,4,4,3,3,5,5,3,2,5,5,0,0,0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,2,3,5,5,3,0,3,3,4,4,4,3,4,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);var l={33432:2,33434:5,33437:5,34665:4,34850:3,34853:4,34855:3,34864:3,34866:4,36864:7,36867:2,36868:2,37121:7,37377:10,37378:5,37380:10,37381:5,37383:3,37384:3,37385:3,37386:5,37510:7,37520:2,37521:2,37522:2,40960:7,40961:3,40962:4,40963:4,40965:4,41486:5,41487:5,41488:3,41985:3,41986:3,41987:3,41988:5,41989:3,41990:3,41993:3,41994:3,41995:7,41996:3,42032:2,42033:2,42034:5,42036:2,42037:2,59932:7};return{basic:{main:o,rest:l},gps:{main:[1,2,5,2,5,1,5,5,0,9],rest:{18:2,29:2}}}}(),a._readIFD=function(o,l,f,u,m,v){var b=o.readUshort(l,f);f+=2;var P={};v.debug&&n("   ".repeat(m),u.length-1,">>>----------------");for(var F=0;F<b;F++){var C=o.readUshort(l,f);f+=2;var D=o.readUshort(l,f);f+=2;var E=o.readUint(l,f);f+=4;var k=o.readUint(l,f);f+=4;var j=[];if(D==1||D==7){var W=E<5?f-4:k;W+E>l.buffer.byteLength&&(E=l.buffer.byteLength-W),j=new Uint8Array(l.buffer,W,E)}if(D==2){var M=E<5?f-4:k,S=l[M],T=Math.max(0,Math.min(E-1,l.length-M));S<128||T==0?j.push(o.readASCII(l,M,T)):j=new Uint8Array(l.buffer,M,T)}if(D==3)for(var V=0;V<E;V++)j.push(o.readUshort(l,(E<3?f-4:k)+2*V));if(D==4||D==13)for(var V=0;V<E;V++)j.push(o.readUint(l,(E<2?f-4:k)+4*V));if(D==5||D==10)for(var _=D==5?o.readUint:o.readInt,V=0;V<E;V++)j.push([_(l,k+V*8),_(l,k+V*8+4)]);if(D==8)for(var V=0;V<E;V++)j.push(o.readShort(l,(E<3?f-4:k)+2*V));if(D==9)for(var V=0;V<E;V++)j.push(o.readInt(l,(E<2?f-4:k)+4*V));if(D==11)for(var V=0;V<E;V++)j.push(o.readFloat(l,k+V*4));if(D==12)for(var V=0;V<E;V++)j.push(o.readDouble(l,k+V*8));if(E!=0&&j.length==0){if(n(C,"unknown TIFF tag type: ",D,"num:",E),F==0)return;continue}if(v.debug&&n("   ".repeat(m),C,D,a.tags[C],j),P["t"+C]=j,!(C==330&&P.t272&&P.t272[0]=="DSLR-A100")){if(C==330||C==34665||C==34853||C==50740&&o.readUshort(l,o.readUint(j,0))<300||C==61440){for(var ee=C==50740?[o.readUint(j,0)]:j,re=[],V=0;V<ee.length;V++)a._readIFD(o,l,ee[V],re,m+1,v);C==330&&(P.subIFD=re),C==34665&&(P.exifIFD=re[0]),C==34853&&(P.gpsiIFD=re[0]),C==50740&&(P.dngPrvt=re[0]),C==61440&&(P.fujiIFD=re[0])}}if(C==37500&&v.parseMN){var te=j;if(o.readASCII(te,0,5)=="Nikon")P.makerNote=a.decode(te.slice(10).buffer)[0];else if(o.readASCII(te,0,5)=="OLYMP"||o.readASCII(te,0,9)=="OM SYSTEM"){var oe=[8208,8224,8240,8256,8272],he=[];a._readIFD(o,te,te[1]==77?16:te[5]==85?12:8,he,m+1,v);for(var me=P.makerNote=he.pop(),V=0;V<oe.length;V++){var we="t"+oe[V];me[we]!=null&&(a._readIFD(o,te,me[we][0],he,m+1,v),me[we]=he.pop())}me.t12288&&(a._readIFD(o,me.t12288,0,he,m+1,v),me.t12288=he.pop())}else if(o.readUshort(l,k)<300&&o.readUshort(l,k+4)<=12){var he=[];a._readIFD(o,l,k,he,m+1,v),P.makerNote=he[0]}}}return u.push(P),v.debug&&n("   ".repeat(m),"<<<---------------"),f},a._writeIFD=function(o,l,f,u,m){var v=Object.keys(m),b=v.length;m.exifIFD&&b--,m.gpsiIFD&&b--,o.writeUshort(f,u,b),u+=2;for(var P=u+b*12+4,F=0;F<v.length;F++){var C=v[F];if(!(C=="t34665"||C=="t34853")){C=="exifIFD"&&(C="t34665"),C=="gpsiIFD"&&(C="t34853");var D=parseInt(C.slice(1)),E=l.main[D];if(E==null&&(E=l.rest[D]),E==null||E==0)throw new Error("unknown type of tag: "+D);var k=m[C];if(D==34665){var j=a._writeIFD(o,l,f,P,m.exifIFD);k=[P],P=j[1]}if(D==34853){var j=a._writeIFD(o,a._types.gps,f,P,m.gpsiIFD);k=[P],P=j[1]}E==2&&(k=k[0]+"\0");var W=k.length;o.writeUshort(f,u,D),u+=2,o.writeUshort(f,u,E),u+=2,o.writeUint(f,u,W),u+=4;var M=[-1,1,1,2,4,8,0,1,0,4,8,0,8][E]*W,S=u;if(M>4&&(o.writeUint(f,u,P),S=P),E==1||E==7)for(var T=0;T<W;T++)f[S+T]=k[T];else if(E==2)o.writeASCII(f,S,k);else if(E==3)for(var T=0;T<W;T++)o.writeUshort(f,S+2*T,k[T]);else if(E==4)for(var T=0;T<W;T++)o.writeUint(f,S+4*T,k[T]);else if(E==5||E==10)for(var V=E==5?o.writeUint:o.writeInt,T=0;T<W;T++){var _=k[T],ee=_[0],re=_[1];if(ee==null)throw"e";V(f,S+8*T,ee),V(f,S+8*T+4,re)}else if(E==9)for(var T=0;T<W;T++)o.writeInt(f,S+4*T,k[T]);else if(E==12)for(var T=0;T<W;T++)o.writeDouble(f,S+8*T,k[T]);else throw E;M>4&&(M+=M&1,P+=M),u+=4}}return[u,P]},a.toRGBA8=function(o,l){function f(Fe){return Fe<.0031308?12.92*Fe:1.055*Math.pow(Fe,1/2.4)-.055}var u=o.width,m=o.height,v=u*m,b=o.data,P=new Uint8Array(v*4),F=o.t262?o.t262[0]:2,C=o.t258?Math.min(32,o.t258[0]):1;o.t262==null&&C==1&&(F=0);var D=o.t277?o.t277[0]:o.t258?o.t258.length:[1,1,3,1,1,4,3][F],E=o.t339?o.t339[0]:null;if(F==1&&C==32&&E!=3)throw"e";var k=Math.ceil(D*C*u/8);if(F==0){l=1/256;for(var j=0;j<m;j++){var W=j*k,M=j*u;if(C==1)for(var S=0;S<u;S++){var T=M+S<<2,V=b[W+(S>>3)]>>7-(S&7)&1;P[T]=P[T+1]=P[T+2]=(1-V)*255,P[T+3]=255}if(C==4)for(var S=0;S<u;S++){var T=M+S<<2,V=b[W+(S>>1)]>>4-4*(S&1)&15;P[T]=P[T+1]=P[T+2]=(15-V)*17,P[T+3]=255}if(C==8)for(var S=0;S<u;S++){var T=M+S<<2,V=b[W+S];P[T]=P[T+1]=P[T+2]=255-V,P[T+3]=255}if(C==16)for(var S=0;S<u;S++){var T=M+S<<2,_=W+2*S,V=b[_+1]<<8|b[_];P[T]=P[T+1]=P[T+2]=Math.min(255,255-~~(V*l)),P[T+3]=255}}}else if(F==1){l==null&&(l=1/256);for(var ee=b.length&3?null:new Float32Array(b.buffer),j=0;j<m;j++){var W=j*k,M=j*u;if(C==1)for(var S=0;S<u;S++){var T=M+S<<2,V=b[W+(S>>3)]>>7-(S&7)&1;P[T]=P[T+1]=P[T+2]=V*255,P[T+3]=255}if(C==2)for(var S=0;S<u;S++){var T=M+S<<2,V=b[W+(S>>2)]>>6-2*(S&3)&3;P[T]=P[T+1]=P[T+2]=V*85,P[T+3]=255}if(C==8)for(var S=0;S<u;S++){var T=M+S<<2,V=b[W+S*D];P[T]=P[T+1]=P[T+2]=V,P[T+3]=255}if(C==16)for(var S=0;S<u;S++){var T=M+S<<2,_=W+2*S,V=b[_+1]<<8|b[_];P[T]=P[T+1]=P[T+2]=Math.min(255,~~(V*l)),P[T+3]=255}if(C==32)for(var S=0;S<u;S++){var T=M+S<<2,_=(W>>>2)+S,V=ee[_];P[T]=P[T+1]=P[T+2]=~~(.5+255*V),P[T+3]=255}}}else if(F==2)if(C==8){if(D==1)for(var S=0;S<v;S++)P[4*S]=P[4*S+1]=P[4*S+2]=b[S],P[4*S+3]=255;if(D==3)for(var S=0;S<v;S++){var T=S<<2,re=S*3;P[T]=b[re],P[T+1]=b[re+1],P[T+2]=b[re+2],P[T+3]=255}if(D>=4)for(var S=0;S<v;S++){var T=S<<2,re=S*D;P[T]=b[re],P[T+1]=b[re+1],P[T+2]=b[re+2],P[T+3]=b[re+3]}}else if(C==16){if(D==4)for(var S=0;S<v;S++){var T=S<<2,re=S*8+1;P[T]=b[re],P[T+1]=b[re+2],P[T+2]=b[re+4],P[T+3]=b[re+6]}if(D==3)for(var S=0;S<v;S++){var T=S<<2,re=S*6+1;P[T]=b[re],P[T+1]=b[re+2],P[T+2]=b[re+4],P[T+3]=255}}else if(C==32){for(var te=new Float32Array(b.buffer),oe=0,S=0;S<te.length;S++)oe=Math.min(oe,te[S]);if(oe<0)for(var S=0;S<b.length;S+=4){var he=b[S];b[S]=b[S+3],b[S+3]=he,he=b[S+1],b[S+1]=b[S+2],b[S+2]=he}for(var me=[],S=0;S<65536;S++)me.push(f(S/65535));for(var S=0;S<te.length;S++){var we=Math.max(0,Math.min(1,te[S]));te[S]=me[~~(.5+we*65535)]}if(D==3)for(var S=0;S<v;S++){var T=S<<2,re=S*3;P[T]=~~(.5+te[re]*255),P[T+1]=~~(.5+te[re+1]*255),P[T+2]=~~(.5+te[re+2]*255),P[T+3]=255}else if(D==4)for(var S=0;S<v;S++){var T=S<<2,re=S*4;P[T]=~~(.5+te[re]*255),P[T+1]=~~(.5+te[re+1]*255),P[T+2]=~~(.5+te[re+2]*255),P[T+3]=~~(.5+te[re+3]*255)}else throw D}else throw C;else if(F==3)for(var Se=o.t320,be=1<<C,le=C==8&&D>1&&o.t338&&o.t338[0]!=0,j=0;j<m;j++)for(var ae=0;ae<u;ae++){var S=j*u+ae,T=S<<2,ke=0,Ne=j*k;if(C==1)ke=b[Ne+(ae>>>3)]>>>7-(ae&7)&1;else if(C==2)ke=b[Ne+(ae>>>2)]>>>6-2*(ae&3)&3;else if(C==4)ke=b[Ne+(ae>>>1)]>>>4-4*(ae&1)&15;else if(C==8)ke=b[Ne+ae*D];else throw C;P[T]=Se[ke]>>8,P[T+1]=Se[be+ke]>>8,P[T+2]=Se[be+be+ke]>>8,P[T+3]=le?b[Ne+ae*D+1]:255}else if(F==5)for(var de=D>4?1:0,S=0;S<v;S++){var T=S<<2,$=S*D;if(window.UDOC){var ie=b[$],U=b[$+1],L=b[$+2],J=b[$+3],se=UDOC.C.cmykToRgb([ie*(1/255),U*(1/255),L*(1/255),J*(1/255)]);P[T]=~~(.5+255*se[0]),P[T+1]=~~(.5+255*se[1]),P[T+2]=~~(.5+255*se[2])}else{var ie=255-b[$],U=255-b[$+1],L=255-b[$+2],J=(255-b[$+3])*(1/255);P[T]=~~(ie*J+.5),P[T+1]=~~(U*J+.5),P[T+2]=~~(L*J+.5)}P[T+3]=255*(1-de)+b[$+4]*de}else if(F==6&&o.t278)for(var ve=o.t278[0],j=0;j<m;j+=ve)for(var S=j*u,Z=ve*u,I=0;I<Z;I++){var T=4*(S+I),$=3*S+4*(I>>>1),L=b[$+(I&1)],q=b[$+2]-128,fe=b[$+3]-128,Ae=L+((fe>>2)+(fe>>3)+(fe>>5)),G=L-((q>>2)+(q>>4)+(q>>5))-((fe>>1)+(fe>>3)+(fe>>4)+(fe>>5)),N=L+(q+(q>>1)+(q>>2)+(q>>6));P[T]=Math.max(0,Math.min(255,Ae)),P[T+1]=Math.max(0,Math.min(255,G)),P[T+2]=Math.max(0,Math.min(255,N)),P[T+3]=255}else if(F==32845)for(var j=0;j<m;j++)for(var ae=0;ae<u;ae++){var $=(j*u+ae)*6,T=(j*u+ae)*4,B=b[$+1]<<8|b[$],B=Math.pow(2,(B+.5)/256-64),H=(b[$+3]+.5)/410,ce=(b[$+5]+.5)/410,ye=9*H/(6*H-16*ce+12),Ee=4*ce/(6*H-16*ce+12),Ce=B,ge=ye*Ce/Ee,L=Ce,xe=(1-ye-Ee)*Ce/Ee,Ae=2.69*ge-1.276*L-.414*xe,G=-1.022*ge+1.978*L+.044*xe,N=.061*ge-.224*L+1.163*xe;P[T]=f(Math.min(Ae,1))*255,P[T+1]=f(Math.min(G,1))*255,P[T+2]=f(Math.min(N,1))*255,P[T+3]=255}else n("Unknown Photometric interpretation: "+F);return P},a.replaceIMG=function(o){o==null&&(o=document.getElementsByTagName("img"));for(var l=["tif","tiff","dng","cr2","nef"],f=0;f<o.length;f++){var u=o[f],m=u.getAttribute("src");if(m!=null){var v=m.split(".").pop().toLowerCase();if(l.indexOf(v)!=-1){var b=new XMLHttpRequest;a._xhrs.push(b),a._imgs.push(u),b.open("GET",m),b.responseType="arraybuffer",b.onload=a._imgLoaded,b.send()}}}},a._xhrs=[],a._imgs=[],a._imgLoaded=function(o){var l=a._xhrs.indexOf(o.target),f=a._imgs[l];a._xhrs.splice(l,1),a._imgs.splice(l,1),f.setAttribute("src",a.bufferToURI(o.target.response))},a.bufferToURI=function(o){var l=a.decode(o),f=l,u=0,m=f[0];l[0].subIFD&&(f=f.concat(l[0].subIFD));for(var v=0;v<f.length;v++){var b=f[v];if(!(b.t258==null||b.t258.length<3)){var P=b.t256*b.t257;P>u&&(u=P,m=b)}}a.decodeImage(o,m,l);var F=a.toRGBA8(m),C=m.width,D=m.height,E=document.createElement("canvas");E.width=C,E.height=D;var k=E.getContext("2d"),j=new ImageData(new Uint8ClampedArray(F.buffer),C,D);return k.putImageData(j,0,0),E.toDataURL()},a._binBE={nextZero:function(o,l){for(;o[l]!=0;)l++;return l},readUshort:function(o,l){return o[l]<<8|o[l+1]},readShort:function(o,l){var f=a._binBE.ui8;return f[0]=o[l+1],f[1]=o[l+0],a._binBE.i16[0]},readInt:function(o,l){var f=a._binBE.ui8;return f[0]=o[l+3],f[1]=o[l+2],f[2]=o[l+1],f[3]=o[l+0],a._binBE.i32[0]},readUint:function(o,l){var f=a._binBE.ui8;return f[0]=o[l+3],f[1]=o[l+2],f[2]=o[l+1],f[3]=o[l+0],a._binBE.ui32[0]},readASCII:function(o,l,f){for(var u="",m=0;m<f;m++)u+=String.fromCharCode(o[l+m]);return u},readFloat:function(o,l){for(var f=a._binBE.ui8,u=0;u<4;u++)f[u]=o[l+3-u];return a._binBE.fl32[0]},readDouble:function(o,l){for(var f=a._binBE.ui8,u=0;u<8;u++)f[u]=o[l+7-u];return a._binBE.fl64[0]},writeUshort:function(o,l,f){o[l]=f>>8&255,o[l+1]=f&255},writeInt:function(o,l,f){var u=a._binBE.ui8;a._binBE.i32[0]=f,o[l+3]=u[0],o[l+2]=u[1],o[l+1]=u[2],o[l+0]=u[3]},writeUint:function(o,l,f){o[l]=f>>24&255,o[l+1]=f>>16&255,o[l+2]=f>>8&255,o[l+3]=f>>0&255},writeASCII:function(o,l,f){for(var u=0;u<f.length;u++)o[l+u]=f.charCodeAt(u)},writeDouble:function(o,l,f){a._binBE.fl64[0]=f;for(var u=0;u<8;u++)o[l+u]=a._binBE.ui8[7-u]}},a._binBE.ui8=new Uint8Array(8),a._binBE.i16=new Int16Array(a._binBE.ui8.buffer),a._binBE.i32=new Int32Array(a._binBE.ui8.buffer),a._binBE.ui32=new Uint32Array(a._binBE.ui8.buffer),a._binBE.fl32=new Float32Array(a._binBE.ui8.buffer),a._binBE.fl64=new Float64Array(a._binBE.ui8.buffer),a._binLE={nextZero:a._binBE.nextZero,readUshort:function(o,l){return o[l+1]<<8|o[l]},readShort:function(o,l){var f=a._binBE.ui8;return f[0]=o[l+0],f[1]=o[l+1],a._binBE.i16[0]},readInt:function(o,l){var f=a._binBE.ui8;return f[0]=o[l+0],f[1]=o[l+1],f[2]=o[l+2],f[3]=o[l+3],a._binBE.i32[0]},readUint:function(o,l){var f=a._binBE.ui8;return f[0]=o[l+0],f[1]=o[l+1],f[2]=o[l+2],f[3]=o[l+3],a._binBE.ui32[0]},readASCII:a._binBE.readASCII,readFloat:function(o,l){for(var f=a._binBE.ui8,u=0;u<4;u++)f[u]=o[l+u];return a._binBE.fl32[0]},readDouble:function(o,l){for(var f=a._binBE.ui8,u=0;u<8;u++)f[u]=o[l+u];return a._binBE.fl64[0]},writeUshort:function(o,l,f){o[l]=f&255,o[l+1]=f>>8&255},writeInt:function(o,l,f){var u=a._binBE.ui8;a._binBE.i32[0]=f,o[l+0]=u[0],o[l+1]=u[1],o[l+2]=u[2],o[l+3]=u[3]},writeUint:function(o,l,f){o[l]=f>>>0&255,o[l+1]=f>>>8&255,o[l+2]=f>>>16&255,o[l+3]=f>>>24&255},writeASCII:a._binBE.writeASCII},a._copyTile=function(o,l,f,u,m,v,b,P){for(var F=Math.min(l,m-b),C=Math.min(f,v-P),D=0;D<C;D++)for(var E=(P+D)*m+b,k=D*l,j=0;j<F;j++)u[E+j]=o[k+j]},a.LosslessJpegDecode=function(){var o,l;function f(){return o[l++]}function u(){return o[l++]<<8|o[l++]}function m(S){for(var T=f(),V=[0,0,0,255],_=[],ee=8,re=0;re<16;re++)_[re]=f();for(var re=0;re<16;re++)for(var te=0;te<_[re];te++){var oe=v(V,0,re+1,1);V[oe+3]=f()}var he=new Uint8Array(1<<ee);S[T]=[new Uint8Array(V),he];for(var re=0;re<1<<ee;re++){for(var me=ee,we=re,Se=0,be=0;V[Se+3]==255&&me!=0;)be=we>>--me&1,Se=V[Se+be];he[re]=Se}}function v(S,T,V,_){if(S[T+3]!=255)return 0;if(V==0)return T;for(var ee=0;ee<2;ee++){S[T+ee]==0&&(S[T+ee]=S.length,S.push(0,0,_,255));var re=v(S,S[T+ee],V-1,_+1);if(re!=0)return re}return 0}function b(S){for(var T=S.b,V=S.f;T<25&&S.a<S.d;){var _=S.data[S.a++];_==255&&!S.c&&S.a++,V=V<<8|_,T+=8}if(T<0)throw"e";S.b=T,S.f=V}function P(S,T){return T.b<S&&b(T),T.f>>(T.b-=S)&65535>>16-S}function F(S,T){var V=S[0],_=0,ee=255,re=0;T.b<16&&b(T);var te=T.f>>T.b-8&255;for(_=S[1][te],ee=V[_+3],T.b-=V[_+2];ee==255;)re=T.f>>--T.b&1,_=V[_+re],ee=V[_+3];return ee}function C(S,T){return S<32768>>16-T&&(S+=-(1<<T)+1),S}function D(S,T){var V=F(S,T);if(V==0)return 0;if(V==16)return-32768;var _=P(V,T);return C(_,V)}function E(S,T,V,_,ee,re){for(var te=0,oe=0;oe<re;oe++){for(var he=oe*T,me=0;me<T;me+=ee){te++;for(var we=0;we<ee;we++)S[he+me+we]=D(_[we],V)}if(V.e!=0&&te%V.e==0&&oe!=0){for(var Se=V.a,be=V.data;be[Se]!=255||!(208<=be[Se+1]&&be[Se+1]<=215);)Se--;V.a=Se+2,V.f=0,V.b=0}}}function k(S,T){return C(P(S,T),S)}function j(S,T,V,_,ee){for(var re=o.length-l,te=0;te<re;te+=4){var oe=o[l+te];o[l+te]=o[l+te+3],o[l+te+3]=oe;var oe=o[l+te+1];o[l+te+1]=o[l+te+2],o[l+te+2]=oe}for(var he=0;he<ee;he++)for(var me=32768,we=32768,Se=0;Se<T;Se+=2){var be=F(_,V),le=F(_,V);be!=0&&(me+=k(be,V)),le!=0&&(we+=k(le,V)),S[he*T+Se]=me&65535,S[he*T+Se+1]=we&65535}}function W(S){if(o=S,l=0,u()!=65496)throw"e";for(var T=[],V=0,_=0,ee=0,re=[],te=[],oe=[],he=0,me=0,we=0;;){var Se=u();if(Se==65535){l--;continue}var be=u();if(Se==65475){_=f(),me=u(),we=u(),he=f();for(var le=0;le<he;le++){var ae=f(),ke=f(),Ne=f();if(Ne!=0)throw"e";T[ae]=[le,ke>>4,ke&15]}}else if(Se==65476)for(var de=l+be-2;l<de;)m(te);else if(Se==65498){l++;for(var le=0;le<he;le++){var $=f(),ie=T[$];oe[ie[0]]=te[f()>>>4],re[ie[0]]=ie.slice(1)}V=f(),l+=2;break}else Se==65501?ee=u():l+=be-2}var U=_>8?Uint16Array:Uint8Array,L=new U(me*we*he),J={b:0,f:0,c:V==8,a:l,data:o,d:o.length,e:ee};if(J.c)j(L,we*he,J,oe[0],me);else{for(var se=[],ve=0,Z=0,le=0;le<he;le++){var I=re[le],q=I[0],fe=I[1];q>ve&&(ve=q),fe>Z&&(Z=fe),se.push(q*fe)}if(ve!=1||Z!=1){if(he!=3||se[1]!=1||se[2]!=1||ve!=2||Z!=1&&Z!=2)throw"e";for(var Ae=[],G=0,le=0;le<he;le++){for(var N=0;N<se[le];N++)Ae.push(oe[le]);G+=se[le]}var B=we/ve,H=me/Z,ce=B*H;E(L,B*G,J,Ae,G,H),M(L,V,B,H,G-2,G,G,_);var ye=new Uint16Array(ce*se[0]);if(ve==2&&Z==2){for(var le=0;le<ce;le++)ye[4*le]=L[6*le],ye[4*le+1]=L[6*le+1],ye[4*le+2]=L[6*le+2],ye[4*le+3]=L[6*le+3];M(ye,V,B*4,H,0,1,1,_);for(var le=0;le<ce;le++)L[6*le]=ye[4*le],L[6*le+1]=ye[4*le+1],L[6*le+2]=ye[4*le+2],L[6*le+3]=ye[4*le+3]}if(ve==2&&Z==1){for(var le=0;le<ce;le++)ye[2*le]=L[4*le],ye[2*le+1]=L[4*le+1];M(ye,V,B*2,H,0,1,1,_);for(var le=0;le<ce;le++)L[4*le]=ye[2*le],L[4*le+1]=ye[2*le+1]}for(var Ee=L.slice(0),fe=0;fe<me;fe++)if(Z==2)for(var q=0;q<we;q++){var Ce=(fe*we+q)*he,ge=((fe>>>1)*B+(q>>>1))*G,xe=(fe&1)*2+(q&1);L[Ce]=Ee[ge+xe],L[Ce+1]=Ee[ge+4],L[Ce+2]=Ee[ge+5]}else for(var q=0;q<we;q++){var Ce=(fe*we+q)*he,ge=(fe*B+(q>>>1))*G,xe=q&1;L[Ce]=Ee[ge+xe],L[Ce+1]=Ee[ge+2],L[Ce+2]=Ee[ge+3]}}else if(E(L,we*he,J,oe,he,me),ee==0)M(L,V,we,me,0,he,he,_);else for(var Fe=Math.floor(ee/we),fe=0;fe<me;fe+=Fe){var Re=L.slice(fe*we*he,(fe+Fe)*we*he);M(Re,V,we,Fe,0,he,he,_),L.set(Re,fe*we*he)}}return L}function M(S,T,V,_,ee,re,te,oe){for(var he=V*te,me=ee;me<re;me++)S[me]+=1<<oe-1;for(var we=te;we<he;we+=te)for(var me=ee;me<re;me++)S[we+me]+=S[we+me-te];for(var Se=1;Se<_;Se++){for(var be=Se*he,me=ee;me<re;me++)S[be+me]+=S[be+me-he];for(var we=te;we<he;we+=te)for(var me=ee;me<re;me++){var le=be+we+me,ae=le-he,ke=S[le-te],Ne=0;if(T==0)Ne=0;else if(T==1)Ne=ke;else if(T==2)Ne=S[ae];else if(T==3)Ne=S[ae-te];else if(T==4)Ne=ke+(S[ae]-S[ae-te]);else if(T==5)Ne=ke+(S[ae]-S[ae-te]>>>1);else if(T==6)Ne=S[ae]+(ke-S[ae-te]>>>1);else if(T==7)Ne=ke+S[ae]>>>1;else throw T;S[le]+=Ne}}}return W}(),function(){var o=0,l=1,f=2,u=3,m=4,v=5,b=6,P=7,F=8,C=9,D=10,E=11,k=12,j=13,W=14,M=15,S=16,T=17,V=18;function _($){var ie=a._binBE.readUshort,U={b:ie($,0),i:$[2],C:$[3],u:$[4],q:ie($,5),k:ie($,7),e:ie($,9),l:ie($,11),s:$[13],d:ie($,14)};if(U.b!=18771||U.i>1||U.q<6||U.q%6||U.e<768||U.e%24||U.l!=768||U.k<U.l||U.k%U.l||U.k-U.e>=U.l||U.s>16||U.s!=U.k/U.l||U.s!=Math.ceil(U.e/U.l)||U.d!=U.q/6||U.u!=12&&U.u!=14&&U.u!=16||U.C!=16&&U.C!=0)throw"Invalid data";if(U.i==0)throw"Not implemented. We need this file!";return U.h=U.C==16,U.m=(U.h?U.l*2/3:U.l>>>1)|0,U.A=U.m+2,U.f=64,U.g=(1<<U.u)-1,U.n=4*U.u,U}function ee($,ie){var U=new Array(ie.s),L=4*ie.s,J=16+L;L&12&&(J+=16-(L&12));for(var se=0,ve=16;se<ie.s;ve+=4){var Z=a._binBE.readUint($,ve);U[se]=$.slice(J,J+Z),U[se].j=0,U[se].a=0,J+=Z,se++}if(J!=$.length)throw"Invalid data";return U}function re($,ie){for(var U=-ie[4],L=0;U<=ie[4];L++,U++)$[L]=U<=-ie[3]?-4:U<=-ie[2]?-3:U<=-ie[1]?-2:U<-ie[0]?-1:U<=ie[0]?0:U<ie[1]?1:U<ie[2]?2:U<ie[3]?3:4}function te($,ie,U){var L=[ie,3*ie+18,5*ie+67,7*ie+276,U];$.o=ie,$.w=(L[4]+2*ie)/(2*ie+1)+1|0,$.v=Math.ceil(Math.log2($.w)),$.t=9,re($.c,L)}function oe($){var ie={c:new Int8Array(2<<$.u)};return te(ie,0,$.g),ie}function he($){for(var ie=[[],[],[]],U=Math.max(2,$.w+32>>>6),L=0;L<3;L++)for(var J=0;J<41;J++)ie[L][J]=[U,1];return ie}function me($){for(var ie=-1,U=0;!U;ie++)U=$[$.j]>>>7-$.a&1,$.a++,$.a&=7,$.a||$.j++;return ie}function we($,ie){var U=0,L=8-$.a;if($.j,$.a,ie){if(ie>=L)do U<<=L,ie-=L,U|=$[$.j]&(1<<L)-1,$.j++,L=8;while(ie>=8);ie&&(U<<=ie,L-=ie,U|=$[$.j]>>>L&(1<<ie)-1),$.a=8-L}return U}function Se($,ie){var U=0;if(ie<$)for(;U<=14&&ie<<++U<$;);return U}function be($,ie,U,L,J,se,ve,Z){Z==null&&(Z=0);var I=se+1,q=I%2,fe=0,Ae,G,N=L[J],B=L[J-1],H=L[J-2][I],ce=B[I-1],ye=B[I],Ee=B[I+1],Ce=N[I-1],ge=N[I+1],xe=Math.abs,Fe,Re,Oe,Me;if(q&&(Fe=xe(Ee-ye),Re=xe(H-ye),Oe=xe(ce-ye)),q){if(Me=Fe>Oe&&Re<Fe?H+ce:Fe<Oe&&Re<Oe?H+Ee:Ee+ce,Me=Me+2*ye>>>2,Z){N[I]=Me;return}Ae=ie.t*ie.c[$.g+ye-H]+ie.c[$.g+ce-ye]}else Me=ye>ce&&ye>Ee||ye<ce&&ye<Ee?ge+Ce+2*ye>>>2:Ce+ge>>>1,Ae=ie.t*ie.c[$.g+ye-ce]+ie.c[$.g+ce-Ce];G=xe(Ae);var Q=me(U);if(Q<$.n-ie.v-1){var A=Se(ve[G][0],ve[G][1]);fe=we(U,A)+(Q<<A)}else fe=we(U,ie.v)+1;fe=fe&1?-1-(fe>>>1):fe>>>1,ve[G][0]+=xe(fe),ve[G][1]==$.f&&(ve[G][0]>>>=1,ve[G][1]>>>=1),ve[G][1]++,Me=Ae<0?Me-fe:Me+fe,$.i&&(Me<0?Me+=ie.w:Me>$.g&&(Me-=ie.w)),N[I]=Me>=0?Math.min(Me,$.g):0}function le($,ie,U){for(var L=$[0].length,J=ie;J<=U;J++)$[J][0]=$[J-1][1],$[J][L-1]=$[J-1][L-2]}function ae($){le($,P,k),le($,f,m),le($,M,T)}function ke($,ie,U,L,J,se,ve,Z,I,q,fe,Ae,G){for(var N=0,B=1,H=J<j&&J>m;B<$.m;)N<$.m&&(be($,ie,U,L,J,N,ve[I],$.h&&(H&&q||!H&&(fe||(N&Ae)==G))),be($,ie,U,L,se,N,ve[I],$.h&&(!H&&q||H&&(fe||(N&Ae)==G))),N+=2),N>8&&(be($,ie,U,L,J,B,Z[I]),be($,ie,U,L,se,B,Z[I]),B+=2);ae(L)}function Ne($,ie,U,L,J,se){ke($,ie,U,L,f,P,J,se,0,0,1,0,8),ke($,ie,U,L,F,M,J,se,1,0,1,0,8),ke($,ie,U,L,u,C,J,se,2,1,0,3,0),ke($,ie,U,L,D,S,J,se,0,0,0,3,2),ke($,ie,U,L,m,E,J,se,1,0,0,3,2),ke($,ie,U,L,k,T,J,se,2,1,0,3,0)}function de($,ie,U,L,J,se){var ve=se.length,Z=$.l;J+1==$.s&&(Z=$.e-J*$.l);for(var I=6*$.e*L+J*$.l,q=0;q<6;q++){for(var fe=0;fe<Z;fe++){var Ae=se[q%ve][fe%ve],G;Ae==0?G=f+(q>>>1):Ae==2?G=M+(q>>>1):G=P+q;var N=$.h?(fe*2/3&2147483646|fe%3&1)+(fe%3>>>1):fe>>>1;ie[I+fe]=U[G][N+1]}I+=$.e}}a._decompressRAF=function($,ie){var U=_($),L=ee($,U),J=oe(U),se=new Int16Array(U.e*U.q);ie==null&&(ie=U.h?[[1,1,0,1,1,2],[1,1,2,1,1,0],[2,0,1,0,2,1],[1,1,2,1,1,0],[1,1,0,1,1,2],[0,2,1,2,0,1]]:[[0,1],[3,2]]);for(var ve=[[o,u],[l,m],[v,E],[b,k],[j,S],[W,T]],Z=[],I=0;I<V;I++)Z[I]=new Uint16Array(U.A);for(var q=0;q<U.s;q++){for(var fe=he(J),Ae=he(J),I=0;I<V;I++)for(var G=0;G<U.A;G++)Z[I][G]=0;for(var N=0;N<U.d;N++){Ne(U,J,L[q],Z,fe,Ae);for(var I=0;I<6;I++)for(var G=0;G<U.A;G++)Z[ve[I][0]][G]=Z[ve[I][1]][G];de(U,se,Z,N,q,ie);for(var I=f;I<V;I++)if([v,b,j,W].indexOf(I)==-1)for(var G=0;G<U.A;G++)Z[I][G]=0;ae(Z)}}return se}}()})(t,r)})()})(UTIF);var UTIFExports=UTIF.exports;const utif=getDefaultExportFromCjs$1(UTIFExports),MIME_TYPE$1="image/tiff",tiff=()=>({mime:{[MIME_TYPE$1]:["tiff","tif"]},constants:{MIME_TIFF:MIME_TYPE$1},decoders:{[MIME_TYPE$1]:e=>{const t=utif.decode(e),r=t[0];t.forEach(a=>{utif.decodeImage(e,a)});const n=utif.toRGBA8(r);return{data:Buffer$1.from(n),width:r.t256[0],height:r.t257[0]}}},encoders:{[MIME_TYPE$1]:e=>{const t=utif.encodeImage(e.bitmap.data,e.bitmap.width,e.bitmap.height);return Buffer$1.from(t)}}});var omggif={},GifReader_1,GifWriter_1;function GifWriter(e,t,r,s){var a=0,s=s===void 0?{}:s,o=s.loop===void 0?null:s.loop,l=s.palette===void 0?null:s.palette;if(t<=0||r<=0||t>65535||r>65535)throw new Error("Width/Height invalid.");function f(D){var E=D.length;if(E<2||E>256||E&E-1)throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");return E}e[a++]=71,e[a++]=73,e[a++]=70,e[a++]=56,e[a++]=57,e[a++]=97;var u=0,m=0;if(l!==null){for(var v=f(l);v>>=1;)++u;if(v=1<<u,--u,s.background!==void 0){if(m=s.background,m>=v)throw new Error("Background index out of range.");if(m===0)throw new Error("Background index explicitly passed as 0.")}}if(e[a++]=t&255,e[a++]=t>>8&255,e[a++]=r&255,e[a++]=r>>8&255,e[a++]=(l!==null?128:0)|u,e[a++]=m,e[a++]=0,l!==null)for(var b=0,P=l.length;b<P;++b){var F=l[b];e[a++]=F>>16&255,e[a++]=F>>8&255,e[a++]=F&255}if(o!==null){if(o<0||o>65535)throw new Error("Loop count invalid.");e[a++]=33,e[a++]=255,e[a++]=11,e[a++]=78,e[a++]=69,e[a++]=84,e[a++]=83,e[a++]=67,e[a++]=65,e[a++]=80,e[a++]=69,e[a++]=50,e[a++]=46,e[a++]=48,e[a++]=3,e[a++]=1,e[a++]=o&255,e[a++]=o>>8&255,e[a++]=0}var C=!1;this.addFrame=function(D,E,k,j,W,M){if(C===!0&&(--a,C=!1),M=M===void 0?{}:M,D<0||E<0||D>65535||E>65535)throw new Error("x/y invalid.");if(k<=0||j<=0||k>65535||j>65535)throw new Error("Width/Height invalid.");if(W.length<k*j)throw new Error("Not enough pixels for the frame size.");var S=!0,T=M.palette;if(T==null&&(S=!1,T=l),T==null)throw new Error("Must supply either a local or global palette.");for(var V=f(T),_=0;V>>=1;)++_;V=1<<_;var ee=M.delay===void 0?0:M.delay,re=M.disposal===void 0?0:M.disposal;if(re<0||re>3)throw new Error("Disposal out of range.");var te=!1,oe=0;if(M.transparent!==void 0&&M.transparent!==null&&(te=!0,oe=M.transparent,oe<0||oe>=V))throw new Error("Transparent color index.");if((re!==0||te||ee!==0)&&(e[a++]=33,e[a++]=249,e[a++]=4,e[a++]=re<<2|(te===!0?1:0),e[a++]=ee&255,e[a++]=ee>>8&255,e[a++]=oe,e[a++]=0),e[a++]=44,e[a++]=D&255,e[a++]=D>>8&255,e[a++]=E&255,e[a++]=E>>8&255,e[a++]=k&255,e[a++]=k>>8&255,e[a++]=j&255,e[a++]=j>>8&255,e[a++]=S===!0?128|_-1:0,S===!0)for(var he=0,me=T.length;he<me;++he){var we=T[he];e[a++]=we>>16&255,e[a++]=we>>8&255,e[a++]=we&255}return a=GifWriterOutputLZWCodeStream(e,a,_<2?2:_,W),a},this.end=function(){return C===!1&&(e[a++]=59,C=!0),a},this.getOutputBuffer=function(){return e},this.setOutputBuffer=function(D){e=D},this.getOutputBufferPosition=function(){return a},this.setOutputBufferPosition=function(D){a=D}}function GifWriterOutputLZWCodeStream(e,t,r,n){e[t++]=r;var a=t++,s=1<<r,o=s-1,l=s+1,f=l+1,u=r+1,m=0,v=0;function b(M){for(;m>=M;)e[t++]=v&255,v>>=8,m-=8,t===a+256&&(e[a]=255,a=t++)}function P(M){v|=M<<m,m+=u,b(8)}var F=n[0]&o,C={};P(s);for(var D=1,E=n.length;D<E;++D){var k=n[D]&o,j=F<<8|k,W=C[j];if(W===void 0){for(v|=F<<m,m+=u;m>=8;)e[t++]=v&255,v>>=8,m-=8,t===a+256&&(e[a]=255,a=t++);f===4096?(P(s),f=l+1,u=r+1,C={}):(f>=1<<u&&++u,C[j]=f++),F=k}else F=W}return P(F),P(l),b(1),a+1===t?e[a]=0:(e[a]=t-a-1,e[t++]=0),t}function GifReader(e){var t=0;if(e[t++]!==71||e[t++]!==73||e[t++]!==70||e[t++]!==56||(e[t++]+1&253)!==56||e[t++]!==97)throw new Error("Invalid GIF 87a/89a header.");var r=e[t++]|e[t++]<<8,n=e[t++]|e[t++]<<8,a=e[t++],s=a>>7,o=a&7,l=1<<o+1;e[t++],e[t++];var f=null,u=null;s&&(f=t,u=l,t+=l*3);var m=!0,v=[],b=0,P=null,F=0,C=null;for(this.width=r,this.height=n;m&&t<e.length;)switch(e[t++]){case 33:switch(e[t++]){case 255:if(e[t]!==11||e[t+1]==78&&e[t+2]==69&&e[t+3]==84&&e[t+4]==83&&e[t+5]==67&&e[t+6]==65&&e[t+7]==80&&e[t+8]==69&&e[t+9]==50&&e[t+10]==46&&e[t+11]==48&&e[t+12]==3&&e[t+13]==1&&e[t+16]==0)t+=14,C=e[t++]|e[t++]<<8,t++;else for(t+=12;;){var D=e[t++];if(!(D>=0))throw Error("Invalid block size");if(D===0)break;t+=D}break;case 249:if(e[t++]!==4||e[t+4]!==0)throw new Error("Invalid graphics extension block.");var E=e[t++];b=e[t++]|e[t++]<<8,P=e[t++],E&1||(P=null),F=E>>2&7,t++;break;case 254:for(;;){var D=e[t++];if(!(D>=0))throw Error("Invalid block size");if(D===0)break;t+=D}break;default:throw new Error("Unknown graphic control label: 0x"+e[t-1].toString(16))}break;case 44:var k=e[t++]|e[t++]<<8,j=e[t++]|e[t++]<<8,W=e[t++]|e[t++]<<8,M=e[t++]|e[t++]<<8,S=e[t++],T=S>>7,V=S>>6&1,_=S&7,ee=1<<_+1,re=f,te=u,oe=!1;if(T){var oe=!0;re=t,te=ee,t+=ee*3}var he=t;for(t++;;){var D=e[t++];if(!(D>=0))throw Error("Invalid block size");if(D===0)break;t+=D}v.push({x:k,y:j,width:W,height:M,has_local_palette:oe,palette_offset:re,palette_size:te,data_offset:he,data_length:t-he,transparent_index:P,interlaced:!!V,delay:b,disposal:F});break;case 59:m=!1;break;default:throw new Error("Unknown gif block: 0x"+e[t-1].toString(16))}this.numFrames=function(){return v.length},this.loopCount=function(){return C},this.frameInfo=function(me){if(me<0||me>=v.length)throw new Error("Frame index out of range.");return v[me]},this.decodeAndBlitFrameBGRA=function(me,we){var Se=this.frameInfo(me),be=Se.width*Se.height,le=new Uint8Array(be);GifReaderLZWOutputIndexStream(e,Se.data_offset,le,be);var ae=Se.palette_offset,ke=Se.transparent_index;ke===null&&(ke=256);var Ne=Se.width,de=r-Ne,$=Ne,ie=(Se.y*r+Se.x)*4,U=((Se.y+Se.height)*r+Se.x)*4,L=ie,J=de*4;Se.interlaced===!0&&(J+=r*4*7);for(var se=8,ve=0,Z=le.length;ve<Z;++ve){var I=le[ve];if($===0&&(L+=J,$=Ne,L>=U&&(J=de*4+r*4*(se-1),L=ie+(Ne+de)*(se<<1),se>>=1)),I===ke)L+=4;else{var q=e[ae+I*3],fe=e[ae+I*3+1],Ae=e[ae+I*3+2];we[L++]=Ae,we[L++]=fe,we[L++]=q,we[L++]=255}--$}},this.decodeAndBlitFrameRGBA=function(me,we){var Se=this.frameInfo(me),be=Se.width*Se.height,le=new Uint8Array(be);GifReaderLZWOutputIndexStream(e,Se.data_offset,le,be);var ae=Se.palette_offset,ke=Se.transparent_index;ke===null&&(ke=256);var Ne=Se.width,de=r-Ne,$=Ne,ie=(Se.y*r+Se.x)*4,U=((Se.y+Se.height)*r+Se.x)*4,L=ie,J=de*4;Se.interlaced===!0&&(J+=r*4*7);for(var se=8,ve=0,Z=le.length;ve<Z;++ve){var I=le[ve];if($===0&&(L+=J,$=Ne,L>=U&&(J=de*4+r*4*(se-1),L=ie+(Ne+de)*(se<<1),se>>=1)),I===ke)L+=4;else{var q=e[ae+I*3],fe=e[ae+I*3+1],Ae=e[ae+I*3+2];we[L++]=q,we[L++]=fe,we[L++]=Ae,we[L++]=255}--$}}}function GifReaderLZWOutputIndexStream(e,t,r,n){for(var a=e[t++],s=1<<a,o=s+1,l=o+1,f=a+1,u=(1<<f)-1,m=0,v=0,b=0,P=e[t++],F=new Int32Array(4096),C=null;;){for(;m<16&&P!==0;)v|=e[t++]<<m,m+=8,P===1?P=e[t++]:--P;if(m<f)break;var D=v&u;if(v>>=f,m-=f,D===s){l=o+1,f=a+1,u=(1<<f)-1,C=null;continue}else if(D===o)break;for(var E=D<l?D:C,k=0,j=E;j>s;)j=F[j]>>8,++k;var W=j,M=b+k+(E!==D?1:0);if(M>n){console.log("Warning, gif stream longer than expected.");return}r[b++]=W,b+=k;var S=b;for(E!==D&&(r[b++]=W),j=E;k--;)j=F[j],r[--S]=j&255,j>>=8;C!==null&&l<4096&&(F[l++]=C<<8|W,l>=u+1&&f<12&&(++f,u=u<<1|1)),C=D}return b!==n&&console.log("Warning, gif stream shorter than expected."),r}try{GifWriter_1=omggif.GifWriter=GifWriter,GifReader_1=omggif.GifReader=GifReader}catch(e){}let BitmapImage$2=class ot{constructor(...t){if(t.length===0)throw new Error("constructor requires parameters");const r=t[0];if(r!==null&&typeof r=="object")if(r instanceof ot){const n=r.bitmap;this.bitmap={width:n.width,height:n.height,data:new Buffer$1(n.width*n.height*4)},n.data.copy(this.bitmap.data)}else if(r.width&&r.height&&r.data)this.bitmap=r;else throw new Error("unrecognized constructor parameters");else if(typeof r=="number"&&typeof t[1]=="number"){const n=r,a=t[1],s=t[2];this.bitmap={width:n,height:a},Buffer$1.isBuffer(s)?this.bitmap.data=s:(this.bitmap.data=new Buffer$1(n*a*4),typeof s=="number"&&this.fillRGBA(s))}else throw new Error("unrecognized constructor parameters")}blit(t,r,n,a,s,o,l){if(a+o>this.bitmap.width)throw new Error("copy exceeds width of source bitmap");if(r+o>t.bitmap.width)throw new Error("copy exceeds width of target bitmap");if(s+l>this.bitmap.height)throw new Error("copy exceeds height of source bitmap");if(n+l>t.bitmap.height)throw new Erro("copy exceeds height of target bitmap");const f=this.bitmap.data,u=t.bitmap.data,m=this.bitmap.width*4,v=t.bitmap.width*4,b=o*4;let P=s*m+a*4,F=n*v+r*4;for(;--l>=0;)f.copy(u,F,P,P+b),P+=m,F+=v;return this}fillRGBA(t){const r=this.bitmap.data,n=this.bitmap.height*4;let a=0;for(;a<n;)r.writeUInt32BE(t,a),a+=4;for(;a<r.length;)r.copy(r,a,0,n),a+=n;return this}getRGBA(t,r){const n=(r*this.bitmap.width+t)*4;return this.bitmap.data.readUInt32BE(n)}getRGBASet(){const t=new Set,r=this.bitmap.data;for(let n=0;n<r.length;n+=4)t.add(r.readUInt32BE(n,!0));return t}greyscale(){const t=this.bitmap.data;return this.scan(0,0,this.bitmap.width,this.bitmap.height,(r,n,a)=>{const s=Math.round(.299*t[a]+.587*t[a+1]+.114*t[a+2]);t[a]=s,t[a+1]=s,t[a+2]=s}),this}reframe(t,r,n,a,s){const o=t<0?0:t,l=r<0?0:r,f=n+o>this.bitmap.width?this.bitmap.width-o:n,u=a+l>this.bitmap.height?this.bitmap.height-l:a,m=t<0?-t:0,v=r<0?-r:0;let b;if(s===void 0){if(o!==t||l!=r||f!==n||u!==a)throw new GifError("fillRGBA required for this reframing");b=new ot(n,a)}else b=new ot(n,a,s);return this.blit(b,m,v,o,l,f,u),this.bitmap=b.bitmap,this}scale(t){if(t===1)return;if(!Number.isInteger(t)||t<1)throw new Error("the scale must be an integer >= 1");const r=this.bitmap.width,n=this.bitmap.height,a=r*t*4,s=this.bitmap.data,o=new Buffer$1(n*a*t);let l=0,f,u=0;for(let m=0;m<n;++m){f=u;for(let v=0;v<r;++v){const b=s.readUInt32BE(l,!0);for(let P=0;P<t;++P)o.writeUInt32BE(b,u),u+=4;l+=4}for(let v=1;v<t;++v)o.copy(o,u,f,u),u+=a,f+=a}return this.bitmap={width:r*t,height:n*t,data:o},this}scanAllCoords(t){const r=this.bitmap.width,n=this.bitmap.data.length;let a=0,s=0;for(let o=0;o<n;o+=4)t(a,s,o),++a===r&&(a=0,++s)}scanAllIndexes(t){const r=this.bitmap.data.length;for(let n=0;n<r;n+=4)t(n)}};var bitmapimage=BitmapImage$2,gif$1={};let Gif$1=class{constructor(t,r,n){this.width=n.width,this.height=n.height,this.loops=n.loops,this.usesTransparency=n.usesTransparency,this.colorScope=n.colorScope,this.frames=r,this.buffer=t}};Gif$1.GlobalColorsPreferred=0;Gif$1.GlobalColorsOnly=1;Gif$1.LocalColorsOnly=2;let GifError$2=class extends Error{constructor(t){super(t),t instanceof Error&&(this.stack="Gif"+t.stack)}};gif$1.Gif=Gif$1;gif$1.GifError=GifError$2;var gifcodec={},gifutil={},__defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__defNormalProp=(e,t,r)=>t in e?__defProp(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,__markAsModule=e=>__defProp(e,"__esModule",{value:!0}),__export=(e,t)=>{for(var r in t)__defProp(e,r,{get:t[r],enumerable:!0})},__reExport=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of __getOwnPropNames(t))!__hasOwnProp.call(e,a)&&(r||a!=="default")&&__defProp(e,a,{get:()=>t[a],enumerable:!(n=__getOwnPropDesc(t,a))||n.enumerable});return e},__toCommonJS=(e=>(t,r)=>e&&e.get(t)||(r=__reExport(__markAsModule({}),t,1),e&&e.set(t,r),r))(typeof WeakMap<"u"?new WeakMap:0),__publicField=(e,t,r)=>(__defNormalProp(e,typeof t!="symbol"?t+"":t,r),r),src_exports={};__export(src_exports,{applyPalette:()=>applyPalette,applyPaletteSync:()=>applyPaletteSync,buildPalette:()=>buildPalette,buildPaletteSync:()=>buildPaletteSync,constants:()=>constants_exports,conversion:()=>conversion_exports,distance:()=>distance_exports,image:()=>image_exports,palette:()=>palette_exports,quality:()=>quality_exports,utils:()=>utils_exports});var constants_exports={};__export(constants_exports,{bt709:()=>bt709_exports});var bt709_exports={};__export(bt709_exports,{Y:()=>Y,x:()=>x,y:()=>y});var Y=(e=>(e[e.RED=.2126]="RED",e[e.GREEN=.7152]="GREEN",e[e.BLUE=.0722]="BLUE",e[e.WHITE=1]="WHITE",e))(Y||{}),x=(e=>(e[e.RED=.64]="RED",e[e.GREEN=.3]="GREEN",e[e.BLUE=.15]="BLUE",e[e.WHITE=.3127]="WHITE",e))(x||{}),y=(e=>(e[e.RED=.33]="RED",e[e.GREEN=.6]="GREEN",e[e.BLUE=.06]="BLUE",e[e.WHITE=.329]="WHITE",e))(y||{}),conversion_exports={};__export(conversion_exports,{lab2rgb:()=>lab2rgb,lab2xyz:()=>lab2xyz,rgb2hsl:()=>rgb2hsl,rgb2lab:()=>rgb2lab,rgb2xyz:()=>rgb2xyz,xyz2lab:()=>xyz2lab,xyz2rgb:()=>xyz2rgb});function correctGamma(e){return e>.04045?((e+.055)/1.055)**2.4:e/12.92}function rgb2xyz(e,t,r){return e=correctGamma(e/255),t=correctGamma(t/255),r=correctGamma(r/255),{x:e*.4124+t*.3576+r*.1805,y:e*.2126+t*.7152+r*.0722,z:e*.0193+t*.1192+r*.9505}}var arithmetic_exports={};__export(arithmetic_exports,{degrees2radians:()=>degrees2radians,inRange0to255:()=>inRange0to255,inRange0to255Rounded:()=>inRange0to255Rounded,intInRange:()=>intInRange,max3:()=>max3,min3:()=>min3,stableSort:()=>stableSort});function degrees2radians(e){return e*(Math.PI/180)}function max3(e,t,r){let n=e;return n<t&&(n=t),n<r&&(n=r),n}function min3(e,t,r){let n=e;return n>t&&(n=t),n>r&&(n=r),n}function intInRange(e,t,r){return e>r&&(e=r),e<t&&(e=t),e|0}function inRange0to255Rounded(e){return e=Math.round(e),e>255?e=255:e<0&&(e=0),e}function inRange0to255(e){return e>255?e=255:e<0&&(e=0),e}function stableSort(e,t){const r=typeof e[0];let n;if(r==="number"||r==="string"){const a=Object.create(null);for(let s=0,o=e.length;s<o;s++){const l=e[s];a[l]||a[l]===0||(a[l]=s)}n=e.sort((s,o)=>t(s,o)||a[s]-a[o])}else{const a=e.slice(0);n=e.sort((s,o)=>t(s,o)||a.indexOf(s)-a.indexOf(o))}return n}function rgb2hsl(e,t,r){const n=min3(e,t,r),a=max3(e,t,r),s=a-n,o=(n+a)/510;let l=0;o>0&&o<1&&(l=s/(o<.5?a+n:510-a-n));let f=0;return s>0&&(a===e?f=(t-r)/s:a===t?f=2+(r-e)/s:f=4+(e-t)/s,f*=60,f<0&&(f+=360)),{h:f,s:l,l:o}}var refX=.95047,refY=1,refZ=1.08883;function pivot(e){return e>.008856?e**(1/3):7.787*e+16/116}function xyz2lab(e,t,r){if(e=pivot(e/refX),t=pivot(t/refY),r=pivot(r/refZ),116*t-16<0)throw new Error("xxx");return{L:Math.max(0,116*t-16),a:500*(e-t),b:200*(t-r)}}function rgb2lab(e,t,r){const n=rgb2xyz(e,t,r);return xyz2lab(n.x,n.y,n.z)}var refX2=.95047,refY2=1,refZ2=1.08883;function pivot2(e){return e>.206893034?e**3:(e-16/116)/7.787}function lab2xyz(e,t,r){const n=(e+16)/116,a=t/500+n,s=n-r/200;return{x:refX2*pivot2(a),y:refY2*pivot2(n),z:refZ2*pivot2(s)}}function correctGamma2(e){return e>.0031308?1.055*e**(1/2.4)-.055:12.92*e}function xyz2rgb(e,t,r){const n=correctGamma2(e*3.2406+t*-1.5372+r*-.4986),a=correctGamma2(e*-.9689+t*1.8758+r*.0415),s=correctGamma2(e*.0557+t*-.204+r*1.057);return{r:inRange0to255Rounded(n*255),g:inRange0to255Rounded(a*255),b:inRange0to255Rounded(s*255)}}function lab2rgb(e,t,r){const n=lab2xyz(e,t,r);return xyz2rgb(n.x,n.y,n.z)}var distance_exports={};__export(distance_exports,{AbstractDistanceCalculator:()=>AbstractDistanceCalculator,AbstractEuclidean:()=>AbstractEuclidean,AbstractManhattan:()=>AbstractManhattan,CIE94GraphicArts:()=>CIE94GraphicArts,CIE94Textiles:()=>CIE94Textiles,CIEDE2000:()=>CIEDE2000,CMetric:()=>CMetric,Euclidean:()=>Euclidean,EuclideanBT709:()=>EuclideanBT709,EuclideanBT709NoAlpha:()=>EuclideanBT709NoAlpha,Manhattan:()=>Manhattan,ManhattanBT709:()=>ManhattanBT709,ManhattanNommyde:()=>ManhattanNommyde,PNGQuant:()=>PNGQuant});var AbstractDistanceCalculator=class{constructor(){__publicField(this,"_maxDistance"),__publicField(this,"_whitePoint"),this._setDefaults(),this.setWhitePoint(255,255,255,255)}setWhitePoint(e,t,r,n){this._whitePoint={r:e>0?255/e:0,g:t>0?255/t:0,b:r>0?255/r:0,a:n>0?255/n:0},this._maxDistance=this.calculateRaw(e,t,r,n,0,0,0,0)}calculateNormalized(e,t){return this.calculateRaw(e.r,e.g,e.b,e.a,t.r,t.g,t.b,t.a)/this._maxDistance}},AbstractCIE94=class extends AbstractDistanceCalculator{calculateRaw(e,t,r,n,a,s,o,l){const f=rgb2lab(inRange0to255(e*this._whitePoint.r),inRange0to255(t*this._whitePoint.g),inRange0to255(r*this._whitePoint.b)),u=rgb2lab(inRange0to255(a*this._whitePoint.r),inRange0to255(s*this._whitePoint.g),inRange0to255(o*this._whitePoint.b)),m=f.L-u.L,v=f.a-u.a,b=f.b-u.b,P=Math.sqrt(f.a*f.a+f.b*f.b),F=Math.sqrt(u.a*u.a+u.b*u.b),C=P-F;let D=v*v+b*b-C*C;D=D<0?0:Math.sqrt(D);const E=(l-n)*this._whitePoint.a*this._kA;return Math.sqrt((m/this._Kl)**2+(C/(1+this._K1*P))**2+(D/(1+this._K2*P))**2+E**2)}},CIE94Textiles=class extends AbstractCIE94{_setDefaults(){this._Kl=2,this._K1=.048,this._K2=.014,this._kA=.25*50/255}},CIE94GraphicArts=class extends AbstractCIE94{_setDefaults(){this._Kl=1,this._K1=.045,this._K2=.015,this._kA=.25*100/255}},_CIEDE2000=class extends AbstractDistanceCalculator{_setDefaults(){}static _calculatehp(e,t){const r=Math.atan2(e,t);return r>=0?r:r+_CIEDE2000._deg360InRad}static _calculateRT(e,t){const r=t**7,n=2*Math.sqrt(r/(r+_CIEDE2000._pow25to7)),a=_CIEDE2000._deg30InRad*Math.exp(-(((e-_CIEDE2000._deg275InRad)/_CIEDE2000._deg25InRad)**2));return-Math.sin(2*a)*n}static _calculateT(e){return 1-.17*Math.cos(e-_CIEDE2000._deg30InRad)+.24*Math.cos(e*2)+.32*Math.cos(e*3+_CIEDE2000._deg6InRad)-.2*Math.cos(e*4-_CIEDE2000._deg63InRad)}static _calculate_ahp(e,t,r,n){const a=r+n;return e===0?a:t<=_CIEDE2000._deg180InRad?a/2:a<_CIEDE2000._deg360InRad?(a+_CIEDE2000._deg360InRad)/2:(a-_CIEDE2000._deg360InRad)/2}static _calculate_dHp(e,t,r,n){let a;return e===0?a=0:t<=_CIEDE2000._deg180InRad?a=r-n:r<=n?a=r-n+_CIEDE2000._deg360InRad:a=r-n-_CIEDE2000._deg360InRad,2*Math.sqrt(e)*Math.sin(a/2)}calculateRaw(e,t,r,n,a,s,o,l){const f=rgb2lab(inRange0to255(e*this._whitePoint.r),inRange0to255(t*this._whitePoint.g),inRange0to255(r*this._whitePoint.b)),u=rgb2lab(inRange0to255(a*this._whitePoint.r),inRange0to255(s*this._whitePoint.g),inRange0to255(o*this._whitePoint.b)),m=(l-n)*this._whitePoint.a*_CIEDE2000._kA,v=this.calculateRawInLab(f,u);return Math.sqrt(v+m*m)}calculateRawInLab(e,t){const r=e.L,n=e.a,a=e.b,s=t.L,o=t.a,l=t.b,f=Math.sqrt(n*n+a*a),u=Math.sqrt(o*o+l*l),m=((f+u)/2)**7,v=.5*(1-Math.sqrt(m/(m+_CIEDE2000._pow25to7))),b=(1+v)*n,P=(1+v)*o,F=Math.sqrt(b*b+a*a),C=Math.sqrt(P*P+l*l),D=F*C,E=_CIEDE2000._calculatehp(a,b),k=_CIEDE2000._calculatehp(l,P),j=Math.abs(E-k),W=s-r,M=C-F,S=_CIEDE2000._calculate_dHp(D,j,k,E),T=_CIEDE2000._calculate_ahp(D,j,E,k),V=_CIEDE2000._calculateT(T),_=(F+C)/2,ee=((r+s)/2-50)**2,re=1+.015*ee/Math.sqrt(20+ee),te=1+.045*_,oe=1+.015*V*_,he=_CIEDE2000._calculateRT(T,_),me=W/re,we=M/te,Se=S/oe;return me**2+we**2+Se**2+he*we*Se}},CIEDE2000=_CIEDE2000;__publicField(CIEDE2000,"_kA",.25*100/255);__publicField(CIEDE2000,"_pow25to7",25**7);__publicField(CIEDE2000,"_deg360InRad",degrees2radians(360));__publicField(CIEDE2000,"_deg180InRad",degrees2radians(180));__publicField(CIEDE2000,"_deg30InRad",degrees2radians(30));__publicField(CIEDE2000,"_deg6InRad",degrees2radians(6));__publicField(CIEDE2000,"_deg63InRad",degrees2radians(63));__publicField(CIEDE2000,"_deg275InRad",degrees2radians(275));__publicField(CIEDE2000,"_deg25InRad",degrees2radians(25));var CMetric=class extends AbstractDistanceCalculator{calculateRaw(e,t,r,n,a,s,o,l){const f=(e+a)/2*this._whitePoint.r,u=(e-a)*this._whitePoint.r,m=(t-s)*this._whitePoint.g,v=(r-o)*this._whitePoint.b,b=((512+f)*u*u>>8)+4*m*m+((767-f)*v*v>>8),P=(l-n)*this._whitePoint.a;return Math.sqrt(b+P*P)}_setDefaults(){}},AbstractEuclidean=class extends AbstractDistanceCalculator{calculateRaw(e,t,r,n,a,s,o,l){const f=a-e,u=s-t,m=o-r,v=l-n;return Math.sqrt(this._kR*f*f+this._kG*u*u+this._kB*m*m+this._kA*v*v)}},Euclidean=class extends AbstractEuclidean{_setDefaults(){this._kR=1,this._kG=1,this._kB=1,this._kA=1}},EuclideanBT709=class extends AbstractEuclidean{_setDefaults(){this._kR=.2126,this._kG=.7152,this._kB=.0722,this._kA=1}},EuclideanBT709NoAlpha=class extends AbstractEuclidean{_setDefaults(){this._kR=.2126,this._kG=.7152,this._kB=.0722,this._kA=0}},AbstractManhattan=class extends AbstractDistanceCalculator{calculateRaw(e,t,r,n,a,s,o,l){let f=a-e,u=s-t,m=o-r,v=l-n;return f<0&&(f=0-f),u<0&&(u=0-u),m<0&&(m=0-m),v<0&&(v=0-v),this._kR*f+this._kG*u+this._kB*m+this._kA*v}},Manhattan=class extends AbstractManhattan{_setDefaults(){this._kR=1,this._kG=1,this._kB=1,this._kA=1}},ManhattanNommyde=class extends AbstractManhattan{_setDefaults(){this._kR=.4984,this._kG=.8625,this._kB=.2979,this._kA=1}},ManhattanBT709=class extends AbstractManhattan{_setDefaults(){this._kR=.2126,this._kG=.7152,this._kB=.0722,this._kA=1}},PNGQuant=class extends AbstractDistanceCalculator{calculateRaw(e,t,r,n,a,s,o,l){const f=(l-n)*this._whitePoint.a;return this._colordifferenceCh(e*this._whitePoint.r,a*this._whitePoint.r,f)+this._colordifferenceCh(t*this._whitePoint.g,s*this._whitePoint.g,f)+this._colordifferenceCh(r*this._whitePoint.b,o*this._whitePoint.b,f)}_colordifferenceCh(e,t,r){const n=e-t,a=n+r;return n*n+a*a}_setDefaults(){}},palette_exports={};__export(palette_exports,{AbstractPaletteQuantizer:()=>AbstractPaletteQuantizer,ColorHistogram:()=>ColorHistogram,NeuQuant:()=>NeuQuant,NeuQuantFloat:()=>NeuQuantFloat,RGBQuant:()=>RGBQuant,WuColorCube:()=>WuColorCube,WuQuant:()=>WuQuant});var AbstractPaletteQuantizer=class{quantizeSync(){for(const e of this.quantize())if(e.palette)return e.palette;throw new Error("unreachable")}},Point=class{constructor(){__publicField(this,"r"),__publicField(this,"g"),__publicField(this,"b"),__publicField(this,"a"),__publicField(this,"uint32"),__publicField(this,"rgba"),this.uint32=-1>>>0,this.r=this.g=this.b=this.a=0,this.rgba=new Array(4),this.rgba[0]=0,this.rgba[1]=0,this.rgba[2]=0,this.rgba[3]=0}static createByQuadruplet(e){const t=new Point;return t.r=e[0]|0,t.g=e[1]|0,t.b=e[2]|0,t.a=e[3]|0,t._loadUINT32(),t._loadQuadruplet(),t}static createByRGBA(e,t,r,n){const a=new Point;return a.r=e|0,a.g=t|0,a.b=r|0,a.a=n|0,a._loadUINT32(),a._loadQuadruplet(),a}static createByUint32(e){const t=new Point;return t.uint32=e>>>0,t._loadRGBA(),t._loadQuadruplet(),t}from(e){this.r=e.r,this.g=e.g,this.b=e.b,this.a=e.a,this.uint32=e.uint32,this.rgba[0]=e.r,this.rgba[1]=e.g,this.rgba[2]=e.b,this.rgba[3]=e.a}getLuminosity(e){let t=this.r,r=this.g,n=this.b;return e&&(t=Math.min(255,255-this.a+this.a*t/255),r=Math.min(255,255-this.a+this.a*r/255),n=Math.min(255,255-this.a+this.a*n/255)),t*.2126+r*.7152+n*.0722}_loadUINT32(){this.uint32=(this.a<<24|this.b<<16|this.g<<8|this.r)>>>0}_loadRGBA(){this.r=this.uint32&255,this.g=this.uint32>>>8&255,this.b=this.uint32>>>16&255,this.a=this.uint32>>>24&255}_loadQuadruplet(){this.rgba[0]=this.r,this.rgba[1]=this.g,this.rgba[2]=this.b,this.rgba[3]=this.a}},PointContainer=class{constructor(){__publicField(this,"_pointArray"),__publicField(this,"_width"),__publicField(this,"_height"),this._width=0,this._height=0,this._pointArray=[]}getWidth(){return this._width}getHeight(){return this._height}setWidth(e){this._width=e}setHeight(e){this._height=e}getPointArray(){return this._pointArray}clone(){const e=new PointContainer;e._width=this._width,e._height=this._height;for(let t=0,r=this._pointArray.length;t<r;t++)e._pointArray[t]=Point.createByUint32(this._pointArray[t].uint32|0);return e}toUint32Array(){const e=this._pointArray.length,t=new Uint32Array(e);for(let r=0;r<e;r++)t[r]=this._pointArray[r].uint32;return t}toUint8Array(){return new Uint8Array(this.toUint32Array().buffer)}static fromHTMLImageElement(e){const t=e.naturalWidth,r=e.naturalHeight,n=document.createElement("canvas");return n.width=t,n.height=r,n.getContext("2d").drawImage(e,0,0,t,r,0,0,t,r),PointContainer.fromHTMLCanvasElement(n)}static fromHTMLCanvasElement(e){const t=e.width,r=e.height,a=e.getContext("2d").getImageData(0,0,t,r);return PointContainer.fromImageData(a)}static fromImageData(e){const t=e.width,r=e.height;return PointContainer.fromUint8Array(e.data,t,r)}static fromUint8Array(e,t,r){switch(Object.prototype.toString.call(e)){case"[object Uint8ClampedArray]":case"[object Uint8Array]":break;default:e=new Uint8Array(e)}const n=new Uint32Array(e.buffer);return PointContainer.fromUint32Array(n,t,r)}static fromUint32Array(e,t,r){const n=new PointContainer;n._width=t,n._height=r;for(let a=0,s=e.length;a<s;a++)n._pointArray[a]=Point.createByUint32(e[a]|0);return n}static fromBuffer(e,t,r){const n=new Uint32Array(e.buffer,e.byteOffset,e.byteLength/Uint32Array.BYTES_PER_ELEMENT);return PointContainer.fromUint32Array(n,t,r)}},hueGroups=10;function hueGroup(e,t){const n=360/t,a=n/2;for(let s=1,o=n-a;s<t;s++,o+=n)if(e>=o&&e<o+n)return s;return 0}var Palette=class{constructor(){__publicField(this,"_pointContainer"),__publicField(this,"_pointArray",[]),__publicField(this,"_i32idx",{}),this._pointContainer=new PointContainer,this._pointContainer.setHeight(1),this._pointArray=this._pointContainer.getPointArray()}add(e){this._pointArray.push(e),this._pointContainer.setWidth(this._pointArray.length)}has(e){for(let t=this._pointArray.length-1;t>=0;t--)if(e.uint32===this._pointArray[t].uint32)return!0;return!1}getNearestColor(e,t){return this._pointArray[this._getNearestIndex(e,t)|0]}getPointContainer(){return this._pointContainer}_nearestPointFromCache(e){return typeof this._i32idx[e]=="number"?this._i32idx[e]:-1}_getNearestIndex(e,t){let r=this._nearestPointFromCache(""+t.uint32);if(r>=0)return r;let n=Number.MAX_VALUE;r=0;for(let a=0,s=this._pointArray.length;a<s;a++){const o=this._pointArray[a],l=e.calculateRaw(t.r,t.g,t.b,t.a,o.r,o.g,o.b,o.a);l<n&&(n=l,r=a)}return this._i32idx[t.uint32]=r,r}sort(){this._i32idx={},this._pointArray.sort((e,t)=>{const r=rgb2hsl(e.r,e.g,e.b),n=rgb2hsl(t.r,t.g,t.b),a=e.r===e.g&&e.g===e.b?0:1+hueGroup(r.h,hueGroups),o=(t.r===t.g&&t.g===t.b?0:1+hueGroup(n.h,hueGroups))-a;if(o)return-o;const l=e.getLuminosity(!0),f=t.getLuminosity(!0);if(f-l!==0)return f-l;const u=(n.s*100|0)-(r.s*100|0);return u?-u:0})}},utils_exports={};__export(utils_exports,{HueStatistics:()=>HueStatistics,Palette:()=>Palette,Point:()=>Point,PointContainer:()=>PointContainer,ProgressTracker:()=>ProgressTracker,arithmetic:()=>arithmetic_exports});var HueGroup=class{constructor(){__publicField(this,"num",0),__publicField(this,"cols",[])}},HueStatistics=class{constructor(e,t){__publicField(this,"_numGroups"),__publicField(this,"_minCols"),__publicField(this,"_stats"),__publicField(this,"_groupsFull"),this._numGroups=e,this._minCols=t,this._stats=[];for(let r=0;r<=e;r++)this._stats[r]=new HueGroup;this._groupsFull=0}check(e){this._groupsFull===this._numGroups+1&&(this.check=()=>{});const t=e&255,r=e>>>8&255,n=e>>>16&255,a=t===r&&r===n?0:1+hueGroup(rgb2hsl(t,r,n).h,this._numGroups),s=this._stats[a],o=this._minCols;s.num++,!(s.num>o)&&(s.num===o&&this._groupsFull++,s.num<=o&&this._stats[a].cols.push(e))}injectIntoDictionary(e){for(let t=0;t<=this._numGroups;t++)this._stats[t].num<=this._minCols&&this._stats[t].cols.forEach(r=>{e[r]?e[r]++:e[r]=1})}injectIntoArray(e){for(let t=0;t<=this._numGroups;t++)this._stats[t].num<=this._minCols&&this._stats[t].cols.forEach(r=>{e.indexOf(r)===-1&&e.push(r)})}},_ProgressTracker=class{constructor(e,t){__publicField(this,"progress"),__publicField(this,"_step"),__publicField(this,"_range"),__publicField(this,"_last"),__publicField(this,"_progressRange"),this._range=e,this._progressRange=t,this._step=Math.max(1,this._range/(_ProgressTracker.steps+1)|0),this._last=-this._step,this.progress=0}shouldNotify(e){return e-this._last>=this._step?(this._last=e,this.progress=Math.min(this._progressRange*this._last/this._range,this._progressRange),!0):!1}},ProgressTracker=_ProgressTracker;__publicField(ProgressTracker,"steps",100);var networkBiasShift=3,Neuron=class{constructor(e){__publicField(this,"r"),__publicField(this,"g"),__publicField(this,"b"),__publicField(this,"a"),this.r=this.g=this.b=this.a=e}toPoint(){return Point.createByRGBA(this.r>>networkBiasShift,this.g>>networkBiasShift,this.b>>networkBiasShift,this.a>>networkBiasShift)}subtract(e,t,r,n){this.r-=e|0,this.g-=t|0,this.b-=r|0,this.a-=n|0}},_NeuQuant=class extends AbstractPaletteQuantizer{constructor(e,t=256){super(),__publicField(this,"_pointArray"),__publicField(this,"_networkSize"),__publicField(this,"_network"),__publicField(this,"_sampleFactor"),__publicField(this,"_radPower"),__publicField(this,"_freq"),__publicField(this,"_bias"),__publicField(this,"_distance"),this._distance=e,this._pointArray=[],this._sampleFactor=1,this._networkSize=t,this._distance.setWhitePoint(255<<networkBiasShift,255<<networkBiasShift,255<<networkBiasShift,255<<networkBiasShift)}sample(e){this._pointArray=this._pointArray.concat(e.getPointArray())}*quantize(){this._init(),yield*this._learn(),yield{palette:this._buildPalette(),progress:100}}_init(){this._freq=[],this._bias=[],this._radPower=[],this._network=[];for(let e=0;e<this._networkSize;e++)this._network[e]=new Neuron((e<<networkBiasShift+8)/this._networkSize|0),this._freq[e]=_NeuQuant._initialBias/this._networkSize|0,this._bias[e]=0}*_learn(){let e=this._sampleFactor;const t=this._pointArray.length;t<_NeuQuant._minpicturebytes&&(e=1);const r=30+(e-1)/3|0,n=t/e|0;let a=n/_NeuQuant._nCycles|0,s=_NeuQuant._initAlpha,o=(this._networkSize>>3)*_NeuQuant._radiusBias,l=o>>_NeuQuant._radiusBiasShift;l<=1&&(l=0);for(let m=0;m<l;m++)this._radPower[m]=s*((l*l-m*m)*_NeuQuant._radBias/(l*l))>>>0;let f;t<_NeuQuant._minpicturebytes?f=1:t%_NeuQuant._prime1!==0?f=_NeuQuant._prime1:t%_NeuQuant._prime2!==0?f=_NeuQuant._prime2:t%_NeuQuant._prime3!==0?f=_NeuQuant._prime3:f=_NeuQuant._prime4;const u=new ProgressTracker(n,99);for(let m=0,v=0;m<n;){u.shouldNotify(m)&&(yield{progress:u.progress});const b=this._pointArray[v],P=b.b<<networkBiasShift,F=b.g<<networkBiasShift,C=b.r<<networkBiasShift,D=b.a<<networkBiasShift,E=this._contest(P,F,C,D);if(this._alterSingle(s,E,P,F,C,D),l!==0&&this._alterNeighbour(l,E,P,F,C,D),v+=f,v>=t&&(v-=t),m++,a===0&&(a=1),m%a===0){s-=s/r|0,o-=o/_NeuQuant._radiusDecrease|0,l=o>>_NeuQuant._radiusBiasShift,l<=1&&(l=0);for(let k=0;k<l;k++)this._radPower[k]=s*((l*l-k*k)*_NeuQuant._radBias/(l*l))>>>0}}}_buildPalette(){const e=new Palette;return this._network.forEach(t=>{e.add(t.toPoint())}),e.sort(),e}_alterNeighbour(e,t,r,n,a,s){let o=t-e;o<-1&&(o=-1);let l=t+e;l>this._networkSize&&(l=this._networkSize);let f=t+1,u=t-1,m=1;for(;f<l||u>o;){const v=this._radPower[m++]/_NeuQuant._alphaRadBias;if(f<l){const b=this._network[f++];b.subtract(v*(b.r-a),v*(b.g-n),v*(b.b-r),v*(b.a-s))}if(u>o){const b=this._network[u--];b.subtract(v*(b.r-a),v*(b.g-n),v*(b.b-r),v*(b.a-s))}}}_alterSingle(e,t,r,n,a,s){e/=_NeuQuant._initAlpha;const o=this._network[t];o.subtract(e*(o.r-a),e*(o.g-n),e*(o.b-r),e*(o.a-s))}_contest(e,t,r,n){const a=1020<<networkBiasShift;let s=~(1<<31),o=s,l=-1,f=l;for(let u=0;u<this._networkSize;u++){const m=this._network[u],v=this._distance.calculateNormalized(m,{r,g:t,b:e,a:n})*a|0;v<s&&(s=v,l=u);const b=v-(this._bias[u]>>_NeuQuant._initialBiasShift-networkBiasShift);b<o&&(o=b,f=u);const P=this._freq[u]>>_NeuQuant._betaShift;this._freq[u]-=P,this._bias[u]+=P<<_NeuQuant._gammaShift}return this._freq[l]+=_NeuQuant._beta,this._bias[l]-=_NeuQuant._betaGamma,f}},NeuQuant=_NeuQuant;__publicField(NeuQuant,"_prime1",499);__publicField(NeuQuant,"_prime2",491);__publicField(NeuQuant,"_prime3",487);__publicField(NeuQuant,"_prime4",503);__publicField(NeuQuant,"_minpicturebytes",_NeuQuant._prime4);__publicField(NeuQuant,"_nCycles",100);__publicField(NeuQuant,"_initialBiasShift",16);__publicField(NeuQuant,"_initialBias",1<<_NeuQuant._initialBiasShift);__publicField(NeuQuant,"_gammaShift",10);__publicField(NeuQuant,"_betaShift",10);__publicField(NeuQuant,"_beta",_NeuQuant._initialBias>>_NeuQuant._betaShift);__publicField(NeuQuant,"_betaGamma",_NeuQuant._initialBias<<_NeuQuant._gammaShift-_NeuQuant._betaShift);__publicField(NeuQuant,"_radiusBiasShift",6);__publicField(NeuQuant,"_radiusBias",1<<_NeuQuant._radiusBiasShift);__publicField(NeuQuant,"_radiusDecrease",30);__publicField(NeuQuant,"_alphaBiasShift",10);__publicField(NeuQuant,"_initAlpha",1<<_NeuQuant._alphaBiasShift);__publicField(NeuQuant,"_radBiasShift",8);__publicField(NeuQuant,"_radBias",1<<_NeuQuant._radBiasShift);__publicField(NeuQuant,"_alphaRadBiasShift",_NeuQuant._alphaBiasShift+_NeuQuant._radBiasShift);__publicField(NeuQuant,"_alphaRadBias",1<<_NeuQuant._alphaRadBiasShift);var networkBiasShift2=3,NeuronFloat=class{constructor(e){__publicField(this,"r"),__publicField(this,"g"),__publicField(this,"b"),__publicField(this,"a"),this.r=this.g=this.b=this.a=e}toPoint(){return Point.createByRGBA(this.r>>networkBiasShift2,this.g>>networkBiasShift2,this.b>>networkBiasShift2,this.a>>networkBiasShift2)}subtract(e,t,r,n){this.r-=e,this.g-=t,this.b-=r,this.a-=n}},_NeuQuantFloat=class extends AbstractPaletteQuantizer{constructor(e,t=256){super(),__publicField(this,"_pointArray"),__publicField(this,"_networkSize"),__publicField(this,"_network"),__publicField(this,"_sampleFactor"),__publicField(this,"_radPower"),__publicField(this,"_freq"),__publicField(this,"_bias"),__publicField(this,"_distance"),this._distance=e,this._pointArray=[],this._sampleFactor=1,this._networkSize=t,this._distance.setWhitePoint(255<<networkBiasShift2,255<<networkBiasShift2,255<<networkBiasShift2,255<<networkBiasShift2)}sample(e){this._pointArray=this._pointArray.concat(e.getPointArray())}*quantize(){this._init(),yield*this._learn(),yield{palette:this._buildPalette(),progress:100}}_init(){this._freq=[],this._bias=[],this._radPower=[],this._network=[];for(let e=0;e<this._networkSize;e++)this._network[e]=new NeuronFloat((e<<networkBiasShift2+8)/this._networkSize),this._freq[e]=_NeuQuantFloat._initialBias/this._networkSize,this._bias[e]=0}*_learn(){let e=this._sampleFactor;const t=this._pointArray.length;t<_NeuQuantFloat._minpicturebytes&&(e=1);const r=30+(e-1)/3,n=t/e;let a=n/_NeuQuantFloat._nCycles|0,s=_NeuQuantFloat._initAlpha,o=(this._networkSize>>3)*_NeuQuantFloat._radiusBias,l=o>>_NeuQuantFloat._radiusBiasShift;l<=1&&(l=0);for(let m=0;m<l;m++)this._radPower[m]=s*((l*l-m*m)*_NeuQuantFloat._radBias/(l*l));let f;t<_NeuQuantFloat._minpicturebytes?f=1:t%_NeuQuantFloat._prime1!==0?f=_NeuQuantFloat._prime1:t%_NeuQuantFloat._prime2!==0?f=_NeuQuantFloat._prime2:t%_NeuQuantFloat._prime3!==0?f=_NeuQuantFloat._prime3:f=_NeuQuantFloat._prime4;const u=new ProgressTracker(n,99);for(let m=0,v=0;m<n;){u.shouldNotify(m)&&(yield{progress:u.progress});const b=this._pointArray[v],P=b.b<<networkBiasShift2,F=b.g<<networkBiasShift2,C=b.r<<networkBiasShift2,D=b.a<<networkBiasShift2,E=this._contest(P,F,C,D);if(this._alterSingle(s,E,P,F,C,D),l!==0&&this._alterNeighbour(l,E,P,F,C,D),v+=f,v>=t&&(v-=t),m++,a===0&&(a=1),m%a===0){s-=s/r,o-=o/_NeuQuantFloat._radiusDecrease,l=o>>_NeuQuantFloat._radiusBiasShift,l<=1&&(l=0);for(let k=0;k<l;k++)this._radPower[k]=s*((l*l-k*k)*_NeuQuantFloat._radBias/(l*l))}}}_buildPalette(){const e=new Palette;return this._network.forEach(t=>{e.add(t.toPoint())}),e.sort(),e}_alterNeighbour(e,t,r,n,a,s){let o=t-e;o<-1&&(o=-1);let l=t+e;l>this._networkSize&&(l=this._networkSize);let f=t+1,u=t-1,m=1;for(;f<l||u>o;){const v=this._radPower[m++]/_NeuQuantFloat._alphaRadBias;if(f<l){const b=this._network[f++];b.subtract(v*(b.r-a),v*(b.g-n),v*(b.b-r),v*(b.a-s))}if(u>o){const b=this._network[u--];b.subtract(v*(b.r-a),v*(b.g-n),v*(b.b-r),v*(b.a-s))}}}_alterSingle(e,t,r,n,a,s){e/=_NeuQuantFloat._initAlpha;const o=this._network[t];o.subtract(e*(o.r-a),e*(o.g-n),e*(o.b-r),e*(o.a-s))}_contest(e,t,r,n){const a=1020<<networkBiasShift2;let s=~(1<<31),o=s,l=-1,f=l;for(let u=0;u<this._networkSize;u++){const m=this._network[u],v=this._distance.calculateNormalized(m,{r,g:t,b:e,a:n})*a;v<s&&(s=v,l=u);const b=v-(this._bias[u]>>_NeuQuantFloat._initialBiasShift-networkBiasShift2);b<o&&(o=b,f=u);const P=this._freq[u]>>_NeuQuantFloat._betaShift;this._freq[u]-=P,this._bias[u]+=P<<_NeuQuantFloat._gammaShift}return this._freq[l]+=_NeuQuantFloat._beta,this._bias[l]-=_NeuQuantFloat._betaGamma,f}},NeuQuantFloat=_NeuQuantFloat;__publicField(NeuQuantFloat,"_prime1",499);__publicField(NeuQuantFloat,"_prime2",491);__publicField(NeuQuantFloat,"_prime3",487);__publicField(NeuQuantFloat,"_prime4",503);__publicField(NeuQuantFloat,"_minpicturebytes",_NeuQuantFloat._prime4);__publicField(NeuQuantFloat,"_nCycles",100);__publicField(NeuQuantFloat,"_initialBiasShift",16);__publicField(NeuQuantFloat,"_initialBias",1<<_NeuQuantFloat._initialBiasShift);__publicField(NeuQuantFloat,"_gammaShift",10);__publicField(NeuQuantFloat,"_betaShift",10);__publicField(NeuQuantFloat,"_beta",_NeuQuantFloat._initialBias>>_NeuQuantFloat._betaShift);__publicField(NeuQuantFloat,"_betaGamma",_NeuQuantFloat._initialBias<<_NeuQuantFloat._gammaShift-_NeuQuantFloat._betaShift);__publicField(NeuQuantFloat,"_radiusBiasShift",6);__publicField(NeuQuantFloat,"_radiusBias",1<<_NeuQuantFloat._radiusBiasShift);__publicField(NeuQuantFloat,"_radiusDecrease",30);__publicField(NeuQuantFloat,"_alphaBiasShift",10);__publicField(NeuQuantFloat,"_initAlpha",1<<_NeuQuantFloat._alphaBiasShift);__publicField(NeuQuantFloat,"_radBiasShift",8);__publicField(NeuQuantFloat,"_radBias",1<<_NeuQuantFloat._radBiasShift);__publicField(NeuQuantFloat,"_alphaRadBiasShift",_NeuQuantFloat._alphaBiasShift+_NeuQuantFloat._radBiasShift);__publicField(NeuQuantFloat,"_alphaRadBias",1<<_NeuQuantFloat._alphaRadBiasShift);var _ColorHistogram=class{constructor(e,t){__publicField(this,"_method"),__publicField(this,"_hueStats"),__publicField(this,"_histogram"),__publicField(this,"_initColors"),__publicField(this,"_minHueCols"),this._method=e,this._minHueCols=t<<2,this._initColors=t<<2,this._hueStats=new HueStatistics(_ColorHistogram._hueGroups,this._minHueCols),this._histogram=Object.create(null)}sample(e){switch(this._method){case 1:this._colorStats1D(e);break;case 2:this._colorStats2D(e);break}}getImportanceSortedColorsIDXI32(){const e=stableSort(Object.keys(this._histogram),(r,n)=>this._histogram[n]-this._histogram[r]);if(e.length===0)return[];let t;switch(this._method){case 1:const r=Math.min(e.length,this._initColors),n=e[r-1],a=this._histogram[n];t=e.slice(0,r);let s=r;const o=e.length;for(;s<o&&this._histogram[e[s]]===a;)t.push(e[s++]);this._hueStats.injectIntoArray(t);break;case 2:t=e;break;default:throw new Error("Incorrect method")}return t.map(r=>+r)}_colorStats1D(e){const t=this._histogram,r=e.getPointArray(),n=r.length;for(let a=0;a<n;a++){const s=r[a].uint32;this._hueStats.check(s),s in t?t[s]++:t[s]=1}}_colorStats2D(e){const t=e.getWidth(),r=e.getHeight(),n=e.getPointArray(),a=_ColorHistogram._boxSize[0],s=_ColorHistogram._boxSize[1],o=a*s,l=this._makeBoxes(t,r,a,s),f=this._histogram;l.forEach(u=>{let m=Math.round(u.w*u.h/o)*_ColorHistogram._boxPixels;m<2&&(m=2);const v={};this._iterateBox(u,t,b=>{const P=n[b].uint32;this._hueStats.check(P),P in f?f[P]++:P in v?++v[P]>=m&&(f[P]=v[P]):v[P]=1})}),this._hueStats.injectIntoDictionary(f)}_iterateBox(e,t,r){const n=e,a=n.y*t+n.x,s=(n.y+n.h-1)*t+(n.x+n.w-1),o=t-n.w+1;let l=0,f=a;do r.call(this,f),f+=++l%n.w===0?o:1;while(f<=s)}_makeBoxes(e,t,r,n){const a=e%r,s=t%n,o=e-a,l=t-s,f=[];for(let u=0;u<t;u+=n)for(let m=0;m<e;m+=r)f.push({x:m,y:u,w:m===o?a:r,h:u===l?s:n});return f}},ColorHistogram=_ColorHistogram;__publicField(ColorHistogram,"_boxSize",[64,64]);__publicField(ColorHistogram,"_boxPixels",2);__publicField(ColorHistogram,"_hueGroups",10);var RemovedColor=class{constructor(e,t,r){__publicField(this,"index"),__publicField(this,"color"),__publicField(this,"distance"),this.index=e,this.color=t,this.distance=r}},RGBQuant=class extends AbstractPaletteQuantizer{constructor(e,t=256,r=2){super(),__publicField(this,"_colors"),__publicField(this,"_initialDistance"),__publicField(this,"_distanceIncrement"),__publicField(this,"_histogram"),__publicField(this,"_distance"),this._distance=e,this._colors=t,this._histogram=new ColorHistogram(r,t),this._initialDistance=.01,this._distanceIncrement=.005}sample(e){this._histogram.sample(e)}*quantize(){const e=this._histogram.getImportanceSortedColorsIDXI32();if(e.length===0)throw new Error("No colors in image");yield*this._buildPalette(e)}*_buildPalette(e){const t=new Palette,r=t.getPointContainer().getPointArray(),n=new Array(e.length);for(let m=0;m<e.length;m++)r.push(Point.createByUint32(e[m])),n[m]=1;const a=r.length,s=[];let o=a,l=this._initialDistance;const f=new ProgressTracker(o-this._colors,99);for(;o>this._colors;){s.length=0;for(let m=0;m<a;m++){if(f.shouldNotify(a-o)&&(yield{progress:f.progress}),n[m]===0)continue;const v=r[m];for(let b=m+1;b<a;b++){if(n[b]===0)continue;const P=r[b],F=this._distance.calculateNormalized(v,P);F<l&&(s.push(new RemovedColor(b,P,F)),n[b]=0,o--)}}l+=o>this._colors*3?this._initialDistance:this._distanceIncrement}if(o<this._colors){stableSort(s,(v,b)=>b.distance-v.distance);let m=0;for(;o<this._colors&&m<s.length;){const v=s[m];n[v.index]=1,o++,m++}}let u=r.length;for(let m=u-1;m>=0;m--)n[m]===0&&(m!==u-1&&(r[m]=r[u-1]),--u);r.length=u,t.sort(),yield{palette:t,progress:100}}};function createArray1D(e){const t=[];for(let r=0;r<e;r++)t[r]=0;return t}function createArray4D(e,t,r,n){const a=new Array(e);for(let s=0;s<e;s++){a[s]=new Array(t);for(let o=0;o<t;o++){a[s][o]=new Array(r);for(let l=0;l<r;l++){a[s][o][l]=new Array(n);for(let f=0;f<n;f++)a[s][o][l][f]=0}}}return a}function createArray3D(e,t,r){const n=new Array(e);for(let a=0;a<e;a++){n[a]=new Array(t);for(let s=0;s<t;s++){n[a][s]=new Array(r);for(let o=0;o<r;o++)n[a][s][o]=0}}return n}function fillArray3D(e,t,r,n,a){for(let s=0;s<t;s++){e[s]=[];for(let o=0;o<r;o++){e[s][o]=[];for(let l=0;l<n;l++)e[s][o][l]=a}}}function fillArray1D(e,t,r){for(let n=0;n<t;n++)e[n]=r}var WuColorCube=class{constructor(){__publicField(this,"redMinimum"),__publicField(this,"redMaximum"),__publicField(this,"greenMinimum"),__publicField(this,"greenMaximum"),__publicField(this,"blueMinimum"),__publicField(this,"blueMaximum"),__publicField(this,"volume"),__publicField(this,"alphaMinimum"),__publicField(this,"alphaMaximum")}},_WuQuant=class extends AbstractPaletteQuantizer{constructor(e,t=256,r=5){super(),__publicField(this,"_reds"),__publicField(this,"_greens"),__publicField(this,"_blues"),__publicField(this,"_alphas"),__publicField(this,"_sums"),__publicField(this,"_weights"),__publicField(this,"_momentsRed"),__publicField(this,"_momentsGreen"),__publicField(this,"_momentsBlue"),__publicField(this,"_momentsAlpha"),__publicField(this,"_moments"),__publicField(this,"_table"),__publicField(this,"_pixels"),__publicField(this,"_cubes"),__publicField(this,"_colors"),__publicField(this,"_significantBitsPerChannel"),__publicField(this,"_maxSideIndex"),__publicField(this,"_alphaMaxSideIndex"),__publicField(this,"_sideSize"),__publicField(this,"_alphaSideSize"),__publicField(this,"_distance"),this._distance=e,this._setQuality(r),this._initialize(t)}sample(e){const t=e.getPointArray();for(let r=0,n=t.length;r<n;r++)this._addColor(t[r]);this._pixels=this._pixels.concat(t)}*quantize(){yield*this._preparePalette();const e=new Palette;for(let t=0;t<this._colors;t++)if(this._sums[t]>0){const r=this._sums[t],n=this._reds[t]/r,a=this._greens[t]/r,s=this._blues[t]/r,o=this._alphas[t]/r,l=Point.createByRGBA(n|0,a|0,s|0,o|0);e.add(l)}e.sort(),yield{palette:e,progress:100}}*_preparePalette(){yield*this._calculateMoments();let e=0;const t=createArray1D(this._colors);for(let o=1;o<this._colors;++o){this._cut(this._cubes[e],this._cubes[o])?(t[e]=this._cubes[e].volume>1?this._calculateVariance(this._cubes[e]):0,t[o]=this._cubes[o].volume>1?this._calculateVariance(this._cubes[o]):0):(t[e]=0,o--),e=0;let l=t[0];for(let f=1;f<=o;++f)t[f]>l&&(l=t[f],e=f);if(l<=0){this._colors=o+1;break}}const r=[],n=[],a=[],s=[];for(let o=0;o<this._colors;++o){const l=_WuQuant._volume(this._cubes[o],this._weights);l>0?(r[o]=_WuQuant._volume(this._cubes[o],this._momentsRed)/l|0,n[o]=_WuQuant._volume(this._cubes[o],this._momentsGreen)/l|0,a[o]=_WuQuant._volume(this._cubes[o],this._momentsBlue)/l|0,s[o]=_WuQuant._volume(this._cubes[o],this._momentsAlpha)/l|0):(r[o]=0,n[o]=0,a[o]=0,s[o]=0)}this._reds=createArray1D(this._colors+1),this._greens=createArray1D(this._colors+1),this._blues=createArray1D(this._colors+1),this._alphas=createArray1D(this._colors+1),this._sums=createArray1D(this._colors+1);for(let o=0,l=this._pixels.length;o<l;o++){const f=this._pixels[o];let m=-1,v=Number.MAX_VALUE;for(let b=0;b<this._colors;b++){const P=r[b],F=n[b],C=a[b],D=s[b],E=this._distance.calculateRaw(P,F,C,D,f.r,f.g,f.b,f.a);E<v&&(v=E,m=b)}this._reds[m]+=f.r,this._greens[m]+=f.g,this._blues[m]+=f.b,this._alphas[m]+=f.a,this._sums[m]++}}_addColor(e){const t=8-this._significantBitsPerChannel,r=(e.r>>t)+1,n=(e.g>>t)+1,a=(e.b>>t)+1,s=(e.a>>t)+1;this._weights[s][r][n][a]++,this._momentsRed[s][r][n][a]+=e.r,this._momentsGreen[s][r][n][a]+=e.g,this._momentsBlue[s][r][n][a]+=e.b,this._momentsAlpha[s][r][n][a]+=e.a,this._moments[s][r][n][a]+=this._table[e.r]+this._table[e.g]+this._table[e.b]+this._table[e.a]}*_calculateMoments(){const e=[],t=[],r=[],n=[],a=[],s=[],o=createArray3D(this._sideSize,this._sideSize,this._sideSize),l=createArray3D(this._sideSize,this._sideSize,this._sideSize),f=createArray3D(this._sideSize,this._sideSize,this._sideSize),u=createArray3D(this._sideSize,this._sideSize,this._sideSize),m=createArray3D(this._sideSize,this._sideSize,this._sideSize),v=createArray3D(this._sideSize,this._sideSize,this._sideSize);let b=0;const P=new ProgressTracker(this._alphaMaxSideIndex*this._maxSideIndex,99);for(let F=1;F<=this._alphaMaxSideIndex;++F){fillArray3D(o,this._sideSize,this._sideSize,this._sideSize,0),fillArray3D(l,this._sideSize,this._sideSize,this._sideSize,0),fillArray3D(f,this._sideSize,this._sideSize,this._sideSize,0),fillArray3D(u,this._sideSize,this._sideSize,this._sideSize,0),fillArray3D(m,this._sideSize,this._sideSize,this._sideSize,0),fillArray3D(v,this._sideSize,this._sideSize,this._sideSize,0);for(let C=1;C<=this._maxSideIndex;++C,++b){P.shouldNotify(b)&&(yield{progress:P.progress}),fillArray1D(e,this._sideSize,0),fillArray1D(t,this._sideSize,0),fillArray1D(r,this._sideSize,0),fillArray1D(n,this._sideSize,0),fillArray1D(a,this._sideSize,0),fillArray1D(s,this._sideSize,0);for(let D=1;D<=this._maxSideIndex;++D){let E=0,k=0,j=0,W=0,M=0,S=0;for(let T=1;T<=this._maxSideIndex;++T)E+=this._weights[F][C][D][T],k+=this._momentsRed[F][C][D][T],j+=this._momentsGreen[F][C][D][T],W+=this._momentsBlue[F][C][D][T],M+=this._momentsAlpha[F][C][D][T],S+=this._moments[F][C][D][T],e[T]+=E,t[T]+=k,r[T]+=j,n[T]+=W,a[T]+=M,s[T]+=S,o[C][D][T]=o[C-1][D][T]+e[T],l[C][D][T]=l[C-1][D][T]+t[T],f[C][D][T]=f[C-1][D][T]+r[T],u[C][D][T]=u[C-1][D][T]+n[T],m[C][D][T]=m[C-1][D][T]+a[T],v[C][D][T]=v[C-1][D][T]+s[T],this._weights[F][C][D][T]=this._weights[F-1][C][D][T]+o[C][D][T],this._momentsRed[F][C][D][T]=this._momentsRed[F-1][C][D][T]+l[C][D][T],this._momentsGreen[F][C][D][T]=this._momentsGreen[F-1][C][D][T]+f[C][D][T],this._momentsBlue[F][C][D][T]=this._momentsBlue[F-1][C][D][T]+u[C][D][T],this._momentsAlpha[F][C][D][T]=this._momentsAlpha[F-1][C][D][T]+m[C][D][T],this._moments[F][C][D][T]=this._moments[F-1][C][D][T]+v[C][D][T]}}}}static _volumeFloat(e,t){return t[e.alphaMaximum][e.redMaximum][e.greenMaximum][e.blueMaximum]-t[e.alphaMaximum][e.redMaximum][e.greenMinimum][e.blueMaximum]-t[e.alphaMaximum][e.redMinimum][e.greenMaximum][e.blueMaximum]+t[e.alphaMaximum][e.redMinimum][e.greenMinimum][e.blueMaximum]-t[e.alphaMinimum][e.redMaximum][e.greenMaximum][e.blueMaximum]+t[e.alphaMinimum][e.redMaximum][e.greenMinimum][e.blueMaximum]+t[e.alphaMinimum][e.redMinimum][e.greenMaximum][e.blueMaximum]-t[e.alphaMinimum][e.redMinimum][e.greenMinimum][e.blueMaximum]-(t[e.alphaMaximum][e.redMaximum][e.greenMaximum][e.blueMinimum]-t[e.alphaMinimum][e.redMaximum][e.greenMaximum][e.blueMinimum]-t[e.alphaMaximum][e.redMaximum][e.greenMinimum][e.blueMinimum]+t[e.alphaMinimum][e.redMaximum][e.greenMinimum][e.blueMinimum]-t[e.alphaMaximum][e.redMinimum][e.greenMaximum][e.blueMinimum]+t[e.alphaMinimum][e.redMinimum][e.greenMaximum][e.blueMinimum]+t[e.alphaMaximum][e.redMinimum][e.greenMinimum][e.blueMinimum]-t[e.alphaMinimum][e.redMinimum][e.greenMinimum][e.blueMinimum])}static _volume(e,t){return _WuQuant._volumeFloat(e,t)|0}static _top(e,t,r,n){let a;switch(t){case _WuQuant._alpha:a=n[r][e.redMaximum][e.greenMaximum][e.blueMaximum]-n[r][e.redMaximum][e.greenMinimum][e.blueMaximum]-n[r][e.redMinimum][e.greenMaximum][e.blueMaximum]+n[r][e.redMinimum][e.greenMinimum][e.blueMaximum]-(n[r][e.redMaximum][e.greenMaximum][e.blueMinimum]-n[r][e.redMaximum][e.greenMinimum][e.blueMinimum]-n[r][e.redMinimum][e.greenMaximum][e.blueMinimum]+n[r][e.redMinimum][e.greenMinimum][e.blueMinimum]);break;case _WuQuant._red:a=n[e.alphaMaximum][r][e.greenMaximum][e.blueMaximum]-n[e.alphaMaximum][r][e.greenMinimum][e.blueMaximum]-n[e.alphaMinimum][r][e.greenMaximum][e.blueMaximum]+n[e.alphaMinimum][r][e.greenMinimum][e.blueMaximum]-(n[e.alphaMaximum][r][e.greenMaximum][e.blueMinimum]-n[e.alphaMaximum][r][e.greenMinimum][e.blueMinimum]-n[e.alphaMinimum][r][e.greenMaximum][e.blueMinimum]+n[e.alphaMinimum][r][e.greenMinimum][e.blueMinimum]);break;case _WuQuant._green:a=n[e.alphaMaximum][e.redMaximum][r][e.blueMaximum]-n[e.alphaMaximum][e.redMinimum][r][e.blueMaximum]-n[e.alphaMinimum][e.redMaximum][r][e.blueMaximum]+n[e.alphaMinimum][e.redMinimum][r][e.blueMaximum]-(n[e.alphaMaximum][e.redMaximum][r][e.blueMinimum]-n[e.alphaMaximum][e.redMinimum][r][e.blueMinimum]-n[e.alphaMinimum][e.redMaximum][r][e.blueMinimum]+n[e.alphaMinimum][e.redMinimum][r][e.blueMinimum]);break;case _WuQuant._blue:a=n[e.alphaMaximum][e.redMaximum][e.greenMaximum][r]-n[e.alphaMaximum][e.redMaximum][e.greenMinimum][r]-n[e.alphaMaximum][e.redMinimum][e.greenMaximum][r]+n[e.alphaMaximum][e.redMinimum][e.greenMinimum][r]-(n[e.alphaMinimum][e.redMaximum][e.greenMaximum][r]-n[e.alphaMinimum][e.redMaximum][e.greenMinimum][r]-n[e.alphaMinimum][e.redMinimum][e.greenMaximum][r]+n[e.alphaMinimum][e.redMinimum][e.greenMinimum][r]);break;default:throw new Error("impossible")}return a|0}static _bottom(e,t,r){switch(t){case _WuQuant._alpha:return-r[e.alphaMinimum][e.redMaximum][e.greenMaximum][e.blueMaximum]+r[e.alphaMinimum][e.redMaximum][e.greenMinimum][e.blueMaximum]+r[e.alphaMinimum][e.redMinimum][e.greenMaximum][e.blueMaximum]-r[e.alphaMinimum][e.redMinimum][e.greenMinimum][e.blueMaximum]-(-r[e.alphaMinimum][e.redMaximum][e.greenMaximum][e.blueMinimum]+r[e.alphaMinimum][e.redMaximum][e.greenMinimum][e.blueMinimum]+r[e.alphaMinimum][e.redMinimum][e.greenMaximum][e.blueMinimum]-r[e.alphaMinimum][e.redMinimum][e.greenMinimum][e.blueMinimum]);case _WuQuant._red:return-r[e.alphaMaximum][e.redMinimum][e.greenMaximum][e.blueMaximum]+r[e.alphaMaximum][e.redMinimum][e.greenMinimum][e.blueMaximum]+r[e.alphaMinimum][e.redMinimum][e.greenMaximum][e.blueMaximum]-r[e.alphaMinimum][e.redMinimum][e.greenMinimum][e.blueMaximum]-(-r[e.alphaMaximum][e.redMinimum][e.greenMaximum][e.blueMinimum]+r[e.alphaMaximum][e.redMinimum][e.greenMinimum][e.blueMinimum]+r[e.alphaMinimum][e.redMinimum][e.greenMaximum][e.blueMinimum]-r[e.alphaMinimum][e.redMinimum][e.greenMinimum][e.blueMinimum]);case _WuQuant._green:return-r[e.alphaMaximum][e.redMaximum][e.greenMinimum][e.blueMaximum]+r[e.alphaMaximum][e.redMinimum][e.greenMinimum][e.blueMaximum]+r[e.alphaMinimum][e.redMaximum][e.greenMinimum][e.blueMaximum]-r[e.alphaMinimum][e.redMinimum][e.greenMinimum][e.blueMaximum]-(-r[e.alphaMaximum][e.redMaximum][e.greenMinimum][e.blueMinimum]+r[e.alphaMaximum][e.redMinimum][e.greenMinimum][e.blueMinimum]+r[e.alphaMinimum][e.redMaximum][e.greenMinimum][e.blueMinimum]-r[e.alphaMinimum][e.redMinimum][e.greenMinimum][e.blueMinimum]);case _WuQuant._blue:return-r[e.alphaMaximum][e.redMaximum][e.greenMaximum][e.blueMinimum]+r[e.alphaMaximum][e.redMaximum][e.greenMinimum][e.blueMinimum]+r[e.alphaMaximum][e.redMinimum][e.greenMaximum][e.blueMinimum]-r[e.alphaMaximum][e.redMinimum][e.greenMinimum][e.blueMinimum]-(-r[e.alphaMinimum][e.redMaximum][e.greenMaximum][e.blueMinimum]+r[e.alphaMinimum][e.redMaximum][e.greenMinimum][e.blueMinimum]+r[e.alphaMinimum][e.redMinimum][e.greenMaximum][e.blueMinimum]-r[e.alphaMinimum][e.redMinimum][e.greenMinimum][e.blueMinimum]);default:return 0}}_calculateVariance(e){const t=_WuQuant._volume(e,this._momentsRed),r=_WuQuant._volume(e,this._momentsGreen),n=_WuQuant._volume(e,this._momentsBlue),a=_WuQuant._volume(e,this._momentsAlpha),s=_WuQuant._volumeFloat(e,this._moments),o=_WuQuant._volume(e,this._weights),l=t*t+r*r+n*n+a*a;return s-l/o}_maximize(e,t,r,n,a,s,o,l,f){const u=_WuQuant._bottom(e,t,this._momentsRed)|0,m=_WuQuant._bottom(e,t,this._momentsGreen)|0,v=_WuQuant._bottom(e,t,this._momentsBlue)|0,b=_WuQuant._bottom(e,t,this._momentsAlpha)|0,P=_WuQuant._bottom(e,t,this._weights)|0;let F=0,C=-1;for(let D=r;D<n;++D){let E=u+_WuQuant._top(e,t,D,this._momentsRed),k=m+_WuQuant._top(e,t,D,this._momentsGreen),j=v+_WuQuant._top(e,t,D,this._momentsBlue),W=b+_WuQuant._top(e,t,D,this._momentsAlpha),M=P+_WuQuant._top(e,t,D,this._weights);if(M!==0){let S=E*E+k*k+j*j+W*W,T=S/M;E=a-E,k=s-k,j=o-j,W=l-W,M=f-M,M!==0&&(S=E*E+k*k+j*j+W*W,T+=S/M,T>F&&(F=T,C=D))}}return{max:F,position:C}}_cut(e,t){let r;const n=_WuQuant._volume(e,this._momentsRed),a=_WuQuant._volume(e,this._momentsGreen),s=_WuQuant._volume(e,this._momentsBlue),o=_WuQuant._volume(e,this._momentsAlpha),l=_WuQuant._volume(e,this._weights),f=this._maximize(e,_WuQuant._red,e.redMinimum+1,e.redMaximum,n,a,s,o,l),u=this._maximize(e,_WuQuant._green,e.greenMinimum+1,e.greenMaximum,n,a,s,o,l),m=this._maximize(e,_WuQuant._blue,e.blueMinimum+1,e.blueMaximum,n,a,s,o,l),v=this._maximize(e,_WuQuant._alpha,e.alphaMinimum+1,e.alphaMaximum,n,a,s,o,l);if(v.max>=f.max&&v.max>=u.max&&v.max>=m.max){if(r=_WuQuant._alpha,v.position<0)return!1}else f.max>=v.max&&f.max>=u.max&&f.max>=m.max?r=_WuQuant._red:u.max>=v.max&&u.max>=f.max&&u.max>=m.max?r=_WuQuant._green:r=_WuQuant._blue;switch(t.redMaximum=e.redMaximum,t.greenMaximum=e.greenMaximum,t.blueMaximum=e.blueMaximum,t.alphaMaximum=e.alphaMaximum,r){case _WuQuant._red:t.redMinimum=e.redMaximum=f.position,t.greenMinimum=e.greenMinimum,t.blueMinimum=e.blueMinimum,t.alphaMinimum=e.alphaMinimum;break;case _WuQuant._green:t.greenMinimum=e.greenMaximum=u.position,t.redMinimum=e.redMinimum,t.blueMinimum=e.blueMinimum,t.alphaMinimum=e.alphaMinimum;break;case _WuQuant._blue:t.blueMinimum=e.blueMaximum=m.position,t.redMinimum=e.redMinimum,t.greenMinimum=e.greenMinimum,t.alphaMinimum=e.alphaMinimum;break;case _WuQuant._alpha:t.alphaMinimum=e.alphaMaximum=v.position,t.blueMinimum=e.blueMinimum,t.redMinimum=e.redMinimum,t.greenMinimum=e.greenMinimum;break}return e.volume=(e.redMaximum-e.redMinimum)*(e.greenMaximum-e.greenMinimum)*(e.blueMaximum-e.blueMinimum)*(e.alphaMaximum-e.alphaMinimum),t.volume=(t.redMaximum-t.redMinimum)*(t.greenMaximum-t.greenMinimum)*(t.blueMaximum-t.blueMinimum)*(t.alphaMaximum-t.alphaMinimum),!0}_initialize(e){this._colors=e,this._cubes=[];for(let t=0;t<e;t++)this._cubes[t]=new WuColorCube;this._cubes[0].redMinimum=0,this._cubes[0].greenMinimum=0,this._cubes[0].blueMinimum=0,this._cubes[0].alphaMinimum=0,this._cubes[0].redMaximum=this._maxSideIndex,this._cubes[0].greenMaximum=this._maxSideIndex,this._cubes[0].blueMaximum=this._maxSideIndex,this._cubes[0].alphaMaximum=this._alphaMaxSideIndex,this._weights=createArray4D(this._alphaSideSize,this._sideSize,this._sideSize,this._sideSize),this._momentsRed=createArray4D(this._alphaSideSize,this._sideSize,this._sideSize,this._sideSize),this._momentsGreen=createArray4D(this._alphaSideSize,this._sideSize,this._sideSize,this._sideSize),this._momentsBlue=createArray4D(this._alphaSideSize,this._sideSize,this._sideSize,this._sideSize),this._momentsAlpha=createArray4D(this._alphaSideSize,this._sideSize,this._sideSize,this._sideSize),this._moments=createArray4D(this._alphaSideSize,this._sideSize,this._sideSize,this._sideSize),this._table=[];for(let t=0;t<256;++t)this._table[t]=t*t;this._pixels=[]}_setQuality(e=5){this._significantBitsPerChannel=e,this._maxSideIndex=1<<this._significantBitsPerChannel,this._alphaMaxSideIndex=this._maxSideIndex,this._sideSize=this._maxSideIndex+1,this._alphaSideSize=this._alphaMaxSideIndex+1}},WuQuant=_WuQuant;__publicField(WuQuant,"_alpha",3);__publicField(WuQuant,"_red",2);__publicField(WuQuant,"_green",1);__publicField(WuQuant,"_blue",0);var image_exports={};__export(image_exports,{AbstractImageQuantizer:()=>AbstractImageQuantizer,ErrorDiffusionArray:()=>ErrorDiffusionArray,ErrorDiffusionArrayKernel:()=>ErrorDiffusionArrayKernel,ErrorDiffusionRiemersma:()=>ErrorDiffusionRiemersma,NearestColor:()=>NearestColor});var AbstractImageQuantizer=class{quantizeSync(e,t){for(const r of this.quantize(e,t))if(r.pointContainer)return r.pointContainer;throw new Error("unreachable")}},NearestColor=class extends AbstractImageQuantizer{constructor(e){super(),__publicField(this,"_distance"),this._distance=e}*quantize(e,t){const r=e.getPointArray(),n=e.getWidth(),a=e.getHeight(),s=new ProgressTracker(a,99);for(let o=0;o<a;o++){s.shouldNotify(o)&&(yield{progress:s.progress});for(let l=0,f=o*n;l<n;l++,f++){const u=r[f];u.from(t.getNearestColor(this._distance,u))}}yield{pointContainer:e,progress:100}}},ErrorDiffusionArrayKernel=(e=>(e[e.FloydSteinberg=0]="FloydSteinberg",e[e.FalseFloydSteinberg=1]="FalseFloydSteinberg",e[e.Stucki=2]="Stucki",e[e.Atkinson=3]="Atkinson",e[e.Jarvis=4]="Jarvis",e[e.Burkes=5]="Burkes",e[e.Sierra=6]="Sierra",e[e.TwoSierra=7]="TwoSierra",e[e.SierraLite=8]="SierraLite",e))(ErrorDiffusionArrayKernel||{}),ErrorDiffusionArray=class extends AbstractImageQuantizer{constructor(e,t,r=!0,n=0,a=!1){super(),__publicField(this,"_minColorDistance"),__publicField(this,"_serpentine"),__publicField(this,"_kernel"),__publicField(this,"_calculateErrorLikeGIMP"),__publicField(this,"_distance"),this._setKernel(t),this._distance=e,this._minColorDistance=n,this._serpentine=r,this._calculateErrorLikeGIMP=a}*quantize(e,t){const r=e.getPointArray(),n=new Point,a=e.getWidth(),s=e.getHeight(),o=[];let l=1,f=1;for(const m of this._kernel){const v=m[2]+1;f<v&&(f=v)}for(let m=0;m<f;m++)this._fillErrorLine(o[m]=[],a);const u=new ProgressTracker(s,99);for(let m=0;m<s;m++){u.shouldNotify(m)&&(yield{progress:u.progress}),this._serpentine&&(l*=-1);const v=m*a,b=l===1?0:a-1,P=l===1?a:-1;this._fillErrorLine(o[0],a),o.push(o.shift());const F=o[0];for(let C=b,D=v+b;C!==P;C+=l,D+=l){const E=r[D],k=F[C];n.from(E);const j=Point.createByRGBA(inRange0to255Rounded(E.r+k[0]),inRange0to255Rounded(E.g+k[1]),inRange0to255Rounded(E.b+k[2]),inRange0to255Rounded(E.a+k[3])),W=t.getNearestColor(this._distance,j);if(E.from(W),this._minColorDistance&&this._distance.calculateNormalized(n,W)<this._minColorDistance)continue;let M,S,T,V;this._calculateErrorLikeGIMP?(M=j.r-W.r,S=j.g-W.g,T=j.b-W.b,V=j.a-W.a):(M=n.r-W.r,S=n.g-W.g,T=n.b-W.b,V=n.a-W.a);const _=l===1?0:this._kernel.length-1,ee=l===1?this._kernel.length:-1;for(let re=_;re!==ee;re+=l){const te=this._kernel[re][1]*l,oe=this._kernel[re][2];if(te+C>=0&&te+C<a&&oe+m>=0&&oe+m<s){const he=this._kernel[re][0],me=o[oe][te+C];me[0]+=M*he,me[1]+=S*he,me[2]+=T*he,me[3]+=V*he}}}}yield{pointContainer:e,progress:100}}_fillErrorLine(e,t){e.length>t&&(e.length=t);const r=e.length;for(let n=0;n<r;n++){const a=e[n];a[0]=a[1]=a[2]=a[3]=0}for(let n=r;n<t;n++)e[n]=[0,0,0,0]}_setKernel(e){switch(e){case 0:this._kernel=[[7/16,1,0],[3/16,-1,1],[5/16,0,1],[1/16,1,1]];break;case 1:this._kernel=[[3/8,1,0],[3/8,0,1],[2/8,1,1]];break;case 2:this._kernel=[[8/42,1,0],[4/42,2,0],[2/42,-2,1],[4/42,-1,1],[8/42,0,1],[4/42,1,1],[2/42,2,1],[1/42,-2,2],[2/42,-1,2],[4/42,0,2],[2/42,1,2],[1/42,2,2]];break;case 3:this._kernel=[[1/8,1,0],[1/8,2,0],[1/8,-1,1],[1/8,0,1],[1/8,1,1],[1/8,0,2]];break;case 4:this._kernel=[[7/48,1,0],[5/48,2,0],[3/48,-2,1],[5/48,-1,1],[7/48,0,1],[5/48,1,1],[3/48,2,1],[1/48,-2,2],[3/48,-1,2],[5/48,0,2],[3/48,1,2],[1/48,2,2]];break;case 5:this._kernel=[[8/32,1,0],[4/32,2,0],[2/32,-2,1],[4/32,-1,1],[8/32,0,1],[4/32,1,1],[2/32,2,1]];break;case 6:this._kernel=[[5/32,1,0],[3/32,2,0],[2/32,-2,1],[4/32,-1,1],[5/32,0,1],[4/32,1,1],[2/32,2,1],[2/32,-1,2],[3/32,0,2],[2/32,1,2]];break;case 7:this._kernel=[[4/16,1,0],[3/16,2,0],[1/16,-2,1],[2/16,-1,1],[3/16,0,1],[2/16,1,1],[1/16,2,1]];break;case 8:this._kernel=[[2/4,1,0],[1/4,-1,1],[1/4,0,1]];break;default:throw new Error(`ErrorDiffusionArray: unknown kernel = ${e}`)}}};function*hilbertCurve(e,t,r){const n=Math.max(e,t),a=Math.floor(Math.log(n)/Math.log(2)+1),s=new ProgressTracker(e*t,99),o={width:e,height:t,level:a,callback:r,tracker:s,index:0,x:0,y:0};yield*walkHilbert(o,1),visit(o,0)}function*walkHilbert(e,t){if(!(e.level<1)){switch(e.tracker.shouldNotify(e.index)&&(yield{progress:e.tracker.progress}),e.level--,t){case 2:yield*walkHilbert(e,1),visit(e,3),yield*walkHilbert(e,2),visit(e,4),yield*walkHilbert(e,2),visit(e,2),yield*walkHilbert(e,4);break;case 3:yield*walkHilbert(e,4),visit(e,2),yield*walkHilbert(e,3),visit(e,1),yield*walkHilbert(e,3),visit(e,3),yield*walkHilbert(e,1);break;case 1:yield*walkHilbert(e,2),visit(e,4),yield*walkHilbert(e,1),visit(e,3),yield*walkHilbert(e,1),visit(e,1),yield*walkHilbert(e,3);break;case 4:yield*walkHilbert(e,3),visit(e,1),yield*walkHilbert(e,4),visit(e,2),yield*walkHilbert(e,4),visit(e,4),yield*walkHilbert(e,2);break}e.level++}}function visit(e,t){switch(e.x>=0&&e.x<e.width&&e.y>=0&&e.y<e.height&&(e.callback(e.x,e.y),e.index++),t){case 2:e.x--;break;case 3:e.x++;break;case 1:e.y--;break;case 4:e.y++;break}}var ErrorDiffusionRiemersma=class extends AbstractImageQuantizer{constructor(e,t=16,r=1){super(),__publicField(this,"_distance"),__publicField(this,"_weights"),__publicField(this,"_errorQueueSize"),this._distance=e,this._errorQueueSize=t,this._weights=ErrorDiffusionRiemersma._createWeights(r,t)}*quantize(e,t){const r=e.getPointArray(),n=e.getWidth(),a=e.getHeight(),s=[];let o=0;for(let l=0;l<this._errorQueueSize;l++)s[l]={r:0,g:0,b:0,a:0};yield*hilbertCurve(n,a,(l,f)=>{const u=r[l+f*n];let{r:m,g:v,b,a:P}=u;for(let E=0;E<this._errorQueueSize;E++){const k=this._weights[E],j=s[(E+o)%this._errorQueueSize];m+=j.r*k,v+=j.g*k,b+=j.b*k,P+=j.a*k}const F=Point.createByRGBA(inRange0to255Rounded(m),inRange0to255Rounded(v),inRange0to255Rounded(b),inRange0to255Rounded(P)),C=t.getNearestColor(this._distance,F);o=(o+1)%this._errorQueueSize;const D=(o+this._errorQueueSize-1)%this._errorQueueSize;s[D].r=u.r-C.r,s[D].g=u.g-C.g,s[D].b=u.b-C.b,s[D].a=u.a-C.a,u.from(C)}),yield{pointContainer:e,progress:100}}static _createWeights(e,t){const r=[],n=Math.exp(Math.log(t)/(t-1));for(let a=0,s=1;a<t;a++)r[a]=(s+.5|0)/t*e,s*=n;return r}},quality_exports={};__export(quality_exports,{ssim:()=>ssim});var K1=.01,K2=.03;function ssim(e,t){if(e.getHeight()!==t.getHeight()||e.getWidth()!==t.getWidth())throw new Error("Images have different sizes!");const n=(1<<8)-1,a=(K1*n)**2,s=(K2*n)**2;let o=0,l=0;return iterate(e,t,(f,u,m,v)=>{let b=0,P=0,F=0;for(let j=0;j<f.length;j++)P+=(f[j]-m)**2,F+=(u[j]-v)**2,b+=(f[j]-m)*(u[j]-v);const C=f.length-1;P/=C,F/=C,b/=C;const D=(2*m*v+a)*(2*b+s),E=(m**2+v**2+a)*(P+F+s),k=D/E;l+=k,o++}),l/o}function iterate(e,t,r){const a=e.getWidth(),s=e.getHeight();for(let o=0;o<s;o+=8)for(let l=0;l<a;l+=8){const f=Math.min(8,a-l),u=Math.min(8,s-o),m=calculateLumaValuesForWindow(e,l,o,f,u),v=calculateLumaValuesForWindow(t,l,o,f,u),b=calculateAverageLuma(m),P=calculateAverageLuma(v);r(m,v,b,P)}}function calculateLumaValuesForWindow(e,t,r,n,a){const s=e.getPointArray(),o=[];let l=0;for(let f=r;f<r+a;f++){const u=f*e.getWidth();for(let m=t;m<t+n;m++){const v=s[u+m];o[l]=v.r*.2126+v.g*.7152+v.b*.0722,l++}}return o}function calculateAverageLuma(e){let t=0;for(const r of e)t+=r;return t/e.length}var setImmediateImpl=typeof setImmediate=="function"?setImmediate:typeof process$1<"u"&&typeof(process$1==null?void 0:process$1.nextTick)=="function"?e=>process$1.nextTick(e):e=>setTimeout(e,0);function buildPaletteSync(e,{colorDistanceFormula:t,paletteQuantization:r,colors:n}={}){const a=colorDistanceFormulaToColorDistance(t),s=paletteQuantizationToPaletteQuantizer(a,r,n);return e.forEach(o=>s.sample(o)),s.quantizeSync()}async function buildPalette(e,{colorDistanceFormula:t,paletteQuantization:r,colors:n,onProgress:a}={}){return new Promise((s,o)=>{const l=colorDistanceFormulaToColorDistance(t),f=paletteQuantizationToPaletteQuantizer(l,r,n);e.forEach(b=>f.sample(b));let u;const m=f.quantize(),v=()=>{try{const b=m.next();b.done?s(u):(b.value.palette&&(u=b.value.palette),a&&a(b.value.progress),setImmediateImpl(v))}catch(b){o(b)}};setImmediateImpl(v)})}function applyPaletteSync(e,t,{colorDistanceFormula:r,imageQuantization:n}={}){const a=colorDistanceFormulaToColorDistance(r);return imageQuantizationToImageQuantizer(a,n).quantizeSync(e,t)}async function applyPalette(e,t,{colorDistanceFormula:r,imageQuantization:n,onProgress:a}={}){return new Promise((s,o)=>{const l=colorDistanceFormulaToColorDistance(r),f=imageQuantizationToImageQuantizer(l,n);let u;const m=f.quantize(e,t),v=()=>{try{const b=m.next();b.done?s(u):(b.value.pointContainer&&(u=b.value.pointContainer),a&&a(b.value.progress),setImmediateImpl(v))}catch(b){o(b)}};setImmediateImpl(v)})}function colorDistanceFormulaToColorDistance(e="euclidean-bt709"){switch(e){case"cie94-graphic-arts":return new CIE94GraphicArts;case"cie94-textiles":return new CIE94Textiles;case"ciede2000":return new CIEDE2000;case"color-metric":return new CMetric;case"euclidean":return new Euclidean;case"euclidean-bt709":return new EuclideanBT709;case"euclidean-bt709-noalpha":return new EuclideanBT709NoAlpha;case"manhattan":return new Manhattan;case"manhattan-bt709":return new ManhattanBT709;case"manhattan-nommyde":return new ManhattanNommyde;case"pngquant":return new PNGQuant;default:throw new Error(`Unknown colorDistanceFormula ${e}`)}}function imageQuantizationToImageQuantizer(e,t="floyd-steinberg"){switch(t){case"nearest":return new NearestColor(e);case"riemersma":return new ErrorDiffusionRiemersma(e);case"floyd-steinberg":return new ErrorDiffusionArray(e,0);case"false-floyd-steinberg":return new ErrorDiffusionArray(e,1);case"stucki":return new ErrorDiffusionArray(e,2);case"atkinson":return new ErrorDiffusionArray(e,3);case"jarvis":return new ErrorDiffusionArray(e,4);case"burkes":return new ErrorDiffusionArray(e,5);case"sierra":return new ErrorDiffusionArray(e,6);case"two-sierra":return new ErrorDiffusionArray(e,7);case"sierra-lite":return new ErrorDiffusionArray(e,8);default:throw new Error(`Unknown imageQuantization ${t}`)}}function paletteQuantizationToPaletteQuantizer(e,t="wuquant",r=256){switch(t){case"neuquant":return new NeuQuant(e,r);case"rgbquant":return new RGBQuant(e,r);case"wuquant":return new WuQuant(e,r);case"neuquant-float":return new NeuQuantFloat(e,r);default:throw new Error(`Unknown paletteQuantization ${t}`)}}var imageQ=__toCommonJS(src_exports),gifframe={};const BitmapImage$1=bitmapimage;let GifFrame$1=class st extends BitmapImage$1{constructor(...t){if(super(...t),t[0]instanceof st){const r=t[0];this.xOffset=r.xOffset,this.yOffset=r.yOffset,this.disposalMethod=r.disposalMethod,this.delayCentisecs=r.delayCentisecs,this.interlaced=r.interlaced}else{const r=t[t.length-1];let n={};typeof r=="object"&&!(r instanceof BitmapImage$1)&&(n=r),this.xOffset=n.xOffset||0,this.yOffset=n.yOffset||0,this.disposalMethod=n.disposalMethod!==void 0?n.disposalMethod:st.DisposeToBackgroundColor,this.delayCentisecs=n.delayCentisecs||8,this.interlaced=n.interlaced||!1}}getPalette(){const t=new Set,r=this.bitmap.data;let n=0,a=!1;for(;n<r.length;){if(r[n+3]===0)a=!0;else{const f=r.readUInt32BE(n,!0)>>8&16777215;t.add(f)}n+=4}const s=new Array(t.size),o=t.values();for(n=0;n<s.length;++n)s[n]=o.next().value;s.sort((f,u)=>f-u);let l=s.length;return a&&++l,{colors:s,usesTransparency:a,indexCount:l}}};GifFrame$1.DisposeToAnything=0;GifFrame$1.DisposeNothing=1;GifFrame$1.DisposeToBackgroundColor=2;GifFrame$1.DisposeToPrevious=3;gifframe.GifFrame=GifFrame$1;var hasRequiredGifutil;function requireGifutil(){return hasRequiredGifutil||(hasRequiredGifutil=1,function(e){const t=require$$0,r=imageQ,n=bitmapimage,{GifFrame:a}=gifframe,{GifError:s}=gif$1,{GifCodec:o}=requireGifcodec(),l=[".jpg",".jpeg",".png",".bmp"],f=new o;e.cloneFrames=function(b){let P=[];return b.forEach(F=>{P.push(new a(F))}),P},e.getColorInfo=function(b,P){let F=!1;const C=[];for(let W=0;W<b.length;++W){let M=b[W].getPalette();if(M.usesTransparency&&(F=!0),M.indexCount>256)throw new s(`Frame ${W} uses more than 256 color indexes`);C.push(M)}if(P===0)return{usesTransparency:F,palettes:C};const D=new Set;C.forEach(W=>{W.colors.forEach(M=>{D.add(M)})});let E=D.size;if(F&&++E,P&&E>P)return{usesTransparency:F,palettes:C};const k=new Array(D.size),j=D.values();for(let W=0;W<k.length;++W)k[W]=j.next().value;return k.sort((W,M)=>W-M),{colors:k,indexCount:E,usesTransparency:F,palettes:C}},e.copyAsJimp=function(b,P){return e.shareAsJimp(b,new n(P))},e.getMaxDimensions=function(b){let P=0,F=0;return b.forEach(C=>{const D=C.xOffset+C.bitmap.width;D>P&&(P=D);const E=C.yOffset+C.bitmap.height;E>F&&(F=E)}),{maxWidth:P,maxHeight:F}},e.quantizeDekker=function(b,P,F){P=P||256,u(b,"NeuQuantFloat",P,0,F)},e.quantizeSorokin=function(b,P,F,C){P=P||256,F=F||"min-pop";let D;switch(F){case"min-pop":D=2;break;case"top-pop":D=1;break;default:throw new Error(`Invalid quantizeSorokin histogram '${F}'`)}u(b,"RGBQuant",P,D,C)},e.quantizeWu=function(b,P,F,C){if(P=P||256,F=F||5,F<1||F>8)throw new Error("Invalid quantization quality");u(b,"WuQuant",P,F,C)},e.read=function(b,P){return P=P||f,Buffer$1.isBuffer(b)?P.decodeGif(b):m(b).then(F=>P.decodeGif(F))},e.shareAsJimp=function(b,P){const F=new b(P.bitmap.width,P.bitmap.height,0);return F.bitmap.data=P.bitmap.data,F},e.write=function(b,P,F,C){C=C||f;const D=b.match(/\.[a-zA-Z]+$/);if(D!==null&&l.includes(D[0].toLowerCase()))throw new Error(`GIF '${b}' has an unexpected suffix`);return C.encodeGif(P,F).then(E=>v(b,E.buffer).then(()=>E))};function u(b,P,F,C,D){const E=Array.isArray(b)?b:[b],k=["FloydSteinberg","FalseFloydSteinberg","Stucki","Atkinson","Jarvis","Burkes","Sierra","TwoSierra","SierraLite"];if(D){if(k.indexOf(D.ditherAlgorithm)<0)throw new Error(`Invalid ditherAlgorithm '${D.ditherAlgorithm}'`);D.serpentine===void 0&&(D.serpentine=!0),D.minimumColorDistanceToDither===void 0&&(D.minimumColorDistanceToDither=0),D.calculateErrorLikeGIMP===void 0&&(D.calculateErrorLikeGIMP=!1)}const j=new r.distance.Euclidean,W=new r.palette[P](j,F,C);let M;D?M=new r.image.ErrorDiffusionArray(j,r.image.ErrorDiffusionArrayKernel[D.ditherAlgorithm],D.serpentine,D.minimumColorDistanceToDither,D.calculateErrorLikeGIMP):M=new r.image.NearestColor(j);const S=[];E.forEach(V=>{const _=V.bitmap.data,ee=new ArrayBuffer(_.length),re=new Uint32Array(ee);for(let oe=0,he=0;oe<_.length;oe+=4,++he)re[he]=_.readUInt32LE(oe,!0);const te=r.utils.PointContainer.fromUint32Array(re,V.bitmap.width,V.bitmap.height);W.sample(te),S.push(te)});const T=W.quantizeSync();for(let V=0;V<E.length;++V){const _=E[V].bitmap.data,re=M.quantizeSync(S[V],T).toUint32Array();for(let te=0,oe=0;te<_.length;te+=4,++oe)_.writeUInt32LE(re[oe],te)}}function m(b){return new Promise((P,F)=>{t.readFile(b,(C,D)=>C?F(C):P(D))})}function v(b,P){return new Promise((F,C)=>{t.writeFile(b,P,D=>D?C(D):F())})}}(gifutil)),gifutil}var hasRequiredGifcodec;function requireGifcodec(){if(hasRequiredGifcodec)return gifcodec;hasRequiredGifcodec=1;const e=omggif,{Gif:t,GifError:r}=gif$1;function n(){const E=requireGifutil();return n=function(){return E},E}const{GifFrame:a}=gifframe,s=200,o=100;class l{constructor(k={}){this._transparentRGB=null,typeof k.transparentRGB=="number"&&k.transparentRGB!==0&&(this._transparentRGBA=k.transparentRGB*256),this._testInitialBufferSize=0}decodeGif(k){try{let j;try{j=new e.GifReader(k)}catch(T){throw new r(T)}const W=j.numFrames(),M=[],S={width:j.width,height:j.height,loops:j.loopCount()};S.usesTransparency=!1;for(let T=0;T<W;++T){const V=this._decodeFrame(j,T,S.usesTransparency);M.push(V.frame),V.usesTransparency&&(S.usesTransparency=!0)}return Promise.resolve(new t(k,M,S))}catch(j){return Promise.reject(j)}}encodeGif(k,j={}){try{if(k===null||k.length===0)throw new r("there are no frames");const W=n().getMaxDimensions(k);return j=Object.assign({},j),j.width=W.maxWidth,j.height=W.maxHeight,j.loops===void 0&&(j.loops=0),j.colorScope=j.colorScope||t.GlobalColorsPreferred,Promise.resolve(this._encodeGif(k,j))}catch(W){return Promise.reject(W)}}_decodeFrame(k,j,W){let M,S;try{if(M=k.frameInfo(j),S=new Buffer$1(k.width*k.height*4),k.decodeAndBlitFrameRGBA(j,S),M.width!==k.width||M.height!==k.height){if(M.y&&(S=S.slice(M.y*k.width*4)),k.width>M.width)for(let _=0;_<M.height;++_)S.copy(S,_*M.width*4,(M.x+_*k.width)*4,(M.x+_*k.width)*4+M.width*4);S=S.slice(0,M.width*M.height*4)}}catch(_){throw new r(_)}let T=!1;if(this._transparentRGBA===null){if(!W)for(let _=3;_<S.length;_+=4)S[_]===0&&(T=!0,_=S.length)}else for(let _=3;_<S.length;_+=4)S[_]===0&&(S.writeUInt32BE(this._transparentRGBA,_-3),T=!0);return{frame:new a(M.width,M.height,S,{xOffset:M.x,yOffset:M.y,disposalMethod:M.disposal,interlaced:M.interlaced,delayCentisecs:M.delay}),usesTransparency:T}}_encodeGif(k,j){let W;if(j.colorScope===t.LocalColorsOnly)W=n().getColorInfo(k,0);else if(W=n().getColorInfo(k,256),!W.colors){if(j.colorScope===t.GlobalColorsOnly)throw new r("Too many color indexes for global color table");j.colorScope=t.LocalColorsOnly}j.usesTransparency=W.usesTransparency;const M=W.palettes;return j.colorScope===t.LocalColorsOnly?v(k,j,2e3,M):m(k,j,2e3,W)}_getSizeEstimateGlobal(k,j){if(this._testInitialBufferSize>0)return this._testInitialBufferSize;let W=s+3*256;const M=C(k);return j.forEach(S=>{W+=P(S,M)}),W}_getSizeEstimateLocal(k,j){if(this._testInitialBufferSize>0)return this._testInitialBufferSize;let W=s;for(let M=0;M<j.length;++M){const S=k[M],T=C(S);W+=P(j[M],T)}return W}}gifcodec.GifCodec=l;function f(E,k){const j=E.indexOf(k);return j===-1?null:j}function u(E,k){for(var j=0,W=E.length-1,M;j<=W;)if(M=Math.floor((j+W)/2),E[M]>k)W=M-1;else if(E[M]<k)j=M+1;else return M;return null}function m(E,k,j,W){const M={colors:W.colors.slice(),usesTransparency:W.usesTransparency};b(M);const S={palette:M.colors,loop:k.loops};let T=new Buffer$1(j),V;try{V=new e.GifWriter(T,k.width,k.height,S)}catch(_){throw new r(_)}for(let _=0;_<E.length;++_)T=D(V,_,E[_],W,!1);return new t(T.slice(0,V.end()),E,k)}function v(E,k,j,W){const M={loop:k.loops};let S=new Buffer$1(j),T;try{T=new e.GifWriter(S,k.width,k.height,M)}catch(V){throw new r(V)}for(let V=0;V<E.length;++V)S=D(T,V,E[V],W[V],!0);return new t(S.slice(0,T.end()),E,k)}function b(E){const k=E.colors;E.usesTransparency&&k.push(0);const j=k.length;let W=2;for(;j>W;)W<<=1;k.length=W,k.fill(0,j)}function P(E,k){let j=E.bitmap.width*E.bitmap.height;return j=Math.ceil(j*k/8),j+=Math.ceil(j/255),o+j+3*256}function F(E,k,j){const W=j.colors,M=W.length<=8?f:u,S=k.bitmap.data,T=new Buffer$1(S.length/4);let V=W.length,_=0,ee=0;for(;_<S.length;){if(S[_+3]!==0){const re=S.readUInt32BE(_,!0)>>8&16777215;T[ee]=M(W,re)}else T[ee]=V;_+=4,++ee}if(j.usesTransparency){if(V===256)throw new r(`Frame ${E} already has 256 colorsand so can't use transparency`)}else V=null;return{buffer:T,transparentIndex:V}}function C(E){let k=E.indexCount,j=0;for(--k;k;)++j,k>>=1;return j>0?j:1}function D(E,k,j,W,M){if(j.interlaced)throw new r("writing interlaced GIFs is not supported");const S=F(k,j,W),T={delay:j.delayCentisecs,disposal:j.disposalMethod,transparent:S.transparentIndex};M&&(b(W),T.palette=W.colors);try{let V=E.getOutputBuffer(),_=E.getOutputBufferPosition(),ee,re=!0;for(;re;)if(ee=E.addFrame(j.xOffset,j.yOffset,j.bitmap.width,j.bitmap.height,S.buffer,T),re=!1,ee>=V.length-1){const te=new Buffer$1(V.length*1.5);V.copy(te),E.setOutputBuffer(te),E.setOutputBufferPosition(_),V=te,re=!0}return V}catch(V){throw new r(V)}}return gifcodec}const BitmapImage=bitmapimage,{Gif,GifError:GifError$1}=gif$1,{GifCodec}=requireGifcodec(),{GifFrame}=gifframe,GifUtil=requireGifutil();var src={BitmapImage,Gif,GifCodec,GifFrame,GifUtil,GifError:GifError$1};const MIME_TYPE="image/gif",gif=()=>({mime:{[MIME_TYPE]:["gif"]},constants:{MIME_GIF:MIME_TYPE},decoders:{[MIME_TYPE]:e=>{const t=new omggif.GifReader(e),r=Buffer$1.alloc(t.width*t.height*4);return t.decodeAndBlitFrameRGBA(0,r),{data:r,width:t.width,height:t.height}}},encoders:{[MIME_TYPE]:e=>{const t=new src.BitmapImage(e.bitmap);src.GifUtil.quantizeDekker(t,256);const r=new src.GifFrame(t);return new src.GifCodec().encodeGif([r],{}).then(a=>a.buffer)}}}),types=()=>mergeDeep_1(jpeg(),png(),bmp(),tiff(),gif()),blit=()=>({blit(e,t,r,n,a,s,o,l){if(!(e instanceof this.constructor))return throwError.call(this,"The source must be a Jimp image",l);if(typeof t!="number"||typeof r!="number")return throwError.call(this,"x and y must be numbers",l);if(typeof n=="function")l=n,n=0,a=0,s=e.bitmap.width,o=e.bitmap.height;else if(typeof n==typeof a&&typeof a==typeof s&&typeof s==typeof o)n=n||0,a=a||0,s=s||e.bitmap.width,o=o||e.bitmap.height;else return throwError.call(this,"srcx, srcy, srcw, srch must be numbers",l);t=Math.round(t),r=Math.round(r),n=Math.round(n),a=Math.round(a),s=Math.round(s),o=Math.round(o);const f=this.bitmap.width,u=this.bitmap.height,m=this;return e.scanQuiet(n,a,s,o,function(v,b,P){const F=t+v-n,C=r+b-a;if(F>=0&&C>=0&&f-F>0&&u-C>0){const D=m.getPixelIndex(F,C),E={r:this.bitmap.data[P],g:this.bitmap.data[P+1],b:this.bitmap.data[P+2],a:this.bitmap.data[P+3]},k={r:m.bitmap.data[D],g:m.bitmap.data[D+1],b:m.bitmap.data[D+2],a:m.bitmap.data[D+3]};m.bitmap.data[D]=(E.a*(E.r-k.r)-k.r+255>>8)+k.r,m.bitmap.data[D+1]=(E.a*(E.g-k.g)-k.g+255>>8)+k.g,m.bitmap.data[D+2]=(E.a*(E.b-k.b)-k.b+255>>8)+k.b,m.bitmap.data[D+3]=this.constructor.limit255(k.a+E.a)}}),isNodePattern(l)&&l.call(this,null,this),this}}),mulTable=[1,57,41,21,203,34,97,73,227,91,149,62,105,45,39,137,241,107,3,173,39,71,65,238,219,101,187,87,81,151,141,133,249,117,221,209,197,187,177,169,5,153,73,139,133,127,243,233,223,107,103,99,191,23,177,171,165,159,77,149,9,139,135,131,253,245,119,231,224,109,211,103,25,195,189,23,45,175,171,83,81,79,155,151,147,9,141,137,67,131,129,251,123,30,235,115,113,221,217,53,13,51,50,49,193,189,185,91,179,175,43,169,83,163,5,79,155,19,75,147,145,143,35,69,17,67,33,65,255,251,247,243,239,59,29,229,113,111,219,27,213,105,207,51,201,199,49,193,191,47,93,183,181,179,11,87,43,85,167,165,163,161,159,157,155,77,19,75,37,73,145,143,141,35,138,137,135,67,33,131,129,255,63,250,247,61,121,239,237,117,29,229,227,225,111,55,109,216,213,211,209,207,205,203,201,199,197,195,193,48,190,47,93,185,183,181,179,178,176,175,173,171,85,21,167,165,41,163,161,5,79,157,78,154,153,19,75,149,74,147,73,144,143,71,141,140,139,137,17,135,134,133,66,131,65,129,1],shgTable=[0,9,10,10,14,12,14,14,16,15,16,15,16,15,15,17,18,17,12,18,16,17,17,19,19,18,19,18,18,19,19,19,20,19,20,20,20,20,20,20,15,20,19,20,20,20,21,21,21,20,20,20,21,18,21,21,21,21,20,21,17,21,21,21,22,22,21,22,22,21,22,21,19,22,22,19,20,22,22,21,21,21,22,22,22,18,22,22,21,22,22,23,22,20,23,22,22,23,23,21,19,21,21,21,23,23,23,22,23,23,21,23,22,23,18,22,23,20,22,23,23,23,21,22,20,22,21,22,24,24,24,24,24,22,21,24,23,23,24,21,24,23,24,22,24,24,22,24,24,22,23,24,24,24,20,23,22,23,24,24,24,24,24,24,24,23,21,23,22,23,24,24,24,22,24,24,24,23,22,24,24,25,23,25,25,23,24,25,25,24,22,25,25,25,24,23,24,25,25,25,25,25,25,25,25,25,25,25,25,23,25,23,24,25,25,25,25,25,25,25,25,25,24,22,25,25,23,25,25,20,24,25,24,25,25,22,24,25,24,25,24,25,25,24,25,25,25,25,22,25,25,25,24,25,24,25,18],blur=()=>({blur(e,t){if(typeof e!="number")return throwError.call(this,"r must be a number",t);if(e<1)return throwError.call(this,"r must be greater than 0",t);let r,n,a,s,o,l,f,u,m,v,b,P,F,C;const D=this.bitmap.width-1,E=this.bitmap.height-1,k=e+1,j=mulTable[e],W=shgTable[e],M=[],S=[],T=[],V=[],_=[],ee=[];let re=2;for(;re-- >0;){for(P=0,F=0,l=0;l<this.bitmap.height;l++){for(r=this.bitmap.data[F]*k,n=this.bitmap.data[F+1]*k,a=this.bitmap.data[F+2]*k,s=this.bitmap.data[F+3]*k,f=1;f<=e;f++)u=F+((f>D?D:f)<<2),r+=this.bitmap.data[u++],n+=this.bitmap.data[u++],a+=this.bitmap.data[u++],s+=this.bitmap.data[u];for(o=0;o<this.bitmap.width;o++)M[P]=r,S[P]=n,T[P]=a,V[P]=s,l===0&&(_[o]=((u=o+k)<D?u:D)<<2,ee[o]=(u=o-e)>0?u<<2:0),m=F+_[o],v=F+ee[o],r+=this.bitmap.data[m++]-this.bitmap.data[v++],n+=this.bitmap.data[m++]-this.bitmap.data[v++],a+=this.bitmap.data[m++]-this.bitmap.data[v++],s+=this.bitmap.data[m]-this.bitmap.data[v],P++;F+=this.bitmap.width<<2}for(o=0;o<this.bitmap.width;o++){for(b=o,r=M[b]*k,n=S[b]*k,a=T[b]*k,s=V[b]*k,f=1;f<=e;f++)b+=f>E?0:this.bitmap.width,r+=M[b],n+=S[b],a+=T[b],s+=V[b];for(P=o<<2,l=0;l<this.bitmap.height;l++)C=s*j>>>W,this.bitmap.data[P+3]=C,C>255&&(this.bitmap.data[P+3]=255),C>0?(C=255/C,this.bitmap.data[P]=(r*j>>>W)*C,this.bitmap.data[P+1]=(n*j>>>W)*C,this.bitmap.data[P+2]=(a*j>>>W)*C):(this.bitmap.data[P+2]=0,this.bitmap.data[P+1]=0,this.bitmap.data[P]=0),o===0&&(_[l]=((u=l+k)<E?u:E)*this.bitmap.width,ee[l]=(u=l-e)>0?u*this.bitmap.width:0),m=o+_[l],v=o+ee[l],r+=M[m]-M[v],n+=S[m]-S[v],a+=T[m]-T[v],s+=V[m]-V[v],P+=this.bitmap.width<<2}}return isNodePattern(t)&&t.call(this,null,this),this}}),circle=()=>({circle(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;typeof e=="function"&&(t=e,e={});const r=e.radius||(this.bitmap.width>this.bitmap.height?this.bitmap.height:this.bitmap.width)/2,n={x:typeof e.x=="number"?e.x:this.bitmap.width/2,y:typeof e.y=="number"?e.y:this.bitmap.height/2};return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(a,s,o){const l=Math.sqrt(Math.pow(a-n.x,2)+Math.pow(s-n.y,2));r-l<=0?this.bitmap.data[o+3]=0:r-l<1&&(this.bitmap.data[o+3]=255*(r-l))}),isNodePattern(t)&&t.call(this,null,this),this}});function applyKernel(e,t,r,n){const a=[0,0,0],s=(t.length-1)/2;for(let o=0;o<t.length;o+=1)for(let l=0;l<t[o].length;l+=1){const f=e.getPixelIndex(r+o-s,n+l-s);a[0]+=e.bitmap.data[f]*t[o][l],a[1]+=e.bitmap.data[f+1]*t[o][l],a[2]+=e.bitmap.data[f+2]*t[o][l]}return a}const isDef=e=>typeof e<"u"&&e!==null;function greyscale(e){return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(t,r,n){const a=parseInt(.2126*this.bitmap.data[n]+.7152*this.bitmap.data[n+1]+.0722*this.bitmap.data[n+2],10);this.bitmap.data[n]=a,this.bitmap.data[n+1]=a,this.bitmap.data[n+2]=a}),isNodePattern(e)&&e.call(this,null,this),this}function mix(e,t){let r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:50;return{r:(t.r-e.r)*(r/100)+e.r,g:(t.g-e.g)*(r/100)+e.g,b:(t.b-e.b)*(r/100)+e.b}}function colorFn(e,t){return!e||!Array.isArray(e)?throwError.call(this,"actions must be an array",t):(e=e.map(r=>((r.apply==="xor"||r.apply==="mix")&&(r.params[0]=tinycolor(r.params[0]).toRgb()),r)),this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,(r,n,a)=>{let s={r:this.bitmap.data[a],g:this.bitmap.data[a+1],b:this.bitmap.data[a+2]};const o=(l,f)=>this.constructor.limit255(s[l]+f);e.forEach(l=>{if(l.apply==="mix")s=mix(s,l.params[0],l.params[1]);else if(l.apply==="tint")s=mix(s,{r:255,g:255,b:255},l.params[0]);else if(l.apply==="shade")s=mix(s,{r:0,g:0,b:0},l.params[0]);else if(l.apply==="xor")s={r:s.r^l.params[0].r,g:s.g^l.params[0].g,b:s.b^l.params[0].b};else if(l.apply==="red")s.r=o("r",l.params[0]);else if(l.apply==="green")s.g=o("g",l.params[0]);else if(l.apply==="blue")s.b=o("b",l.params[0]);else{if(l.apply==="hue"&&(l.apply="spin"),s=tinycolor(s),!s[l.apply])return throwError.call(this,"action "+l.apply+" not supported",t);s=s[l.apply](...l.params).toRgb()}}),this.bitmap.data[a]=s.r,this.bitmap.data[a+1]=s.g,this.bitmap.data[a+2]=s.b}),isNodePattern(t)&&t.call(this,null,this),this)}const color=()=>({brightness(e,t){return typeof e!="number"?throwError.call(this,"val must be numbers",t):e<-1||e>1?throwError.call(this,"val must be a number between -1 and +1",t):(this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(r,n,a){e<0?(this.bitmap.data[a]*=1+e,this.bitmap.data[a+1]*=1+e,this.bitmap.data[a+2]*=1+e):(this.bitmap.data[a]+=(255-this.bitmap.data[a])*e,this.bitmap.data[a+1]+=(255-this.bitmap.data[a+1])*e,this.bitmap.data[a+2]+=(255-this.bitmap.data[a+2])*e)}),isNodePattern(t)&&t.call(this,null,this),this)},contrast(e,t){if(typeof e!="number")return throwError.call(this,"val must be numbers",t);if(e<-1||e>1)return throwError.call(this,"val must be a number between -1 and +1",t);const r=(e+1)/(1-e);function n(a){return a=Math.floor(r*(a-127)+127),a<0?0:a>255?255:a}return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(a,s,o){this.bitmap.data[o]=n(this.bitmap.data[o]),this.bitmap.data[o+1]=n(this.bitmap.data[o+1]),this.bitmap.data[o+2]=n(this.bitmap.data[o+2])}),isNodePattern(t)&&t.call(this,null,this),this},posterize(e,t){return typeof e!="number"?throwError.call(this,"n must be numbers",t):(e<2&&(e=2),this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(r,n,a){this.bitmap.data[a]=Math.floor(this.bitmap.data[a]/255*(e-1))/(e-1)*255,this.bitmap.data[a+1]=Math.floor(this.bitmap.data[a+1]/255*(e-1))/(e-1)*255,this.bitmap.data[a+2]=Math.floor(this.bitmap.data[a+2]/255*(e-1))/(e-1)*255}),isNodePattern(t)&&t.call(this,null,this),this)},greyscale,grayscale:greyscale,opacity(e,t){return typeof e!="number"?throwError.call(this,"f must be a number",t):e<0||e>1?throwError.call(this,"f must be a number from 0 to 1",t):(this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(r,n,a){const s=this.bitmap.data[a+3]*e;this.bitmap.data[a+3]=s}),isNodePattern(t)&&t.call(this,null,this),this)},sepia(e){return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(t,r,n){let a=this.bitmap.data[n],s=this.bitmap.data[n+1],o=this.bitmap.data[n+2];a=a*.393+s*.769+o*.189,s=a*.349+s*.686+o*.168,o=a*.272+s*.534+o*.131,this.bitmap.data[n]=a<255?a:255,this.bitmap.data[n+1]=s<255?s:255,this.bitmap.data[n+2]=o<255?o:255}),isNodePattern(e)&&e.call(this,null,this),this},fade(e,t){return typeof e!="number"?throwError.call(this,"f must be a number",t):e<0||e>1?throwError.call(this,"f must be a number from 0 to 1",t):(this.opacity(1-e),isNodePattern(t)&&t.call(this,null,this),this)},convolution(e,t,r){typeof t=="function"&&typeof r>"u"&&(r=t,t=null),t||(t=this.constructor.EDGE_EXTEND);const n=Buffer$1.from(this.bitmap.data),a=e.length,s=e[0].length,o=Math.floor(a/2),l=Math.floor(s/2),f=-o,u=-l;let m,v,b,P,F,C,D,E,k,j;return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(W,M,S){P=0,b=0,v=0;for(let T=f;T<=o;T++)for(let V=u;V<=l;V++)E=W+V,k=M+T,m=e[T+o][V+l],j=this.getPixelIndex(E,k,t),j===-1?(D=0,C=0,F=0):(F=this.bitmap.data[j+0],C=this.bitmap.data[j+1],D=this.bitmap.data[j+2]),v+=m*F,b+=m*C,P+=m*D;v<0&&(v=0),b<0&&(b=0),P<0&&(P=0),v>255&&(v=255),b>255&&(b=255),P>255&&(P=255),n[S+0]=v,n[S+1]=b,n[S+2]=P}),this.bitmap.data=n,isNodePattern(r)&&r.call(this,null,this),this},opaque(e){return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(t,r,n){this.bitmap.data[n+3]=255}),isNodePattern(e)&&e.call(this,null,this),this},pixelate(e,t,r,n,a,s){if(typeof t=="function")s=t,a=null,n=null,r=null,t=null;else{if(typeof e!="number")return throwError.call(this,"size must be a number",s);if(isDef(t)&&typeof t!="number")return throwError.call(this,"x must be a number",s);if(isDef(r)&&typeof r!="number")return throwError.call(this,"y must be a number",s);if(isDef(n)&&typeof n!="number")return throwError.call(this,"w must be a number",s);if(isDef(a)&&typeof a!="number")return throwError.call(this,"h must be a number",s)}const o=[[1/16,2/16,1/16],[2/16,4/16,2/16],[1/16,2/16,1/16]];t=t||0,r=r||0,n=isDef(n)?n:this.bitmap.width-t,a=isDef(a)?a:this.bitmap.height-r;const l=this.cloneQuiet();return this.scanQuiet(t,r,n,a,function(f,u,m){f=e*Math.floor(f/e),u=e*Math.floor(u/e);const v=applyKernel(l,o,f,u);this.bitmap.data[m]=v[0],this.bitmap.data[m+1]=v[1],this.bitmap.data[m+2]=v[2]}),isNodePattern(s)&&s.call(this,null,this),this},convolute(e,t,r,n,a,s){if(!Array.isArray(e))return throwError.call(this,"the kernel must be an array",s);if(typeof t=="function")s=t,t=null,r=null,n=null,a=null;else{if(isDef(t)&&typeof t!="number")return throwError.call(this,"x must be a number",s);if(isDef(r)&&typeof r!="number")return throwError.call(this,"y must be a number",s);if(isDef(n)&&typeof n!="number")return throwError.call(this,"w must be a number",s);if(isDef(a)&&typeof a!="number")return throwError.call(this,"h must be a number",s)}t=isDef(t)?t:0,r=isDef(r)?r:0,n=isDef(n)?n:this.bitmap.width-t,a=isDef(a)?a:this.bitmap.height-r;const o=this.cloneQuiet();return this.scanQuiet(t,r,n,a,function(l,f,u){const m=applyKernel(o,e,l,f);this.bitmap.data[u]=this.constructor.limit255(m[0]),this.bitmap.data[u+1]=this.constructor.limit255(m[1]),this.bitmap.data[u+2]=this.constructor.limit255(m[2])}),isNodePattern(s)&&s.call(this,null,this),this},color:colorFn,colour:colorFn}),contain=()=>({contain(e,t,r,n,a){if(typeof e!="number"||typeof t!="number")return throwError.call(this,"w and h must be numbers",a);typeof r=="string"&&(typeof n=="function"&&typeof a>"u"&&(a=n),n=r,r=null),typeof r=="function"&&(typeof a>"u"&&(a=r),n=null,r=null),typeof n=="function"&&typeof a>"u"&&(a=n,n=null),r=r||this.constructor.HORIZONTAL_ALIGN_CENTER|this.constructor.VERTICAL_ALIGN_MIDDLE;const s=r&7,o=r>>3;if(!(s!==0&&!(s&s-1)||o!==0&&!(o&o-1)))return throwError.call(this,"only use one flag per alignment direction",a);const l=s>>1,f=o>>1,u=e/t>this.bitmap.width/this.bitmap.height?t/this.bitmap.height:e/this.bitmap.width,m=this.cloneQuiet().scale(u,n);return this.resize(e,t,n),this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(v,b,P){this.bitmap.data.writeUInt32BE(this._background,P)}),this.blit(m,(this.bitmap.width-m.bitmap.width)/2*l,(this.bitmap.height-m.bitmap.height)/2*f),isNodePattern(a)&&a.call(this,null,this),this}}),cover=()=>({cover(e,t,r,n,a){if(typeof e!="number"||typeof t!="number")return throwError.call(this,"w and h must be numbers",a);r&&typeof r=="function"&&typeof a>"u"?(a=r,r=null,n=null):typeof n=="function"&&typeof a>"u"&&(a=n,n=null),r=r||this.constructor.HORIZONTAL_ALIGN_CENTER|this.constructor.VERTICAL_ALIGN_MIDDLE;const s=r&7,o=r>>3;if(!(s!==0&&!(s&s-1)||o!==0&&!(o&o-1)))return throwError.call(this,"only use one flag per alignment direction",a);const l=s>>1,f=o>>1,u=e/t>this.bitmap.width/this.bitmap.height?e/this.bitmap.width:t/this.bitmap.height;return this.scale(u,n),this.crop((this.bitmap.width-e)/2*l,(this.bitmap.height-t)/2*f,e,t),isNodePattern(a)&&a.call(this,null,this),this}});function pluginCrop(e){return e("crop",function(t,r,n,a,s){if(typeof t!="number"||typeof r!="number")return throwError.call(this,"x and y must be numbers",s);if(typeof n!="number"||typeof a!="number")return throwError.call(this,"w and h must be numbers",s);if(t=Math.round(t),r=Math.round(r),n=Math.round(n),a=Math.round(a),t===0&&n===this.bitmap.width){const o=n*r+t<<2,l=o+(a*n<<2);this.bitmap.data=this.bitmap.data.slice(o,l)}else{const o=Buffer$1.allocUnsafe(n*a*4);let l=0;this.scanQuiet(t,r,n,a,function(f,u,m){const v=this.bitmap.data.readUInt32BE(m,!0);o.writeUInt32BE(v,l,!0),l+=4}),this.bitmap.data=o}return this.bitmap.width=n,this.bitmap.height=a,isNodePattern(s)&&s.call(this,null,this),this}),{class:{autocrop(){const t=this.bitmap.width,r=this.bitmap.height,n=1;let a,s=0,o=2e-4,l=!0,f=!1,u={north:!1,south:!1,east:!1,west:!1};for(var m=arguments.length,v=new Array(m),b=0;b<m;b++)v[b]=arguments[b];for(let S=0,T=v.length;S<T;S++)if(typeof v[S]=="number"&&(o=v[S]),typeof v[S]=="boolean"&&(l=v[S]),typeof v[S]=="function"&&(a=v[S]),typeof v[S]=="object"){const V=v[S];typeof V.tolerance<"u"&&({tolerance:o}=V),typeof V.cropOnlyFrames<"u"&&({cropOnlyFrames:l}=V),typeof V.cropSymmetric<"u"&&({cropSymmetric:f}=V),typeof V.leaveBorder<"u"&&({leaveBorder:s}=V),typeof V.ignoreSides<"u"&&({ignoreSides:u}=V)}let P=this.getPixelColor(0,0);const F=this.constructor.intToRGBA(P);let C=0,D=0,E=0,k=0;if(P=this.getPixelColor(0,0),!u.north)e:for(let S=0;S<r-n;S++){for(let T=0;T<t;T++){const V=this.getPixelColor(T,S),_=this.constructor.intToRGBA(V);if(this.constructor.colorDiff(F,_)>o)break e}C++}if(P=this.getPixelColor(t,0),!u.west)e:for(let S=0;S<t-n;S++){for(let T=0+C;T<r;T++){const V=this.getPixelColor(S,T),_=this.constructor.intToRGBA(V);if(this.constructor.colorDiff(F,_)>o)break e}k++}if(P=this.getPixelColor(0,r),!u.south)e:for(let S=r-1;S>=C+n;S--){for(let T=t-D-1;T>=0;T--){const V=this.getPixelColor(T,S),_=this.constructor.intToRGBA(V);if(this.constructor.colorDiff(F,_)>o)break e}E++}if(P=this.getPixelColor(t,r),!u.east)e:for(let S=t-1;S>=0+k+n;S--){for(let T=r-1;T>=0+C;T--){const V=this.getPixelColor(S,T),_=this.constructor.intToRGBA(V);if(this.constructor.colorDiff(F,_)>o)break e}D++}let j=!1;if(k-=s,D-=s,C-=s,E-=s,f){const S=Math.min(D,k),T=Math.min(C,E);k=S,D=S,C=T,E=T}k=k>=0?k:0,D=D>=0?D:0,C=C>=0?C:0,E=E>=0?E:0;const W=t-(k+D),M=r-(E+C);return l?j=D!==0&&C!==0&&k!==0&&E!==0:j=D!==0||C!==0||k!==0||E!==0,j&&this.crop(k,C,W,M),isNodePattern(a)&&a.call(this,null,this),this}}}}const displace=()=>({displace(e,t,r){if(typeof e!="object"||e.constructor!==this.constructor)return throwError.call(this,"The source must be a Jimp image",r);if(typeof t!="number")return throwError.call(this,"factor must be a number",r);const n=this.cloneQuiet();return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(a,s,o){let l=e.bitmap.data[o]/256*t;l=Math.round(l);const f=this.getPixelIndex(a+l,s);this.bitmap.data[f]=n.bitmap.data[o],this.bitmap.data[f+1]=n.bitmap.data[o+1],this.bitmap.data[f+2]=n.bitmap.data[o+2]}),isNodePattern(r)&&r.call(this,null,this),this}});function dither(e){const t=[1,9,3,11,13,5,15,7,4,12,2,10,16,8,14,6];return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(r,n,a){const s=((n&3)<<2)+r%4,o=t[s];this.bitmap.data[a]=Math.min(this.bitmap.data[a]+o,255),this.bitmap.data[a+1]=Math.min(this.bitmap.data[a+1]+o,255),this.bitmap.data[a+2]=Math.min(this.bitmap.data[a+2]+o,255)}),isNodePattern(e)&&e.call(this,null,this),this}const dither$1=()=>({dither565:dither,dither16:dither}),fisheye=()=>({fisheye(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{r:2.5},t=arguments.length>1?arguments[1]:void 0;typeof e=="function"&&(t=e,e={r:2.5});const r=this.cloneQuiet(),{width:n,height:a}=r.bitmap;return r.scanQuiet(0,0,n,a,(s,o)=>{const l=s/n,f=o/a,u=Math.sqrt(Math.pow(l-.5,2)+Math.pow(f-.5,2)),m=2*Math.pow(u,e.r),v=(l-.5)/u,b=(f-.5)/u,P=Math.round((m*v+.5)*n),F=Math.round((m*b+.5)*a),C=r.getPixelColor(P,F);this.setPixelColor(C,s,o)}),this.setPixelColor(r.getPixelColor(n/2,a/2),n/2,a/2),isNodePattern(t)&&t.call(this,null,this),this}});function flipFn(e,t,r){if(typeof e!="boolean"||typeof t!="boolean")return throwError.call(this,"horizontal and vertical must be Booleans",r);const n=Buffer$1.alloc(this.bitmap.data.length);return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(a,s,o){const l=e?this.bitmap.width-1-a:a,f=t?this.bitmap.height-1-s:s,u=this.bitmap.width*f+l<<2,m=this.bitmap.data.readUInt32BE(o);n.writeUInt32BE(m,u)}),this.bitmap.data=Buffer$1.from(n),isNodePattern(r)&&r.call(this,null,this),this}const flip=()=>({flip:flipFn,mirror:flipFn}),gaussian=()=>({gaussian(e,t){if(typeof e!="number")return throwError.call(this,"r must be a number",t);if(e<1)return throwError.call(this,"r must be greater than 0",t);const r=Math.ceil(e*2.57),n=r*2+1,a=e*e*2,s=a*Math.PI,o=[];for(let l=0;l<n;l++){o[l]=[];for(let f=0;f<n;f++){const u=(f-r)**2+(l-r)**2;o[l][f]=Math.exp(-u/a)/s}}for(let l=0;l<this.bitmap.height;l++)for(let f=0;f<this.bitmap.width;f++){let u=0,m=0,v=0,b=0,P=0;for(let F=0;F<n;F++){for(let D=0;D<n;D++){const E=Math.min(this.bitmap.width-1,Math.max(0,D+f-r)),k=Math.min(this.bitmap.height-1,Math.max(0,F+l-r)),j=o[F][D],W=k*this.bitmap.width+E<<2;u+=this.bitmap.data[W]*j,m+=this.bitmap.data[W+1]*j,v+=this.bitmap.data[W+2]*j,b+=this.bitmap.data[W+3]*j,P+=j}const C=l*this.bitmap.width+f<<2;this.bitmap.data[C]=Math.round(u/P),this.bitmap.data[C+1]=Math.round(m/P),this.bitmap.data[C+2]=Math.round(v/P),this.bitmap.data[C+3]=Math.round(b/P)}}return isNodePattern(t)&&t.call(this,null,this),this}}),invert=()=>({invert(e){return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(t,r,n){this.bitmap.data[n]=255-this.bitmap.data[n],this.bitmap.data[n+1]=255-this.bitmap.data[n+1],this.bitmap.data[n+2]=255-this.bitmap.data[n+2]}),isNodePattern(e)&&e.call(this,null,this),this}}),mask=()=>({mask(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,n=arguments.length>3?arguments[3]:void 0;if(!(e instanceof this.constructor))return throwError.call(this,"The source must be a Jimp image",n);if(typeof t!="number"||typeof r!="number")return throwError.call(this,"x and y must be numbers",n);t=Math.round(t),r=Math.round(r);const a=this.bitmap.width,s=this.bitmap.height,o=this;return e.scanQuiet(0,0,e.bitmap.width,e.bitmap.height,function(l,f,u){const m=t+l,v=r+f;if(m>=0&&v>=0&&m<a&&v<s){const b=o.getPixelIndex(m,v),{data:P}=this.bitmap,F=(P[u+0]+P[u+1]+P[u+2])/3;o.bitmap.data[b+3]*=F/255}}),isNodePattern(n)&&n.call(this,null,this),this}});function histogram(){const e={r:new Array(256).fill(0),g:new Array(256).fill(0),b:new Array(256).fill(0)};return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(t,r,n){e.r[this.bitmap.data[n+0]]++,e.g[this.bitmap.data[n+1]]++,e.b[this.bitmap.data[n+2]]++}),e}const normalize=function(e,t,r){return(e-t)*255/(r-t)},getBounds=function(e){return[e.findIndex(t=>t>0),255-e.slice().reverse().findIndex(t=>t>0)]},normalize$1=()=>({normalize(e){const t=histogram.call(this),r={r:getBounds(t.r),g:getBounds(t.g),b:getBounds(t.b)};return this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(n,a,s){const o=this.bitmap.data[s+0],l=this.bitmap.data[s+1],f=this.bitmap.data[s+2];this.bitmap.data[s+0]=normalize(o,r.r[0],r.r[1]),this.bitmap.data[s+1]=normalize(l,r.g[0],r.g[1]),this.bitmap.data[s+2]=normalize(f,r.b[0],r.b[1])}),isNodePattern(e)&&e.call(this,null,this),this}});var xhr$1={exports:{}},win;typeof window<"u"?win=window:typeof commonjsGlobal<"u"?win=commonjsGlobal:typeof self<"u"?win=self:win={};var window_1=win,isFunction_1=isFunction$1,toString=Object.prototype.toString;function isFunction$1(e){if(!e)return!1;var t=toString.call(e);return t==="[object Function]"||typeof e=="function"&&t!=="[object RegExp]"||typeof window<"u"&&(e===window.setTimeout||e===window.alert||e===window.confirm||e===window.prompt)}var trim=function(e){return e.replace(/^\s+|\s+$/g,"")},isArray$1=function(e){return Object.prototype.toString.call(e)==="[object Array]"},parseHeaders$1=function(e){if(!e)return{};for(var t={},r=trim(e).split(`
`),n=0;n<r.length;n++){var a=r[n],s=a.indexOf(":"),o=trim(a.slice(0,s)).toLowerCase(),l=trim(a.slice(s+1));typeof t[o]>"u"?t[o]=l:isArray$1(t[o])?t[o].push(l):t[o]=[t[o],l]}return t},immutable=extend,hasOwnProperty=Object.prototype.hasOwnProperty;function extend(){for(var e={},t=0;t<arguments.length;t++){var r=arguments[t];for(var n in r)hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}var window$1=window_1,isFunction=isFunction_1,parseHeaders=parseHeaders$1,xtend$1=immutable;xhr$1.exports=createXHR;xhr$1.exports.default=createXHR;createXHR.XMLHttpRequest=window$1.XMLHttpRequest||noop$1;createXHR.XDomainRequest="withCredentials"in new createXHR.XMLHttpRequest?createXHR.XMLHttpRequest:window$1.XDomainRequest;forEachArray(["get","put","post","patch","head","delete"],function(e){createXHR[e==="delete"?"del":e]=function(t,r,n){return r=initParams(t,r,n),r.method=e.toUpperCase(),_createXHR(r)}});function forEachArray(e,t){for(var r=0;r<e.length;r++)t(e[r])}function isEmpty$1(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function initParams(e,t,r){var n=e;return isFunction(t)?(r=t,typeof e=="string"&&(n={uri:e})):n=xtend$1(t,{uri:e}),n.callback=r,n}function createXHR(e,t,r){return t=initParams(e,t,r),_createXHR(t)}function _createXHR(e){if(typeof e.callback>"u")throw new Error("callback argument missing");var t=!1,r=function(j,W,M){t||(t=!0,e.callback(j,W,M))};function n(){l.readyState===4&&setTimeout(o,0)}function a(){var k=void 0;if(l.response?k=l.response:k=l.responseText||getXml(l),C)try{k=JSON.parse(k)}catch{}return k}function s(k){return clearTimeout(D),k instanceof Error||(k=new Error(""+(k||"Unknown XMLHttpRequest Error"))),k.statusCode=0,r(k,E)}function o(){if(!u){var k;clearTimeout(D),e.useXDR&&l.status===void 0?k=200:k=l.status===1223?204:l.status;var j=E,W=null;return k!==0?(j={body:a(),statusCode:k,method:v,headers:{},url:m,rawRequest:l},l.getAllResponseHeaders&&(j.headers=parseHeaders(l.getAllResponseHeaders()))):W=new Error("Internal XMLHttpRequest Error"),r(W,j,j.body)}}var l=e.xhr||null;l||(e.cors||e.useXDR?l=new createXHR.XDomainRequest:l=new createXHR.XMLHttpRequest);var f,u,m=l.url=e.uri||e.url,v=l.method=e.method||"GET",b=e.body||e.data,P=l.headers=e.headers||{},F=!!e.sync,C=!1,D,E={body:void 0,headers:{},statusCode:0,method:v,url:m,rawRequest:l};if("json"in e&&e.json!==!1&&(C=!0,P.accept||P.Accept||(P.Accept="application/json"),v!=="GET"&&v!=="HEAD"&&(P["content-type"]||P["Content-Type"]||(P["Content-Type"]="application/json"),b=JSON.stringify(e.json===!0?b:e.json))),l.onreadystatechange=n,l.onload=o,l.onerror=s,l.onprogress=function(){},l.onabort=function(){u=!0},l.ontimeout=s,l.open(v,m,!F,e.username,e.password),F||(l.withCredentials=!!e.withCredentials),!F&&e.timeout>0&&(D=setTimeout(function(){if(!u){u=!0,l.abort("timeout");var k=new Error("XMLHttpRequest timeout");k.code="ETIMEDOUT",s(k)}},e.timeout)),l.setRequestHeader)for(f in P)P.hasOwnProperty(f)&&l.setRequestHeader(f,P[f]);else if(e.headers&&!isEmpty$1(e.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in e&&(l.responseType=e.responseType),"beforeSend"in e&&typeof e.beforeSend=="function"&&e.beforeSend(l),l.send(b||null),l}function getXml(e){try{if(e.responseType==="document")return e.responseXML;var t=e.responseXML&&e.responseXML.documentElement.nodeName==="parsererror";if(e.responseType===""&&!t)return e.responseXML}catch{}return null}function noop$1(){}var xhrExports=xhr$1.exports,parseBmfontAscii=function e(t){if(!t)throw new Error("no data provided");t=t.toString().trim();var r={pages:[],chars:[],kernings:[]},n=t.split(/\r\n?|\n/g);if(n.length===0)throw new Error("no data in BMFont file");for(var a=0;a<n.length;a++){var s=splitLine(n[a],a);if(s)if(s.key==="page"){if(typeof s.data.id!="number")throw new Error("malformed file at line "+a+" -- needs page id=N");if(typeof s.data.file!="string")throw new Error("malformed file at line "+a+' -- needs page file="path"');r.pages[s.data.id]=s.data.file}else s.key==="chars"||s.key==="kernings"||(s.key==="char"?r.chars.push(s.data):s.key==="kerning"?r.kernings.push(s.data):r[s.key]=s.data)}return r};function splitLine(e,t){if(e=e.replace(/\t+/g," ").trim(),!e)return null;var r=e.indexOf(" ");if(r===-1)throw new Error("no named row at line "+t);var n=e.substring(0,r);e=e.substring(r+1),e=e.replace(/letter=[\'\"]\S+[\'\"]/gi,""),e=e.split("="),e=e.map(function(f){return f.trim().match(/(".*?"|[^"\s]+)+(?=\s*|\s*$)/g)});for(var a=[],s=0;s<e.length;s++){var o=e[s];s===0?a.push({key:o[0],data:""}):s===e.length-1?a[a.length-1].data=parseData(o[0]):(a[a.length-1].data=parseData(o[0]),a.push({key:o[1],data:""}))}var l={key:n,data:{}};return a.forEach(function(f){l.data[f.key]=f.data}),l}function parseData(e){return!e||e.length===0?"":e.indexOf('"')===0||e.indexOf("'")===0?e.substring(1,e.length-1):e.indexOf(",")!==-1?parseIntList$1(e):parseInt(e,10)}function parseIntList$1(e){return e.split(",").map(function(t){return parseInt(t,10)})}var GLYPH_DESIGNER_ERROR="chasrset",parseAttribs=function e(t){GLYPH_DESIGNER_ERROR in t&&(t.charset=t[GLYPH_DESIGNER_ERROR],delete t[GLYPH_DESIGNER_ERROR]);for(var r in t)r==="face"||r==="charset"||(r==="padding"||r==="spacing"?t[r]=parseIntList(t[r]):t[r]=parseInt(t[r],10));return t};function parseIntList(e){return e.split(",").map(function(t){return parseInt(t,10)})}var xmlParseFromString=function e(){return typeof self.DOMParser<"u"?function(t){var r=new self.DOMParser;return r.parseFromString(t,"application/xml")}:typeof self.ActiveXObject<"u"&&new self.ActiveXObject("Microsoft.XMLDOM")?function(t){var r=new self.ActiveXObject("Microsoft.XMLDOM");return r.async="false",r.loadXML(t),r}:function(t){var r=document.createElement("div");return r.innerHTML=t,r}}(),parseAttributes=parseAttribs,parseFromString=xmlParseFromString,NAME_MAP={scaleh:"scaleH",scalew:"scaleW",stretchh:"stretchH",lineheight:"lineHeight",alphachnl:"alphaChnl",redchnl:"redChnl",greenchnl:"greenChnl",bluechnl:"blueChnl"},browser$1=function e(t){t=t.toString();var r=parseFromString(t),n={pages:[],chars:[],kernings:[]};["info","common"].forEach(function(m){var v=r.getElementsByTagName(m)[0];v&&(n[m]=parseAttributes(getAttribs(v)))});var a=r.getElementsByTagName("pages")[0];if(!a)throw new Error("malformed file -- no <pages> element");for(var s=a.getElementsByTagName("page"),o=0;o<s.length;o++){var l=s[o],f=parseInt(l.getAttribute("id"),10),u=l.getAttribute("file");if(isNaN(f))throw new Error('malformed file -- page "id" attribute is NaN');if(!u)throw new Error('malformed file -- needs page "file" attribute');n.pages[parseInt(f,10)]=u}return["chars","kernings"].forEach(function(m){var v=r.getElementsByTagName(m)[0];if(v)for(var b=m.substring(0,m.length-1),P=v.getElementsByTagName(b),F=0;F<P.length;F++){var C=P[F];n[m].push(parseAttributes(getAttribs(C)))}}),n};function getAttribs(e){var t=getAttribList(e);return t.reduce(function(r,n){var a=mapName(n.nodeName);return r[a]=n.nodeValue,r},{})}function getAttribList(e){for(var t=[],r=0;r<e.attributes.length;r++)t.push(e.attributes[r]);return t}function mapName(e){return NAME_MAP[e.toLowerCase()]||e}var HEADER$1=[66,77,70],parseBmfontBinary=function e(t){if(t.length<6)throw new Error("invalid buffer length for BMFont");var r=HEADER$1.every(function(l,f){return t.readUInt8(f)===l});if(!r)throw new Error("BMFont missing BMF byte header");var n=3,a=t.readUInt8(n++);if(a>3)throw new Error("Only supports BMFont Binary v3 (BMFont App v1.10)");for(var s={kernings:[],chars:[]},o=0;o<5;o++)n+=readBlock(s,t,n);return s};function readBlock(e,t,r){if(r>t.length-1)return 0;var n=t.readUInt8(r++),a=t.readInt32LE(r);switch(r+=4,n){case 1:e.info=readInfo(t,r);break;case 2:e.common=readCommon(t,r);break;case 3:e.pages=readPages(t,r,a);break;case 4:e.chars=readChars(t,r,a);break;case 5:e.kernings=readKernings(t,r,a);break}return 5+a}function readInfo(e,t){var r={};r.size=e.readInt16LE(t);var n=e.readUInt8(t+2);return r.smooth=n>>7&1,r.unicode=n>>6&1,r.italic=n>>5&1,r.bold=n>>4&1,n>>3&1&&(r.fixedHeight=1),r.charset=e.readUInt8(t+3)||"",r.stretchH=e.readUInt16LE(t+4),r.aa=e.readUInt8(t+6),r.padding=[e.readInt8(t+7),e.readInt8(t+8),e.readInt8(t+9),e.readInt8(t+10)],r.spacing=[e.readInt8(t+11),e.readInt8(t+12)],r.outline=e.readUInt8(t+13),r.face=readStringNT(e,t+14),r}function readCommon(e,t){var r={};return r.lineHeight=e.readUInt16LE(t),r.base=e.readUInt16LE(t+2),r.scaleW=e.readUInt16LE(t+4),r.scaleH=e.readUInt16LE(t+6),r.pages=e.readUInt16LE(t+8),e.readUInt8(t+10),r.packed=0,r.alphaChnl=e.readUInt8(t+11),r.redChnl=e.readUInt8(t+12),r.greenChnl=e.readUInt8(t+13),r.blueChnl=e.readUInt8(t+14),r}function readPages(e,t,r){for(var n=[],a=readNameNT(e,t),s=a.length+1,o=r/s,l=0;l<o;l++)n[l]=e.slice(t,t+a.length).toString("utf8"),t+=s;return n}function readChars(e,t,r){for(var n=[],a=r/20,s=0;s<a;s++){var o={},l=s*20;o.id=e.readUInt32LE(t+0+l),o.x=e.readUInt16LE(t+4+l),o.y=e.readUInt16LE(t+6+l),o.width=e.readUInt16LE(t+8+l),o.height=e.readUInt16LE(t+10+l),o.xoffset=e.readInt16LE(t+12+l),o.yoffset=e.readInt16LE(t+14+l),o.xadvance=e.readInt16LE(t+16+l),o.page=e.readUInt8(t+18+l),o.chnl=e.readUInt8(t+19+l),n[s]=o}return n}function readKernings(e,t,r){for(var n=[],a=r/10,s=0;s<a;s++){var o={},l=s*10;o.first=e.readUInt32LE(t+0+l),o.second=e.readUInt32LE(t+4+l),o.amount=e.readInt16LE(t+8+l),n[s]=o}return n}function readNameNT(e,t){for(var r=t;r<e.length&&e[r]!==0;r++);return e.slice(t,r)}function readStringNT(e,t){return readNameNT(e,t).toString("utf8")}var Buffer=buffer.Buffer,bufferEqual=function(e,t){if(Buffer.isBuffer(e)&&Buffer.isBuffer(t)){if(typeof e.equals=="function")return e.equals(t);if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0}},equal=bufferEqual,HEADER=Buffer$1.from([66,77,70,3]),isBinary=function(e){return typeof e=="string"?e.substring(0,3)==="BMF":e.length>4&&equal(e.slice(0,4),HEADER)},xhr=xhrExports,noop=function(){},parseASCII=parseBmfontAscii,parseXML=browser$1,readBinary=parseBmfontBinary,isBinaryFormat=isBinary,xtend=immutable,xml2=function e(){return self.XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}(),browser=function(e,t){t=typeof t=="function"?t:noop,typeof e=="string"?e={uri:e}:e||(e={});var r=e.binary;r&&(e=getBinaryOpts(e)),xhr(e,function(n,a,s){if(n)return t(n);if(!/^2/.test(a.statusCode))return t(new Error("http status code: "+a.statusCode));if(!s)return t(new Error("no body result"));var o=!1;if(isArrayBuffer(s)){var l=new Uint8Array(s);s=Buffer$1.from(l,"binary")}isBinaryFormat(s)&&(o=!0,typeof s=="string"&&(s=Buffer$1.from(s,"binary"))),o||(Buffer$1.isBuffer(s)&&(s=s.toString(e.encoding)),s=s.trim());var f;try{var u=a.headers["content-type"];o?f=readBinary(s):/json/.test(u)||s.charAt(0)==="{"?f=JSON.parse(s):/xml/.test(u)||s.charAt(0)==="<"?f=parseXML(s):f=parseASCII(s)}catch(m){t(new Error("error parsing font "+m.message)),t=noop}t(null,f)})};function isArrayBuffer(e){var t=Object.prototype.toString;return t.call(e)==="[object ArrayBuffer]"}function getBinaryOpts(e){if(xml2)return xtend(e,{responseType:"arraybuffer"});if(typeof self.XMLHttpRequest>"u")throw new Error("your browser does not support XHR loading");var t=new self.XMLHttpRequest;return t.overrideMimeType("text/plain; charset=x-user-defined"),xtend({xhr:t},e)}const bMFont=getDefaultExportFromCjs$1(browser);function measureText(e,t){let r=0;for(let n=0;n<t.length;n++)if(e.chars[t[n]]){const a=e.kernings[t[n]]&&e.kernings[t[n]][t[n+1]]?e.kernings[t[n]][t[n+1]]:0;r+=(e.chars[t[n]].xadvance||0)+a}return r}function splitLines(e,t,r){const n=t.split(" "),a=[];let s=[],o=0;return n.forEach(l=>{const f=[...s,l].join(" "),u=measureText(e,f);u<=r?(u>o&&(o=u),s.push(l)):(a.push(s),s=[l])}),a.push(s),{lines:a,longestLine:o}}function measureTextHeight(e,t,r){const{lines:n}=splitLines(e,t,r);return n.length*e.common.lineHeight}var define_process_env_default={};function xOffsetBasedOnAlignment(e,t,r,n,a){return a===e.HORIZONTAL_ALIGN_LEFT?0:a===e.HORIZONTAL_ALIGN_CENTER?(n-measureText(t,r))/2:n-measureText(t,r)}function drawCharacter(e,t,r,n,a){if(a.width>0&&a.height>0){const s=t.pages[a.page];e.blit(s,r+a.xoffset,n+a.yoffset,a.x,a.y,a.width,a.height)}return e}function printText(e,t,r,n,a){for(let s=0;s<n.length;s++){let o;e.chars[n[s]]?o=n[s]:/\s/.test(n[s])?o="":o="?";const l=e.chars[o]||{},f=e.kernings[o];drawCharacter(this,e,t,r,l||{});const u=f&&f[n[s+1]]?f[n[s+1]]:0;t+=u+(l.xadvance||a)}}function loadPages(e,t,r){const n=r.map(a=>e.read(t+"/"+a));return Promise.all(n)}const dir=define_process_env_default.DIRNAME||"/home/runner/work/Sandbox/Sandbox/ZeldaWorldBuilder/ui/../",print=()=>({constants:{measureText,measureTextHeight,FONT_SANS_8_BLACK:Path.join(dir,"fonts/open-sans/open-sans-8-black/open-sans-8-black.fnt"),FONT_SANS_10_BLACK:Path.join(dir,"fonts/open-sans/open-sans-10-black/open-sans-10-black.fnt"),FONT_SANS_12_BLACK:Path.join(dir,"fonts/open-sans/open-sans-12-black/open-sans-12-black.fnt"),FONT_SANS_14_BLACK:Path.join(dir,"fonts/open-sans/open-sans-14-black/open-sans-14-black.fnt"),FONT_SANS_16_BLACK:Path.join(dir,"fonts/open-sans/open-sans-16-black/open-sans-16-black.fnt"),FONT_SANS_32_BLACK:Path.join(dir,"fonts/open-sans/open-sans-32-black/open-sans-32-black.fnt"),FONT_SANS_64_BLACK:Path.join(dir,"fonts/open-sans/open-sans-64-black/open-sans-64-black.fnt"),FONT_SANS_128_BLACK:Path.join(dir,"fonts/open-sans/open-sans-128-black/open-sans-128-black.fnt"),FONT_SANS_8_WHITE:Path.join(dir,"fonts/open-sans/open-sans-8-white/open-sans-8-white.fnt"),FONT_SANS_16_WHITE:Path.join(dir,"fonts/open-sans/open-sans-16-white/open-sans-16-white.fnt"),FONT_SANS_32_WHITE:Path.join(dir,"fonts/open-sans/open-sans-32-white/open-sans-32-white.fnt"),FONT_SANS_64_WHITE:Path.join(dir,"fonts/open-sans/open-sans-64-white/open-sans-64-white.fnt"),FONT_SANS_128_WHITE:Path.join(dir,"fonts/open-sans/open-sans-128-white/open-sans-128-white.fnt"),loadFont(e,t){return typeof e!="string"?throwError.call(this,"file must be a string",t):new Promise((r,n)=>{t=t||function(a,s){a?n(a):r(s)},bMFont(e,(a,s)=>{const o={},l={};if(a)return throwError.call(this,a,t);for(let f=0;f<s.chars.length;f++)o[String.fromCharCode(s.chars[f].id)]=s.chars[f];for(let f=0;f<s.kernings.length;f++){const u=String.fromCharCode(s.kernings[f].first);l[u]=l[u]||{},l[u][String.fromCharCode(s.kernings[f].second)]=s.kernings[f].amount}loadPages(this,Path.dirname(e),s.pages).then(f=>{t(null,{chars:o,kernings:l,pages:f,common:s.common,info:s.info})})})})}},class:{print(e,t,r,n,a,s,o){if(typeof a=="function"&&typeof o>"u"&&(o=a,a=1/0),typeof a>"u"&&(a=1/0),typeof s=="function"&&typeof o>"u"&&(o=s,s=1/0),typeof s>"u"&&(s=1/0),typeof e!="object")return throwError.call(this,"font must be a Jimp loadFont",o);if(typeof t!="number"||typeof r!="number"||typeof a!="number")return throwError.call(this,"x, y and maxWidth must be numbers",o);if(typeof a!="number")return throwError.call(this,"maxWidth must be a number",o);if(typeof s!="number")return throwError.call(this,"maxHeight must be a number",o);let l,f;typeof n=="object"&&n.text!==null&&n.text!==void 0?(l=n.alignmentX||this.constructor.HORIZONTAL_ALIGN_LEFT,f=n.alignmentY||this.constructor.VERTICAL_ALIGN_TOP,{text:n}=n):(l=this.constructor.HORIZONTAL_ALIGN_LEFT,f=this.constructor.VERTICAL_ALIGN_TOP,n=n.toString()),s!==1/0&&f===this.constructor.VERTICAL_ALIGN_BOTTOM?r+=s-measureTextHeight(e,n,a):s!==1/0&&f===this.constructor.VERTICAL_ALIGN_MIDDLE&&(r+=s/2-measureTextHeight(e,n,a)/2);const u=Object.entries(e.chars)[0][1].xadvance,{lines:m,longestLine:v}=splitLines(e,n,a);return m.forEach(b=>{const P=b.join(" "),F=xOffsetBasedOnAlignment(this.constructor,e,P,a,l);printText.call(this,e,t+F,r,P,u),r+=e.common.lineHeight}),isNodePattern(o)&&o.call(this,null,this,{x:t+v,y:r}),this}}});function Resize(e,t,r,n,a,s,o){this.widthOriginal=Math.abs(Math.floor(e)||0),this.heightOriginal=Math.abs(Math.floor(t)||0),this.targetWidth=Math.abs(Math.floor(r)||0),this.targetHeight=Math.abs(Math.floor(n)||0),this.colorChannels=a?4:3,this.interpolationPass=!!s,this.resizeCallback=typeof o=="function"?o:function(){},this.targetWidthMultipliedByChannels=this.targetWidth*this.colorChannels,this.originalWidthMultipliedByChannels=this.widthOriginal*this.colorChannels,this.originalHeightMultipliedByChannels=this.heightOriginal*this.colorChannels,this.widthPassResultSize=this.targetWidthMultipliedByChannels*this.heightOriginal,this.finalResultSize=this.targetWidthMultipliedByChannels*this.targetHeight,this.initialize()}Resize.prototype.initialize=function(){if(this.widthOriginal>0&&this.heightOriginal>0&&this.targetWidth>0&&this.targetHeight>0)this.configurePasses();else throw new Error("Invalid settings specified for the resizer.")};Resize.prototype.configurePasses=function(){this.widthOriginal===this.targetWidth?this.resizeWidth=this.bypassResizer:(this.ratioWeightWidthPass=this.widthOriginal/this.targetWidth,this.ratioWeightWidthPass<1&&this.interpolationPass?(this.initializeFirstPassBuffers(!0),this.resizeWidth=this.colorChannels===4?this.resizeWidthInterpolatedRGBA:this.resizeWidthInterpolatedRGB):(this.initializeFirstPassBuffers(!1),this.resizeWidth=this.colorChannels===4?this.resizeWidthRGBA:this.resizeWidthRGB)),this.heightOriginal===this.targetHeight?this.resizeHeight=this.bypassResizer:(this.ratioWeightHeightPass=this.heightOriginal/this.targetHeight,this.ratioWeightHeightPass<1&&this.interpolationPass?(this.initializeSecondPassBuffers(!0),this.resizeHeight=this.resizeHeightInterpolated):(this.initializeSecondPassBuffers(!1),this.resizeHeight=this.colorChannels===4?this.resizeHeightRGBA:this.resizeHeightRGB))};Resize.prototype._resizeWidthInterpolatedRGBChannels=function(e,t){const r=t?4:3,n=this.ratioWeightWidthPass,a=this.widthBuffer;let s=0,o=0,l=0,f=0,u=0,m;for(m=0;s<1/3;m+=r,s+=n)for(o=m,l=0;o<this.widthPassResultSize;l+=this.originalWidthMultipliedByChannels,o+=this.targetWidthMultipliedByChannels)a[o]=e[l],a[o+1]=e[l+1],a[o+2]=e[l+2],t&&(a[o+3]=e[l+3]);s-=1/3;let v;for(v=this.widthOriginal-1;s<v;m+=r,s+=n)for(u=s%1,f=1-u,o=m,l=Math.floor(s)*r;o<this.widthPassResultSize;l+=this.originalWidthMultipliedByChannels,o+=this.targetWidthMultipliedByChannels)a[o+0]=e[l+0]*f+e[l+r+0]*u,a[o+1]=e[l+1]*f+e[l+r+1]*u,a[o+2]=e[l+2]*f+e[l+r+2]*u,t&&(a[o+3]=e[l+3]*f+e[l+r+3]*u);for(v=this.originalWidthMultipliedByChannels-r;m<this.targetWidthMultipliedByChannels;m+=r)for(o=m,l=v;o<this.widthPassResultSize;l+=this.originalWidthMultipliedByChannels,o+=this.targetWidthMultipliedByChannels)a[o]=e[l],a[o+1]=e[l+1],a[o+2]=e[l+2],t&&(a[o+3]=e[l+3]);return a};Resize.prototype._resizeWidthRGBChannels=function(e,t){const r=t?4:3,n=this.ratioWeightWidthPass,a=1/n,s=this.originalWidthMultipliedByChannels-r+1,o=this.targetWidthMultipliedByChannels-r+1,l=this.outputWidthWorkBench,f=this.widthBuffer,u=this.outputWidthWorkBenchOpaquePixelsCount;let m=0,v=0,b=0,P=0,F=0,C=0,D=0,E=1,k=0,j=0,W=0,M=0;do{for(F=0;F<this.originalHeightMultipliedByChannels;)l[F++]=0,l[F++]=0,l[F++]=0,t&&(l[F++]=0,u[F/r-1]=0);m=n;do{for(v=1+b-P,E=Math.min(m,v),F=0,C=b;F<this.originalHeightMultipliedByChannels;C+=s)k=e[C],j=e[++C],W=e[++C],M=t?e[++C]:255,l[F++]+=(M?k:0)*E,l[F++]+=(M?j:0)*E,l[F++]+=(M?W:0)*E,t&&(l[F++]+=M*E,u[F/r-1]+=M?E:0);if(m>=v)b+=r,P=b,m-=v;else{P+=m;break}}while(m>0&&b<this.originalWidthMultipliedByChannels);for(F=0,C=D;F<this.originalHeightMultipliedByChannels;C+=o)m=t?u[F/r]:1,E=t?m?1/m:0:a,f[C]=l[F++]*E,f[++C]=l[F++]*E,f[++C]=l[F++]*E,t&&(f[++C]=l[F++]*a);D+=r}while(D<this.targetWidthMultipliedByChannels);return f};Resize.prototype._resizeHeightRGBChannels=function(e,t){const r=this.ratioWeightHeightPass,n=1/r,a=this.outputHeightWorkBench,s=this.heightBuffer,o=this.outputHeightWorkBenchOpaquePixelsCount;let l=0,f=0,u=0,m=0,v=0,b=0,P=0,F=1,C=0,D=0,E=0,k=0;do{for(v=0;v<this.targetWidthMultipliedByChannels;)a[v++]=0,a[v++]=0,a[v++]=0,t&&(a[v++]=0,o[v/4-1]=0);l=r;do{for(f=1+u-m,F=Math.min(l,f),P=u,v=0;v<this.targetWidthMultipliedByChannels;)C=e[P++],D=e[P++],E=e[P++],k=t?e[P++]:255,a[v++]+=(k?C:0)*F,a[v++]+=(k?D:0)*F,a[v++]+=(k?E:0)*F,t&&(a[v++]+=k*F,o[v/4-1]+=k?F:0);if(l>=f)u=P,m=u,l-=f;else{m+=l;break}}while(l>0&&u<this.widthPassResultSize);for(v=0;v<this.targetWidthMultipliedByChannels;)l=t?o[v/4]:1,F=t?l?1/l:0:n,s[b++]=Math.round(a[v++]*F),s[b++]=Math.round(a[v++]*F),s[b++]=Math.round(a[v++]*F),t&&(s[b++]=Math.round(a[v++]*n))}while(b<this.finalResultSize);return s};Resize.prototype.resizeWidthInterpolatedRGB=function(e){return this._resizeWidthInterpolatedRGBChannels(e,!1)};Resize.prototype.resizeWidthInterpolatedRGBA=function(e){return this._resizeWidthInterpolatedRGBChannels(e,!0)};Resize.prototype.resizeWidthRGB=function(e){return this._resizeWidthRGBChannels(e,!1)};Resize.prototype.resizeWidthRGBA=function(e){return this._resizeWidthRGBChannels(e,!0)};Resize.prototype.resizeHeightInterpolated=function(e){const t=this.ratioWeightHeightPass,r=this.heightBuffer;let n=0,a=0,s=0,o=0,l=0,f=0,u=0,m;for(;n<1/3;n+=t)for(s=0;s<this.targetWidthMultipliedByChannels;)r[a++]=Math.round(e[s++]);for(n-=1/3,m=this.heightOriginal-1;n<m;n+=t)for(u=n%1,f=1-u,o=Math.floor(n)*this.targetWidthMultipliedByChannels,l=o+this.targetWidthMultipliedByChannels,s=0;s<this.targetWidthMultipliedByChannels;++s)r[a++]=Math.round(e[o++]*f+e[l++]*u);for(;a<this.finalResultSize;)for(s=0,o=m*this.targetWidthMultipliedByChannels;s<this.targetWidthMultipliedByChannels;++s)r[a++]=Math.round(e[o++]);return r};Resize.prototype.resizeHeightRGB=function(e){return this._resizeHeightRGBChannels(e,!1)};Resize.prototype.resizeHeightRGBA=function(e){return this._resizeHeightRGBChannels(e,!0)};Resize.prototype.resize=function(e){this.resizeCallback(this.resizeHeight(this.resizeWidth(e)))};Resize.prototype.bypassResizer=function(e){return e};Resize.prototype.initializeFirstPassBuffers=function(e){this.widthBuffer=this.generateFloatBuffer(this.widthPassResultSize),e||(this.outputWidthWorkBench=this.generateFloatBuffer(this.originalHeightMultipliedByChannels),this.colorChannels>3&&(this.outputWidthWorkBenchOpaquePixelsCount=this.generateFloat64Buffer(this.heightOriginal)))};Resize.prototype.initializeSecondPassBuffers=function(e){this.heightBuffer=this.generateUint8Buffer(this.finalResultSize),e||(this.outputHeightWorkBench=this.generateFloatBuffer(this.targetWidthMultipliedByChannels),this.colorChannels>3&&(this.outputHeightWorkBenchOpaquePixelsCount=this.generateFloat64Buffer(this.targetWidth)))};Resize.prototype.generateFloatBuffer=function(e){try{return new Float32Array(e)}catch{return[]}};Resize.prototype.generateFloat64Buffer=function(e){try{return new Float64Array(e)}catch{return[]}};Resize.prototype.generateUint8Buffer=function(e){try{return new Uint8Array(e)}catch{return[]}};const operations={nearestNeighbor(e,t){const r=e.width,n=e.height,a=t.width,s=t.height,o=e.data,l=t.data;for(let f=0;f<s;f++)for(let u=0;u<a;u++){let m=(f*a+u)*4;const v=Math.floor(f*n/s),b=Math.floor(u*r/a);let P=(v*r+b)*4;l[m++]=o[P++],l[m++]=o[P++],l[m++]=o[P++],l[m++]=o[P++]}},bilinearInterpolation(e,t){const r=e.width,n=e.height,a=t.width,s=t.height,o=e.data,l=t.data,f=function(m,v,b,P,F){return v===P?b:Math.round((m-v)*F+(P-m)*b)},u=function(m,v,b,P,F,C,D,E){let k=(D*r+P)*4+v,j=(D*r+F)*4+v;const W=f(b,P,o[k],F,o[j]);if(E===D)l[m+v]=W;else{k=(E*r+P)*4+v,j=(E*r+F)*4+v;const M=f(b,P,o[k],F,o[j]);l[m+v]=f(C,D,W,E,M)}};for(let m=0;m<s;m++)for(let v=0;v<a;v++){const b=(m*a+v)*4,P=v*r/a,F=Math.floor(P),C=Math.min(Math.ceil(P),r-1),D=m*n/s,E=Math.floor(D),k=Math.min(Math.ceil(D),n-1);u(b,0,P,F,C,D,E,k),u(b,1,P,F,C,D,E,k),u(b,2,P,F,C,D,E,k),u(b,3,P,F,C,D,E,k)}},_interpolate2D(e,t,r,n){const a=e.data,s=t.data,o=e.width,l=e.height,f=t.width,u=t.height,m=Math.max(1,Math.floor(o/f)),v=f*m,b=Math.max(1,Math.floor(l/u)),P=u*b,F=Buffer$1.alloc(v*l*4);for(let E=0;E<l;E++)for(let k=0;k<v;k++){const j=k*(o-1)/v,W=Math.floor(j),M=j-W,S=(E*o+W)*4,T=(E*v+k)*4;for(let V=0;V<4;V++){const _=S+V,ee=W>0?a[_-4]:2*a[_]-a[_+4],re=a[_],te=a[_+4],oe=W<o-2?a[_+8]:2*a[_+4]-a[_];F[T+V]=n(ee,re,te,oe,M)}}const C=Buffer$1.alloc(v*P*4);for(let E=0;E<P;E++)for(let k=0;k<v;k++){const j=E*(l-1)/P,W=Math.floor(j),M=j-W,S=(W*v+k)*4,T=(E*v+k)*4;for(let V=0;V<4;V++){const _=S+V,ee=W>0?F[_-v*4]:2*F[_]-F[_+v*4],re=F[_],te=F[_+v*4],oe=W<l-2?F[_+v*8]:2*F[_+v*4]-F[_];C[T+V]=n(ee,re,te,oe,M)}}const D=m*b;if(D>1)for(let E=0;E<u;E++)for(let k=0;k<f;k++){let j=0,W=0,M=0,S=0,T=0;for(let _=0;_<b;_++){const ee=E*b+_;for(let re=0;re<m;re++){const te=k*m+re,oe=(ee*v+te)*4,he=C[oe+3];he&&(j+=C[oe],W+=C[oe+1],M+=C[oe+2],T++),S+=he}}const V=(E*f+k)*4;s[V]=T?Math.round(j/T):0,s[V+1]=T?Math.round(W/T):0,s[V+2]=T?Math.round(M/T):0,s[V+3]=Math.round(S/D)}else t.data=C},bicubicInterpolation(e,t,r){const n=function(a,s,o,l,f){const u=l-o-a+s,m=a-s-u,v=o-a,b=s;return Math.max(0,Math.min(255,u*(f*f*f)+m*(f*f)+v*f+b))};return this._interpolate2D(e,t,r,n)},hermiteInterpolation(e,t,r){const n=function(a,s,o,l,f){const u=s,m=.5*(o-a),v=a-2.5*s+2*o-.5*l,b=.5*(l-a)+1.5*(s-o);return Math.max(0,Math.min(255,Math.round(((b*f+v)*f+m)*f+u)))};return this._interpolate2D(e,t,r,n)},bezierInterpolation(e,t,r){const n=function(a,s,o,l,f){const u=s+(o-a)/4,m=o-(l-s)/4,v=1-f,b=s*v*v*v,P=3*u*v*v*f,F=3*m*v*f*f,C=o*f*f*f;return Math.max(0,Math.min(255,Math.round(b+P+F+C)))};return this._interpolate2D(e,t,r,n)}},resize=()=>({constants:{RESIZE_NEAREST_NEIGHBOR:"nearestNeighbor",RESIZE_BILINEAR:"bilinearInterpolation",RESIZE_BICUBIC:"bicubicInterpolation",RESIZE_HERMITE:"hermiteInterpolation",RESIZE_BEZIER:"bezierInterpolation"},class:{resize(e,t,r,n){if(typeof e!="number"||typeof t!="number")return throwError.call(this,"w and h must be numbers",n);if(typeof r=="function"&&typeof n>"u"&&(n=r,r=null),e===this.constructor.AUTO&&t===this.constructor.AUTO)return throwError.call(this,"w and h cannot both be set to auto",n);if(e===this.constructor.AUTO&&(e=this.bitmap.width*(t/this.bitmap.height)),t===this.constructor.AUTO&&(t=this.bitmap.height*(e/this.bitmap.width)),e<0||t<0)return throwError.call(this,"w and h must be positive numbers",n);if(e=Math.round(e)||1,t=Math.round(t)||1,typeof operations[r]=="function"){const a={data:Buffer$1.alloc(e*t*4),width:e,height:t};operations[r](this.bitmap,a),this.bitmap=a}else{const a=this;new Resize(this.bitmap.width,this.bitmap.height,e,t,!0,!0,o=>{a.bitmap.data=Buffer$1.from(o),a.bitmap.width=e,a.bitmap.height=t}).resize(this.bitmap.data)}return isNodePattern(n)&&n.call(this,null,this),this}}});function matrixRotate(e){if(Math.abs(e)%90!==0)throw new Error("Unsupported matrix rotation degree");if(e%=360,Math.abs(e)===0)return;const t=this.bitmap.width,r=this.bitmap.height;let n;switch(e){case 90:case-270:n=90;break;case 180:case-180:n=180;break;case 270:case-90:n=-90;break;default:throw new Error("Unsupported matrix rotation degree")}const a=n===180?t:r,s=n===180?r:t,o=Buffer$1.alloc(this.bitmap.data.length);function l(m,v){return function(b,P){return P*m+b<<2}}const f=l(t),u=l(a);for(let m=0;m<t;m++)for(let v=0;v<r;v++){const b=f(m,v),P=this.bitmap.data.readUInt32BE(b);let F;switch(n){case 90:F=u(v,t-m-1);break;case-90:F=u(r-v-1,m);break;case 180:F=u(t-m-1,r-v-1);break;default:throw new Error("Unsupported matrix rotation angle")}o.writeUInt32BE(P,F)}this.bitmap.data=o,this.bitmap.width=a,this.bitmap.height=s}function advancedRotate(e,t){e%=360;const r=e*Math.PI/180,n=Math.cos(r),a=Math.sin(r);let s=this.bitmap.width,o=this.bitmap.height;if(t===!0||typeof t=="string"){s=Math.ceil(Math.abs(this.bitmap.width*n)+Math.abs(this.bitmap.height*a))+1,o=Math.ceil(Math.abs(this.bitmap.width*a)+Math.abs(this.bitmap.height*n))+1,s%2!==0&&s++,o%2!==0&&o++;const P=this.cloneQuiet();this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,function(C,D,E){this.bitmap.data.writeUInt32BE(this._background,E)});const F=Math.max(s,o,this.bitmap.width,this.bitmap.height);this.resize(F,F,t),this.blit(P,this.bitmap.width/2-P.bitmap.width/2,this.bitmap.height/2-P.bitmap.height/2)}const l=this.bitmap.width,f=this.bitmap.height,u=Buffer$1.alloc(this.bitmap.data.length);function m(P,F){return function(C,D){return{x:C+P,y:D+F}}}const v=m(-(l/2),-(f/2)),b=m(l/2+.5,f/2+.5);for(let P=1;P<=f;P++)for(let F=1;F<=l;F++){const C=v(F,P),D=b(n*C.x-a*C.y,n*C.y+a*C.x),E=l*(P-1)+F-1<<2;if(D.x>=0&&D.x<l&&D.y>=0&&D.y<f){const k=(l*(D.y|0)+D.x|0)<<2,j=this.bitmap.data.readUInt32BE(k);u.writeUInt32BE(j,E)}else u.writeUInt32BE(this._background,E)}if(this.bitmap.data=u,t===!0||typeof t=="string"){const P=l/2-s/2,F=f/2-o/2;this.crop(P,F,s,o)}}const rotate=()=>({rotate(e,t,r){return(typeof t>"u"||t===null)&&(t=!0),typeof t=="function"&&typeof r>"u"&&(r=t,t=!0),typeof e!="number"?throwError.call(this,"deg must be a number",r):typeof t!="boolean"&&typeof t!="string"?throwError.call(this,"mode must be a boolean or a string",r):(e%90===0&&(t||this.bitmap.width===this.bitmap.height||e%180===0)?matrixRotate.call(this,e):advancedRotate.call(this,e,t,r),isNodePattern(r)&&r.call(this,null,this),this)}}),scale=()=>({scale(e,t,r){if(typeof e!="number")return throwError.call(this,"f must be a number",r);if(e<0)return throwError.call(this,"f must be a positive number",r);typeof t=="function"&&typeof r>"u"&&(r=t,t=null);const n=this.bitmap.width*e,a=this.bitmap.height*e;return this.resize(n,a,t),isNodePattern(r)&&r.call(this,null,this),this},scaleToFit(e,t,r,n){if(typeof e!="number"||typeof t!="number")return throwError.call(this,"w and h must be numbers",n);typeof r=="function"&&typeof n>"u"&&(n=r,r=null);const a=e/t>this.bitmap.width/this.bitmap.height?t/this.bitmap.height:e/this.bitmap.width;return this.scale(a,r),isNodePattern(n)&&n.call(this,null,this),this}}),shadow=()=>({shadow(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;typeof e=="function"&&(t=e,e={});const{opacity:r=.7,size:n=1.1,x:a=-25,y:s=25,blur:o=5}=e,l=this.clone(),f=this.clone();return f.scan(0,0,f.bitmap.width,f.bitmap.height,(u,m,v)=>{f.bitmap.data[v]=0,f.bitmap.data[v+1]=0,f.bitmap.data[v+2]=0,f.bitmap.data[v+3]=f.constructor.limit255(f.bitmap.data[v+3]*r),this.bitmap.data[v]=0,this.bitmap.data[v+1]=0,this.bitmap.data[v+2]=0,this.bitmap.data[v+3]=0}),f.resize(f.bitmap.width*n,f.bitmap.height*n).blur(o),this.composite(f,a,s),this.composite(l,0,0),isNodePattern(t)&&t.call(this,null,this),this}}),threshold=()=>({threshold(e,t){let{max:r,replace:n=255,autoGreyscale:a=!0}=e;return typeof r!="number"?throwError.call(this,"max must be a number",t):typeof n!="number"?throwError.call(this,"replace must be a number",t):typeof a!="boolean"?throwError.call(this,"autoGreyscale must be a boolean",t):(r=this.constructor.limit255(r),n=this.constructor.limit255(n),a&&this.greyscale(),this.scanQuiet(0,0,this.bitmap.width,this.bitmap.height,(s,o,l)=>{const f=this.bitmap.data[l]<r?this.bitmap.data[l]:n;this.bitmap.data[l]=f,this.bitmap.data[l+1]=f,this.bitmap.data[l+2]=f}),isNodePattern(t)&&t.call(this,null,this),this)}}),plugins=[blit,blur,circle,color,contain,cover,pluginCrop,displace,dither$1,fisheye,flip,gaussian,invert,mask,normalize$1,print,resize,rotate,scale,shadow,threshold],plugins$1=e=>{const t=plugins.map(r=>{let n=r(e)||{};return!n.class&&!n.constants&&(n={class:n}),n});return mergeDeep_1(...t)},Jimp=configure({types:[types],plugins:[plugins$1]});function isArray(e){return Array.isArray(e)}function isEmpty(e){return e==null||e===""||isArray(e)&&e.length===0}function collect(e,t){const r=[];return isArray(t)?e.forEach(n=>{const a={};t.forEach(s=>a[s]=n[s]),r.push(a)}):e.forEach(n=>r.push(n[t])),r}const ImageType=new Enum$1(["Tiles","Enemies","Items"],!1),DeltaFormula=new Enum$1(["E00","E94","E76"],!1),ImageCache={};function getDelta(e,t,r){return deltaE[`getDelta${r}`]({L:e[0],A:e[1],B:e[2]},{L:t[0],A:t[1],B:t[2]})}function convertColor(e,t,r){let n=null;return e==="hex"&&r.length===9&&(n=r.slice(1,3),r=r.slice(0,1)+r.slice(3),n=parseInt(n,16)),e==="rgb"&&r.length===4&&(n=r.pop(),n=Math.round(n*255)),e===t?[...r,n]:[...colorConvert$1[e][t](r),n]}async function replaceColor({image:e,type:t=ImageType.Tiles,replaceColors:r,targetColors:n,formula:a=DeltaFormula.E00,deltaE:s=2.3}){if(isString(e)&&(e=await getImage({name:e,type:t})),!(isEmpty(r)||isEmpty(n))){r=makeArray(r),n=makeArray(n);const o=[],l=[],{bitmap:f}=e,{data:u}=f;n.forEach((m,v)=>{o.push(convertColor("hex","lab",m)),l.push(convertColor("hex","rgb",r[v]))}),e.scan(0,0,f.width,f.height,(m,v,b)=>{const P=convertColor("rgb","lab",[u[b],u[b+1],u[b+2]]);for(let F=0;F<o.length;F++){const C=o[F],D=l[F];if(getDelta(P,C,a)<=s){u[b]=D[0],u[b+1]=D[1],u[b+2]=D[2],D[3]!==null&&(u[b+3]=D[3]);break}}})}return e.getBase64Async(Jimp.MIME_PNG)}async function loadImages(){const e=[],t=[Tiles.None,Tiles.SolidColor,Tiles.Transition,Tiles.Castle],r=[Enemies.BubbleBlue,Enemies.BubbleRed,Enemies.DarknutBlue,Enemies.GelBlue,Enemies.GoriyaBlue,Enemies.KeeseBlue,Enemies.KeeseRed,Enemies.LeeverBlue,Enemies.LynelBlue,Enemies.MoblinBlue,Enemies.MoldormBlue,Enemies.OctorokBlue,Enemies.RopeBlue,Enemies.WizzrobeBlue,Enemies.ZolGreen,Enemies.ZolGray,Enemies.TektiteBlue,Enemies.LanmolaBlue];return Tiles.forEach(({value:n,id:a})=>{t.indexOf(a)===-1&&e.push(getImage({name:n,type:ImageType.Tiles}))}),Items.forEach(({value:n})=>{e.push(getImage({name:n,type:ImageType.Items}))}),Enemies.forEach(({value:n,id:a})=>{r.indexOf(a)===-1&&e.push(getImage({name:n,type:ImageType.Enemies}))}),Promise.all(e)}async function base64ToBuffer(e){return await(await fetch(e)).arrayBuffer()}async function getImage({name:e,type:t=ImageType.Tiles,encode:r=!1}){if(isEmpty(e))return"";const n=`${t}.${e}`;let a=localStorage.getItem(n);return a||(a=await Jimp.read({url:`${t}/${e}.png`}),ImageCache[n]=a,a=await a.getBase64Async(Jimp.MIME_PNG),localStorage.setItem(n,a)),r?a:(a=ImageCache[n],a||(a=ImageCache[n]=await Jimp.read(await base64ToBuffer(localStorage.getItem(n)))),a.clone())}const TransitionTypes=[Tiles.Transition,Tiles.Door];function makeTargets(e){return{Target:e}}const WhiteBlueRed=[WorldColors.WhitePure,WorldColors.BluePure,WorldColors.RedPure],WhiteBlackBlueRed=[WorldColors.WhitePure,WorldColors.Black,WorldColors.BluePure,WorldColors.RedPure],FireOuterFireInnerWhite=[WorldColors.FireOuter,WorldColors.FireInner,WorldColors.WhitePure],WhiteBlueBlack=[WorldColors.WhitePure,WorldColors.BluePure,WorldColors.Black],WhiteRedBlack=[WorldColors.WhitePure,WorldColors.RedPure,WorldColors.Black],White=[WorldColors.WhitePure],WhiteBlue=[WorldColors.WhitePure,WorldColors.BluePure],WhiteBlack$1=[WorldColors.WhitePure,WorldColors.Black];function getDefaultTileColors(e){let t=[];switch(e){case Tiles.StairsKeep:case Tiles.WallKeep:case Tiles.Transition:case Tiles.None:break;case Tiles.Block:case Tiles.CastleSand:case Tiles.DoorClosedY:case Tiles.DoorClosedX:case Tiles.DoorUnlockedX:case Tiles.DoorUnlockedY:case Tiles.DoorLockedX:case Tiles.DoorLockedY:case Tiles.Statue1:case Tiles.Statue2:case Tiles.WallLeftX:case Tiles.WallLeftY:case Tiles.WallLeftYFlip:case Tiles.WallRightX:case Tiles.WallRightY:case Tiles.WallRightYFlip:case Tiles.WallX:case Tiles.WallY:t=WhiteBlueRed.map(makeTargets);break;case Tiles.WallHoleX:case Tiles.WallHoleY:t=WhiteBlackBlueRed.map(makeTargets);break;case Tiles.Fire:case Tiles.FireAlt:t=FireOuterFireInnerWhite.map(makeTargets);break;case Tiles.CastleBottomLeft:case Tiles.CastleBottomRight:case Tiles.CastleTop:case Tiles.CastleTopAlt:case Tiles.CastleTopLeftAlt:case Tiles.CastleTopRightAlt:case Tiles.CastleTopLeft:case Tiles.CastleTopRight:case Tiles.Dock:case Tiles.Grave:case Tiles.StairsUp:case Tiles.Statue:case Tiles.TreeBottomRight:case Tiles.TreeTopLeft:case Tiles.Water:case Tiles.WaterTopLeft:case Tiles.WaterTopRight:case Tiles.WaterBottomLeft:case Tiles.WaterBottomRight:t=WhiteBlueBlack.map(makeTargets);break;case Tiles.GroundTile:t=WhiteRedBlack.map(makeTargets);break;case Tiles.Door:t=[{Target:WorldColors.White,Value:WorldColors.Black}];break;case Tiles.SandBottom:case Tiles.SandCenter:t=White.map(makeTargets);break;case Tiles.PondBottom:case Tiles.PondBottomLeft:case Tiles.PondBottomRight:case Tiles.PondTop:case Tiles.PondTopLeft:case Tiles.PondTopRight:case Tiles.PondCenter:case Tiles.PondCenterLeft:case Tiles.PondCenterRight:t=WhiteBlue.map(makeTargets);break;case Tiles.Bush:default:t=WhiteBlack$1.map(makeTargets);break}return t}class Tile extends Model{getDefaultFields(){return[{name:"image",type:String},{name:"src",type:String},{name:"cell",type:Cell},{name:"type",type:Number,defaultValue:Tiles.None},{name:"colors",type:FieldType.Collection,model:TargetColor},{name:"Transition",type:Grid}]}reset(){this.set({Type:Tiles.None,Transition:null})}get isDoor(){return this.Type===Tiles.Door}get isTransition(){return TransitionTypes.indexOf(this.Type)!==-1}get Type(){return this.type}set Type(t){this.set({type:t,Colors:getDefaultTileColors(t)}),this.updateSrc(),this.isTransition&&this.set({Transition:{X:0,Y:0,IsFloating:!1}})}set Colors(t){this.set({colors:t}),this.updateImage()}get Colors(){return this.colors}async updateSrc(){const t=this.getImageKey();let r=null;this.hasImage()&&(r=await getImage({name:t,encode:!0})),this.set({src:r})}getTypeKey(){return Tiles.getKey(this.Type)}hasImage(){return this.Type!==Tiles.None}async updateImage(){let t="";if(this.hasImage()){const r=this.getImageKey(),n=this.getColors();t=await replaceColor({image:r,targetColors:collect(n,"Target"),replaceColors:collect(n,"Value")})}this.set({image:t})}getImageKey(){return this.isTransition?"Transparent":this.getTypeKey()}getColors(t){const r=this.Colors.filter(n=>!!n.Value);return t?r.reduce((n,a)=>{const s=a.getConfig();return s&&(n=n.concat(s)),n},[]):r}getConfig(){const t={X:this.cell.x,Y:this.cell.y},{Name:r}=this.cell;r&&(t.Name=r);const n=this.getColors(!0);if(isEmpty(n)||(t.Colors=n),this.isTransition){const a=[],s=this.Transition.getData({exclude:["AccentColor","GroundColor","cells","totalRows","totalColumns"]});isEmpty(s.Template)&&a.push("Template"),s.IsCastle||a.push("IsCastle"),s.IsFloating||a.push("IsFloating"),this.isDoor?s.Name??(s.Name=`${s.Template}${s.X}${s.Y}`):a.push("Name"),a.forEach(o=>delete s[o]),t.Transition=s}return t}}class WorldObject extends Model{getDefaultFields(){return[{name:"image",type:String},{name:"src",type:String},{name:"cell",type:Cell},{name:"type",type:Number,defaultValue:null},{name:"colors",type:FieldType.Collection,model:TargetColor}]}get enumCollection(){return Tiles}get imageType(){return ImageType.Tiles}setDefaultValues(){}get Type(){return this.type}set Type(t){this.set({type:t}),this.setDefaultValues(),this.updateSrc()}set Colors(t){this.set({colors:t}),this.updateImage()}get Colors(){return this.colors}async updateImage(){let t="";if(this.hasImage()){const r=this.getImageKey(),n=this.getColors();t=await replaceColor({image:r,type:this.imageType,targetColors:collect(n,"Target"),replaceColors:collect(n,"Value")})}this.set({image:t})}getColors(t){const r=this.Colors.filter(n=>!!n.Value);return t?r.reduce((n,a)=>{const s=a.getConfig();return s&&(n=n.concat(s)),n},[]):r}reset(){this.set({Type:null})}getTypeKey(){var t;return(t=this.enumCollection)==null?void 0:t.getKey(this.Type)}getImageKey(){return this.getTypeKey()}hasImage(){var t;return!(isEmpty$2(this.Type)||this.Type===((t=this.enumCollection)==null?void 0:t.None))}async updateSrc(){const t=this.getImageKey();let r=null;this.hasImage()&&(r=await getImage({name:t,type:this.imageType,encode:!0})),this.set({src:r})}}class Item extends WorldObject{constructor(){super(...arguments);Qe(this,"enumCollection",Items);Qe(this,"imageType",ImageType.Items)}getConfig(){return{X:this.cell.x,Y:this.cell.y,Config:{Type:this.getTypeKey()}}}setDefaultValues(){this.Colors=[]}}let WhiteBlack=[WorldColors.WhitePure,WorldColors.Black];const WhiteBlackRed=[WorldColors.WhitePure,WorldColors.Black,WorldColors.RedPure],EnemyNormal=WhiteBlackRed.map(e=>{const t={Target:e};return e===WorldColors.RedPure?t.Value=WorldColors.Red:e===WorldColors.Black&&(t.Value=WorldColors.Orange),t}),EnemyHard=WhiteBlackRed.map(e=>{const t={Target:e};return e===WorldColors.RedPure?t.Value=WorldColors.Blue:e===WorldColors.Black&&(t.Value=WorldColors.BlueLight),t}),PolsVoice=WhiteBlackRed.map(e=>{const t={Target:e};return e===WorldColors.Black?t.Value=WorldColors.Red:e===WorldColors.WhitePure?t.Value=WorldColors.Orange:e===WorldColors.RedPure&&(t.Value=WorldColors.Lime),t}),MoblinHarder=WhiteBlackRed.map(e=>{const t={Target:e};return e===WorldColors.RedPure?t.Value=WorldColors.Black:e===WorldColors.Black?t.Value=WorldColors.Teal:e===WorldColors.WhitePure&&(t.Value=WorldColors.Red),t}),Zora=WhiteBlack.map(e=>{const t={Target:e};return e===WorldColors.WhitePure?t.Value=WorldColors.Red:e===WorldColors.Black&&(t.Value=WorldColors.Teal),t}),GelBlue=WhiteBlack.map(e=>{const t={Target:e};return e===WorldColors.WhitePure?t.Value=WorldColors.TealLight:e===WorldColors.Black&&(t.Value=WorldColors.TealDark),t}),KeeseBlue=WhiteBlack.map(e=>{const t={Target:e};return e===WorldColors.WhitePure?t.Value=WorldColors.BlueLight:e===WorldColors.Black&&(t.Value=WorldColors.Blue),t}),KeeseRed=WhiteBlack.map(e=>{const t={Target:e};return e===WorldColors.WhitePure?t.Value=WorldColors.Orange:e===WorldColors.Black&&(t.Value=WorldColors.Red),t}),ZolGray=WhiteBlack.map(e=>{const t={Target:e};return e===WorldColors.Black&&(t.Value=WorldColors.Gray),t}),ZolGreen=WhiteBlack.map(e=>{const t={Target:e};return e===WorldColors.WhitePure?t.Value=WorldColors.GreenLight:e===WorldColors.Black&&(t.Value=WorldColors.GreenDark),t});WhiteBlack=WhiteBlack.map(e=>({Target:e}));class Enemy extends WorldObject{getDefaultFields(){return super.getDefaultFields().concat([{name:"Speed",type:Number,defaultValue:null},{name:"Health",type:Number,defaultValue:null},{name:"TouchDamage",type:Number,defaultValue:null},{name:"HealthModifier",type:Number,defaultValue:null},{name:"WeaponDamage",type:Number,defaultValue:null}])}get imageType(){return ImageType.Enemies}get enumCollection(){return Enemies}setDefaultValues(){let t,r,n,a,s,o=WhiteBlackRed;switch(this.Type){case Enemies.Armos:o=EnemyNormal,t=6,n=1,r=3;break;case Enemies.Bubble:o=EnemyNormal,t=0,n=0,r=3;break;case Enemies.BubbleRed:o=EnemyNormal,t=0,n=0,r=3;break;case Enemies.BubbleBlue:o=EnemyHard,t=0,n=0,r=3;break;case Enemies.Darknut:o=EnemyNormal,t=8,n=2,r=3;break;case Enemies.DarknutBlue:o=EnemyHard,t=16,n=4,r=5;break;case Enemies.Gel:o=WhiteBlack,t=2,n=1,r=1;break;case Enemies.GelBlue:o=GelBlue,t=2,n=1,r=1;break;case Enemies.Ghini:o=EnemyHard,t=22,n=1,r=2;break;case Enemies.Gibdo:o=EnemyHard,t=12,n=4,r=3,a=.75;break;case Enemies.Goriya:o=EnemyNormal,t=6,n=1,r=3,s=2;break;case Enemies.GoriyaBlue:o=EnemyHard,t=10,n=2,r=3,s=2;break;case Enemies.Keese:o=WhiteBlack,t=2,n=1,r=4;break;case Enemies.KeeseBlue:o=KeeseBlue,t=2,n=1,r=4;break;case Enemies.KeeseRed:o=KeeseRed,t=2,n=1,r=4;break;case Enemies.Lanmola:o=EnemyNormal,t=8,a=0,n=4,r=4;break;case Enemies.LanmolaBlue:o=EnemyHard,t=8,a=0,n=4,r=6;break;case Enemies.Leever:o=EnemyNormal,t=4,n=1,r=4;break;case Enemies.LeeverBlue:o=EnemyHard,t=8,n=2,r=4;break;case Enemies.LikeLike:o=EnemyNormal,t=20,n=2,r=3;break;case Enemies.Lynel:o=EnemyNormal,t=8,n=2,r=3,s=2;break;case Enemies.LynelBlue:o=EnemyHard,t=12,n=4,r=3,s=4;break;case Enemies.Moblin:o=EnemyNormal,t=4,n=1,r=3,s=1;break;case Enemies.MoblinBlue:o=MoblinHarder,t=6,n=1,r=3,s=1;break;case Enemies.Moldorm:o=EnemyNormal,t=10,a=0,n=1,r=1;break;case Enemies.MoldormBlue:o=EnemyHard;break;case Enemies.Octorok:o=EnemyNormal,t=2,n=1,s=1,r=3;break;case Enemies.OctorokBlue:o=EnemyHard,t=4,n=1,s=1,r=3;break;case Enemies.Patra:o=EnemyHard,t=20,n=4,r=3;break;case Enemies.PatraHead:o=EnemyNormal,t=20,n=4,r=3;break;case Enemies.Peahat:o=EnemyNormal,t=4,n=1,r=3;break;case Enemies.PolsVoice:o=PolsVoice,t=20,n=4,r=3;break;case Enemies.Rock:o=EnemyNormal,t=0,n=1,r=3;break;case Enemies.Rope:o=EnemyNormal,t=2,n=1,r=3;break;case Enemies.RopeBlue:o=EnemyHard,t=8,n=1,r=3;break;case Enemies.Stalfos:o=EnemyNormal,t=4,n=.25,s=.25,r=3;break;case Enemies.Tektite:o=EnemyNormal,t=2,n=1,r=3;break;case Enemies.TektiteBlue:o=EnemyHard,t=2,n=1,r=3;break;case Enemies.Trap:o=EnemyHard,t=0,n=1,r=3;break;case Enemies.Vire:o=EnemyHard,t=2,n=2,r=3;break;case Enemies.Wallmaster:o=EnemyHard,t=6,n=1,r=1;break;case Enemies.Wizzrobe:o=EnemyNormal,t=6,n=2,s=8,r=0;break;case Enemies.WizzrobeBlue:o=EnemyHard,t=10,n=4,s=4,r=5;break;case Enemies.Zol:o=WhiteBlack,t=2,n=2,r=1;break;case Enemies.ZolGray:o=ZolGray,t=2,n=2,r=1;break;case Enemies.ZolGreen:o=ZolGreen,t=2,n=2,r=1;break;case Enemies.Zora:o=Zora,t=4,n=1,s=1,r=0;break}t=this.Health??t,a=this.HealthModifier??a,r=this.Speed??r,n=this.TouchDamage??n,s=this.WeaponDamage??s,this.set({Colors:o,Health:t,TouchDamage:n,Speed:r,HealthModifier:a,WeaponDamage:s})}getTypeKey(){let t;const r=this.enumCollection;switch(this.Type){case r.OctorokBlue:t=r.Octorok;break;case r.BubbleRed:case r.BubbleBlue:t=r.Bubble;break;case r.DarknutBlue:t=r.Darknut;break;case r.GelBlue:t=r.Gel;break;case Enemies.GoriyaBlue:t=r.Goriya;break;case Enemies.KeeseBlue:case Enemies.KeeseRed:t=r.Keese;break;case Enemies.LanmolaBlue:t=r.Lanmola;break;case Enemies.LeeverBlue:t=r.Leever;break;case Enemies.LynelBlue:t=r.Lynel;break;case Enemies.MoblinBlue:t=r.Moblin;break;case Enemies.MoldormBlue:t=r.Moldorm;break;case Enemies.RopeBlue:t=r.Rope;break;case Enemies.TektiteBlue:t=r.Tektite;break;case Enemies.WizzrobeBlue:t=r.Wizzrobe;break;case r.ZolGray:case r.ZolGreen:t=r.Zol;break;default:return super.getTypeKey()}return r.getKey(t)}getConfig(){const t={Type:this.getTypeKey(),X:this.cell.x,Y:this.cell.y},r=this.getColors(!0);isEmpty$2(r)||(t.Colors=r);const{Speed:n,Health:a,TouchDamage:s,HealthModifier:o,WeaponDamage:l}=this;return isEmpty$2(n)||(t.Speed=n),isEmpty$2(a)||(t.Health=a),isEmpty$2(s)||(t.TouchDamage=s),isEmpty$2(o)||(t.HealthModifier=o),isEmpty$2(l)||(t.WeaponDamage=l),t}}class Cell extends Model{getDefaultFields(){return[{name:"Coordinates",type:Array},{name:"Name",type:String},{name:"grid",type:Grid},{name:"tile",type:Tile,defaultValue:{cell:this}},{name:"item",type:Item,defaultValue:{cell:this}},{name:"enemy",type:Enemy,defaultValue:{cell:this}}]}reset(){this.tile.reset()}getIndex(){return this.grid.cells.indexOf(this)}get id(){return`${this.x}_${this.y}`}get x(){return this.Coordinates[0]}get y(){return this.Coordinates[1]}getConfig({Tiles:t,Items:r,Enemies:n}){const{tile:a,item:s,enemy:o}=this;if(a.hasImage()){const l=a.getTypeKey(),f=a.getConfig(),u=t.find(({Type:m})=>m===l);u?u.Children.push(f):t.push({Type:l,Children:[f]})}s.hasImage()&&r.push(s.getConfig()),o.hasImage()&&n.push(o.getConfig())}}class Grid extends Model{constructor(t){super(t),this.initialize()}getDefaultFields(){return[{name:"Name",type:String},{name:"X",type:Number},{name:"Y",type:Number},{name:"AccentColor",type:String,defaultValue:WorldColors.Brown},{name:"GroundColor",type:String,defaultValue:WorldColors.Tan},{name:"IsCastle",type:Boolean},{name:"IsFloating",type:Boolean},{name:"Template",type:String},{name:"cells",type:FieldType.Collection,model:Cell},{name:"totalRows",type:Number},{name:"totalColumns",type:Number}]}set Name(t){this._name=t}get Name(){let{_name:t}=this;return t||(t=`${this.X}${this.Y}`),t}initialize(){const t=[];for(let r=0;r<this.totalRows;r++)for(let n=0;n<this.totalColumns;n++)t.push(new Cell({Coordinates:[n,r],grid:this}));this.set({cells:t})}async loadFileData(t={}){const{Tiles:r=[],Items:n=[],Enemies:a=[]}=t;for(const s of this.cells){let o=!1;const{x:l,y:f}=s;for(const u of r){for(const m of u.Children)if(m.X===l&&m.Y===f){o=!0;const v=Tiles.getValue(u.Type),b=getDefaultTileColors(v),{Colors:P}=m;if(P)for(let F=0;F<P.length;F+=2){const C=WorldColors.getValue(P[F]),D=b.find(E=>E.Target===C);D&&(D.Value=WorldColors.getValue(P[F+1]))}s.tile.set({Type:v,Transition:m.Transition,Colors:b}),u.Children.remove(m);break}if(o)break}o||s.tile.reset(),o=!1;for(const u of n)if(u.X===l&&u.Y===f){o=!0,n.remove(u),s.item.set({Type:Items.getValue(u.Config.Type)});break}o||s.item.reset(),o=!1;for(const u of a)if(u.X===l&&u.Y===f){o=!0,a.remove(u),s.enemy.set({Health:u.Health,HealthModifier:u.HealthModifier,Speed:u.Speed,TouchDamage:u.TouchDamage,WeaponDamage:u.WeaponDamage,Type:Enemies.getValue(u.Type)});break}o||s.enemy.reset(),o=!1}}getCell(t,r){return this.cells[r*this.totalColumns+t]}getAdjacentNodes(t){const{x:r,y:n}=t,a=[this.getCell(r-1,n),this.getCell(r+1,n),this.getCell(r,n-1),this.getCell(r,n+1)],s=t.tile.Type;return a.filter(o=>(o==null?void 0:o.tile.TileType)===s)}findAdjacentNodes(t=this.cells[0],r=[]){const n=[],a=this.getAdjacentNodes(t);r.indexOf(t)===-1&&(r.push(t),n.push(t));for(const s of a)if(!r.find(o=>o===s)){const o=this.findAdjacentNodes(s,r);if(isEmpty$2(o))continue;n.push(...o)}return n}getConfig(){const t=[],r=[],n=[];for(const a of this.cells)a.getConfig({Tiles:t,Items:r,Enemies:n});return{X:this.X,Y:this.Y,Name:this.Name,GroundColor:WorldColors.getKey(this.GroundColor),AccentColor:WorldColors.getKey(this.AccentColor),Tiles:t,Items:r,Enemies:n}}}const _export_sfc=(e,t)=>{const r=e.__vccOpts||e;for(const[n,a]of t)r[n]=a;return r},_sfc_main$3={name:"BaseCard",components:{BaseLabel,BaseIcon},props:{title:{type:String,default:""},collapsible:{type:Boolean,default:!1},expanded:{type:Boolean,default:!0}},setup(e,{slots:t}){const r=ref(null),n=ref(null),a=ref(e.expanded),s=computed(()=>!!e.title||!!t.title);function o(){a.value=!a.value}function l(f){f?r.value.classList.add("expanded"):r.value.classList.remove("expanded")}return onMounted(()=>l(a.value)),watch(a,f=>l(f)),{onClickCollapse:o,isExpanded:a,hasTitle:s,rootEl:r,titleRoot:n}}},_hoisted_1$3={ref:"rootEl",class:"base-card"},_hoisted_2$2={ref:"titleRoot",class:"base-card-title-wrapper"},_hoisted_3$2={class:"base-card-body"};function _sfc_render$3(e,t,r,n,a,s){const o=resolveComponent("BaseLabel"),l=resolveComponent("BaseIcon");return openBlock(),createElementBlock("section",_hoisted_1$3,[createBaseVNode("div",_hoisted_2$2,[n.hasTitle?renderSlot(e.$slots,"title",{key:0},()=>[createVNode(o,{value:r.title,separator:"",class:"base-card-title"},null,8,["value"])],!0):createCommentVNode("",!0),createVNode(l,{icon:e.Icon.PickerDown,class:"picker-icon",onClick:n.onClickCollapse},null,8,["icon","onClick"])],512),withDirectives(createBaseVNode("div",_hoisted_3$2,[renderSlot(e.$slots,"default",{},void 0,!0)],512),[[vShow,n.isExpanded]])],512)}const BaseCard=_export_sfc(_sfc_main$3,[["render",_sfc_render$3],["__scopeId","data-v-12eb8db5"]]),_sfc_main$2={name:"BaseContextMenu",setup(){const e=ref(null);function t(n){e.value.style.left=`${n.pageX}px`,e.value.style.top=`${n.pageY}px`,e.value.classList.remove("hidden"),n.preventDefault()}function r(){e.value.classList.add("hidden")}return{self:e,show:t,hide:r}}},_hoisted_1$2={ref:"self",class:"hidden context-menu"};function _sfc_render$2(e,t,r,n,a,s){return openBlock(),createElementBlock("div",_hoisted_1$2,[renderSlot(e.$slots,"default")],512)}const BaseContextMenu=_export_sfc(_sfc_main$2,[["render",_sfc_render$2]]),_sfc_main$1={name:"BaseGrid",components:{BaseField,BaseContextMenu,BaseDialog},inheritAttrs:!1,props:{cells:{type:Array,default:()=>[]},totalRows:{type:Number,required:!0},totalColumns:{type:Number,required:!0},selectedCell:{type:Object,default:()=>null},getCellColor:{type:Function,default:()=>null},showGridLines:{type:Boolean,default:!0}},emits:["update:selectedCell","replaceCell"],setup(e,{emit:t}){const r=ref(null),n=ref(null),a=ref(null),s=ref("Hello"),o=inject("pressedKeys"),l=ref("cursor-pointer"),f=ref(null),u=ref(null),m=ref(null),v=ref(null),b=ref(!1);watch(()=>o.shift||o.ctrl,()=>{o.shift?l.value="cursor-cell":o.ctrl?l.value="cursor-copy":l.value="cursor-pointer"}),watch(()=>o.copy,W=>{W&&(f.value=e.selectedCell)}),watch(()=>o.paste,W=>{const M=e.selectedCell,S=f.value;if(W&&M&&S&&M!==S){const T=e.cells.indexOf(M);t("replaceCell",{indices:T,replacement:S})}});function P(W){let M=!1;if(e.selectedCell&&o.shift){const S=W.y,T=W.x;let V=e.selectedCell.x,_=e.selectedCell.y,ee=u.value.x,re=u.value.y;V>ee&&(V=ee,ee=e.selectedCell.x),_>re&&(_=re,re=e.selectedCell.y),T<=ee&&S<=re&&T>=V&&S>=_&&(M=!0)}return{[`grid-cell row-start-${e.totalRows-W.y}`]:!0,"grid-cell-selected":W===e.selectedCell,"grid-cell-hover":M,[l.value]:!0}}function F(){const W=[],M=e.totalColumns,S=e.selectedCell;let T=S.x,V=S.y,_=u.value.x,ee=u.value.y;T>_&&(T=_,_=S.x),V>ee&&(V=ee,ee=S.y);for(let re=T;re<=_;re++)for(let te=V;te<=ee;te++){const oe=re+te*M;oe!==S.getIndex()&&W.push(oe)}return W}function C(W,M){const S=e.selectedCell;if(o.ctrl&&o.mouseDown&&S){t("replaceCell",{indices:M.getIndex(),replacement:S});return}if(o.shift){const T=F();t("replaceCell",{indices:T,replacement:S}),document.getSelection().removeAllRanges();return}M===S&&(M=null),t("update:selectedCell",M)}function D(W){n.value.show(W)}function E(){n.value.hide()}function k(W){u.value=W,m.value=W.y,v.value=W.x}onMounted(()=>{j(e.showGridLines)}),watch(()=>e.showGridLines,W=>{j(W)});function j(W){W?r.value.classList.add("grid-show-lines"):r.value.classList.remove("grid-show-lines")}return{contextMenu:n,self:r,showTestDialog:b,testDialog:a,testValue:s,activeCursor:l,getCellCls:P,pressedKeys:o,onMouseUpCell:C,onContextMenuCell:D,onMouseOverCell:k,onClickTilesMenu(){b.value=!0,E()}}}},_hoisted_1$1=["onMouseup","onMouseover"],_hoisted_2$1=["src"],_hoisted_3$1={class:"flex absolute justify-center w-full h-full"},_hoisted_4$1=["src"],_hoisted_5$1={class:"flex absolute justify-center w-full h-full"},_hoisted_6$1=["src"];function _sfc_render$1(e,t,r,n,a,s){const o=resolveComponent("BaseContextMenu"),l=resolveComponent("BaseField"),f=resolveComponent("BaseDialog");return openBlock(),createElementBlock(Fragment,null,[createBaseVNode("div",mergeProps({ref:"self",class:"base-grid"},e.$attrs),[(openBlock(!0),createElementBlock(Fragment,null,renderList(r.cells,u=>(openBlock(),createElementBlock("div",{key:u.id,class:normalizeClass(["relative",n.getCellCls(u)]),style:normalizeStyle(r.getCellColor()),onMouseup:m=>n.onMouseUpCell(m,u),onContextmenu:t[0]||(t[0]=(...m)=>n.onContextMenuCell&&n.onContextMenuCell(...m)),onMouseover:m=>n.onMouseOverCell(u)},[u.tile.image?(openBlock(),createElementBlock("img",{key:0,src:u.tile.image,class:"absolute w-full h-full"},null,8,_hoisted_2$1)):createCommentVNode("",!0),createBaseVNode("div",_hoisted_3$1,[u.item.image?(openBlock(),createElementBlock("img",{key:0,src:u.item.image,class:"h-full"},null,8,_hoisted_4$1)):createCommentVNode("",!0)]),createBaseVNode("div",_hoisted_5$1,[u.enemy.image?(openBlock(),createElementBlock("img",{key:0,src:u.enemy.image,class:"h-full"},null,8,_hoisted_6$1)):createCommentVNode("",!0)])],46,_hoisted_1$1))),128))],16),createVNode(o,{ref:"contextMenu"},{default:withCtx(()=>[createBaseVNode("ul",null,[createBaseVNode("li",{class:"context-menu-item",onClick:t[1]||(t[1]=(...u)=>n.onClickTilesMenu&&n.onClickTilesMenu(...u))}," Tiles ")])]),_:1},512),withDirectives(createVNode(f,{ref:"testDialog",open:n.showTestDialog,"onUpdate:open":t[3]||(t[3]=u=>n.showTestDialog=u),title:"Hello World",class:"view-dialog header-blue"},{body:withCtx(()=>[createVNode(l,{modelValue:n.testValue,"onUpdate:modelValue":t[2]||(t[2]=u=>n.testValue=u),label:"Hello"},null,8,["modelValue"])]),_:1},8,["open"]),[[vShow,n.showTestDialog]])],64)}const BaseGrid=_export_sfc(_sfc_main$1,[["render",_sfc_render$1]]),pressedKeys=reactive({shift:!1,ctrl:!1,copy:!1,paste:!1,mouseDown:!1});function useKeyboardMouseProvider(){return document.addEventListener("mousedown",onDocumentMouseDown),document.addEventListener("mouseup",onDocumentMouseUp),document.addEventListener("keydown",onDocumentKeyDown),document.addEventListener("keyup",onDocumentKeyUp),onUnmounted(()=>{document.removeEventListener("mousedown",onDocumentMouseDown),document.removeEventListener("mouseup",onDocumentMouseUp),document.removeEventListener("keydown",onDocumentKeyDown),document.removeEventListener("keyup",onDocumentKeyUp)}),pressedKeys}function onDocumentKeyDown(e){pressedKeys.shift=e.shiftKey,pressedKeys.ctrl=e.ctrlKey,e.shiftKey&&(document.onselectstart=function(){return!1}),e.ctrlKey&&e.code==="KeyC"&&(pressedKeys.copy=!1,setTimeout(()=>{pressedKeys.copy=!0})),e.ctrlKey&&e.code==="KeyV"&&(pressedKeys.paste=!1,setTimeout(()=>{pressedKeys.paste=!0}))}function onDocumentKeyUp(e){pressedKeys.shift=e.shiftKey,pressedKeys.ctrl=e.ctrlKey,e.shiftKey&&(document.onselectstart=null)}function onDocumentMouseDown(){pressedKeys.mouseDown=!0}function onDocumentMouseUp(){pressedKeys.mouseDown=!1}const _sfc_main={name:"App",components:{BaseCard,FieldInteger,BaseButton,BaseGrid,FieldComboBox,BaseField,FieldCheckBox,FieldNumber},setup(){const e=ref(null),t=ref(null),r=ref(null),n=ref(null),a=ref(!0),s=reactive([]),o=ref(P()),l=ref(o.value.Name),f=computed(()=>{var S;return(S=r.value)==null?void 0:S.tile.isTransition}),u=computed(()=>{var S;return(S=r.value)==null?void 0:S.tile}),m=computed(()=>{var S;return(S=r.value)==null?void 0:S.item}),v=computed(()=>{var S;return(S=r.value)==null?void 0:S.enemy}),b=computed(()=>!f.value&&u.value.hasImage());provide("pressedKeys",useKeyboardMouseProvider()),watch(l,()=>{r.value=null,o.value=s.find(({Name:S})=>S===l.value)});function P(S={}){const T=new Grid({totalRows:11,totalColumns:16,...S});return s.push(T),T}function F(){var S;return(S=WorldColors.findRecord(o.value.GroundColor))==null?void 0:S.backgroundStyle}function C(){u.value.updateImage()}function D(){v.value.updateImage()}function E({indices:S,replacement:T}){isArray$2(S)||(S=[S],r.value=T),S.forEach(V=>{const _=o.value.cells[V],ee=T.clone({exclude:["grid","Coordinates"]});ee.set({Coordinates:_.Coordinates,grid:_.grid}),ee.tile.cell=ee,ee.item.cell=ee,ee.enemy.cell=ee,o.value.cells[V]=ee})}function k(){e.value.click()}function j(){const S=new FileReader;S.addEventListener("load",()=>{o.value.loadFileData(JSON.parse(S.result))});const[T]=e.value.files;T&&S.readAsText(T)}function W(){const S=new Blob([JSON.stringify(o.value.getConfig())],{type:"application/json"}),T=document.createElement("a");T.download=`${o.value.X}${o.value.Y}.json`,T.href=window.URL.createObjectURL(S),T.click()}function M(){P({Name:"TEMPORARY NAME"})}return{gridRecord:o,overworldRecords:s,showGridLines:a,selectedId:l,selectedScreen:n,fileInputEl:e,isTransition:f,contextMenu:t,selectedTile:u,selectedItem:m,selectedEnemy:v,selectedCell:r,showColors:b,getCellColor:F,WorldColors,ScreenTemplates,Tiles,Items,Enemies,onClickNewButton:M,onReplaceCell:E,onClickSaveBtn:W,onClickLoadBtn:k,onChangeLoadFile:j,onUpdateTileColor:C,onUpdateEnemyColor:D}}},_hoisted_1={class:"flex"},_hoisted_2={class:"flex flex-col"},_hoisted_3={class:"space-y-2 p-4"},_hoisted_4={class:"flex justify-between"},_hoisted_5={class:"flex justify-between"},_hoisted_6={class:"h-16 w-16 bg-blue-100"},_hoisted_7=["src"],_hoisted_8={class:"flex justify-between"},_hoisted_9={class:"flex h-16 w-16 justify-center bg-blue-100"},_hoisted_10=["src"],_hoisted_11={class:"flex justify-between"},_hoisted_12={class:"flex flex-col justify-between"},_hoisted_13={class:"flex h-16 w-16 justify-center bg-blue-100"},_hoisted_14=["src"];function _sfc_render(e,t,r,n,a,s){var F;const o=resolveComponent("FieldComboBox"),l=resolveComponent("BaseButton"),f=resolveComponent("BaseGrid"),u=resolveComponent("FieldCheckBox"),m=resolveComponent("FieldInteger"),v=resolveComponent("BaseField"),b=resolveComponent("BaseCard"),P=resolveComponent("FieldNumber");return openBlock(),createElementBlock("div",_hoisted_1,[createBaseVNode("div",_hoisted_2,[createVNode(o,{modelValue:n.selectedId,"onUpdate:modelValue":t[0]||(t[0]=C=>n.selectedId=C),selected:n.selectedScreen,"onUpdate:selected":t[1]||(t[1]=C=>n.selectedScreen=C),options:n.overworldRecords,"label-align":"top",label:"Screens","id-field":"Name","display-field":"Name"},null,8,["modelValue","selected","options"]),createVNode(l,{text:"New",class:"default mt-1 self-start rounded",onClick:n.onClickNewButton},null,8,["onClick"])]),createVNode(f,{"selected-cell":n.selectedCell,"onUpdate:selectedCell":t[2]||(t[2]=C=>n.selectedCell=C),cells:(F=n.selectedScreen)==null?void 0:F.cells,"total-columns":n.gridRecord.totalColumns,"total-rows":n.gridRecord.totalRows,"show-grid-lines":n.showGridLines,"get-cell-color":n.getCellColor,onReplaceCell:n.onReplaceCell},null,8,["selected-cell","cells","total-columns","total-rows","show-grid-lines","get-cell-color","onReplaceCell"]),createBaseVNode("div",_hoisted_3,[createBaseVNode("div",_hoisted_4,[createVNode(u,{modelValue:n.showGridLines,"onUpdate:modelValue":t[3]||(t[3]=C=>n.showGridLines=C),label:"Grid Lines"},null,8,["modelValue"]),createBaseVNode("div",null,[createVNode(l,{text:"Save",class:"default mr-2 rounded",onClick:n.onClickSaveBtn},null,8,["onClick"]),createVNode(l,{text:"Load",class:"default rounded",onClick:n.onClickLoadBtn},null,8,["onClick"]),withDirectives(createBaseVNode("input",{ref:"fileInputEl",type:"file",onChange:t[4]||(t[4]=(...C)=>n.onChangeLoadFile&&n.onChangeLoadFile(...C))},null,544),[[vShow,!1]])])]),createVNode(b,{title:"Screen Coordinates",class:"bp-2 horizontal"},{default:withCtx(()=>[createVNode(m,{modelValue:n.gridRecord.X,"onUpdate:modelValue":t[5]||(t[5]=C=>n.gridRecord.X=C),label:"X","label-width":"auto","input-width":"w-12",width:"w-28"},null,8,["modelValue"]),createVNode(m,{modelValue:n.gridRecord.Y,"onUpdate:modelValue":t[6]||(t[6]=C=>n.gridRecord.Y=C),label:"Y","label-width":"auto","input-width":"w-12",width:"w-28"},null,8,["modelValue"]),createVNode(v,{modelValue:n.gridRecord.Name,"onUpdate:modelValue":t[7]||(t[7]=C=>n.gridRecord.Name=C),label:"Name"},null,8,["modelValue"])]),_:1}),createVNode(b,{title:"Colors",class:"bp-2 horizontal"},{default:withCtx(()=>[createVNode(o,{modelValue:n.gridRecord.GroundColor,"onUpdate:modelValue":t[8]||(t[8]=C=>n.gridRecord.GroundColor=C),label:"Ground","label-width":"auto",class:"bp-2",options:n.WorldColors,width:"w-28"},null,8,["modelValue","options"]),createVNode(o,{modelValue:n.gridRecord.AccentColor,"onUpdate:modelValue":t[9]||(t[9]=C=>n.gridRecord.AccentColor=C),label:"Accent","label-width":"auto",options:n.WorldColors,width:"w-28"},null,8,["modelValue","options"])]),_:1}),n.selectedCell?(openBlock(),createBlock(b,{key:n.selectedCell.id,title:"Cell",class:"vertical"},{default:withCtx(()=>[createVNode(b,{class:"vertical bp-2",title:"Tile"},{default:withCtx(()=>[createBaseVNode("div",_hoisted_5,[createVNode(o,{modelValue:n.selectedTile.Type,"onUpdate:modelValue":t[10]||(t[10]=C=>n.selectedTile.Type=C),options:n.Tiles,label:"Type","label-width":"auto"},null,8,["modelValue","options"]),withDirectives(createBaseVNode("div",_hoisted_6,[n.selectedTile.src?(openBlock(),createElementBlock("img",{key:0,src:n.selectedTile.src,class:"h-full w-full",alt:"Tile Image"},null,8,_hoisted_7)):createCommentVNode("",!0)],512),[[vShow,n.showColors]])]),withDirectives(createVNode(b,{title:"Replace Colors",class:"vertical bp-2"},{default:withCtx(()=>[(openBlock(!0),createElementBlock(Fragment,null,renderList(n.selectedTile.Colors,C=>(openBlock(),createBlock(o,{key:C.id,modelValue:C.Value,"onUpdate:modelValue":[D=>C.Value=D,n.onUpdateTileColor],label:n.WorldColors.getKey(C.Target),options:n.WorldColors},null,8,["modelValue","onUpdate:modelValue","label","options"]))),128))]),_:1},512),[[vShow,n.showColors]]),n.isTransition?(openBlock(),createBlock(b,{key:0,title:"Transition Properties",class:"vertical bp-2"},{default:withCtx(()=>[createVNode(m,{modelValue:n.selectedTile.Transition.X,"onUpdate:modelValue":t[11]||(t[11]=C=>n.selectedTile.Transition.X=C),label:"X Offset",width:"w-24"},null,8,["modelValue"]),createVNode(m,{modelValue:n.selectedTile.Transition.Y,"onUpdate:modelValue":t[12]||(t[12]=C=>n.selectedTile.Transition.Y=C),label:"Y Offset",width:"w-24"},null,8,["modelValue"]),n.selectedTile.isDoor?(openBlock(),createBlock(v,{key:0,modelValue:n.selectedTile.Transition.Name,"onUpdate:modelValue":t[13]||(t[13]=C=>n.selectedTile.Transition.Name=C),label:"Name"},null,8,["modelValue"])):createCommentVNode("",!0),n.selectedTile.isDoor?(openBlock(),createBlock(o,{key:1,modelValue:n.selectedTile.Transition.Template,"onUpdate:modelValue":t[14]||(t[14]=C=>n.selectedTile.Transition.Template=C),label:"Template",required:"","id-field":"value",options:n.ScreenTemplates},null,8,["modelValue","options"])):createCommentVNode("",!0),createVNode(u,{modelValue:n.selectedTile.Transition.IsFloating,"onUpdate:modelValue":t[15]||(t[15]=C=>n.selectedTile.Transition.IsFloating=C),label:"Floating"},null,8,["modelValue"])]),_:1})):createCommentVNode("",!0)]),_:1}),createVNode(b,{title:"Item",expanded:!1,class:"vertical bp-2"},{default:withCtx(()=>[createBaseVNode("div",_hoisted_8,[createVNode(o,{modelValue:n.selectedItem.Type,"onUpdate:modelValue":t[16]||(t[16]=C=>n.selectedItem.Type=C),options:n.Items,label:"Type","label-width":"auto"},null,8,["modelValue","options"]),createBaseVNode("div",_hoisted_9,[n.selectedItem.src?(openBlock(),createElementBlock("img",{key:0,src:n.selectedItem.src,class:"h-full",alt:"Item Image"},null,8,_hoisted_10)):createCommentVNode("",!0)])])]),_:1}),createVNode(b,{title:"Enemy",expanded:!1,class:"vertical bp-2"},{default:withCtx(()=>[createBaseVNode("div",_hoisted_11,[createBaseVNode("div",_hoisted_12,[createVNode(o,{modelValue:n.selectedEnemy.Type,"onUpdate:modelValue":t[17]||(t[17]=C=>n.selectedEnemy.Type=C),options:n.Enemies,label:"Type","label-width":"w-12"},null,8,["modelValue","options"]),createVNode(P,{modelValue:n.selectedEnemy.Speed,"onUpdate:modelValue":t[18]||(t[18]=C=>n.selectedEnemy.Speed=C),label:"Speed","label-width":"w-12"},null,8,["modelValue"])]),createBaseVNode("div",_hoisted_13,[n.selectedEnemy.src?(openBlock(),createElementBlock("img",{key:0,src:n.selectedEnemy.src,class:"h-full",alt:"Item Image"},null,8,_hoisted_14)):createCommentVNode("",!0)])]),withDirectives(createVNode(b,{title:"Replace Colors",class:"vertical bp-2"},{default:withCtx(()=>[(openBlock(!0),createElementBlock(Fragment,null,renderList(n.selectedEnemy.Colors,C=>(openBlock(),createBlock(o,{key:C.id,modelValue:C.Value,"onUpdate:modelValue":[D=>C.Value=D,n.onUpdateEnemyColor],label:n.WorldColors.getKey(C.Target),options:n.WorldColors},null,8,["modelValue","onUpdate:modelValue","label","options"]))),128))]),_:1},512),[[vShow,n.selectedEnemy.hasImage()]]),createVNode(b,{title:"Health",class:"horizontal bp-2"},{default:withCtx(()=>[createVNode(P,{modelValue:n.selectedEnemy.Health,"onUpdate:modelValue":t[19]||(t[19]=C=>n.selectedEnemy.Health=C),label:"Health"},null,8,["modelValue"]),createVNode(P,{modelValue:n.selectedEnemy.HealthModifier,"onUpdate:modelValue":t[20]||(t[20]=C=>n.selectedEnemy.HealthModifier=C),label:"Modifier"},null,8,["modelValue"])]),_:1}),createVNode(b,{title:"Damage",class:"horizontal bp-2"},{default:withCtx(()=>[createVNode(P,{modelValue:n.selectedEnemy.TouchDamage,"onUpdate:modelValue":t[21]||(t[21]=C=>n.selectedEnemy.TouchDamage=C),label:"Touch"},null,8,["modelValue"]),createVNode(P,{modelValue:n.selectedEnemy.WeaponDamage,"onUpdate:modelValue":t[22]||(t[22]=C=>n.selectedEnemy.WeaponDamage=C),label:"Weapon"},null,8,["modelValue"])]),_:1})]),_:1})]),_:1})):createCommentVNode("",!0)])])}const App=_export_sfc(_sfc_main,[["render",_sfc_render]]);async function main(){await loadImages();const e=createApp(App);e.use(core$3),e.mount("#app")}main();
