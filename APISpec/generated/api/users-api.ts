/* tslint:disable */
/* eslint-disable */
/**
 * API
 * The main API for all Sandbox apps
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from "../common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "../base";
// @ts-ignore
import { GetUsers200Response } from "../models";
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {number} start
		 * @param {number} limit
		 * @param {number} page
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getUsers: async (start: number, limit: number, page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'start' is not null or undefined
			assertParamExists("getUsers", "start", start);
			// verify required parameter 'limit' is not null or undefined
			assertParamExists("getUsers", "limit", limit);
			// verify required parameter 'page' is not null or undefined
			assertParamExists("getUsers", "page", page);
			const localVarPath = `/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (start !== undefined) {
				localVarQueryParameter["start"] = start;
			}

			if (limit !== undefined) {
				localVarQueryParameter["limit"] = limit;
			}

			if (page !== undefined) {
				localVarQueryParameter["page"] = page;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} start
		 * @param {number} limit
		 * @param {number} page
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getUsers(start: number, limit: number, page: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsers200Response>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(start, limit, page, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = UsersApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} start
		 * @param {number} limit
		 * @param {number} page
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getUsers(start: number, limit: number, page: number, options?: any): AxiosPromise<GetUsers200Response> {
			return localVarFp.getUsers(start, limit, page, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
	/**
	 *
	 * @param {number} start
	 * @param {number} limit
	 * @param {number} page
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApiInterface
	 */
	getUsers(start: number, limit: number, page: number, options?: AxiosRequestConfig): AxiosPromise<GetUsers200Response>;
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
	/**
	 *
	 * @param {number} start
	 * @param {number} limit
	 * @param {number} page
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public getUsers(start: number, limit: number, page: number, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration)
			.getUsers(start, limit, page, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
